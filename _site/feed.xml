<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 28 Oct 2016 14:03:31 -0400</pubDate>
    <lastBuildDate>Fri, 28 Oct 2016 14:03:31 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Understanding SAML and SSO and Rails</title>
        <description>&lt;p&gt;When you grew up as a developer prior to the Internet, it used to be that technical information was hard to come by.  From my perspective one fo the most miraculous things about being a developer in 2016 is all you have to do is run across a reference to a technology and &lt;strong&gt;wham&lt;/strong&gt; all the information that you want is at your finger tips.  So let’s say you’re browsing &lt;a href=&quot;http://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt; and you find a reference to &lt;a href=&quot;https://hn.algolia.com/?query=saml&amp;amp;sort=byPopularity&amp;amp;prefix&amp;amp;page=0&amp;amp;dateRange=all&amp;amp;type=story&quot;&gt;SAML&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&quot;&gt;Security Assertion Markup Language&lt;/a&gt;, you’re just a search away from a deep dive into a topic.  And if you either find yourself interested in it or you have a personal reason to explore it like a wife who’s favorite anti technology rant is about passwords (SAML is key to Single Sign On or SSO standards), then you’re just a github away from messing with a cool technology.  That’s why I’m writing today about SAML instead of my normal AWS / Ruby / Rails stuff.  But, not to worry, I’ll bring it around to Ruby / Rails by the end.&lt;/p&gt;

&lt;h1 id=&quot;what-is-saml-&quot;&gt;What is SAML ?&lt;/h1&gt;

&lt;p&gt;SAML is a standard for security, specifically, for building single sign on systems.  Originated in 2002,&lt;/p&gt;

&lt;h1 id=&quot;core-saml-concepts&quot;&gt;Core SAML Concepts&lt;/h1&gt;

&lt;p&gt;Like almost all modern security concepts, SAML is oriented around roles.  There are three key roles: Principal, Identity Provider, Service Provider.&lt;/p&gt;

&lt;h2 id=&quot;role-1-the-principal&quot;&gt;Role 1: The Principal&lt;/h2&gt;

&lt;p&gt;The principal is very, very simple – it is just the user.&lt;/p&gt;

&lt;h2 id=&quot;role-2-the-identity-provider-or-idp&quot;&gt;Role 2: The Identity Provider or IdP&lt;/h2&gt;

&lt;p&gt;The Identity Provider or IdP is the software against which the authentication request is performed.&lt;/p&gt;

&lt;h2 id=&quot;role-3-the-service-provider-or-sp&quot;&gt;Role 3: The Service Provider or SP&lt;/h2&gt;

&lt;p&gt;The service provider is the software which talks to the IdP that requests and obtains an identity assertion i.e. the SAML Assertion described below.&lt;/p&gt;

&lt;h2 id=&quot;bringing-the-roles-together&quot;&gt;Bringing the Roles Together&lt;/h2&gt;

&lt;p&gt;This works as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;principal&lt;/strong&gt; goes to a site somewhere on the Internet or an Intranet and wants access to a protected a resource.  This site is the &lt;strong&gt;SP&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;A mechanism of authentication is used – typically this would be username / password but it could be multi-factor auth&lt;/li&gt;
  &lt;li&gt;The SP requests and obtains an identity assertion from the identity provider or &lt;strong&gt;IdP&lt;/strong&gt;. On the basis of this assertion, the service provider can make an access control decision – in other words it can decide whether to perform some service for the connected principal.  Before delivering the identity assertion to the SP, the IdP may request some information from the principal – such as a user name and password – in order to authenticate the principal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two sentences in the last bullet were cribbed directly from the Wikipedia article above&lt;/p&gt;

&lt;h2 id=&quot;the-saml-assertion&quot;&gt;The SAML Assertion&lt;/h2&gt;

&lt;p&gt;A SAML assertion is a bit of XML containing a packet of security information.  The general format looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;saml:Assertion ...&amp;gt;
  ...
&amp;lt;/saml:Assertion&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m going to cheat here and blatantly cheat and quote wikipedia in case a subtle rewording of my writing interferes with the meaning:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Loosely speaking, a relying party interprets an assertion as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assertion A was issued at time t by issuer R regarding subject S provided conditions C are valid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;SAML assertions are usually transferred from identity providers to service providers. Assertions contain statements that service providers use to make access-control decisions. Three types of statements are provided by SAML:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Authentication statements
Attribute statements
Authorization decision statements
Authentication statements assert to the service provider that the principal did indeed authenticate with the identity provider at a particular time using a particular method of authentication. Other information about the authenticated principal (called the authentication context) may be disclosed in an authentication statement.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;An attribute statement asserts that a subject is associated with certain attributes. An attribute is simply a name-value pair. Relying parties use attributes to make access-control decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;An authorization decision statement asserts that a subject is permitted to perform action A on resource R given evidence E. The expressiveness of authorization decision statements in SAML is intentionally limited. More-advanced use cases are encouraged to use XACML instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;caveats&quot;&gt;Caveats&lt;/h1&gt;

&lt;p&gt;SAML is an old school, big system type of technology.  Its supported although not widely and there seem to be differing opinions as to how to support it and interoperate correctly, in other woerds&lt;/p&gt;

&lt;h1 id=&quot;how-does-this-work-with-rails&quot;&gt;How Does This Work with Rails?&lt;/h1&gt;

&lt;p&gt;Now let’s pull this all around and talk about how you might use SAML in the context of a functioning rails app.  There are two basic approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your rails app as a SAML client to something else (i.e. your rails app is the service provider or SP)&lt;/li&gt;
  &lt;li&gt;Your rails app as the Identity Provider or IdP and other applications talk to you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happily there are existing open source toolkits for both of these contexts.&lt;/p&gt;

&lt;h2 id=&quot;rails-as-an-sp&quot;&gt;Rails as an SP&lt;/h2&gt;

&lt;p&gt;If you want to authenticate thru something else then you likely want that built into your existing Rails authentication strategy.  There are toolkits for this as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/omniauth/omniauth-saml&quot;&gt;OmniAuth - SAML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apokalipto/devise_saml_authenticatable&quot;&gt;Devise Saml Authenticatable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/onelogin/ruby-saml&quot;&gt;Ruby-SAML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are tied to existing authentication tools in the Rails world and the last one is a generic SAML toolkit on top of which most things in the Ruby SAML world seem to be built.&lt;/p&gt;

&lt;h2 id=&quot;rails-as-an-idp&quot;&gt;Rails as an IdP&lt;/h2&gt;

&lt;p&gt;While an IdP might be an LDAP system or another traditional authentication engine, there’s no reason a Rails app itself can’t speak SAML natively and be an IdP of its own.  In this case the toolkit you likely want to use is one of these two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sportngin/saml_idp&quot;&gt;https://github.com/sportngin/saml_idp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lawrencepit/ruby-saml-idp&quot;&gt;https://github.com/lawrencepit/ruby-saml-idp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The lawrencepit gem is older and the sportngin gem appears to be a newer fork.  Unfortunately it seems as if the documentation on the sportngin gem is incorrect and you may need lawrencepit’s documentation.  I’m still bringing up a functional IDP so I can’t say definitively but there’s a definite code smell of incorrectly made documentation in sportngin.  It should be noted though that sportngin has done a lot of work to make bringing up an IdP server better.  I’ll hopefully update this blog post in the future when I have more concrete answers.&lt;/p&gt;

&lt;h1 id=&quot;general-advice&quot;&gt;General Advice&lt;/h1&gt;

&lt;p&gt;Unfortunately the documentation for all of these tools is, to put it mildly, on the sparse to incorrect side (example - using the sportngin gem, you can’t include the controller per the docs, you have to inherit from it instead).  If you’re going to do a SAML project based on any of these, you’re going to need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the standards documentation&lt;/li&gt;
  &lt;li&gt;Read the gem source – and I mean really read it&lt;/li&gt;
  &lt;li&gt;Dig in and get your fingers dirty; don’t be afraid to fork the gem&lt;/li&gt;
  &lt;li&gt;Read the open github issues; even unsolved issues make spark your thinking&lt;/li&gt;
  &lt;li&gt;Read the closed github issues&lt;/li&gt;
  &lt;li&gt;Read the tests; on projects like these, the tests more than anything else help you understand what parameters to use&lt;/li&gt;
  &lt;li&gt;Look at the forks to see if there is anything newer that might help you&lt;/li&gt;
  &lt;li&gt;If you’re going down the IdP route you will really need to implement a saml client as well; this isn’t surprising when you think about it&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 28 Oct 2016 14:03:27 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html</guid>
        
        <category>sso</category>
        
        <category>saml</category>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        
        <category>saml</category>
        
      </item>
    
      <item>
        <title>Why Senior Engineers Are Resistant to Change</title>
        <description>&lt;p&gt;Large codebases are an organic, ever evolving construct and making sweeping, pervasive changes is a rask&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 06:56:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/27/why-senior-engineers-are-resistant-to-change.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/27/why-senior-engineers-are-resistant-to-change.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails Tip How to Fix Incomplete response received from application</title>
        <description>&lt;p&gt;Again, one of my least favorite things in the entire rails ecosystem is deployment.  Deployment was ass painful in 2007 when I started with Rails and it is still ass painful.  Sigh.  Even as much as I love passenger, it is a fickle beast at best and you always end up with arcane error messages that you haven’t solved in six months or so so you never quite have the answer.&lt;/p&gt;

&lt;p&gt;When you hit the error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Incomplete response received from application
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The usual answer is that you’re missing the secret from:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config/secrets.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You want to solve this with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rake secret
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then copy the result and define a secret for the correct environment or load it from the environment variable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29241053/incomplete-response-received-from-application-from-nginx-passenger&quot;&gt;Obligatory Stack Overflow Reference on this&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-incomplete-response-received-from-application.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-incomplete-response-received-from-application.html</guid>
        
        <category>rails</category>
        
        <category>apache</category>
        
        <category>passenger</category>
        
        <category>bundler</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails Tip How to Fix Could not find a JavaScript runtime</title>
        <description>&lt;p&gt;One of my least favorite things in the entire rails ecosystem is deployment.  Deployment was ass painful in 2007 when I started with Rails and it is still ass painful.  Sigh.  Capistrano is worlds better than it used to be but its still tricky.  And you always end up with arcane error messages that you haven’t solved in six months or so so you never quite have the answer.&lt;/p&gt;

&lt;p&gt;When you hit the error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Could not find a JavaScript runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The right thing to do is to first bitch out loud about the mind boggling stupidity that you can’t run db:migrate w/o a JS runtime.  After you’ve done that 3 or 20 times then the solution is to just install nodejs on every one of your production boxes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This sucks hard but it does work.  Another solution is to use a native ruby tool like therubyracer but I have projects where therubyracer cannot be installed – it just gives “gem not found” errors no matter what I do so cie la vie.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-could-not-find-a-javascript-runtime.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-could-not-find-a-javascript-runtime.html</guid>
        
        <category>rails</category>
        
        <category>javascript</category>
        
        <category>therubyracer</category>
        
        <category>bundler</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails Tip How to Fix Cannot/Load Bundler/setup</title>
        <description>&lt;p&gt;One of my least favorite things in the entire rails ecosystem is deployment.  Deployment was ass painful in 2007 when I started with Rails and it is still ass painful.  Sigh.  Even as much as I love passenger, it is a fickle beast at best and you always end up with arcane error messages that you haven’t solved in six months or so so you never quite have the answer.&lt;/p&gt;

&lt;p&gt;When you hit the error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cannot load such file -- bundler/setup (LoadError)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The usual answer is to run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in the Rails root application.  Unfortunately this can’t generally be done until the source code of your application is installed making it hard to ansible-ize.  Alas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19061774/cannot-load-such-file-bundler-setup-loaderror&quot;&gt;Obligatory Stack Overflow Reference on this&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-cannot-load-bundler-setup.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-cannot-load-bundler-setup.html</guid>
        
        <category>rails</category>
        
        <category>apache</category>
        
        <category>passenger</category>
        
        <category>bundler</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Its Monday and Murphy was an Optimist</title>
        <description>
</description>
        <pubDate>Mon, 24 Oct 2016 18:20:37 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/24/its-monday-and-murphy-was-an-optimist.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/24/its-monday-and-murphy-was-an-optimist.html</guid>
        
        
      </item>
    
      <item>
        <title>AWS Quickie - Making Your Boxes Pingable</title>
        <description>&lt;p&gt;The security default for AWS is brilliantly simple: &lt;strong&gt;Everything, absolutely everything, is locked down by default&lt;/strong&gt;.  Once you understand that then developing on the AWS platform becomes a lot simpler.  Let’s take, for example, a simple EC2 instance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create it and you would generally assume that a server is pingable.&lt;/li&gt;
  &lt;li&gt;So you try pinging the DNS name and it fails.  Hm…&lt;/li&gt;
  &lt;li&gt;So you try pinging the public IP and that fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The answer here is simple – everything is locked down by default.  Even something as innocuous as ping.  Every AWS box comes with what’s called a Security Group and Amazon describes this a &lt;em&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html&quot;&gt;virtual firewall that controls the traffic for one or more instances&lt;/a&gt;&lt;/em&gt;.  Every box you create on AWS will automatically get a Security Group, confusingly named, Launch Wizard N where N is just an incrementing integer.&lt;/p&gt;

&lt;p&gt;Stack Overflow, as always, has a useful &lt;a href=&quot;http://stackoverflow.com/questions/21981796/cannot-ping-aws-ec2-instance&quot;&gt;piece&lt;/a&gt; on this.&lt;/p&gt;

&lt;p&gt;You have to edit the Security Group to which your EC2 instance belongs and allow access (or alternatively create a new one and add the instance to it).&lt;/p&gt;

&lt;p&gt;By default everything is denied. The exception you need to add to the Security Group depends on the service you need to make available to the internet.&lt;/p&gt;

&lt;p&gt;If it is a webserver you will need to allow access to port 80 for 0.0.0.0/0 (which means every IP address).&lt;/p&gt;

&lt;p&gt;To allow pinging the instance you need to enable ICMP traffic.&lt;/p&gt;

</description>
        <pubDate>Mon, 24 Oct 2016 07:49:52 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/24/aws-quickie-making-your-boxes-pingable.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/24/aws-quickie-making-your-boxes-pingable.html</guid>
        
        <category>aws</category>
        
        <category>security_group</category>
        
        <category>ping</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Consulting - The Answer Is Yes</title>
        <description>&lt;p&gt;This happened a year or two ago but the memory just descended on me in a flash of blinding deja vu that was so powerful it was frightening.  If you’re a consultant and a customer calls you with a problem, there’s only one answer:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remember this vividly.  I was in the final stages of a project – I had just assembled the staging server and I was looking forward to the end of the night and sleep, blessed sleep.  I heard from the customer who was clearly panicked.  His vendor was holding him up on a data migration issue and was charging an arm and a leg and then three more body parts for something simple – $25K for migrating 60 users from staging to production.  I’m not going to say the vendor since they’re long gone.  I would point out that the charge for the migration was more than my whole software development bill to that point.&lt;/p&gt;

&lt;p&gt;So my answer to the question of could I handle the data migration – &lt;strong&gt;Yes&lt;/strong&gt;.  When I said it, I didn’t know anything about the data I was migrating.  I didn’t have a schema, properties, etc.  What I did know was that $25K for doing data migration was absurd and, as a consultant, I’m there to help the client.  Always remember that – you’re there to help the client.  So even though I didn’t want more work, I’ll still do it and, ultimately, the client will remember who helped them out in a point of crisis.&lt;/p&gt;

&lt;p&gt;Bottom line – if you’re a consultant, the answer is &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/consulting/2016/10/24/consulting-the-answer-is-yes.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/consulting/2016/10/24/consulting-the-answer-is-yes.html</guid>
        
        <category>consulting</category>
        
        <category>business</category>
        
        
        <category>Consulting</category>
        
      </item>
    
      <item>
        <title>Hiring Practices - Fast versus Slow; It Depends on How Fast You Fire</title>
        <description>&lt;p&gt;I started this draft six months ago and I had to sit on it for personal reasons; some organizational changes had to happen before I could publish it.&lt;/p&gt;

&lt;p&gt;I recently made a hiring decision that I was concerned about.  In fact I was so concerned that I said this to the candidate before he was hired:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If you don't work out, you'll be fired within a month.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And I have to admit that I was wrong – after a month he was &lt;strong&gt;still&lt;/strong&gt; present.  But he wasn’t working out.  I’ve always taken the position that as an incoming engineer that &lt;strong&gt;it is your job to adapt to the codebase you’re working on&lt;/strong&gt;.  To some extent it doesn’t matter what your personal preferences are for things, you’re the employee and unless your job title specifically empowers you to re-architect things, well, &lt;em&gt;suck it up buttercup&lt;/em&gt;!  This problem is particularly acute when new hires join from structurally different organizations – say you’re a startup and the new hire is from a slow moving, regulated organization.  The culture the new hire came from generally permeates their thinking and just their approach to everything.&lt;/p&gt;

&lt;p&gt;With this new hire we had the problem that despite having gotten both verbal instructions, documentation and slack instructions, he would still either do exactly what he was told not to do or skirt the letter of the law by taking his own approach (let’s not use database.yml and instead put database configuration into application.yml).&lt;/p&gt;

&lt;p&gt;The biggest mistake I made here was that I followed what I call Fast Hire with him.  Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I relied on his github as a representation of technical competency instead of administering a detailed verbal examination of Rails competency&lt;/li&gt;
  &lt;li&gt;I took the first candidate that applied&lt;/li&gt;
  &lt;li&gt;I didn’t require multiple candidates i.e. “we’ll hire the best of the the first five candidates”&lt;/li&gt;
  &lt;li&gt;I didn’t set up a pair programming session with him first and watch him work thru a problem&lt;/li&gt;
  &lt;li&gt;I didn’t assess the speed at which he worked&lt;/li&gt;
  &lt;li&gt;I didn’t hire him for a project on a consulting basis BEFORE he was hired full time&lt;/li&gt;
  &lt;li&gt;I trusted that the organization would support me in my desire to fire when it didn’t work out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And bear this in mind: this was my mistake.  We’ve been technically overloaded with work for over a year and when the purse strings were loosened to hire, I jumped at the chance.  What I forgot, something that I know terribly well, is that bad hires cause ripple effects throughout the organization both at the technical level and at the human resources level.&lt;/p&gt;

&lt;p&gt;So here’s my thesis:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hiring is painful.  The best way to find out if someone can work out in your organization is, ironically, to hire them.&lt;/li&gt;
  &lt;li&gt;If you’re willing to &lt;strong&gt;Fast Hire&lt;/strong&gt; then you have to be willing to &lt;strong&gt;Fast Fire&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re not willing to fast fire and you take the approach of a 30 day plan, remediation, opportunity to fix things, etc then you have to move with &lt;strong&gt;slow hire&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-fast-hire-approach&quot;&gt;The Fast Hire Approach&lt;/h1&gt;

&lt;p&gt;Here’s what I call the fast hire approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Technical interview with the hiring manager with a focus on culture fit and their interest in the problem space.  Make the assumption that the person’s resume correctly represents their skills.&lt;/li&gt;
  &lt;li&gt;Review the person’s online presence and assess their technical competency from their side projects, github presence, blog posts, etc.&lt;/li&gt;
  &lt;li&gt;Have them interview with all senior staff with the founder and president having final yes / no say.&lt;/li&gt;
  &lt;li&gt;Make offer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-slow-hire-approach&quot;&gt;The Slow Hire Approach&lt;/h1&gt;

&lt;p&gt;Here’s what I call the slow Hire approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initial technical interview with the hiring manager with a focus on culture fit.  Make the assumption that the person’s resume is, well, biased in their favor and you have to defend the company from them.&lt;/li&gt;
  &lt;li&gt;If the culture fit interview goes well then schedule another interview for specific technical skills.  Do an hour long, deep, hard dive on their platform knowledge.  If this is a Rails position then you can guarantee that questions like “Atoms Vs. Strings, Pros / Cons”, “Where is the database configured”, “How do you execute a sql query when there is no model” will be asked.&lt;/li&gt;
  &lt;li&gt;If the technical skills interview passes then the next step up is a pair programming session using a shared screen tool like Screen Hero.&lt;/li&gt;
  &lt;li&gt;If the pair programming test passes then I would strongly argue for a paid programming project.  Ideally this should be something that costs less than $600 so it doesn’t require any U.S. tax issues, not even a 1099.  Pick some small bit of code, command line tool, etc and see what happens.  Require it to be submitted via github and furnish them a copy of your internal coding standards.  See if they follow them.&lt;/li&gt;
  &lt;li&gt;If steps 1 thru 5 are ALL successful then review the person’s online presence and assess their technical competency from their side projects, github presence, blog posts, etc.  If you notice a serious disconnect between what you learned in 1 to 4 and their public presence, drill into it.&lt;/li&gt;
  &lt;li&gt;Have them interview with all senior staff with the founder and president having final yes / no say.&lt;/li&gt;
  &lt;li&gt;Make offer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;fast-hire-vs-slow-hire&quot;&gt;Fast Hire vs Slow Hire&lt;/h1&gt;

&lt;p&gt;Despite this person not working out and causing me an astonishing amount of rage, I still don’t regret the Fast Hire approach.  Unfortunately I thought that because I was giving hiring authority, that also meant that I had firing authority.  To my infinite regret, that has not turned out to be the case.  You can guarantee that in the future I’ll be more certain of that.  Or I’ll slow hire with the best of them.&lt;/p&gt;

</description>
        <pubDate>Sun, 23 Oct 2016 06:28:40 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/10/23/hiring-practices-fast-versus-slow-it-depends-on-how-fast-you-fire.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/10/23/hiring-practices-fast-versus-slow-it-depends-on-how-fast-you-fire.html</guid>
        
        <category>hiring</category>
        
        <category>firing</category>
        
        <category>hr</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 21 - Naming Your EC2 Machines, Defining Your Bash Prompt and More</title>
        <description>&lt;p&gt;It has been said that there are really only two hard problems in computer science – &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;naming things and cache invalidation&lt;/a&gt;.  Once upon a time I would have argued against that but increasingly I tend to fall into this camp.  I would tend to argue that if you can’t name something that you don’t &lt;em&gt;understand&lt;/em&gt; it.  And I’ve recently run up against this in terms of my EC2 instances:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how should they be named&lt;/li&gt;
  &lt;li&gt;where should that name be represented&lt;/li&gt;
  &lt;li&gt;how should the bash prompt look&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know this sounds simple but its really not.  We’re still at the stage of actively debugging our EC2 cluster of boxes and I’m regularly zipping into a box or out of a box via SSH along with frequent cursing such as “Dang it – why isn’t X working #&lt;em&gt;$#&amp;amp;$()#$&lt;/em&gt;#($)”.  I know according to a lot of people you’re not supposed to bother SSH’ing into EC2 instances – they are supposed to be single purpose, ephemeral, etc.  But even though everything is live, well, we’re still debugging &lt;strong&gt;everything&lt;/strong&gt;.  Sorry folks but that’s just the state of my life right now.&lt;/p&gt;

&lt;p&gt;So I’ve got some number of EC2 instances – more than 10, less than 1000 and any one of them could fail at any point.  I might learn about failures from &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/20/aws-tutorial-20-adding-machine-and-process-monitoring-to-your-aws-instance-with-inspeqtor.html&quot;&gt;Inspeqtor&lt;/a&gt; or &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/16/aws-tutorial-17-wrapping-up-our-ssh-issues-by-using-monit-for-process-monitoring.html&quot;&gt;Monit&lt;/a&gt; or by some other means (log files).  Some failures I might discard and others I might need to investigate at the box level by ssh’ing in.  So what has this told us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to easily be able to get into any box at any time&lt;/li&gt;
  &lt;li&gt;Any alerts that we get need to include the machine name&lt;/li&gt;
  &lt;li&gt;We need to know what box we’re in when we are in it (otherwise its easy to get confused)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And what do we know about working with EC2 boxes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The instance id is really all that Amazon cares about&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we know that EC2 machines are supposed to be non snowflakes, ephemeral and automatically provisioned, this, to me, argues for a naming convention something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PrefixRoleNumber
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;with those tokens defined as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;prefix - something distinct to the overall project; allows you to have different machines in the same aws account with the same role&lt;/li&gt;
  &lt;li&gt;role - what the machine is doing; its function; something like worker or web&lt;/li&gt;
  &lt;li&gt;number - just an integer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you this all together you get a naming structure like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fiworker1&lt;/li&gt;
  &lt;li&gt;fiweb1&lt;/li&gt;
  &lt;li&gt;fiworker199&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then if you pair this with an ssh config file where names like these are mapped to hosts, particularly if you generate your SSH config file dynamically, you can easily ssh into any box by typing something like &lt;strong&gt;ssh fiworker199&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note: If we are going to have a single AWS account manage boxes across multiple projects then we may want to inject the prefix into the role as well.  This would allow automated manipulation of classes of boxes by just tapping into the ec2 name / value space.  If we don’t do this then we might manipulate say all web servers for all projects at a time instead of just the web servers for a single project.&lt;/p&gt;

&lt;p&gt;So now we know how we want to name boxes, the question comes up as to our bash prompt (or zshell prompt if you’re fancy).  I’m not a bash expert by any means but I do know the importance of a good prompt.  What we likely want is something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username@local_ip@machine_name@instance_id:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s long but it actually gives us everything we need.  The advantage to a token like @ being injected is that when you double click a portion of the prompt you’ll get that information selected so you’re just a command+c away from copying it to the clipboard for use somewhere else.&lt;/p&gt;

&lt;h1 id=&quot;the-ansible-side-of-things&quot;&gt;The Ansible Side of Things&lt;/h1&gt;

&lt;p&gt;Given how much I do with Ansible, you’re likely not surprised that I’m going to automate this.  Given the number of boxes, automation is the only way to go and Ansible, while quirky, is a fantastic tool.&lt;/p&gt;

&lt;p&gt;Given how well my previous approach of illustrating the structure and then giving a git repo for the code went recently, I’m doing the same thing again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the git repo.&lt;/p&gt;

&lt;p&gt;One of the tricks that we’re going to use to make this work is push variables at the host level into the inventory file.  This is a very simple trick&lt;/p&gt;

&lt;p&gt;Here’s how to use it:&lt;/p&gt;

</description>
        <pubDate>Sat, 22 Oct 2016 10:07:43 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/22/aws-tutorial-21-what-should-your-ec2-bash-prompt-look-like.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/22/aws-tutorial-21-what-should-your-ec2-bash-prompt-look-like.html</guid>
        
        <category>aws</category>
        
        <category>bash</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
