<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 07 Aug 2017 08:07:07 -0400</pubDate>
    <lastBuildDate>Mon, 07 Aug 2017 08:07:07 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Adding AutoSave on Focus Lost to TextMate 2</title>
        <description>&lt;p&gt;I’ve looked this up and set this on every single mac I’ve used since I switched to TextMate 2 so I guess it is time to finally write it down for myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a command prompt.&lt;/li&gt;
  &lt;li&gt;Edit the file ~/Library/Application Support/TextMate/Global.tmProperties&lt;/li&gt;
  &lt;li&gt;Add the line saveOnBlur = true in the top region before the square bracket sections.&lt;/li&gt;
  &lt;li&gt;Save and Exit&lt;/li&gt;
  &lt;li&gt;Relaunch and it should be there.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</guid>
        
        <category>textmate</category>
        
        
        <category>textmate</category>
        
      </item>
    
      <item>
        <title>Software Development Philosophy - Features and Bugs Versus Flow</title>
        <description>
</description>
        <pubDate>Sun, 06 Aug 2017 08:55:53 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/08/06/software-development-philosophy-features-and-bugs-versus-flow.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/08/06/software-development-philosophy-features-and-bugs-versus-flow.html</guid>
        
        
      </item>
    
      <item>
        <title>A Bash Function for the 2 AM Blind Deploy</title>
        <description>&lt;p&gt;I’m doing a lot more bash scripting these days – ever since I opted to write my new deployer, dockerano, in Bash.  Tackling something significant in Bash has absolutely forced me, 20 years plus after I started using it, to finally start to understand it.  By no means do I feel that I have a good handle on Bash – I’m still heavily reliant on &lt;a href=&quot;http://fuzzyblog.io/blog/bash/2017/07/17/improving-your-bash-scripting-with-shellcheck.html&quot;&gt;ShellCheck&lt;/a&gt; but I can actually do things with Bash that I feel somewhat confident about.&lt;/p&gt;

&lt;p&gt;Here’s a bash function that I extended this morning to add OSX specific audio output after a deploy.  The problem at hand is what I call the “2 AM sleep blind deploy”.  We all know what this is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You get a downtime alert on a service&lt;/li&gt;
  &lt;li&gt;You blearily struggle out of bed at 2 am and fix the code&lt;/li&gt;
  &lt;li&gt;You deploy it and you want to get back to bed as soon as possible&lt;/li&gt;
  &lt;li&gt;Something goes wrong with the deploy and you get alerted again just &lt;strong&gt;after&lt;/strong&gt; you get back in bed&lt;/li&gt;
  &lt;li&gt;Lather, rinse, repeat until it is either fixed or morning comes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting close to release on my much obliquely referenced new product and so deploy issues are now first and foremost in my mind. My task for this morning was to add audio output to my deployer &lt;strong&gt;when&lt;/strong&gt; there is a failure.  Here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first task was to recognize that this only ever had to run on OSX as I develop and deploy from OSX.&lt;/li&gt;
  &lt;li&gt;There were two options - afplay and say.  The &lt;strong&gt;afplay&lt;/strong&gt; utility plays any media file from the command line and that’s good but a loud noise alone won’t tell me &lt;em&gt;what&lt;/em&gt; is down just that &lt;em&gt;something&lt;/em&gt; is down.  And while this works well – once upon a time, I used to trigger Billy Idol’s White Wedding whenever something was down – this time I wanted something a bit more nuanced and information rich.  I could also use the osx command &lt;strong&gt;say&lt;/strong&gt; to speak anything including the url which is failing.  Here is a &lt;a href=&quot;https://superuser.com/questions/298201/how-can-i-play-a-sound-from-the-command-line-in-mac-os-x&quot;&gt;Stack Overflow&lt;/a&gt; on the options.&lt;/li&gt;
  &lt;li&gt;An sample of this is “say http://foo.com/ is down” which will be played thru the speaker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My new tech stack is 7 different services each of which provides a simple health check api but since the obviously differ for each service, I needed a way to store this on a per service basis which I opted to do with a .dockerano_post_deploy_check_urls file in the root directory of each project.  This file can store as many urls as are needed and it will be looped over by the bash script.  Given that most of the site needs to work in both http and https and with www and non www variants, I didn’t want a single check url.  If you allow for both https and http and non www and www variants, that amounts to 4 urls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://foo.com/health&lt;/li&gt;
  &lt;li&gt;http://www.foo.com/health&lt;/li&gt;
  &lt;li&gt;https://foo.com/health&lt;/li&gt;
  &lt;li&gt;https://www.foo.com/health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, yes, this may be overkill but it is all too easy for almost anything to break so I would argue that the right thing to do is be aggressive in your testing.&lt;/p&gt;

&lt;p&gt;Here’s the bash function I wrote for this with the addition of say:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function verify_site_is_up_after_post_deploy() {
  sleep 5
  IFS=$'\n' read -d '' -r -a site_urls &amp;lt; .dockerano_post_deploy_check_urls  
  
  for site_url in &quot;${site_urls[@]}&quot;; do
    echo &quot;  Processing url: $site_url&quot;
    if curl --output /dev/null --silent --head --fail &quot;$site_url&quot;; then
      status_message_good &quot;$url exists; deploy worked&quot;
    else
      status_message_bad &quot;$url DOES NOT EXIST; DEPLOY FAILURE!!!!&quot;
      say &quot;$url is DOWN!&quot;
    fi

  done
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I adapted the code above based on this  &lt;a href=&quot;https://unix.stackexchange.com/questions/148985/how-to-get-a-response-from-any-url&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</guid>
        
        <category>devops</category>
        
        <category>deploy</category>
        
        <category>bash</category>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Monitoring Free Disc Space On AWS Instances with Monit, Ansible and SparkPost</title>
        <description>&lt;p&gt;There are lots and lots of things that can go wrong with an AWS instance but I have always found that the single most common problem is nothing more than running out of disc space – log files fill up, too many things get deployed, etc.  And with low end AWS instances being only 8 gigs of free disc space, well, this is bound to happen.&lt;/p&gt;

&lt;p&gt;The expensive solution is simple – buy more disc space – but I’m &lt;strong&gt;cheap&lt;/strong&gt; and that means that the real solution is &lt;strong&gt;monitoring&lt;/strong&gt; and &lt;strong&gt;alerting&lt;/strong&gt;.  Here’s what this means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need a way to configure monitoring, &lt;strong&gt;automatically&lt;/strong&gt;, on &lt;strong&gt;not&lt;/strong&gt; just one server but &lt;strong&gt;all&lt;/strong&gt; servers you have.  We’ll use &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; for this.&lt;/li&gt;
  &lt;li&gt;You need a monitoring daemon, a piece of software which looks for error conditions and sends email when they occur.  We’ll use &lt;a href=&quot;https://github.com/arnaudsj/monit&quot;&gt;monit&lt;/a&gt; for this.&lt;/li&gt;
  &lt;li&gt;You need an email server to send the messages through.  We’ll use &lt;a href=&quot;http://www.sparkpost.com/&quot;&gt;SparkPost&lt;/a&gt; for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1-installation-of-monit-with-ansible&quot;&gt;Step 1: Installation of Monit with Ansible&lt;/h1&gt;

&lt;p&gt;Ansible, which I’ve &lt;a href=&quot;http://fuzzyblog.io/blog/category.html#ansible&quot;&gt;written a lot about&lt;/a&gt;, is a configuration tool for servers, your laptop, etc – essentially any device that you want to configure can be managed by Ansible.&lt;/p&gt;

&lt;p&gt;Here is a basic Ansible role which installs monit along with a configuration file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- name: install monit
  apt: pkg=monit state=present
  
- name: copy config file
  template: src=roles/install_monit/files/monit.rc dest=/etc/monit/monitrc
  
- name: start monit
  service: name=monit state=started
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The lines above would go in a file roles/install_monit/tasks/main.yml.  You could then call that from a playbook with nothing more than:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: install_monit, tags: monit}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As long as all your AWS instances are listed in an inventory file then this will install monit on all boxes, copy up the configuration file and then restart the service.&lt;/p&gt;

&lt;h1 id=&quot;step-2-monit-configuration&quot;&gt;Step 2: Monit Configuration&lt;/h1&gt;

&lt;p&gt;We do need a simple Monit configuration file to tell it about our email server, credentials and the monitoring rules.  Monit is very powerful and can monitor for all kinds of issues but I’m only going to configure free disc space checking.  Where you see things in UPPERCASE then you need to configure them for your settings.&lt;/p&gt;

&lt;p&gt;This configuration file will be installed into /etc/monit/monitrc by your Ansible playbook.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set daemon 120 with start delay 60

  set mailserver smtp.sparkpostmail.com  port 587 username &quot;SMTP_Injection&quot; password &quot;PASSWORD&quot; using tlsv1 with timeout 30 seconds

  set alert YOURADDRESS@YOURSERVER.COM
  
mail-format {
    From: noreply@YOURSERVER.COM
    Subject: MONIT ERROR !!! [$HOST] $EVENT $SERVICE
    Message: $DESCRIPTION
             $DATE
}

check filesystem &quot;root&quot; with path /dev/xvda1
  if space usage &amp;gt; 90% for 8 cycles then alert
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s it.  Here is the english language explanation of the Monit configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set the daemon to monitor every 2 minutes (120 seconds) with a delay of 60 seconds for checking on startup&lt;/li&gt;
  &lt;li&gt;Set the mail server to be sparkpost on 587 with the SMTP_Injection username and a password&lt;/li&gt;
  &lt;li&gt;Set the alerting email address&lt;/li&gt;
  &lt;li&gt;Set the format for the alerting email including subject and description&lt;/li&gt;
  &lt;li&gt;check the filesystem device and then alert if the space usage is more than 90% for 8 cycles&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-3-email-configuration&quot;&gt;Step 3: Email Configuration&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sparkpost.com&quot;&gt;SparkPost&lt;/a&gt; is a provider of email sending services and they have an incredibly generous free plan with up to 10,000 emails per month for free.  And while I could have used SES or another email service, I’ve had wonderful success using SparkPost to power my Rails ActionMailer routines so I just reused the same email credentials for Monit and it worked like a charm.  Here’s what you need to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To get a SparkPost account, sign up &lt;a href=&quot;https://app.sparkpost.com/account/credentials&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Go to your &lt;a href=&quot;https://app.sparkpost.com/account/credentials&quot;&gt;dashboard&lt;/a&gt; to get an API key&lt;/li&gt;
  &lt;li&gt;You do need to goto &lt;a href=&quot;https://app.sparkpost.com/account/sending-domains&quot;&gt;Sending Domains&lt;/a&gt; and configure the domains that you are sending from and then you need to add the DKIM settings to your DNS provider to prove that you own the domain in question.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you put these three pieces together then you will have an Ansible playbook that you can deploy onto all your servers that monitors for free disc space and alerts you via email.  Down the road you could easily enhance the monit script with other things that need monitoring such as http services, CPU load and more.&lt;/p&gt;

&lt;h1 id=&quot;useful-references&quot;&gt;Useful References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/akabos/3897117&quot;&gt;Akabos Gist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.artchang.com/post/37424851210/monitor-memcached-with-monit-and-alert-with-g&quot;&gt;Art Chang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/arnaudsj/monit&quot;&gt;Monit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 02 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/08/02/monitoring-free-disc-space-on-aws-instances-with-monit-ansible-and-sparkpost.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/08/02/monitoring-free-disc-space-on-aws-instances-with-monit-ansible-and-sparkpost.html</guid>
        
        <category>aws</category>
        
        <category>ansible</category>
        
        <category>monit</category>
        
        <category>SparkPost</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Hacks for When Ansible Galaxy Isn't Working</title>
        <description>&lt;p&gt;As of late I have manually bootstrapped a handful of machines into production using a text file with some command lines.  Yes this is a crap ass way to do it but one of the key things, Docker, is a damn pain in the ass to install.  Here’s what I was using as the command lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update
sudo apt-get install docker-ce
sudo apt install docker-compose
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even for me that’s damn ugly – so it is clearly time for &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;.  Ansible is a machine provisioning tool that lets you reduce commands like the above to something short, sweet and idempotent.  For this particular thing I wanted to use &lt;a href=&quot;https://nickjanetakis.com/blog/automate-installing-docker-and-docker-compose-with-ansible&quot;&gt;Nick Janetakis’ Ansible Galaxy role&lt;/a&gt; to make installing this trivial.  Specifically I wanted what his blog post promises:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: nickjj.docker, tags docker}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is all you need to setup Docker.  And that’s actually what I got but I hit a few snags hence the workaround.&lt;/p&gt;

&lt;p&gt;The problem that I hit was that his ansible galaxy role has some kind of version control conflict so that the version that gets installed when you type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-galaxy install nickjj.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is actually the version from November 2016, not the current 17.xx version.  What I needed was the master version of the Github repo not the older tagged version.  A bit of googling and some interactions with Nick told me just clone it directly into my own project as a work around.  Here’s how I did that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change into the right directory
cd ~/me/fuzzygroup/hyde/seira_watch/ansible/roles

git clone git@github.com:nickjj/ansible-docker.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This created an ansible-docker folder in my roles directory and all that I needed to make it work was to change the nickjj.docker reference to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: ansible-docker, tags docker}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nick also helpfully pointed out that I could have also cloned to tmp and then renamed to nickjj-docker before copying it over and that would have worked just fine tool.  Thanks Nick!&lt;/p&gt;

&lt;p&gt;Note 1: Another workaround supposedly would be to make a requirements.yml file and specify the branch there but I’m less certain on how to do that.&lt;/p&gt;

&lt;p&gt;Note 2: I talked about this same type of problem &lt;a href=&quot;http://fuzzyblog.io/blog/ansible/2016/10/09/ansible-quickie-fixing-a-poorly-designed-galaxy-role.html&quot;&gt;once before&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/ansible/2017/08/01/hacks-for-when-ansible-galaxy-isn-t-working.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ansible/2017/08/01/hacks-for-when-ansible-galaxy-isn-t-working.html</guid>
        
        <category>ansible</category>
        
        <category>ansible-galaxy</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>Configuring Your Mac with Ansible Take 2</title>
        <description>&lt;p&gt;The last new Mac I setup was back in &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2016/11/20/ansible-for-configuring-your-mac-so-much-better.html&quot;&gt;2016, November 20&lt;/a&gt; and to do that I used ansible which was a wonderful experience.  Rather than groveling for software to install, shell hacks, etc, my ansible routine handled all of those crappy tasks and it was brilliant.  I can’t claim any originality here – lots of people other than me have done this.  In specific I drew inspiration from &lt;a href=&quot;https://twitter.com/geerlingguy&quot;&gt;Jeff Geerling’s&lt;/a&gt; ansible Macbook Pro repository.  He and I did it differently (his ansible skills are better than mine) but the end result was much the same – a functional machine with minimal manual work.&lt;/p&gt;

&lt;p&gt;I recently wrote about &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html&quot;&gt;my lack of system stability&lt;/a&gt; and figured that it was time to address it.  My thesis for some time has been that most of my errors are somehow related to lack of RAM so moving to a bigger box made sense.  Over the weekend I converted my Linux Intel NUC over to an OSX Hackintosh and used an updated version of the same playbook to handle configuration.  This means that I’m now working on a 32 gigs of RAM development box.  It is unclear if this will work out long term or not but it is an interesting experiment.  Of course since its a Hackintosh there are certain bits of weirdness like the fact that audio doesn’t work at all at present.  Ah well…&lt;/p&gt;

&lt;h1 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geerlingguy/mac-dev-playbook&quot;&gt;Jeff Geerling’s Github Mac Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fuzzygroup/ansible-macbook-pro&quot;&gt;My Github Repo for Macbook Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/&quot;&gt;TonyMacx86&lt;/a&gt; - The definitive OSX Hackintosh Resource&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html</guid>
        
        <category>mac</category>
        
        <category>ansible</category>
        
        <category>hackintosh</category>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Rails and Address Already In Use - Bind Error</title>
        <description>&lt;p&gt;Lately I’ve seen this error come up quite a few times:&lt;/p&gt;

&lt;p&gt;/Users/sjohnson/.rvm/gems/ruby-2.3.1@seira_watch_web_app_api/gems/puma-3.9.1/lib/puma/binder.rb:269:in `initialize’: Address already in use - bind(2) for “::1” port 3220 (Errno::EADDRINUSE)&lt;/p&gt;

&lt;p&gt;I’m running a fairly complex stack that mirrors an 8 micro service application where things are expected to be on certain points in development so having port 3220 not working means that one of my APIs isn’t available – and that’s &lt;strong&gt;unacceptable&lt;/strong&gt;.  So I dug into it a bit and with the help of &lt;a href=&quot;https://stackoverflow.com/questions/10261477/tcpserver-error-address-already-in-use-bind2&quot;&gt;this StackOverflow&lt;/a&gt;, I found the answer was to locate the offending process and then kill it dead:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;lsof -wni tcp:3220&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That gives the process id or PID and then you can just kill it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kill -9 12345 (or whatever)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/07/29/rails-and-address-already-in-use-bind-error.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/07/29/rails-and-address-already-in-use-bind-error.html</guid>
        
        <category>rails</category>
        
        <category>sysadmin</category>
        
        <category>bind</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Planning the Bare Minimum Billing Side of a SAAS Product</title>
        <description>&lt;p&gt;I’ve spent part of this week working through the billing side of my new SAAS product which I’m planning to use with Stripe as my credit card solution.  And what I did was focus solely on the &lt;em&gt;how&lt;/em&gt; of the code, you know, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do I use &lt;a href=&quot;https://stripe.com/docs/elements&quot;&gt;Stripe Elements&lt;/a&gt; with Rails&lt;/li&gt;
  &lt;li&gt;How do I support credit card updating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of this I learned from the excellent &lt;a href=&quot;http://courses.gorails.com&quot;&gt;Stripe course&lt;/a&gt; from &lt;a href=&quot;http://www.gorails.com/&quot;&gt;Go Rails&lt;/a&gt; which I strongly recommend for any Rails / Stripe projects you have.&lt;/p&gt;

&lt;p&gt;What I never did was actually outline the functions that a bare minimum SAAS billing engine needs.  So you consider this a “retrospective specification”.  I’m not going to talk at all about the code – go buy the course for that – but, instead, about the minimum amount of features you need to have a SAAS product in 2017.  The criteria I used to define minimum functionality was pretty simple: I don’t ever want to have to get involved in day to day transactional crap.&lt;/p&gt;

&lt;p&gt;Here are the bare minimum SAAS functions you need in 2017:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user has to be able to order the product with the product name and price displayed on the order form and a standard bootstrap approach to form elements. &lt;strong&gt;DONE&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The system needs to be able to support at least Basic and Pro subscriptions from the very beginning. &lt;strong&gt;DONE&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The user has to be able to enter a stripe coupon code on checkout so the user can get a discount. &lt;strong&gt;SKIP&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The user has to be able to get a receipt for their transaction. &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The user has to be able to cancel a subscription by forcing the user through one or two “please don’t cancel” screens first where you try and convince them not to cancel.  Now, that said, the user needs to be able to cancel on their own, without a refund, but with the service being available until the end of their payment period.&lt;/li&gt;
  &lt;li&gt;The system has to be able to receive transactions from Stripe events and log them to a charges table.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There needs to be easy access to admin tools with restricted access to only admin users.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There needs to be an admin page which shows daily revenue and total revenue.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There needs to be an admin page with calculation of lifetime customer value on a per customer basis.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;A basic has_valid_account? method on an instance of user needs to exist.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;An api needs to be exposed so other parts of the system can find out if a user’s account is still valid.  This isn’t a standard feature so I listed it last.  I chose to build my product in a distributed fashion thus requiring a basic authorization api to be implemented.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll notice that I don’t put anything in on the admin pages about sorting, searching or even pagination.  This is purely an internal tool and since, right now, I have 0 transactions, none of that is needed.  If I get transactions for this side project, then and only then, do I need to worry about that.&lt;/p&gt;

&lt;p&gt;There are a near infinite amount of billing / SAAS features that can be implemented but these are the bare minimum.  Each of these is discussed below.&lt;/p&gt;

&lt;p&gt;I have specifically noted which features I was able to easily re-use from the Stripe course.&lt;/p&gt;

&lt;h1 id=&quot;user-has-to-be-able-to-order-the-product&quot;&gt;User Has to be Able to Order the Product&lt;/h1&gt;

&lt;h1 id=&quot;system-needs-to-support-basic-and-pro-subscriptions&quot;&gt;System Needs to Support Basic and Pro Subscriptions&lt;/h1&gt;

&lt;h1 id=&quot;user-has-to-be-able-to-enter-a-coupon-code&quot;&gt;User Has to be Able to Enter a Coupon Code&lt;/h1&gt;

&lt;p&gt;I made the executive decision to skip this based on complexity. A good reference to implementing it can be found here: https://stripe.com/docs/recipes/coupons-for-charges&lt;/p&gt;

&lt;h1 id=&quot;user-has-to-be-able-to-get-a-receipt&quot;&gt;User Has to Be Able to Get a Receipt&lt;/h1&gt;
&lt;p&gt;# User Has to Be Able to Cancel 
# System Has to Receive Stripe Events
# Admin Page with Daily Revenue and Total Revenue
# Admin Page of Lifetime Customer Value&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jul 2017 11:12:26 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/saas/2017/07/22/planning-the-bare-minimum-billing-side-of-a-saas-product.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/saas/2017/07/22/planning-the-bare-minimum-billing-side-of-a-saas-product.html</guid>
        
        <category>rails</category>
        
        <category>stripe</category>
        
        <category>saas</category>
        
        <category>billing</category>
        
        
        <category>saas</category>
        
      </item>
    
      <item>
        <title>Blog as Well as Automate</title>
        <description>&lt;p&gt;This morning I was reading &lt;a href=&quot;https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107/ref=sr_1_1?ie=UTF8&amp;amp;qid=1500632263&amp;amp;sr=8-1&amp;amp;keywords=Effective+Engineer&quot;&gt;The Effective Engineer&lt;/a&gt; by Edmond Lau, an excellent read, and I hit on the section where he talks about how important it is to automate things that you do more than twice – and he’s right.&lt;/p&gt;

&lt;p&gt;The very first thing I did on my current side project was dramatically reduce the amount of effort it is to build applications with Rails that aren’t monoliths and it absolutely has paid off.  I do think that there is a related aspect to automation – writing it down or blogging.&lt;/p&gt;

&lt;p&gt;There are things that you do somewhat regularly that don’t merit automation but are often a pain in the arse to figure out.  The example this morning was I wrote the first test coverage on a new bit of greenfield code and RSpec ever so helpfully told me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;An error occurred while loading ./spec/models/subscription_common_spec.rb.
Failure/Error: require 'rails_helper' 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This particular “app” has 8 separate git repos so, yes, I’ve done this more than twice but it isn’t amenable to automation since its an oddball step that I only do N times where N is the number of repos (its a setup task).  Now, in the age of monolithic Rails apps, this wasn’t a big deal – you only ever had one repo so you did it once and then you forgot about it.  Now I’ve already hit this more than twice so I made sure to write it down – on my &lt;a href=&quot;http://fuzzyblog.io/blog/rails/2017/02/26/setting-up-rails-with-rspec-from-the-start.html&quot;&gt;blog&lt;/a&gt;.  All I had to do was hit my &lt;a href=&quot;http://fuzzyblog.io/blog/&quot;&gt;blog home page&lt;/a&gt; and search for RSpec and there it was.  If you’ve ever wondered why my blog page is a long, long list of 600+ titles, that’s why – I want a single searchable thing that I can zoom through.  My blog gets very little traffic but it is incredibly useful l – to &lt;strong&gt;me&lt;/strong&gt;.  Anything that I expect to do more than twice, if I don’t think its worth automating, I write it down.&lt;/p&gt;

&lt;p&gt;So, to me, the corollary to automate things you do more than twice is if you can’t automate it then write it down (preferably blog it) and make sure its searchable.&lt;/p&gt;

&lt;p&gt;And you should buy The Effective Engineer by &lt;a href=&quot;https://twitter.com/edmondlau&quot;&gt;Raymond Lau&lt;/a&gt;.  It really is good.&lt;/p&gt;

&lt;p&gt;Oh and my tests passed, first time out of the gate.  w00t!&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jul 2017 06:28:25 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/software_development/2017/07/21/blog-as-well-as-automate.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_development/2017/07/21/blog-as-well-as-automate.html</guid>
        
        <category>books</category>
        
        <category>monolith</category>
        
        <category>automation</category>
        
        <category>blogging</category>
        
        
        <category>software_development</category>
        
      </item>
    
      <item>
        <title>Rails Sys Admin When Puma Won't Run But Its Not Running</title>
        <description>&lt;p&gt;I use Puma for local Rails development and I’m running a stack of roughly 7 related Rails apps on a series of varying ports starting from 3200 going up by increments of 10.  I run all development using Tmux as a way to launch all the resources for a single “app” in one shot.&lt;/p&gt;

&lt;p&gt;I recently ran into the situation where Puma would not start even though I had exited all sessions and killed all instances of Tmux.  But, even so, I could not get Puma to start.  I kept getting the bind error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails s -p3220
=&amp;gt; Booting Puma
=&amp;gt; Rails 5.0.0.1 application starting in development on http://localhost:3220
=&amp;gt; Run `rails server -h` for more startup options
Puma starting in single mode...
* Version 3.6.0 (ruby 2.3.1-p112), codename: Sleepy Sunday Serenity
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://localhost:3220
Exiting
/Users/sjohnson/.rvm/gems/ruby-2.3.1/gems/puma-3.6.0/lib/puma/binder.rb:266:in `initialize': Address already in use - bind(2) for &quot;::1&quot; port 3220 (Errno::EADDRINUSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I did a bunch of digging and found this [Stack Overflow answer] (https://stackoverflow.com/questions/39505675/ruby-on-rails-server-isnt-starting):&lt;/p&gt;

&lt;p&gt;Step 1 is to run lsof on the offending port and find the PID associated with the port. In my case somehow vpnkit picked up this port and wouldn’t release it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -i :3220

COMMAND   PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
vpnkit  99947 sjohnson   27u  IPv4 0x8a1799bf7e1441df      0t0  TCP *:xnm-ssl (LISTEN)
vpnkit  99947 sjohnson   28u  IPv6 0x8a1799bf93a6e2d7      0t0  TCP localhost:xnm-ssl (LISTEN)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Step 2 was a kill -9 on the offending port:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kill -9 99947
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then Puma ran like a champ:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails s -p3220
=&amp;gt; Booting Puma
=&amp;gt; Rails 5.0.0.1 application starting in development on http://localhost:3220
=&amp;gt; Run `rails server -h` for more startup options
Puma starting in single mode...
* Version 3.6.0 (ruby 2.3.1-p112), codename: Sleepy Sunday Serenity
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://localhost:3220
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 13:55:41 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/07/20/rails-sys-admin-when-puma-won-t-run-but-its-not-running.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/07/20/rails-sys-admin-when-puma-won-t-run-but-its-not-running.html</guid>
        
        <category>rails</category>
        
        <category>puma</category>
        
        <category>sysadmin</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
