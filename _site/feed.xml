<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Nov 2016 04:25:29 -0500</pubDate>
    <lastBuildDate>Mon, 14 Nov 2016 04:25:29 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title></title>
        <description>&lt;p&gt;Well, alas, Elementary OS was not what I had hoped it to be.  While I absolutely loved the look and feel, I found the stability lacking.  All too many times I would find my Macbook Pro running Elementary just locked hard.  And stability is a big deal for me.  I usually have uptime readings on OSX of 3 months or more.  Right now I’m at:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uptime
 6:28  up 19 days, 22:08, 58 users, load averages: 9.12 13.01 9.51
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So to have uptime of less than 2 days – ever – was just unacceptable.  Now this might have been from my hardware or my video drivers, I never did troubleshoot it.&lt;/p&gt;

&lt;p&gt;Beyond stability I found a few UI things questionable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The decision to eliminate the menu bar from applications bothered me a lot; there’s a lot of subtle functionality that you can’t get to now.  Example - I couldn’t recover the history from Chrome after a crash because I couldn’t get to that menu item.&lt;/li&gt;
  &lt;li&gt;No screen saver or dimming of the second monitor (no dimming is understandable at this distro’s stage); no screensaver?  Sheesh.&lt;/li&gt;
  &lt;li&gt;No support for crash recovery in the default browser.&lt;/li&gt;
  &lt;li&gt;Beyond questionable, I absolutely detest the scrollbar approach.  A scrollbar is supposed to give you a visual queue as to how far you are through content.  This “let’s make it small and then show up dynamically crap” is like someone walked over to the brilliant work of &lt;a href=&quot;https://en.wikipedia.org/wiki/Scrollbar#History_and_Progression&quot;&gt;Alan Kay’s SmallTalk team&lt;/a&gt; and peed all over it.  Sigh.  I get that on Mobile real estate is so precious that scroll bars have to change.  This is NOT mobile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this makes me sad because I really loved the look and feel.  Elementary OS is really onto something but I don’t think its there yet for industrial computing like I need.&lt;/p&gt;

&lt;p&gt;To eliminate the hardware from the equation I picked up an Intel NUC and I’ve about to install Ubuntu Mate on it.  Here’s the details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu Mate is a bit of a retro distro; Gnome 2 not 3.  They describe it as traditional desktop and that doesn’t sound all bad.&lt;/li&gt;
  &lt;li&gt;How to make the &lt;a href=&quot;https://computers.tutsplus.com/tutorials/how-to-create-a-bootable-ubuntu-usb-drive-for-pc-on-a-mac--cms-21187&quot;&gt;USB Installer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Where to download &lt;a href=&quot;https://ubuntu-mate.org/download/&quot;&gt;Ubuntu Mate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;When you goto download the 64 bit version, confusingly, it is described as AMD.  Since I was dropping this on an Intel box I was surprised.  Apparently AMD is the default term for a 64 bit architecture.  I guess I blinked thru that industry change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had been contemplating installing OSX on this but &lt;a href=&quot;http://www.tbray.org/ongoing/When/201x/2016/10/29/Post-Mac#c1477858058.300020&quot;&gt;Kevin Burton’s description of using Ubuntu on modern hardware&lt;/a&gt; appealed to me – “It’s INSANELY powerful. It’s like using god’s computer.”  A NUC isn’t that powerful but I’m curious how much Ubuntu versus OSX accounts for that.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 04:25:29 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/14/2016-11-13-postmac-linux-take-2-ubuntu-mate.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/14/2016-11-13-postmac-linux-take-2-ubuntu-mate.html</guid>
        
        
      </item>
    
      <item>
        <title>Perhaps My Proudest Moment as a Father</title>
        <description>&lt;p&gt;My youngest son, M, spent a fair bit of Saturday with me.  We went to Menard’s, a local DIY store, for a table top for my new desk and then we went to the playground at his school afterwards.  A trip to buy carpentry is never a short trip - lumber has to be evaluated, a finish has to be selected from the 1000 odd different types of polyurethane* that they sell, the tool aisle has to be perused, etc.  So for a ten year old boy, with a deep and abiding love for is iPad Mini, this is likely as close to one of Dante’s circles as you might find.&lt;/p&gt;

&lt;p&gt;Suprisingly, at the end of the trip, he turned to me and said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dad - they say that a dog is man’s best friend; I say that a Dad is man’s best friend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m still glowing / thrilled / elated.&lt;/p&gt;

&lt;p&gt;*Hint: Minwax One Coat Water Based Polyurethane is absolutely brilliant.  Highly recommended.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/fatherhood/2016/11/14/perhaps-my-proudest-moment-as-a-father.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/fatherhood/2016/11/14/perhaps-my-proudest-moment-as-a-father.html</guid>
        
        <category>fatherhood</category>
        
        <category>parenting</category>
        
        <category>max</category>
        
        <category>personal</category>
        
        
        <category>fatherhood</category>
        
      </item>
    
      <item>
        <title>Going Deeper - Debugging Saml</title>
        <description>&lt;p&gt;This blog post expands on my current interest in &lt;a href=&quot;https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html&quot;&gt;SAML&lt;/a&gt; with a more detailed investigation of SAML, IdP versus SP initiation and how you actually debug it.  In the process of writing this, I reached out to two companies that support SAML in their products and I wanted to express a special thanks to Scott G at &lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt; who did an absolutely fantastic job of answering questions – honestly the best technical support I’ve received in years.  Kudos and thank you!&lt;/p&gt;

&lt;h1 id=&quot;tools-for-working-on-saml&quot;&gt;Tools for Working on SAML&lt;/h1&gt;

&lt;p&gt;Here are some of the tools for working on SAML that I recently learned about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby &lt;a href=&quot;https://github.com/digidentity/libsaml&quot;&gt;libsaml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Firefox SAML Tracer&lt;/li&gt;
  &lt;li&gt;Chrome SAML Tracer (not as good)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.samltool.com/decode.php&quot;&gt;The SAML Decoder&lt;/a&gt;.  The UI here sucks blue monkey chunks but it does the job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;not-all-vendors-are-created-equal&quot;&gt;Not All Vendors are Created Equal&lt;/h1&gt;

&lt;p&gt;When I worked with SAML, my context was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I was creating the IdP&lt;/li&gt;
  &lt;li&gt;One vendor (&lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt;) I worked with had us in a SP init role where they would push login stuff to us&lt;/li&gt;
  &lt;li&gt;Another vendor (who shall not be named) I worked with had us in an IdP init role where we would push login stuff to them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The experience between the two was night and day different.  The SP Init role vendor was a dream to work with and their product line was so astonishingly forgiving and pleasant that it would tell the errors and how far it got.  The other vendor, well, you had to ask your project manager for each error one at a time.&lt;/p&gt;

&lt;h2 id=&quot;examples-of-how-to-make-a-ui-that-uses-saml&quot;&gt;Examples of How to Make a UI that Uses SAML&lt;/h2&gt;

&lt;p&gt;Here are examples of a great SAML user interface for a developer.  This is from &lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt;.  Whether we get a success or a failure there’s enough context for the developer to actually understand what’s happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/great_saml_ui_mind_touch_saml_success.png&quot; alt=&quot;&quot; /&gt;
If you have the debug tracer on then you can see the whole SAML transaction&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_great_ui_shows_errors.png&quot; alt=&quot;&quot; /&gt;
If you hit errors part way thru a SAML transaction then you can see at least as far as you got.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_success_but_no_access.png&quot; alt=&quot;&quot; /&gt;
If you are requesting a page which requires administrative access you don’t have then you’ll get logged in but blocked access to the requested resource.  See below under “Local Users Haven’t Gone Away - Local Login Has Gone Away”&lt;/p&gt;

&lt;h1 id=&quot;debugging-a-saml-transaction&quot;&gt;Debugging a SAML Transaction&lt;/h1&gt;

&lt;p&gt;The very first thing you want to do if you’re debugging saml stuff is use FireFox and get the &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjS3Lbu3pPQAhVL0oMKHTOtAwgQFggdMAA&amp;amp;url=https%3A%2F%2Faddons.mozilla.org%2Fen-US%2Ffirefox%2Faddon%2Fsaml-tracer%2F&amp;amp;usg=AFQjCNHN7JDX_TkQIZOiPV2tMSVDyfgwkA&quot;&gt;SAML tracer&lt;/a&gt; plugin.  This tool shows you the SAML back and forth flow and it is absolutely brilliant:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_tracer.png&quot; alt=&quot;saml_tracer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When Scott G was helping me, his first suggestion was “Ok – go and get the FireFox SAML tracer” and with that we were off to the races.  Good tools always make things better and this was excellent.&lt;/p&gt;

&lt;p&gt;Note: There is also a &lt;a href=&quot;https://chrome.google.com/webstore/detail/saml-chrome-panel/paijfdbeoenhembfhkhllainmocckace?hl=en&quot;&gt;Chrome SAML tool&lt;/a&gt; which I haven’t tried yet.  It doesn’t appear to be as complete as SAML Tracer since it only supports post requests.&lt;/p&gt;

&lt;h1 id=&quot;local-users-havent-gone-away---local-login-has-gone-away&quot;&gt;Local Users Haven’t Gone Away - Local Login Has Gone Away&lt;/h1&gt;

&lt;p&gt;One thing to understand about SAML is that local users, at the level of the Service Provider, have not gone away.  What has gone away is &lt;strong&gt;local login&lt;/strong&gt; and &lt;strong&gt;local passwords&lt;/strong&gt;.  Your application will, almost certainly, still have a local set of users that you have to administer.  This becomes most apparent when you want to grant administrative rights to a user who has logged in via saml.  Even my SAML poster child for a great implementation, MindTouch, says this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Can I automatically seat users as pro members?
Users cannot be seated by a SAML assertion. A user must be explicitly seated by an administrator using the control panel. If automatic seating is required, this can be accomplished via our API.
&lt;a href=&quot;https://success.mindtouch.com/Documentation/MindTouchResponsive/Authentication/Authenticate_via_SSO/Implement_SAML_SSO?=&quot;&gt;Mindtouch Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The way that admin rights are granted to a SAML user is that the Service Provider has an admin tool where a user can be located by whatever is the unique identifier for a user (generally email or username) and then administrative rights are granted to the user.&lt;/p&gt;

&lt;h1 id=&quot;idp-versus-sp-initiation&quot;&gt;IdP versus SP Initiation&lt;/h1&gt;

&lt;p&gt;When you first get involved with SAML one of the initial things you’ll be asked is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IdP init or SP Init?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you may remember from my &lt;a href=&quot;https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html&quot;&gt;last post on SAML&lt;/a&gt;, IdP is the identity provider, the bit of software that owns the user information and SP is the service provider, the bit of software that us trying to use identity.&lt;/p&gt;

&lt;p&gt;This is a really, really big deal in the SAML community and what sounds like a network protocol question is actually a &lt;strong&gt;user flow&lt;/strong&gt; question that centers on a chicken and egg issue of what happens first.  The &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=saml%20idp%20vs%20sp%20initiated&quot;&gt;almost 7,000 results&lt;/a&gt; in Google for this very simple thing indicates just how many people are confused about it.  As always Stack Overflow has a &lt;a href=&quot;http://stackoverflow.com/questions/12779532/differences-between-sp-initiated-sso-and-idp-initiated-sso&quot;&gt;great page on this topic&lt;/a&gt; but let me try and paraphrase:&lt;/p&gt;

&lt;p&gt;For IdP Init:&lt;/p&gt;

&lt;p&gt;The best advice I can give you is read &lt;a href=&quot;http://saml.xml.org/wiki/idp-initiated-single-sign-on-post-binding&quot;&gt;this old web page&lt;/a&gt;.  When I found this and implemented it exactly this way then IdP Init just fell in to place for me.&lt;/p&gt;

&lt;p&gt;For SP init:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user starts on a url on the service provider and when access is needed they are pushed BACK to the IdP to a special login page which is run by the SAML side of the house.&lt;/li&gt;
  &lt;li&gt;A SAML assertion is generated and pushed to the SP.&lt;/li&gt;
  &lt;li&gt;If the assertion is valid the user is granted access.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s the rub from a technical perspective: &lt;strong&gt;IdP Init is MUCH MUCH HARDER&lt;/strong&gt;.  When you are doing IdP Init you need to do all the low level SAML junk yourself.  When you are doing SP init then they do the SAML junk.&lt;/p&gt;

&lt;p&gt;Just to illustrate how much work the SP versus IdP approach changes things, you should look at these two configuration UIs below.  One is for SP Init and one is for IdP Init.  The IdP Init one is trivial to configure – all you have to do is set a few urls.  The SP Init one is much harder to configure – it requires your certificate and more low level details.  But there’s an inversion here – the more complex it is to configure the SP, the less code you have to write yourself.  Repeat that after me – the less code you have to write.  I got the SP Init up and running in a matter of hours.  The IdP init took days.&lt;/p&gt;

&lt;h2 id=&quot;configuration-screen-when-you-are-the-idp-and-the-sp-wants-sp-init&quot;&gt;Configuration Screen when You Are the IdP And the SP wants SP Init&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/mindtouch_saml_config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-screen-when-you-are-the-idp-and-the-sp-wants-idp-init&quot;&gt;Configuration Screen when You Are the IdP and the SP wants IdP Init&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_idp_init_configuration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-of-a-saml-assertion-when-you-are-the-idp-pushing-to-an-sp&quot;&gt;Example of a SAML Assertion When You Are the IdP Pushing to an SP&lt;/h1&gt;

&lt;p&gt;Here’s a full example of a SAML assertion.  This, if you updated the time stamps, would correctly validate (a few urls have been changed, however):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;samlp:Response xmlns:samlp=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot; ID=&quot;_a4f7e48e0-88e7-0134-4eb1-22000ab35e7b&quot; Version=&quot;2.0&quot; IssueInstant=&quot;2016-11-10T19:21:13.116Z&quot; Destination=&quot;https://community-staging.foo.com/auth/saml/SSO&quot; Consent=&quot;urn:oasis:names:tc:SAML:2.0:consent:unspecified&quot; &amp;gt;
  &amp;lt;Issuer xmlns=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;&amp;gt;http://sso.foo.com/saml/auth&amp;lt;/Issuer&amp;gt;
  &amp;lt;samlp:Status&amp;gt;
    &amp;lt;samlp:StatusCode Value=&quot;urn:oasis:names:tc:SAML:2.0:status:Success&quot;/&amp;gt;
  &amp;lt;/samlp:Status&amp;gt;
  &amp;lt;Assertion xmlns=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot; ID=&quot;_a4f7e4b30-88e7-0134-4eb1-22000ab35e7b&quot; IssueInstant=&quot;2016-11-10T19:21:13.116Z&quot; Version=&quot;2.0&quot;&amp;gt;
    &amp;lt;Issuer&amp;gt;http://sso.foo.com/saml/auth&amp;lt;/Issuer&amp;gt;
    &amp;lt;ds:Signature xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&amp;gt;
      &amp;lt;ds:SignedInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&amp;gt;
        &amp;lt;ds:CanonicalizationMethod Algorithm=&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;/&amp;gt;
        &amp;lt;ds:SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;/&amp;gt;
        &amp;lt;ds:Reference URI=&quot;#_a4f7e4b30-88e7-0134-4eb1-22000ab35e7b&quot;&amp;gt;
          &amp;lt;ds:Transforms&amp;gt;
            &amp;lt;ds:Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;/&amp;gt;
            &amp;lt;ds:Transform Algorithm=&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;/&amp;gt;
          &amp;lt;/ds:Transforms&amp;gt;
          &amp;lt;ds:DigestMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#sha1&quot;/&amp;gt;
          &amp;lt;ds:DigestValue&amp;gt;IxemD9eHnPTFaA9Th4+2mQncXuI=&amp;lt;/ds:DigestValue&amp;gt;
        &amp;lt;/ds:Reference&amp;gt;
      &amp;lt;/ds:SignedInfo&amp;gt;
      &amp;lt;ds:SignatureValue&amp;gt;jrTDXKvv2wevCIIJ48gL1kIvgBwMMtl+RO6wligTVQp7iYglReUIKdnEZo9vuFucd+ocWkg7EQ3N3WWsZiBvyVGTJ80jC8QRTD+CtTEEMMVgtS2BkLFUv7gfH5yZ9Affk+qF+uAEK4Ij2Zy+0Zq6jleQlUTyCoZNDOFzNF1zWHo=&amp;lt;/ds:SignatureValue&amp;gt;
      &amp;lt;KeyInfo xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&amp;gt;
        &amp;lt;ds:X509Data&amp;gt;
          &amp;lt;ds:X509Certificate&amp;gt;MIICrzCCAhgCCQCAZjKq3Nb4xTANBgkqhkiG9w0BAQsFADCBmzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRUwEwYDVQQHDAxSZWR3b29kIENpdHkxEDAOBgNVBAoMB0ludGVybmExFDASBgNVBAsMC0VuZ2luZWVyaW5nMRowGAYDVQQDDBFzc28uaW50ZXJhbmlhLmNvbTEkMCIGCSqGSIb3DQEJARYVc2pvaG5zb25AaW50ZXJhbmEuY29tMB4XDTE2MTEwMzExMDAwN1oXDTE3MTEwMzExMDAwN1owgZsxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEVMBMGA1UEBwwMUmVkd29vZCBDaXR5MRAwDgYDVQQKDAdJbnRlcm5hMRQwEgYDVQQLDAtFbmdpbmVlcmluZzEaMBgGA1UEAwwRc3NvLmludGVyYW5pYS5jb20xJDAiBgkqhkiG9w0BCQEWFXNqb2huc29uQGludGVyYW5hLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1NaloseOtTva09VahTNozzHbO6rpuT7/FpQOi3eHKWwU4zHgEvOI2biUkTRYocZkunilBxqtTrCgbDay4MqXFykt+lKujnV10OG4+cVUxds8a50nkHXVbpMC48m5gfkUfut4EIURE5RHjLJ/nCpgC67QUl1/ztkFvJaNDJeWoQMCAwEAATANBgkqhkiG9w0BAQsFAAOBgQCTkZmrFEhmW4MoX6OovuKwCNwQBWPXju/po8d7YTVpRf7tIfGsD/4x8jBgUaeSPQ4QXCMQqB6244win3u1veVQd5UYRP37RteEP+F302Gw2MbOl2fYUQoSwINayWA/CinYBQAlzTAJovIsc/P8dNFUsSQzqme2aF1nIuH3h/8/Kg==&amp;lt;/ds:X509Certificate&amp;gt;
        &amp;lt;/ds:X509Data&amp;gt;
      &amp;lt;/KeyInfo&amp;gt;
    &amp;lt;/ds:Signature&amp;gt;
    &amp;lt;Subject&amp;gt;
      &amp;lt;NameID Format=&quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&quot;&amp;gt;scott_johnson&amp;lt;/NameID&amp;gt;
      &amp;lt;SubjectConfirmation Method=&quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&quot;&amp;gt;
        &amp;lt;SubjectConfirmationData NotOnOrAfter=&quot;2016-11-10T19:25:13.116Z&quot; Recipient=&quot;https://community-staging.foo.com/auth/saml/SSO&quot;/&amp;gt;
      &amp;lt;/SubjectConfirmation&amp;gt;
    &amp;lt;/Subject&amp;gt;
    &amp;lt;Conditions NotBefore=&quot;2016-11-10T19:21:13.116Z&quot; NotOnOrAfter=&quot;2016-11-10T20:07:13.116Z&quot;&amp;gt;
      &amp;lt;AudienceRestriction&amp;gt;
        &amp;lt;Audience&amp;gt;https://community-staging.foo.com/auth/saml&amp;lt;/Audience&amp;gt;
      &amp;lt;/AudienceRestriction&amp;gt;
    &amp;lt;/Conditions&amp;gt;
    &amp;lt;AttributeStatement&amp;gt;
      &amp;lt;Attribute Name=&quot;email&quot; NameFormat=&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&quot; FriendlyName=&quot;email&quot;&amp;gt;
        &amp;lt;AttributeValue&amp;gt;sjohnson@foo1.com&amp;lt;/AttributeValue&amp;gt;
      &amp;lt;/Attribute&amp;gt;
      &amp;lt;Attribute Name=&quot;first_name&quot; NameFormat=&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&quot; FriendlyName=&quot;first_name&quot;&amp;gt;
        &amp;lt;AttributeValue&amp;gt;Scott&amp;lt;/AttributeValue&amp;gt;
      &amp;lt;/Attribute&amp;gt;
      &amp;lt;Attribute Name=&quot;last_name&quot; NameFormat=&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&quot; FriendlyName=&quot;last_name&quot;&amp;gt;
        &amp;lt;AttributeValue&amp;gt;Johnson&amp;lt;/AttributeValue&amp;gt;
      &amp;lt;/Attribute&amp;gt;
    &amp;lt;/AttributeStatement&amp;gt;
    &amp;lt;AuthnStatement AuthnInstant=&quot;2016-11-10T19:21:13.116Z&quot; SessionIndex=&quot;_a4f7e4b30-88e7-0134-4eb1-22000ab35e7b&quot;&amp;gt;
      &amp;lt;AuthnContext&amp;gt;
        &amp;lt;AuthnContextClassRef&amp;gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&amp;lt;/AuthnContextClassRef&amp;gt;
      &amp;lt;/AuthnContext&amp;gt;
    &amp;lt;/AuthnStatement&amp;gt;
  &amp;lt;/Assertion&amp;gt;
&amp;lt;/samlp:Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The important thing to understand about SAML assertions is that they are very, very precise – you have to exactly and correctly match values between the assertion, the response and the metadata signature.  So when you have a problem you need to look for mis-matches.  Even when you think they aren’t there they likely are.  SAML, for all of its difficulty, is a well thought out, time tested standard.  It is more likely that you have an implementation problem than SAML itself being broken.&lt;/p&gt;

&lt;h1 id=&quot;example-of-a-debugging-flow&quot;&gt;Example of a Debugging Flow&lt;/h1&gt;

&lt;p&gt;When you start to do this a lot you need to think hard about how to make your debugging flow easier.  I burned a lot of time thinking that I was &lt;em&gt;almost&lt;/em&gt; there.  And if you’re almost there then why do you need to make debugging easy?  Well, honestly, I probably had another 50+ odd debugging sessions before I actually got there.  I finally ended up writing a simple rake task which generated the SAML assertion I needed to validate so instead of logging into a web ui, tailing logs, capturing base64 encoded data, pasting it into ruby as a string, decoding it and then using an editor to make it viewable, I could just type something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rake saml:go1 --trace
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I cannot express what a huge improvement that was.  So, even if you think you’re almost there, you’re likely not and you should work on your debugging tools.&lt;/p&gt;

&lt;p&gt;Oh and if you’re going to do it the hard way then Base64.decode64(encoded_assertion) is your very best friend.&lt;/p&gt;

&lt;h1 id=&quot;writing-your-own-idp&quot;&gt;Writing Your Own IdP&lt;/h1&gt;

&lt;p&gt;I’ve open sourced &lt;a href=&quot;https://github.com/fuzzygroup/saml_idp&quot;&gt;my fork of the Ruby IdP&lt;/a&gt; I based this all on and I’ll be updating it at least somewhat regularly.  I put a bunch of advice on the home page there.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 16:47:52 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/11/going-deeper-debugging-saml.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/11/going-deeper-debugging-saml.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Set a New URL in Chrome on New Tab</title>
        <description>&lt;p&gt;If you’ve ever used Chrome and wanted to have a particular url opened when you press COMMAND+T then this one is for you. This is an incredibly common use case that is mildly unbelievable that it &lt;a href=&quot;https://support.google.com/chrome/answer/95314?hl=en&quot;&gt;isn’t supported out of the box&lt;/a&gt;.  The default for Chrome when you press COMMAND+T seems to be “show me stuff I’ve used recently”.  And that’s one of those things that sounds great until:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You discover what you are getting for your birthday when you use your wife’s computer and you open a new tab&lt;/li&gt;
  &lt;li&gt;You learn about someone’s personal medical concerns as you are watching over their shoulder as they use their computer.  Erectile dysfunction?  I’m so sorry – I didn’t know that about a next door neighbor.&lt;/li&gt;
  &lt;li&gt;Your eldest child discovers what pornography his grandfather has recently browsed when he’s fixing his grandfather’s new computer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are all kinds of reasons why you don’t want to know what stuff someone has recently looked up online.  All kinds of reasons!&lt;/p&gt;

&lt;p&gt;Happily there is a Chrome Extension that solves this for you:&lt;/p&gt;

&lt;p&gt;https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna/related&lt;/p&gt;

&lt;p&gt;You can have this load any url when the new tab opens.  Personally I have it open a local home page which displays an enormous swath of resources that I use constantly.&lt;/p&gt;

&lt;h1 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h1&gt;

&lt;p&gt;The one massive disadvantage to this is that if you had to shut down Chrome forcibly, the yellow overlay which offers to restore all previous sessions will go away the first them you use this extension.  That nailed me hard the first time I used this.  Now I’ve adapted.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/chrome/2016/11/11/how-to-set-a-new-url-in-chrome-on-new-tab.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/chrome/2016/11/11/how-to-set-a-new-url-in-chrome-on-new-tab.html</guid>
        
        <category>chrome</category>
        
        <category>extension</category>
        
        
        <category>chrome</category>
        
      </item>
    
      <item>
        <title>Going Deeper Debugging SAML</title>
        <description>&lt;p&gt;This blog post expands on my current interest in &lt;a href=&quot;https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html&quot;&gt;SAML&lt;/a&gt; with a more detailed investigation of SAML, IdP versus SP initiation and how you actually debug it.  In the process of writing this, I reached out to two companies that support SAML in their products and I wanted to express a special thanks to Scott G at &lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt; who did an absolutely fantastic job of answering questions – honestly the best technical support I’ve received in years.  Kudos and thank you!&lt;/p&gt;

&lt;h1 id=&quot;tools-for-working-on-saml&quot;&gt;Tools for Working on SAML&lt;/h1&gt;

&lt;p&gt;Here are some of the tools for working on SAML that I recently learned about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby &lt;a href=&quot;https://github.com/digidentity/libsaml&quot;&gt;libsaml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Firefox SAML Tracer&lt;/li&gt;
  &lt;li&gt;Chrome SAML Tracer (not as good)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.samltool.com/decode.php&quot;&gt;The SAML Decoder&lt;/a&gt;.  The UI here sucks blue monkey chunks but it does the job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;not-all-vendors-are-created-equal&quot;&gt;Not All Vendors are Created Equal&lt;/h1&gt;

&lt;p&gt;When I worked with SAML, my context was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I was creating the IdP&lt;/li&gt;
  &lt;li&gt;One vendor (&lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt;) I worked with had us in a SP init role where they would push login stuff to us&lt;/li&gt;
  &lt;li&gt;Another vendor (who shall not be named) I worked with had us in an IdP init role where we would push login stuff to them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The experience between the two was night and day different.  The SP Init role vendor was a dream to work with and their product line was so astonishingly forgiving and pleasant that it would tell the errors and how far it got.  The other vendor, well, you had to ask your project manager for each error one at a time.&lt;/p&gt;

&lt;h2 id=&quot;examples-of-how-to-make-a-ui-that-uses-saml&quot;&gt;Examples of How to Make a UI that Uses SAML&lt;/h2&gt;

&lt;p&gt;Here are examples of a great SAML user interface for a developer.  This is from &lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt;.  Whether we get a success or a failure there’s enough context for the developer to actually understand what’s happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/great_saml_ui_mind_touch_saml_success.png&quot; alt=&quot;&quot; /&gt;
If you have the debug tracer on then you can see the whole SAML transaction&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_great_ui_shows_errors.png&quot; alt=&quot;&quot; /&gt;
If you hit errors part way thru a SAML transaction then you can see at least as far as you got.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_success_but_no_access.png&quot; alt=&quot;&quot; /&gt;
If you are requesting a page which requires administrative access you don’t have then you’ll get logged in but blocked access to the requested resource.  See below under “Local Users Haven’t Gone Away - Local Login Has Gone Away”&lt;/p&gt;

&lt;h1 id=&quot;debugging-a-saml-transaction&quot;&gt;Debugging a SAML Transaction&lt;/h1&gt;

&lt;p&gt;The very first thing you want to do if you’re debugging saml stuff is use FireFox and get the &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjS3Lbu3pPQAhVL0oMKHTOtAwgQFggdMAA&amp;amp;url=https%3A%2F%2Faddons.mozilla.org%2Fen-US%2Ffirefox%2Faddon%2Fsaml-tracer%2F&amp;amp;usg=AFQjCNHN7JDX_TkQIZOiPV2tMSVDyfgwkA&quot;&gt;SAML tracer&lt;/a&gt; plugin.  This tool shows you the SAML back and forth flow and it is absolutely brilliant:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_tracer.png&quot; alt=&quot;saml_tracer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When Scott G was helping me, his first suggestion was “Ok – go and get the FireFox SAML tracer” and with that we were off to the races.  Good tools always make things better and this was excellent.&lt;/p&gt;

&lt;p&gt;Note: There is also a &lt;a href=&quot;https://chrome.google.com/webstore/detail/saml-chrome-panel/paijfdbeoenhembfhkhllainmocckace?hl=en&quot;&gt;Chrome SAML tool&lt;/a&gt; which I haven’t tried yet.  It doesn’t appear to be as complete as SAML Tracer since it only supports post requests.&lt;/p&gt;

&lt;h1 id=&quot;local-users-havent-gone-away---local-login-has-gone-away&quot;&gt;Local Users Haven’t Gone Away - Local Login Has Gone Away&lt;/h1&gt;

&lt;p&gt;One thing to understand about SAML is that local users, at the level of the Service Provider, have not gone away.  What has gone away is &lt;strong&gt;local login&lt;/strong&gt; and &lt;strong&gt;local passwords&lt;/strong&gt;.  Your application will, almost certainly, still have a local set of users that you have to administer.  This becomes most apparent when you want to grant administrative rights to a user who has logged in via saml.  Even my SAML poster child for a great implementation, MindTouch, says this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Can I automatically seat users as pro members?
Users cannot be seated by a SAML assertion. A user must be explicitly seated by an administrator using the control panel. If automatic seating is required, this can be accomplished via our API.
&lt;a href=&quot;https://success.mindtouch.com/Documentation/MindTouchResponsive/Authentication/Authenticate_via_SSO/Implement_SAML_SSO?=&quot;&gt;Mindtouch Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The way that admin rights are granted to a SAML user is that the Service Provider has an admin tool where a user can be located by whatever is the unique identifier for a user (generally email or username) and then administrative rights are granted to the user.&lt;/p&gt;

&lt;h1 id=&quot;idp-versus-sp-initiation&quot;&gt;IdP versus SP Initiation&lt;/h1&gt;

&lt;p&gt;When you first get involved with SAML one of the initial things you’ll be asked is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IdP init or SP Init?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you may remember from my &lt;a href=&quot;https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html&quot;&gt;last post on SAML&lt;/a&gt;, IdP is the identity provider, the bit of software that owns the user information and SP is the service provider, the bit of software that us trying to use identity.&lt;/p&gt;

&lt;p&gt;This is a really, really big deal in the SAML community and what sounds like a network protocol question is actually a &lt;strong&gt;user flow&lt;/strong&gt; question that centers on a chicken and egg issue of what happens first.  The &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=saml%20idp%20vs%20sp%20initiated&quot;&gt;almost 7,000 results&lt;/a&gt; in Google for this very simple thing indicates just how many people are confused about it.  As always Stack Overflow has a &lt;a href=&quot;http://stackoverflow.com/questions/12779532/differences-between-sp-initiated-sso-and-idp-initiated-sso&quot;&gt;great page on this topic&lt;/a&gt; but let me try and paraphrase:&lt;/p&gt;

&lt;p&gt;For IdP Init:&lt;/p&gt;

&lt;p&gt;The best advice I can give you is read &lt;a href=&quot;http://saml.xml.org/wiki/idp-initiated-single-sign-on-post-binding&quot;&gt;this old web page&lt;/a&gt;.  When I found this and implemented it exactly this way then IdP Init just fell in to place for me.&lt;/p&gt;

&lt;p&gt;For SP init:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user starts on a url on the service provider and when access is needed they are pushed BACK to the IdP to a special login page which is run by the SAML side of the house.&lt;/li&gt;
  &lt;li&gt;A SAML assertion is generated and pushed to the SP.&lt;/li&gt;
  &lt;li&gt;If the assertion is valid the user is granted access.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s the rub from a technical perspective: &lt;strong&gt;IdP Init is MUCH MUCH HARDER&lt;/strong&gt;.  When you are doing IdP Init you need to do all the low level SAML junk yourself.  When you are doing SP init then they do the SAML junk.&lt;/p&gt;

&lt;p&gt;Just to illustrate how much work the SP versus IdP approach changes things, you should look at these two configuration UIs below.  One is for SP Init and one is for IdP Init.  The IdP Init one is trivial to configure – all you have to do is set a few urls.  The SP Init one is much harder to configure – it requires your certificate and more low level details.  But there’s an inversion here – the more complex it is to configure the SP, the less code you have to write yourself.  Repeat that after me – the less code you have to write.  I got the SP Init up and running in a matter of hours.  The IdP init took days.&lt;/p&gt;

&lt;h2 id=&quot;configuration-screen-when-you-are-the-idp-and-the-sp-wants-sp-init&quot;&gt;Configuration Screen when You Are the IdP And the SP wants SP Init&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/mindtouch_saml_config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-screen-when-you-are-the-idp-and-the-sp-wants-idp-init&quot;&gt;Configuration Screen when You Are the IdP and the SP wants IdP Init&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_idp_init_configuration.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;example-of-a-saml-assertion-when-you-are-the-idp-pushing-to-an-sp&quot;&gt;Example of a SAML Assertion When You Are the IdP Pushing to an SP&lt;/h1&gt;

&lt;p&gt;Here’s a full example of a SAML assertion.  This, if you updated the time stamps, would correctly validate (a few urls have been changed, however):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;samlp:Response xmlns:samlp=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot; ID=&quot;_a4f7e48e0-88e7-0134-4eb1-22000ab35e7b&quot; Version=&quot;2.0&quot; IssueInstant=&quot;2016-11-10T19:21:13.116Z&quot; Destination=&quot;https://community-staging.foo.com/auth/saml/SSO&quot; Consent=&quot;urn:oasis:names:tc:SAML:2.0:consent:unspecified&quot; &amp;gt;
  &amp;lt;Issuer xmlns=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;&amp;gt;http://sso.foo.com/saml/auth&amp;lt;/Issuer&amp;gt;
  &amp;lt;samlp:Status&amp;gt;
    &amp;lt;samlp:StatusCode Value=&quot;urn:oasis:names:tc:SAML:2.0:status:Success&quot;/&amp;gt;
  &amp;lt;/samlp:Status&amp;gt;
  &amp;lt;Assertion xmlns=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot; ID=&quot;_a4f7e4b30-88e7-0134-4eb1-22000ab35e7b&quot; IssueInstant=&quot;2016-11-10T19:21:13.116Z&quot; Version=&quot;2.0&quot;&amp;gt;
    &amp;lt;Issuer&amp;gt;http://sso.foo.com/saml/auth&amp;lt;/Issuer&amp;gt;
    &amp;lt;ds:Signature xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&amp;gt;
      &amp;lt;ds:SignedInfo xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&amp;gt;
        &amp;lt;ds:CanonicalizationMethod Algorithm=&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;/&amp;gt;
        &amp;lt;ds:SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;/&amp;gt;
        &amp;lt;ds:Reference URI=&quot;#_a4f7e4b30-88e7-0134-4eb1-22000ab35e7b&quot;&amp;gt;
          &amp;lt;ds:Transforms&amp;gt;
            &amp;lt;ds:Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;/&amp;gt;
            &amp;lt;ds:Transform Algorithm=&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;/&amp;gt;
          &amp;lt;/ds:Transforms&amp;gt;
          &amp;lt;ds:DigestMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#sha1&quot;/&amp;gt;
          &amp;lt;ds:DigestValue&amp;gt;IxemD9eHnPTFaA9Th4+2mQncXuI=&amp;lt;/ds:DigestValue&amp;gt;
        &amp;lt;/ds:Reference&amp;gt;
      &amp;lt;/ds:SignedInfo&amp;gt;
      &amp;lt;ds:SignatureValue&amp;gt;jrTDXKvv2wevCIIJ48gL1kIvgBwMMtl+RO6wligTVQp7iYglReUIKdnEZo9vuFucd+ocWkg7EQ3N3WWsZiBvyVGTJ80jC8QRTD+CtTEEMMVgtS2BkLFUv7gfH5yZ9Affk+qF+uAEK4Ij2Zy+0Zq6jleQlUTyCoZNDOFzNF1zWHo=&amp;lt;/ds:SignatureValue&amp;gt;
      &amp;lt;KeyInfo xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&amp;gt;
        &amp;lt;ds:X509Data&amp;gt;
          &amp;lt;ds:X509Certificate&amp;gt;MIICrzCCAhgCCQCAZjKq3Nb4xTANBgkqhkiG9w0BAQsFADCBmzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRUwEwYDVQQHDAxSZWR3b29kIENpdHkxEDAOBgNVBAoMB0ludGVybmExFDASBgNVBAsMC0VuZ2luZWVyaW5nMRowGAYDVQQDDBFzc28uaW50ZXJhbmlhLmNvbTEkMCIGCSqGSIb3DQEJARYVc2pvaG5zb25AaW50ZXJhbmEuY29tMB4XDTE2MTEwMzExMDAwN1oXDTE3MTEwMzExMDAwN1owgZsxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEVMBMGA1UEBwwMUmVkd29vZCBDaXR5MRAwDgYDVQQKDAdJbnRlcm5hMRQwEgYDVQQLDAtFbmdpbmVlcmluZzEaMBgGA1UEAwwRc3NvLmludGVyYW5pYS5jb20xJDAiBgkqhkiG9w0BCQEWFXNqb2huc29uQGludGVyYW5hLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1NaloseOtTva09VahTNozzHbO6rpuT7/FpQOi3eHKWwU4zHgEvOI2biUkTRYocZkunilBxqtTrCgbDay4MqXFykt+lKujnV10OG4+cVUxds8a50nkHXVbpMC48m5gfkUfut4EIURE5RHjLJ/nCpgC67QUl1/ztkFvJaNDJeWoQMCAwEAATANBgkqhkiG9w0BAQsFAAOBgQCTkZmrFEhmW4MoX6OovuKwCNwQBWPXju/po8d7YTVpRf7tIfGsD/4x8jBgUaeSPQ4QXCMQqB6244win3u1veVQd5UYRP37RteEP+F302Gw2MbOl2fYUQoSwINayWA/CinYBQAlzTAJovIsc/P8dNFUsSQzqme2aF1nIuH3h/8/Kg==&amp;lt;/ds:X509Certificate&amp;gt;
        &amp;lt;/ds:X509Data&amp;gt;
      &amp;lt;/KeyInfo&amp;gt;
    &amp;lt;/ds:Signature&amp;gt;
    &amp;lt;Subject&amp;gt;
      &amp;lt;NameID Format=&quot;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&quot;&amp;gt;scott_johnson&amp;lt;/NameID&amp;gt;
      &amp;lt;SubjectConfirmation Method=&quot;urn:oasis:names:tc:SAML:2.0:cm:bearer&quot;&amp;gt;
        &amp;lt;SubjectConfirmationData NotOnOrAfter=&quot;2016-11-10T19:25:13.116Z&quot; Recipient=&quot;https://community-staging.foo.com/auth/saml/SSO&quot;/&amp;gt;
      &amp;lt;/SubjectConfirmation&amp;gt;
    &amp;lt;/Subject&amp;gt;
    &amp;lt;Conditions NotBefore=&quot;2016-11-10T19:21:13.116Z&quot; NotOnOrAfter=&quot;2016-11-10T20:07:13.116Z&quot;&amp;gt;
      &amp;lt;AudienceRestriction&amp;gt;
        &amp;lt;Audience&amp;gt;https://community-staging.foo.com/auth/saml&amp;lt;/Audience&amp;gt;
      &amp;lt;/AudienceRestriction&amp;gt;
    &amp;lt;/Conditions&amp;gt;
    &amp;lt;AttributeStatement&amp;gt;
      &amp;lt;Attribute Name=&quot;email&quot; NameFormat=&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&quot; FriendlyName=&quot;email&quot;&amp;gt;
        &amp;lt;AttributeValue&amp;gt;sjohnson@foo1.com&amp;lt;/AttributeValue&amp;gt;
      &amp;lt;/Attribute&amp;gt;
      &amp;lt;Attribute Name=&quot;first_name&quot; NameFormat=&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&quot; FriendlyName=&quot;first_name&quot;&amp;gt;
        &amp;lt;AttributeValue&amp;gt;Scott&amp;lt;/AttributeValue&amp;gt;
      &amp;lt;/Attribute&amp;gt;
      &amp;lt;Attribute Name=&quot;last_name&quot; NameFormat=&quot;urn:oasis:names:tc:SAML:2.0:attrname-format:uri&quot; FriendlyName=&quot;last_name&quot;&amp;gt;
        &amp;lt;AttributeValue&amp;gt;Johnson&amp;lt;/AttributeValue&amp;gt;
      &amp;lt;/Attribute&amp;gt;
    &amp;lt;/AttributeStatement&amp;gt;
    &amp;lt;AuthnStatement AuthnInstant=&quot;2016-11-10T19:21:13.116Z&quot; SessionIndex=&quot;_a4f7e4b30-88e7-0134-4eb1-22000ab35e7b&quot;&amp;gt;
      &amp;lt;AuthnContext&amp;gt;
        &amp;lt;AuthnContextClassRef&amp;gt;urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport&amp;lt;/AuthnContextClassRef&amp;gt;
      &amp;lt;/AuthnContext&amp;gt;
    &amp;lt;/AuthnStatement&amp;gt;
  &amp;lt;/Assertion&amp;gt;
&amp;lt;/samlp:Response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The important thing to understand about SAML assertions is that they are very, very precise – you have to exactly and correctly match values between the assertion, the response and the metadata signature.  So when you have a problem you need to look for mis-matches.  Even when you think they aren’t there they likely are.  SAML, for all of its difficulty, is a well thought out, time tested standard.  It is more likely that you have an implementation problem than SAML itself being broken.&lt;/p&gt;

&lt;h1 id=&quot;example-of-a-debugging-flow&quot;&gt;Example of a Debugging Flow&lt;/h1&gt;

&lt;p&gt;When you start to do this a lot you need to think hard about how to make your debugging flow easier.  I burned a lot of time thinking that I was &lt;em&gt;almost&lt;/em&gt; there.  And if you’re almost there then why do you need to make debugging easy?  Well, honestly, I probably had another 50+ odd debugging sessions before I actually got there.  I finally ended up writing a simple rake task which generated the SAML assertion I needed to validate so instead of logging into a web ui, tailing logs, capturing base64 encoded data, pasting it into ruby as a string, decoding it and then using an editor to make it viewable, I could just type something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rake saml:go1 --trace
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I cannot express what a huge improvement that was.  So, even if you think you’re almost there, you’re likely not and you should work on your debugging tools.&lt;/p&gt;

&lt;p&gt;Oh and if you’re going to do it the hard way then Base64.decode64(encoded_assertion) is your very best friend.&lt;/p&gt;

&lt;h1 id=&quot;accept-that-youre-not-going-to-understand-everything-and-just-try-it&quot;&gt;Accept that You’re Not Going to Understand Everything and Just Try It&lt;/h1&gt;

&lt;p&gt;One of the better pieces of advice that I can give you is that you can have SAML issues that a vendor swears up and down &lt;strong&gt;will not work&lt;/strong&gt; and they still might.  I had a situation where the vendor swore up, down, right, left and sideways that my signatures were wrong and my IdP was at fault.  This was the absolutely worst type of technical support situation where neither party was willing to admit fault.  Things had been checked, re-checked and checked again and everything seemed to be in order.  Finally I thought &lt;em&gt;screw it&lt;/em&gt; and just tried to authenticate and &lt;strong&gt;whammo&lt;/strong&gt; it just plain worked.&lt;/p&gt;

&lt;p&gt;To this day the vendor can’t explain why.  Here’s the XML / Java stack trace in case anyone can tell me why given that the signatures here don’t verify but access is still granted.  Personally I would think that you wouldn’t validate an untrusted credential but maybe this is a common thing???&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;   2016-11-10 14:33:04,007 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ty.trust.ExplicitKeyTrustEvaluator - Successfully validated untrusted credential against trusted key
&amp;lt;&amp;lt;   2016-11-10 14:33:04,007 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ture.impl.BaseSignatureTrustEngine - Successfully established trust of KeyInfo-derived credential
&amp;lt;&amp;lt;   2016-11-10 14:33:04,007 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ture.saml.LiaWebSSOProfileConsumer - confirmation method: urn:oasis:names:tc:SAML:2.0:cm:bearer
&amp;lt;&amp;lt;   2016-11-10 14:33:04,007 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ture.saml.LiaWebSSOProfileConsumer - validating against SP SSO Descriptor (for recipient: https://community-staging.interania.com/auth/saml/SSO)
&amp;lt;&amp;lt;   2016-11-10 14:33:04,007 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ture.saml.LiaWebSSOProfileConsumer - does urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST match urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST ?
&amp;lt;&amp;lt;   AND https://community-staging.interania.com/auth/saml/SSO against https://community-staging.interania.com/auth/saml/SSO ?
&amp;lt;&amp;lt;   2016-11-10 14:33:04,008 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] .
.
.
.
.
org.springframework.security.web.context.HttpSessionSecurityContextRepository$Servlet3SaveToSessionRequestWrapper
&amp;lt;&amp;lt;   2016-11-10 14:33:04,318 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ature.saml.LiaSAMLProcessingFilter - ssoParams.settings={profile.name_first=Scott, profile.name_last=Johnson}
&amp;lt;&amp;lt;   2016-11-10 14:33:04,318 -0800 [937-exec-5] DEBUG  [cid=gqaoh85646, tx=9ab899b9-acd9-43cc-af52-e00f95efe725, rh=54.224.44.177, userId=] ature.saml.LiaSAMLProcessingFilter - Authentication success. Updating SecurityContextHolder to contain: lithium.common.feature.saml.AuthenticationDetailsWrapper@1db556ec: Principal: CoreUser[uid=29,login=scott_johnson]; Credentials: [PROTECTED]; Authenticated: true; Details: lithium.lia.security.authentication.sso.AuthenticationDetails@53d2a043; Not granted any authorities
&amp;lt;&amp;lt;   2016-11-10 14:33:04,523 -0800 [on Task-30] DEBUG  [cid=, tx=, rh=, userId=-1] otificationServiceEventManagerImpl - event toString for transaction 5ea86fe8-f180-4ee9-82b3-c57ac794523e is: UserRankEvent[rankId=24,userId=29,timeOfAssignment=1478817184501,eventType=USER_RANK_EVENT,useMessageChannel=true,headers=BaseMessageHeaders[tenantId=e0f6dd3c-7987-4346-b4d0-2f5ef70fa74b,messageSentTime=1478817184512,transactionId=5ea86fe8-f180-4ee9-82b3-c57ac794523e,useRequestTimeforWriteTime=true,sourceEndpoint=http://sjc1sapp08.sj.lithium.com:8937,liaCommunityName=gqaoh85646]]
&amp;lt;&amp;lt;   2016-11-10 14:33:04,558 -0800 [on Task-30] INFO   [cid=, tx=, rh=, userId=-1] otificationServiceEventManagerImpl - posted userRankEvent event to NS
&amp;lt;&amp;lt;   2016-11-10 14:33:04,622 -0800 [ontainer-4] DEBUG  [cid=, tx=, rh=, userId=-1] tionServiceNotificationManagerImpl - processing notification directive for the event with the original UUID of 5ea86fe8-f180-4ee9-82b3-c57ac794523e and original type of USER_RANK_EVENT
&amp;lt;&amp;lt;   2016-11-10 14:33:04,625 -0800 [ontainer-4] DEBUG  [cid=, tx=, rh=, userId=-1] tionServiceNotificationManagerImpl - processing notifications for a total of 1 interested entities
&amp;lt;&amp;lt;   2016-11-10 14:33:04,625 -0800 [ontainer-4] DEBUG  [cid=, tx=, rh=, userId=-1] tionServiceNotificationManagerImpl - processing 1 notifications for entity with type USER and id 29
&amp;lt;&amp;lt;   2016-11-10 14:33:04,625 -0800 [ontainer-4] DEBUG  [cid=, tx=, rh=, userId=-1] tionServiceNotificationManagerImpl - resolving notification setting for notification
&amp;lt;&amp;lt;   2016-11-10 14:33:04,626 -0800 [ontainer-4] DEBUG  [cid=, tx=, rh=, userId=-1] tionServiceNotificationManagerImpl - found notification settings on the notification directive payload: lithium.domain.subscriptions.settings.impl.SubscriptionTemplateImpl@247a1a7b[emailDistributionSettings=lithium.domain.subscriptions.settings.impl.DistributionChannelSettingsImpl@7cd9d117[enabled=true,enabedIsDefault=false,distributionFrequency=IMMEDIATE],type=RANK,customKey=&amp;lt;null&amp;gt;,templateMetadata={newsFeedExclusionBoolean=false},headers=&amp;lt;null&amp;gt;]
&amp;lt;&amp;lt;   2016-11-10 14:33:04,626 -0800 [ontainer-4] DEBUG  [cid=, tx=, rh=, userId=-1] tionServiceNotificationManagerImpl - Notification of type RANK, for userID 29, transactionId 5ea86fe8-f180-4ee9-82b3-c57ac794523e will be sent immediately # Writing Your Own IdP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve open sourced &lt;a href=&quot;https://github.com/fuzzygroup/saml_idp&quot;&gt;my fork of the Ruby IdP&lt;/a&gt; I based this all on and I’ll be updating it at least somewhat regularly.  I put a bunch of advice on the home page there.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/saml/2016/11/11/going-deeper-debugging-saml.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/saml/2016/11/11/going-deeper-debugging-saml.html</guid>
        
        <category>saml</category>
        
        <category>ruby</category>
        
        <category>debugging</category>
        
        <category>mindtouch</category>
        
        <category>xml</category>
        
        <category>idp</category>
        
        <category>sp</category>
        
        <category>assertion</category>
        
        <category>saml_idp</category>
        
        
        <category>saml</category>
        
      </item>
    
      <item>
        <title>Ruby Testing - Mocks Versus Stubs</title>
        <description>
</description>
        <pubDate>Thu, 10 Nov 2016 11:49:19 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/10/ruby-testing-mocks-versus-stubs.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/10/ruby-testing-mocks-versus-stubs.html</guid>
        
        
      </item>
    
      <item>
        <title>Simple JavaScript Basics</title>
        <description>&lt;h1 id=&quot;how-do-i-know-if-jquery-is-installed&quot;&gt;How Do I Know if JQuery is Installed&lt;/h1&gt;
&lt;p&gt;$(‘*’)
# How Do I Submit a Form on Page Load&lt;/p&gt;
&lt;form method=&quot;post&quot; action=&quot;&amp;lt;%=SAML_URLS[:lithium_endpoint_consume]%&amp;gt;&quot; id=&quot;sso_form&quot;&gt; 
&lt;input type=&quot;hidden&quot; name=&quot;SAMLResponse&quot; value=&quot;&amp;lt;%=@SAMLResponse%&amp;gt;&quot; /&gt; 
&lt;input type=&quot;hidden&quot; name=&quot;RelayState&quot; value=&quot;&amp;lt;%=@RelayState%&amp;gt;&quot; /&gt; 
&lt;input type=&quot;submit&quot; value=&quot; Go &quot; id=&quot;form_submit&quot; /&gt; 
&lt;/form&gt;
&lt;script&gt;
  $(document).ready(function(){
    $('#sso_form').submit();
  });
&lt;/script&gt;

&lt;h1 id=&quot;how-do-i-submit-a-form-with-javascript&quot;&gt;How Do I Submit a Form with JavaScript&lt;/h1&gt;
&lt;script&gt;
$('#form_submit').click(function(e){
  e.preventDefault();
  $('#sso_form').submit();  
});
&lt;/script&gt;

</description>
        <pubDate>Thu, 10 Nov 2016 11:49:04 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/10/simple-javascript-basics.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/10/simple-javascript-basics.html</guid>
        
        
      </item>
    
      <item>
        <title>ScottG - The Model of a Support Technician</title>
        <description>&lt;p&gt;I don’t think I’m wrong in saying that working in technical support is a lot like working in plumbing.  Now bear in mind that I’m not saying that in an insulting fashion by any means.  Specifically:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Disclaimer:  I grew up working in a hardware store.  My first “technical training” was selling to people like plumbers and electricians.  I have tremendous respect for plumbers.  Also in the class of random skills, I’m a certified outboard motor technician.  Suffice it to say that I’m a believer in getting your hands dirty.  Finally I’m fairly certain that the plumber I use makes more money than I do.  Also I’ve run the help desk before and I’ve been a support technician myself (Level 1 and Level 2).&lt;/li&gt;
  &lt;li&gt;Both professions are about getting you hands dirty and mucking about.&lt;/li&gt;
  &lt;li&gt;Both professions require you to be hands on, thorough and detailed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re a bad plumber then well pipes burst and things leak and you have unhappy customers.  Similarly if you are a bad support technician then problems don’t get solved and you have unhappy customers.  If you are a good plumber then you’ll have happy customers forever.  Similarly if you are a good support technician then you’ll have happy customers.  I am a happy customer.  In fact I’m so happy that I’m writing a whole blog post about a recent support encounter and the fantastic support I got from a technician named ScottG at a company called &lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;scottg---an-excellent-support-technican&quot;&gt;ScottG - An Excellent Support Technican&lt;/h1&gt;

&lt;p&gt;So the situation was that I was working with SAML which is a notoriously finicky technology.  Just to give you an idea how finicky there are 8.1 million hits on Google for &lt;a href=&quot;https://www.google.com/search?q=h.264+video+compression+algorithm&amp;amp;oq=h.26&amp;amp;aqs=chrome.0.69i59j69i57j5j0l3.2887j0j3&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot;&gt;H.264 video compression algorithm&lt;/a&gt; and there are 4.6 million hits on Google for &lt;a href=&quot;https://www.google.com/search?q=h.264+video+compression+algorithm&amp;amp;oq=h.26&amp;amp;aqs=chrome.0.69i59j69i57j5j0l3.2887j0j3&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8#q=saml&quot;&gt;SAML&lt;/a&gt;.  SAML is a hard thing but it shouldn’t be half as hard as decompressing video but that’s how many problems people have with SAML.&lt;/p&gt;

&lt;h1 id=&quot;it-helps-to-have-an-excellent-product-or-excellent-aspect-to-your-product&quot;&gt;It Helps to Have an Excellent Product or Excellent Aspect to Your Product&lt;/h1&gt;
&lt;p&gt;# It Helps to Have an Organization Run Support Correctly&lt;/p&gt;

&lt;p&gt;One of&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 04:28:18 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/technical_support/2016/11/09/scottg-the-model-of-a-support-technician.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/technical_support/2016/11/09/scottg-the-model-of-a-support-technician.html</guid>
        
        <category>technical_support</category>
        
        <category>mindtouch</category>
        
        
        <category>technical_support</category>
        
      </item>
    
      <item>
        <title>Extending Devise</title>
        <description>&lt;p&gt;Devise is now close to a standard in the Rails community.  And, despite some concerns that I generally have about it, Devise is a solid piece of software with much to recommend it.  My concerns are always around extending it and I thought that perhaps I should actually document how to extend Devise so I don’t have to rely on their &lt;a href=&quot;https://github.com/plataformatec/devise/wiki&quot;&gt;wiki&lt;/a&gt; (which is oddly incorrect in places) – expand it to all pages and look at the number of things all named&lt;/p&gt;

&lt;h1 id=&quot;branching-to-custom-urls-after-specific-actions&quot;&gt;Branching to Custom Urls After Specific Actions&lt;/h1&gt;

&lt;p&gt;The simple way for this is to define a custom action in ApplicationController.  Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def after_sign_in_path_for(resource) 
  return &quot;/users&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Theoretically any path should be able to be returned&lt;/p&gt;

&lt;h1 id=&quot;generating-your-own-controllers&quot;&gt;Generating Your Own Controllers&lt;/h1&gt;

&lt;p&gt;While the after_sign_in_path_for approach works the problem is that if you want to do something really custom then you need your own controller.  Let’s say you want to deeply hook into login and registration.  Then you need to generate new controllers as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails generate devise:controllers users
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will produce this output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Running via Spring preloader in process 59017
create  app/controllers/users/confirmations_controller.rb
create  app/controllers/users/passwords_controller.rb
create  app/controllers/users/registrations_controller.rb
create  app/controllers/users/sessions_controller.rb
create  app/controllers/users/unlocks_controller.rb
create  app/controllers/users/omniauth_callbacks_controller.rb    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s more than we actually want.  There are options that let you specify exactly which controller you want but I didn’t have a lot of luck making them work so I just deleted what I didn’t want.&lt;/p&gt;

&lt;p&gt;Usually you find out that you need this after you’ve already gotten Devise working and have a custom set of routes.  In my case I had this set of routes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devise_for :users, path: &quot;auth&quot;, path_names: {sign_in: 'login', 
                                              sign_out: 'logout',
                                              password: 'secret', 
                                              confirmation: 'verification', 
                                              unlock: 'unblock', 
                                              registration: 'register', 
                                              sign_up: 'cmon_let_me_in'}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After generating my controllers, here’s how I changed the routes above to integrate:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devise_for :users, path: &quot;auth&quot;, controllers: {
  sessions: 'users/sessions',
  registrations: 'users/registrations'
},
path_names:  {
  sign_in: 'login',
  sign_out: 'logout',
  password: 'secret',
  confirmation: 'verification',
  unlock: 'unblock',
  registration: 'register',
  sign_up: 'cmon_let_me_in'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now once you generate your controllers, Devise will give you a nice stub showing that you need to uncomment an action to revise it and super is there indicating that you can mostly just inherit the functionality you want.  You can then add your own code either before or after the super.  If you’re uncomfortable with super then you can always go and get the full devise controller code from Github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plataformatec/devise/blob/master/app/controllers/devise/registrations_controller.rb&quot;&gt;Registrations Controller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plataformatec/devise/blob/master/app/controllers/devise/sessions_controller.rb&quot;&gt;Sessions Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: In case it wasn’t obvious the registrations controller creates accounts and the sessions controller creates logins.  Both are restful so, for example, sessions#new is the login form and sessions#create is the actual login itself.&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/11/07/extending-devise.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/11/07/extending-devise.html</guid>
        
        <category>rails</category>
        
        <category>devise</category>
        
        <category>login</category>
        
        <category>authorization</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Advice for Chris Kimball of Milk Street</title>
        <description>
</description>
        <pubDate>Sun, 06 Nov 2016 12:14:45 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/06/advice-for-chris-kimball-of-milk-street.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/06/advice-for-chris-kimball-of-milk-street.html</guid>
        
        
      </item>
    
  </channel>
</rss>
