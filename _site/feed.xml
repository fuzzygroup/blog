<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Mar 2017 05:49:40 -0400</pubDate>
    <lastBuildDate>Sun, 12 Mar 2017 05:49:40 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Using ngrok for Web Development</title>
        <description>
</description>
        <pubDate>Sat, 11 Mar 2017 17:22:12 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/11/using-ngrok-for-web-development.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/11/using-ngrok-for-web-development.html</guid>
        
        
      </item>
    
      <item>
        <title>There's Always A Reason</title>
        <description>&lt;p&gt;So the side project I’ve been referring to&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Mar 2017 03:07:57 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/software_engineering/2017/03/09/there-s-always-a-reason.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_engineering/2017/03/09/there-s-always-a-reason.html</guid>
        
        <category>software_engineering</category>
        
        <category>developer_psychology</category>
        
        <category>cartazzi</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>When Sidekiq Makes You Nuts Check Your Types</title>
        <description>&lt;p&gt;Much of what I do at the job I’m in the process of leaving is large scale data processing and it is all done through queues and &lt;a href=&quot;http://www.sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt;.  I generally do it with a method call that looks like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CompileWorker.perform_async(id)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today though I had to do it and pass in a date to my method call so I had this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CompileWorker.perform_async(id, date)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I got crazy, crazy, crazy results – my object would get about 10 lines into the call and then … nothing.  I’d test my method line by line in rails console on production and it would work perfectly.  I even went so far as to isolate it down to one Sidekiq thread and one redis server (on local host no less to make sure that no other sidekiq worker was messing with things).  And nothing made any difference.  Finally I realized that the crucial difference was actually that I was passing in a date.  Here’s the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t pass symbols, named parameters or complex Ruby objects (like Date or Time!) as those will not survive the dump/load round trip correctly. &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Best-Practices&quot;&gt;More&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, sure enough, when I removed the date by treating it as an internal constant, it worked perfectly.  Here’s the workaround I came up with:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then I call it as&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CompileWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows my internal use of the compile method where a date is passed in normally to function without issue but to work correctly when called in an asynchronous manner.&lt;/p&gt;

&lt;p&gt;I actually don’t have a problem with Sidekiq working in this fashion but it does bother me that while the Sidekiq documentation warns about this, there’s no error thrown or alert raised.  Now it might be impossible to pull off an error message but this is a damn easy mistake to make.  I knew about the ActiveRecord object limitation in Sidekiq but didn’t have a clue that it extended to a simple date.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/03/08/when-sidekiq-makes-you-nuts-check-your-types.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/03/08/when-sidekiq-makes-you-nuts-check-your-types.html</guid>
        
        <category>rails</category>
        
        <category>sidekiq</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Side Project Validation - Finally</title>
        <description>&lt;p&gt;Note: I wrote this blog post a number of weeks ago when this happened (about 1 minute after) but there was no point to publishing it until the product launched.&lt;/p&gt;

&lt;p&gt;Developing a side project is a damn lonely thing.  You sit in front of a blank code editor with no code to start and then you literally &lt;strong&gt;will&lt;/strong&gt; it into existence.  Often you don’t even discuss it with the people in your life – perhaps the idea is too ludicrous or perhaps past side projects haven’t panned out and you don’t want the scrutiny.  Or perhaps you have kids in which case how the kids did in school the previous day is far, far more relevant than minor code triumphs.  But there is always that spark when you realize “Oh man – this might really work”.  That just happened for me.  It was 3:07 am on Tuesday March 7th.&lt;/p&gt;

&lt;p&gt;Cartazzi, as you know by now, is a personal analytics dashboard that helps you succeed online with one click analytics.  Like any data centric product I’ve ever built, Cartazzi is built from real world data.  I was looking at the home page for my friend &lt;a href=&quot;http://www.davidrovics.com&quot;&gt;David Rovics&lt;/a&gt; and noticed that he was a &lt;a href=&quot;http://www.songkick.com/artists/152746-david-rovics&quot;&gt;SongKick user&lt;/a&gt;.  I had no idea what SongKick was but Cartazzi is built to support the analytics sources people actually use and someone linking to something on their home page is a strong signal to us to support it.  So I follow the link and discover that David has 847 fans.  Ok then – that’s a metric and that’s something I should be able to support.  So I go through my “build a new parser dance” for Cartazzi and scaffold together a new parser.  At this point I’ve implemented 42 of these things comprising almost 4K lines of code so I’m pretty good at it.  About 5 minutes later I have a new PageSongKickArtist parser object and it works out of the gate.  These things working the first time wasn’t a surprise by this point.&lt;/p&gt;

&lt;p&gt;I do my normal testing dance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start with the data I began with and confirm that it works&lt;/li&gt;
  &lt;li&gt;find another instance of this type of data - I found the band &lt;a href=&quot;http://www.songkick.com/artists/5183683-houndmouth&quot;&gt;HoundMouth&lt;/a&gt; by just randomly clicking around SongKick&lt;/li&gt;
  &lt;li&gt;I notice that HoundMouth has 39,058 fans&lt;/li&gt;
  &lt;li&gt;I build a parser object in Rails console and verify the data – and it increased to 39,059!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s not a glitch.  It is absolute confirmation that what I built for Cartazzi is on point and will work.&lt;/p&gt;

&lt;p&gt;And then I bandsintown&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 04:15:26 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/cartazzi/2017/03/07/side-project-validation-finally.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/cartazzi/2017/03/07/side-project-validation-finally.html</guid>
        
        <category>cartazzi</category>
        
        
        <category>cartazzi</category>
        
      </item>
    
      <item>
        <title>The Cartazzi Parser Dance</title>
        <description>&lt;p&gt;wget the url&lt;/p&gt;

&lt;p&gt;bundle exec rails g page_parser page_song_kick_artist&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Mar 2017 03:49:42 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/07/the-cartazzi-parser-dance.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/07/the-cartazzi-parser-dance.html</guid>
        
        
      </item>
    
      <item>
        <title>Using Ansible as a Development Tool with Rails and AWS for Large Scale Data Processing Automation</title>
        <description>&lt;p&gt;Man it was a hell of a busy week last week.  Here’s an illustration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/me/appdatallc/ansible-clean [master|✚ 1…1]
01:34 $ find . -name '*.yml' | xargs wc -l
...
283 total

~/me/appdatallc/ansible_monthly [master|✔]
find . -name '*.yml' | xargs wc -l
...
 1066 total
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yep.  Starting last week, from Monday morning to Friday afternoon, working with &lt;a href=&quot;http://winstonkotzan.com/&quot;&gt;Winston&lt;/a&gt; to teach him &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;, I authored almost 1,300 lines of Ansible.&lt;/p&gt;

&lt;p&gt;The really interesting part of this was using Ansible as a &lt;strong&gt;development tool&lt;/strong&gt; with Rails.  The use case in question was automating production of large scale data processing jobs.  Example what these jobs did is highly proprietary but they basically had a shared architecture like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Execute on a developer’s workstation&lt;/li&gt;
  &lt;li&gt;Verify state of the application by calling an API server side&lt;/li&gt;
  &lt;li&gt;Change the thread count as needed for the right amount of concurrency&lt;/li&gt;
  &lt;li&gt;Clear the rails log&lt;/li&gt;
  &lt;li&gt;Set the right redis server to isolate sidekiq from other concurrently executing jobs&lt;/li&gt;
  &lt;li&gt;Clear the Sidekiq log&lt;/li&gt;
  &lt;li&gt;Make an AMI of the EC2 instance&lt;/li&gt;
  &lt;li&gt;Launch N instances of the AMI to do the needed data processing&lt;/li&gt;
  &lt;li&gt;Fill the Sidekiq queue&lt;/li&gt;
  &lt;li&gt;Display the count of items in the Sidekiq queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were a series of 8 different data processing jobs, 6 of which matched the above list and two of which were slightly different.  Each of the stages above was represented by a small Ansible playbook and the coordination between each of the playbooks was handled by a bash script which called each of the stages in succession.&lt;/p&gt;

&lt;p&gt;Classically Ansible is a devops tool for provisioning boxes but last week really illustrated to me the power of &lt;strong&gt;Ansible as a development tool&lt;/strong&gt;.  Ansible’s idempotent, state based approach of modeling the world as a succession of yaml files can definitely be funky but the model works.&lt;/p&gt;

&lt;h1 id=&quot;adding-status-tracking&quot;&gt;Adding Status Tracking&lt;/h1&gt;

&lt;p&gt;Early Friday I realized that once these jobs were running, the developer running them would need to understand the status of the job on a highly discrete level.  Historically I’ve done this by directly querying the database and just &lt;em&gt;understanding&lt;/em&gt; the objects involved and the tables that represent them.  But that comes from a huge amount of internal domain knowlege that Winston didn’t have.&lt;/p&gt;

&lt;p&gt;This status would need to include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amount of data left in the sidekiq queue&lt;/li&gt;
  &lt;li&gt;Amount of records produced for each job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure in an idealized world this would be a pretty, graphical dashboard available on the web to all people in the company.  Practically speaking, the following is sufficient:&lt;/p&gt;

&lt;p&gt;TASK [run_rake_task_and_show_output : debug] &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*****
ok: [monthly-categorization] =&amp;gt; {
    “msg”: [
        “in LoadError rescue statement”,
        “Queue Size = 0”,
        “Total categorization records = 271408”,
        “Total distinct entities in categorization = 6783”
    ]
}&lt;/p&gt;

&lt;p&gt;The ability to run this at any point in the process is hugely useful and here’s an example of how simple that code can be.  There are three key pieces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ansible Playbook - a playbook which defined a Rake namespace and task to be executed&lt;/li&gt;
  &lt;li&gt;Ansible Role - essentially a function which executes the Rake namespace and task, capturing its output and displaying it&lt;/li&gt;
  &lt;li&gt;Rake Task - the business logic of what to analyze&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ansible-playbook&quot;&gt;Ansible Playbook&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-ansible&quot;&gt;    - hosts: monthly-categorization
      become: yes
      remote_user: ubuntu
      vars:
        - rake_task: &quot;monthly:echo_stats&quot;
      roles:
        - { role: run_rake_task_and_show_output }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;ansible-role&quot;&gt;Ansible Role&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-ansible&quot;&gt;    - name: run a rake task on the target box
      shell: 
        chdir: /var/www/apps/rails_app/current
        cmd:  RAILS_ENV=production bundle exec rake 
      register: result

    - debug:
        msg: &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My first pass on all this had the output being listed as a jumbled mess (typical to captured output by Ansible).  Winston correctly pointed out something to the effect of “Looks a bit like arse”.  Well a quick google led to this &lt;a href=&quot;http://stackoverflow.com/questions/34188167/ansible-print-message-debug-msg-line1-n-var2-n-line3-with-var3&quot;&gt;StackOverflow post&lt;/a&gt; where this technique:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;msg: “”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;could be applied.  In our case we had it as result so it was just a matter of replacing msg with result.stdout.  And, almost magically, that jumbled mess came into razor sharp focus.  My thanks to Winston for recognizing that this was an issue.  I was so close to the problem that I didn’t even perceive it.&lt;/p&gt;

&lt;h2 id=&quot;rake-task-being-called-by-playbook&quot;&gt;Rake task being called by Playbook:&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:echo_stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;data_shard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ShardedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shard_for_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;distinct_entities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_shard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entity_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
    
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Queue Size = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sidekiq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Total categorization records from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_shard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;    
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Total distinct entity_ids in categorization from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distinct_entities&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A more complex example of this based on Ruby meta-programming is shown below:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:echo_other_stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:environment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rating_estimates&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;type_estimates&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;category_estimates&quot;&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:job_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Table: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; for Processing Run &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ProcessingRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This approach was based on some internal analysis logic where we had an array of table names that we used for generating some SQL code dynamically.  It took about 5 minutes to convert that list of tables into this.  The table.classify.constantize call takes the name of the table and first converts it to a model name (classify) and the converts that model name to a constant that represents the class itself.  Once you have a class that inherits from ActiveRecord you can then call a .where statement to get a count.  Finally you inject the original table name and the count back into a hash to store the results.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’ve been managing this job production process for almost two years now and most of my approaches to making it better have evolved around different rake tasks and some fairly bad internal documentation.  By pulling Ansible into this, for the first time, we actually have a solution which:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goes end to end&lt;/li&gt;
  &lt;li&gt;Automates tasks like AMI creation and instance launching historically done with the AWS developer console&lt;/li&gt;
  &lt;li&gt;Allows use of N instances to process the data&lt;/li&gt;
  &lt;li&gt;Fully uses our existing code base without change – I can’t emphasize this point enough&lt;/li&gt;
  &lt;li&gt;Displays status on the running jobs at any point&lt;/li&gt;
  &lt;li&gt;Is broken down into small, modular chunks – each of our playbooks are maybe 10 lines in total&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ansible isn’t how I expected to solve this problem but its approach really, really worked – keep it in mind.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/03/06/using-ansible-as-a-development-tool-with-rails.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/03/06/using-ansible-as-a-development-tool-with-rails.html</guid>
        
        <category>ansible</category>
        
        <category>aws</category>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>shell</category>
        
        <category>bash</category>
        
        <category>sidekiq</category>
        
        <category>devops</category>
        
        <category>meta_programming</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>CloudBleed Revisited</title>
        <description>&lt;p&gt;If you’re reading this then you’re almost certainly a developer (or a friend; Hi Dave West) and if so I would urge you to listen to &lt;a href=&quot;https://softwareengineeringdaily.com/2017/03/04/cloudbleed-and-sha-1-collision-with-max-burkhardt/&quot;&gt;Software Engineering Daily podcast on CloudBleed&lt;/a&gt;.  Just follow the link and you can listen right from your browser.  You should really do this now whether or not you ever listen to podcasts.  As most developers I fall into the category of “security conscious but not really security knowledgeable” and this podcast does a fantastic job of making clear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exactly what happened&lt;/li&gt;
  &lt;li&gt;Whether or not it was a big deal (personally I think its a bigger deal than they acknowledged)&lt;/li&gt;
  &lt;li&gt;What passwords you should change (I changed my Medium and Uber passwords)&lt;/li&gt;
  &lt;li&gt;Explaining the issues with SHA1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d also like to absolutely commend Jeff from SE Daily for not doing this interview himself.  While I really, really enjoy Jeff’s style, security is hard&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 04:44:04 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/cloud_bleed/2017/03/05/cloudbleed.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/cloud_bleed/2017/03/05/cloudbleed.html</guid>
        
        <category>cloud_bleed</category>
        
        <category>cloud_flare</category>
        
        <category>security</category>
        
        
        <category>cloud_bleed</category>
        
      </item>
    
      <item>
        <title>Create Custom Generators Using Pattern Generator</title>
        <description>&lt;p&gt;I am strongly of the opinion that Rails generators are one of the unsung heros of the Rails world.  Certainly the fact that a Rails generator always creates the matching test stub has to have influenced the success of testing in the Rails world.  And while Rails generators are great, there aren’t a lot of easy options when you want a customized generator.  In the remainder of this post, I’ll discuss the gem Pattern Generator which lets you put together&lt;/p&gt;

&lt;h1 id=&quot;caveats&quot;&gt;Caveats&lt;/h1&gt;

&lt;p&gt;If you’re working with a fork of Pattern Generator you should be aware that your fork is inherently going to be publicly available on Github.  Keep that in mind if you view the model that you’ve generated is proprietary.  In that case you may need to break the fork and make it non-public.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 11:34:20 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/04/create-custom-generators-using-pattern-generator.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/04/create-custom-generators-using-pattern-generator.html</guid>
        
        
      </item>
    
      <item>
        <title>Despamming Your Twitter Following List</title>
        <description>&lt;p&gt;https://www.wired.com/2017/03/twitter-abuse-tools/&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Mar 2017 06:06:05 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/03/despamming-your-twitter-following-list.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/03/despamming-your-twitter-following-list.html</guid>
        
        
      </item>
    
      <item>
        <title>iOS Podcasting Apps Compared - Castro, OverCast and iCatcher</title>
        <description>&lt;p&gt;https://itunes.apple.com/app/apple-store/id1080840241?mt=8&amp;amp;ign-mpt=uo%3D4&lt;/p&gt;

&lt;p&gt;http://blog.supertop.co/post/157502672492/castro-2-3&lt;/p&gt;

&lt;p&gt;https://marco.org/2017/02/20/overcast3&lt;/p&gt;

&lt;p&gt;Discovery is one of the key criteria:&lt;/p&gt;

&lt;p&gt;http://awayfromthekeyboard.com/ doesn’t show up in castro&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Mar 2017 05:50:23 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/03/ios-podcasting-apps-compared-castro-overcast-and-icatcher.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/03/ios-podcasting-apps-compared-castro-overcast-and-icatcher.html</guid>
        
        
      </item>
    
  </channel>
</rss>
