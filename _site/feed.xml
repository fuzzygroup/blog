<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Jul 2019 17:57:52 -0400</pubDate>
    <lastBuildDate>Mon, 22 Jul 2019 17:57:52 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>So You Need to Write</title>
        <description>&lt;p&gt;I’m a long time blogger and from time to time I get people asking me how I produce as many words as I do.  I know a few people looking to start writing projects and I thought I’d put together a few notes on the topic of how I’m productive.&lt;/p&gt;

&lt;h1 id=&quot;my-guidelines-for-writing-productively&quot;&gt;My Guidelines for Writing Productively&lt;/h1&gt;

&lt;p&gt;Here is the quick version of my writing guidelines:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Break the tyranny of the file&lt;/li&gt;
  &lt;li&gt;Write in smaller chunks - never chapters&lt;/li&gt;
  &lt;li&gt;Write don’t format&lt;/li&gt;
  &lt;li&gt;Look into different writing tools&lt;/li&gt;
  &lt;li&gt;Realize that no one thing you write matters all that much&lt;/li&gt;
  &lt;li&gt;Measure your progress and improve on it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;break-the-tyranny-of-the-file&quot;&gt;Break the Tyranny of the File&lt;/h2&gt;

&lt;p&gt;I haven’t primarily written using a classical word processor software now since 1987 and I attribute most of my productivity to this one fact, specifically I think that I haven’t had to think about files in almost 30 years.  I refer to this as “breaking the tyranny of the file”.  As stupid as it may sound, the need to decide how to name a file, where to locate a file, etc are all cognitive decisions that pull mental energy away from the actual writing process.  And lest you think that in 2019, files are simpler than ever, consider this dialog box from trying to close an unsaved document in Pages:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/a/CYHtw37.png&quot;&gt;View Pic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m sorry but this doesn’t make much sense even to me (the answer here is to click Delete; sigh).&lt;/p&gt;

&lt;p&gt;The easiest way for most people to break the tyranny of the file is to use a content management system like a blog where, yes, there are files but their creation and management is hidden.  As an example, here’s how I create something in my blogging tool:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll post &quot;So You Need to Write&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-or- if I want to make a draft that isn’t going to go live today:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll draft &quot;So You Need to Write&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that one command builds what I need and I can then open it in my editor.  I never have to worry about filename / location / etc.&lt;/p&gt;

&lt;h2 id=&quot;write-in-smaller-chunks---never-chapters&quot;&gt;Write in Smaller Chunks - Never Chapters&lt;/h2&gt;

&lt;p&gt;Along with breaking the tyranny of the file comes the idea of working in small chunks - think sections (or posts) not chapters.  The longer the thing that you are “writing” is, the harder it is to hold it all in your head at once.  If you can write a long work it at the section / post level and then composite it together at the end you will find that each section is easier to write.&lt;/p&gt;

&lt;p&gt;And if you are a software developer trying to write, consider this analogy.  At one time or another, we’ve all written functions that were longer than one screen.  Remember how hard it was to keep all of that function in your head.  Well, working at the section level is analogous.&lt;/p&gt;

&lt;h2 id=&quot;write-dont-format&quot;&gt;3. Write Don’t Format&lt;/h2&gt;

&lt;p&gt;I view formatting as the absolute bane of writing.  Tools like Microsoft Word make formatting so seductive because you feel “productive” but, really, you aren’t being productive when you are formatting, you are just “twiddling” with the content.  To me one of the worst advances in modern software for writing productivity is the full integration of formatting tools right into the writing process.  From my perspective, you write and then you format as a final step before output.&lt;/p&gt;

&lt;p&gt;Note: Structural formatting like headings, inline emphasis such as bold facing / italics are fine.  I’m more referring to the “let’s see what this looks like with a different font / margins / etc” type of twiddling.&lt;/p&gt;

&lt;h2 id=&quot;look-into-different-writing-tools&quot;&gt;4. Look Into Different Writing Tools&lt;/h2&gt;

&lt;p&gt;To paraphrase McLuhan’s famous “&lt;a href=&quot;https://en.wikipedia.org/wiki/The_medium_is_the_message&quot;&gt;The Medium is the Message&lt;/a&gt;”, I would argue that the tool alters the output.  If all you have ever used to write is Microsoft Word, well, there is a whole world out there of writing tools that will dramatically affect how you write.  I cover these in the next section and I would strongly, strongly argue that you at least explore different tools.&lt;/p&gt;

&lt;p&gt;Note: If you’re addicted to some of the actually excellent tools inside Word such as the grammar checker then you can always do what I do and copy and paste a chunk of writing into Word, let the grammar checker give you changes and then move it back.  I do this regularly.&lt;/p&gt;

&lt;h2 id=&quot;realize-that-no-one-thing-you-write-matters-all-that-much&quot;&gt;5. Realize That No One Thing You Write Matters All That Much&lt;/h2&gt;

&lt;p&gt;When you write a lot, you come to realize that no one thing actually matters all that much.  I tend to view writing as a corpus – some bits are stronger than others and the value is in the totality.  I no longer fret about if a particular piece is perfect because I have accepted that some will be and some won’t be.&lt;/p&gt;

&lt;h2 id=&quot;measure-your-progress-and-improve-on-it&quot;&gt;6. Measure Your Progress and Improve On It&lt;/h2&gt;

&lt;p&gt;One of the best changes I’ve made for being a productive writer in 2019 is that I now benchmark my progress and I use it to motivate myself.  Here’s an example&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imgur.com/a/IJF29FK&quot;&gt;View Pic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I should note that my numbers here are lower than they would normally be.  A big part of the reason for that is that I wrote the tooling driving the screenshot above (new product coming soon).&lt;/p&gt;

&lt;h1 id=&quot;writing-tools&quot;&gt;Writing Tools&lt;/h1&gt;

&lt;p&gt;For the purposes of being transparent, I will tell you what writing tools I use.  But, for the sake of kittens everywhere, DO NOT use what I use.  My tool choices would likely lead to incessant, Tourette’s style cursing.  I use idiosyncratic tools because I’ve been doing this forever and I’m an uber nerd.  These work for me and likely don’t work for you.&lt;/p&gt;

&lt;h2 id=&quot;my-personal-writing-tools&quot;&gt;My Personal Writing Tools&lt;/h2&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate&lt;/a&gt; as an editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown&lt;/a&gt; as a drop dead simple content formatter&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; as a blogging tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fuzzygroup/blog&quot;&gt;Github&lt;/a&gt; for content management (and Jekyll is intimately tied to github)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/fuzzygroup&quot;&gt;gist.github.com&lt;/a&gt; for generating temporary content versions that I can show people a quick draft.  &lt;a href=&quot;https://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; taught me this trick.  Thanks Nick!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com&quot;&gt;Google Docs&lt;/a&gt; if I need a way for people to edit something but Google Docs WILL NOT re-produce Markdown so it is a suck ass, bullcrap tool. Argh.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To repeat, do not try and use these tools the way I do.  After all, I modeled my writing process after the way I do software development right down to using git …&lt;/p&gt;

&lt;h3 id=&quot;a-note-about-github&quot;&gt;A Note About Github&lt;/h3&gt;

&lt;p&gt;I thought my comment about using Github / git for managing my writing was my being a typically overly nerdy developer and Mark Bernstein gave me some interesting feedback:&lt;/p&gt;

&lt;p&gt;“This might actually be OK advice for writers; I liked the Pragmatic Programmer’s advice, back in the day, to keep all your writing in subversion.  It’s possible that Time Machine obviates some of the need for this, but it’s a good idea.”&lt;/p&gt;

&lt;p&gt;If you are committed to using a plain ASCII format for writing such as MarkDown or HTML then Github / git might actually be something to consider.  Do bear in mind that Git is an industrial strength tool and &lt;a href=&quot;https://fuzzyblog.io/blog/git/2019/06/27/understanding-a-small-organization-s-git-development-model.html&quot;&gt;not always the easiest thing to use&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tools-you-should-consider&quot;&gt;Tools You Should Consider&lt;/h2&gt;

&lt;p&gt;Here are the writing tools that you should look at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eastgate.com/Tinderbox/&quot;&gt;Tinderbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eastgate.com/storyspace/&quot;&gt;Storyspace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.literatureandlatte.com/scrivener/overview&quot;&gt;Scrivener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wordpress&quot;&gt;WordPress&lt;/h3&gt;

&lt;p&gt;If you are looking to write daily and just build that skill then I strongly recommend that you blog.  I’ve been blogging now since 2002 and I was one of the authors on the &lt;a href=&quot;https://www.amazon.com/Essential-Blogging-Selecting-Doctorow-Paperback/dp/B00ME3RFYA/&quot;&gt;O’Reilly Essential Blogging book&lt;/a&gt; (by the way O’Reilly, I’ve never once gotten a royalty check – did no copies ever sell?).  Anyway, blogging is a drop dead simple way to write that incorporates a lot of my approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Break the tyranny of the file&lt;/li&gt;
  &lt;li&gt;Write in smaller chunks&lt;/li&gt;
  &lt;li&gt;Write Don’t Format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you’re going to blog then WordPress is a damn fine way to do it.  And hosted WordPress is both easy and cheap; you don’t need your own server.  Recommended.&lt;/p&gt;

&lt;h3 id=&quot;tinderbox--storyspace&quot;&gt;Tinderbox / Storyspace&lt;/h3&gt;

&lt;p&gt;I’m covering these tools together because they both come from the same creative mind and, to me, they are heavily interlinked (despite being different products).  Tinderbox and Storyspace are both more tools for thinking about / planning what you have to write than the writing itself.  Both tools are heavily oriented around graphical views of the structure of your writing.  And Tinderbox is specifically designed for note taking.&lt;/p&gt;

&lt;p&gt;Here is some commentary from the author:&lt;/p&gt;

&lt;p&gt;“Storyspace 3 works seamlessly with Tinderbox, with which it shares files. Tinderbox is designed for making, visualizing, and analyzing notes, making it ideal for the early stages of ambitious projects. Storyspace is designed for writing and reading interlinked narrative; many writers will move freely between Tinderbox and Storyspace.”&lt;/p&gt;

&lt;h3 id=&quot;scrivener&quot;&gt;Scrivener&lt;/h3&gt;

&lt;p&gt;Scrivener is the best thought-out tool I’ve seen for writing long form works (think books / novels) in a damn long time.   With a focus on structural views and working in small chunks, Scrivener addresses my top three concerns (tyranny of the file / smaller chunks / write don’t format).  You have to be open to really learning a new tool to use Scrivener, but it is worth it.&lt;/p&gt;

&lt;h3 id=&quot;disclaimers&quot;&gt;Disclaimers&lt;/h3&gt;

&lt;p&gt;Matt Mullenweg, the founder of WordPress, is a friend and one of the coolest folks I know online.  But despite that bias, WordPress is still damn awesome.&lt;/p&gt;

&lt;p&gt;Tinderbox and Storyspace are both written by Mark Bernstein who is also a friend and has been doing this stuff even longer than I have.  I met Mark back in ‘87 when we both attended the first ACM Conference on Hypertext at University of North Carolina, Chapel Hill.  And while I have done a lot of different things career wise, Mark has focused exclusively on writing tools and brought a lot of good into the world that way.  I respect him greatly for this.&lt;/p&gt;

&lt;p&gt;Mark Bernstein read an early draft of this post and gave me a number of great changes.  Thank you Mark!&lt;/p&gt;

&lt;p&gt;All of the techniques above I have used extensively – for non fiction writing.  I have never tried them in a fiction context.  I suspect that they would work but I can’t attest to that.&lt;/p&gt;

&lt;h1 id=&quot;in-closing&quot;&gt;In Closing&lt;/h1&gt;

&lt;p&gt;Someone I used to know once made a wonderful observation on how to be a successful writer.  It was short, succinct and beautiful in its clarity:&lt;/p&gt;

&lt;p&gt;“Fingers on keys; ass in chair”&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/writing/2019/07/22/so-you-need-to-write.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/writing/2019/07/22/so-you-need-to-write.html</guid>
        
        <category>writing</category>
        
        <category>blogging</category>
        
        <category>heinlein</category>
        
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Employee Transitions - Don't Kill Your Organizational Memory</title>
        <description>&lt;p&gt;A lot of companies have moved to organizational chat systems like Slack or the late, unlamented HipChat.  And, from what I have seen, none of those companies have ever dealt with employee transitions in a remotely rational fashion.  Here’s what generally happens:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Employee leaves.&lt;/li&gt;
  &lt;li&gt;Slack / HipChat / whatever chat account is promptly deleted.&lt;/li&gt;
  &lt;li&gt;I lose all access to ANY and ALL conversations with that previous employee forever.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What.  The.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Fsck&quot;&gt;Fsck&lt;/a&gt;*?  This makes no actual sense.  Chat has become the organizational memory for what happens in a company.  Now let’s move to an actual, specific example.  At my day job we just had a manager depart during a re-org.  These things happen and I really don’t know the specifics.  What I do know is that this was my damn manager and he was directly involved in the project I’m on.  If I hadn’t, &lt;strong&gt;painstakingly&lt;/strong&gt; copied every single slack message he and I ever had, all 20 odd plus pages of them, to a text file, I would have lost much of my knowledge of the project including important details like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Who at the client I was supposed to speak with&lt;/li&gt;
  &lt;li&gt;The API keys that define connectivity&lt;/li&gt;
  &lt;li&gt;The schedule&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I might have been able to remember the people at the client and I do have a vague memory of the schedule but a high entropy api key like this:&lt;/p&gt;

&lt;p&gt;afdjklfdsaj294u324,asdfmafrwae6435%1 (not the real api key; I’m annoyed but not an idiot)&lt;/p&gt;

&lt;p&gt;I’ll never remember that.  And since I wasn’t ready to use it yet, I just left it in my chat client for the time being.  Is this the right place for an API key?   Nope.  But in the real world, chat is often the communications mechanism for delivery of things like API keys.&lt;/p&gt;

&lt;h1 id=&quot;in-closing-email-versus-chat&quot;&gt;In Closing, Email versus Chat&lt;/h1&gt;

&lt;p&gt;It is always interesting to me that organizations would never delete emails that were sent to me from employees who have left (I just confirmed that I have every email ever from employees who quit).  So why is chat different?&lt;/p&gt;

&lt;p&gt;*Yes this is a slightly more polite, much, much more nerdy way of saying “fuck”.  It refers to the fsck utility which checks file system integrity and the fact that when you need to run fsck, you’re first word is generally “fuck”.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/startup/2019/07/20/employee-transitions-don-t-kill-your-organizational-memory.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/startup/2019/07/20/employee-transitions-don-t-kill-your-organizational-memory.html</guid>
        
        <category>startup</category>
        
        <category>hr</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Using redis-cli on An Encrypted AWS Redis Server</title>
        <description>&lt;p&gt;So I find myself needing to use &lt;a href=&quot;https://redis.io/topics/rediscli&quot;&gt;redis-cli&lt;/a&gt; to modify the keys on a running Redis instance to deal with a few &lt;a href=&quot;https://github.com/mperham/sidekiq/blob/master/Changes.md#413&quot;&gt;Sidekiq issues&lt;/a&gt;.  And, much to my surprise, I can’t simply connect to it and make changes because I keep getting &lt;strong&gt;Error: Connection reset by peer&lt;/strong&gt; errors.  A bit of a deep dive taught me this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our redis instance is encrypted both at rest and in transit&lt;/li&gt;
  &lt;li&gt;The way to do this is to connect to it via stunnel which builds a secure tunnel&lt;/li&gt;
  &lt;li&gt;You have to supply the password on the command line to redis-cli; this surprised me because it leaves the password in the shell history and that’s fscking awful for security; grumble, grumble, grumble&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some references that I followed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/in-transit-encryption.html&quot;&gt;AWS Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datanextsolutions.com/blog/how-to-fix-redis-cli-error-connection-reset-by-peer/&quot;&gt;Data Next Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the steps I followed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I started by installing stunnnel.&lt;/li&gt;
  &lt;li&gt;I continued by building a mapping for stunnel to the redis server I wanted to mess with.  This required getting the redis server url from our application’s settings.&lt;/li&gt;
  &lt;li&gt;Start the tunnel&lt;/li&gt;
  &lt;li&gt;Verify that the tunnel is running.&lt;/li&gt;
  &lt;li&gt;I connected to redis-cli passing the -a password option.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was able to then verify that redis-cli works correctly by doing a simple set / get:&lt;/p&gt;

    &lt;p&gt;set a “hello”
get a&lt;/p&gt;

    &lt;p&gt;“hello”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And this positioned me for being able to run a redis-cli keys command.  Of course the keys routine I needed to run was error full but that’s another story …&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/redis/2019/07/18/using-redis-cli-on-an-encrypted-aws-redis-server.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/redis/2019/07/18/using-redis-cli-on-an-encrypted-aws-redis-server.html</guid>
        
        <category>redis</category>
        
        <category>aws</category>
        
        
        <category>redis</category>
        
      </item>
    
      <item>
        <title>Adding Quick and Dirty JSON Serialization to Database Objects</title>
        <description>&lt;p&gt;So let’s say that you’re building a system where you need to configure things like measurements and you know that some people like pounds and some people like kilograms.  One option is to hard code a database structure where you have an attribute for each.  And while that works, there are always going to be some more measurement types in the world and this approach leads you to an endless array of sucking database column changes.&lt;/p&gt;

&lt;p&gt;Another approach is to add a text column to your database and store a JSON blob in it.  Rails actually makes this pretty easy with a migration and a declaration:&lt;/p&gt;

&lt;p&gt;Migration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class AddUnitPreferencesJsonToUsers &amp;lt; ActiveRecord::Migration[5.2]
  def change
    add_column :users, :options, :text
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Declaration at the top of your class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serialize :options, JSON
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will now add an options column to your table where you can store anything.  And since there is a serialize call, it will even act like an attribute so you can say something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user = User.first
user.options
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and get back:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;length&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;inches&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;weight&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pounds&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;hours&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if you really, really like working on a REPL like I do then you can set this globally for all users with this snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users = User.all
users.each do |user|
  user.options = options = { &quot;length&quot; =&amp;gt; &quot;inches&quot;, &quot;weight&quot; =&amp;gt; &quot;pounds&quot;, &quot;time&quot; =&amp;gt; &quot;hours&quot; }
  user.save
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Easy - no fuss, no muss, no need to write code in an editor for a one time, one off fix.&lt;/p&gt;

&lt;p&gt;And just to be clear, you can do a better job with this by really following the instructions.  Here’s an &lt;a href=&quot;https://codeburst.io/json-serialized-columns-with-rails-a610a410fcdf&quot;&gt;example from CodeBurst&lt;/a&gt; which includes custom serializers.  Recommended&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2019/07/18/adding-quick-and-dirty-json-serialization-to-database-objects.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2019/07/18/adding-quick-and-dirty-json-serialization-to-database-objects.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Never Type Bundle Exec Again</title>
        <description>&lt;p&gt;The command prefix “bundle exec” is something that I’ve typed probably a thousand, thousand, thousand times.  The bundle exec prefix goes in front of so many damn Rails commands and while I’ve seen other developers alias it to “be”, that never felt right to me.  And now there’s a workaround where I don’t even have to type that thanks to the miracle of &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;Z-Shell&lt;/a&gt; and &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My Zsh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Edit your ~/.zshrc and add search for the word plugins and then change that line to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins=(git bundler brew gem heroku)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you and to do a source on it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then you can do this magic:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails g migration add_frequency_and_economic_value_to_habits
  invoke  active_record
  create    db/migrate/20190717211807_add_frequency_and_economic_value_to_habits.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that makes my life better by 13 characters that I’m never going to have to type again.  Honest to the FSM, I’m mildly aroused right now …&lt;/p&gt;

&lt;p&gt;And thank you to &lt;a href=&quot;https://coderwall.com/p/weixga/no-more-bundle-exec-with-oh-my-zsh&quot;&gt;CoderWall&lt;/a&gt; for publishing this originally.&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2019/07/17/never-type-bundle-exec-again.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2019/07/17/never-type-bundle-exec-again.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Your Daily Remote Worker Management Tip</title>
        <description>&lt;p&gt;Dear Manager of a Remote Employee,&lt;/p&gt;

&lt;p&gt;My apologies in advance that this is bitter and salty like the code brewed coffee that I just swilled in a frazzle but I find myself at the end of my rope. And so I will give you a remote worker management tip.&lt;/p&gt;

&lt;p&gt;When a remote worker, particularly when it is an individual who has worked for you for more than a year, says “we need to work on XYZ in person”, it basically amounts to “Oh my lord, we are so damn screwed”.  AND YOU PAY ATTENTION TO IT AND ARRANGE IT.&lt;/p&gt;

&lt;p&gt;Sigh.&lt;/p&gt;

&lt;p&gt;Signed, 
Your Remote Worker&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/startup/2019/07/16/your-daily-remote-worker-management-tip.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/startup/2019/07/16/your-daily-remote-worker-management-tip.html</guid>
        
        <category>startup</category>
        
        <category>remote</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Getting Around Spotlight's Madness</title>
        <description>&lt;p&gt;Spotlight is the Apple / OSX search engine and I find it absolutely, blindingly maddening.  The way Spotlight seems to work, when you use it from the OSX search icon, is that it tells you what it found but not &lt;strong&gt;where&lt;/strong&gt; it found it.  And I get that filesystems are passe and we are supposed to be in a post file world, blah, blah, blah.  And I call bullshite on that.  I’m a professional software developer and knowing where things actually exist is actually fricking important.&lt;/p&gt;

&lt;p&gt;And here’s how to do that with Spotlight – use mdfind directly.  mdfind is the underlying  command line executable that also executes spotlight searches.  Earlier today I was struggling to remember the name of a Ruby gem and all I knew was that it had “icon” in its name.  So here’s what I did:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mdfind icon -onlyin /Users/sjohnson/Dropbox/fuzzygroup/ | grep Gemfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this command looked for the string of characters “icon” but only in the directory where I keep all of my many, many Rails projects.  And then I fed it thru a grep command to find only the references to Gemfile.  And this very quickly led me to &lt;a href=&quot;https://github.com/victorgama/identicon&quot;&gt;identicon&lt;/a&gt; which is a gem which builds &lt;a href=&quot;https://meta.stackexchange.com/questions/17443/how-is-the-default-user-avatar-generated&quot;&gt;Stack Overflow like abstract user avatars&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 16 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2019/07/16/getting-around-spotlight-s-madness.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2019/07/16/getting-around-spotlight-s-madness.html</guid>
        
        <category>osx</category>
        
        <category>spotlight</category>
        
        <category>mdfind</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Fixing ByeBug Madness</title>
        <description>&lt;p&gt;I learned an interesting and subtle trick today.  As is all too true lately, my pairing partner, &lt;a href=&quot;https://csphere.github.io/&quot;&gt;Sean Kennedy&lt;/a&gt;, gets the credit for this one.  I had the ruby debugger, byebug, embedded in a view context and I noticed that while this should have brought up a breakpoint, it way, way, way, way overstepped the break point and shot beyond, going into core Rails stuff.  And then Sean told me this trick:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%# a = 1; byebug; b = 2; %&amp;gt;
&amp;lt;%= link_to &quot;Sign in with OAuth 2 provider&quot;, user_doorkeeper_omniauth_authorize_path, class: &quot;btn btn-primary&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Apparently byebug has a known issue with execution context and wrapping the byebug call inside two assignment statements gives it enough of an execution context for it to stop properly.&lt;/p&gt;

&lt;p&gt;And yes this is a sucky thing but all tools have issues and this one can be trivially worked around.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2019/07/16/fixing-byebug-madness.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2019/07/16/fixing-byebug-madness.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>When RbEnv, well, Won't RbEnv - Fixing Shell Extension Madness</title>
        <description>&lt;p&gt;If you have ever used Ruby’s &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt;, or &lt;a href=&quot;https://rvm.io/&quot;&gt;rvm&lt;/a&gt; or &lt;a href=&quot;https://virtualenv.pypa.io/en/latest/&quot;&gt;Python’s virtual env&lt;/a&gt; or any of the different approaches to managing multiple editions of the same language binary on a machine, this post is for you.&lt;/p&gt;

&lt;p&gt;All of these tools tend to work the same way – they inject their own pathing in front of the system path so that the correct version of a binary gets called.  Here’s an example from my development system when rbenv wasn’t working:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which ruby
/usr/bin/ruby

ruby --version
ruby 2.3.7p456 (2018-03-28 revision 63024) [universal.x86_64-darwin18]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And when I made rbenv work, here’s what I got:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which ruby
/Users/sjohnson/.rbenv/shims/ruby

ruby --version
ruby 2.6.2p47 (2019-03-13 revision 67232) [x86_64-darwin18]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Technically I should have been able to fix this issue by using this rbenv command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbenv local 2.6.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if that didn’t work then this should have:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbenv rehash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And either of those should have made things work by injecting into my path the correct values.  Sadly, albeit not surprisingly, it did not.  My personal development style seems to have a high entropy value and I suspect that’s why but that’s a different argument regarding excessive uptime, an abject refusal to reboot my machine, etc.&lt;/p&gt;

&lt;p&gt;Anyway here’s the work around:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /to/my/development/directory
export PATH=/Users/sjohnson/.rbenv/shims:/Users/sjohnson/.rbenv/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My pairing partner &lt;a href=&quot;https;//csphere.github.io/&quot;&gt;Sean Kennedy&lt;/a&gt; corrected this to be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=$HOME/.rbenv/shims:$HOME/.rbenv/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And while he’s almost certainly right, I haven’t tested his version so both are here.  Pick and choose as you like.&lt;/p&gt;

&lt;p&gt;The bottom line here is that shell extensions – which is what rbenv, rvm and virtualenv actually are – are fragile.  And if you understand what’s going on underneath them, fixing the issue actually is pretty simple.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2019/07/10/when-rbenv-well-won-t-rbenv-fixing-shell-extension-madness.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2019/07/10/when-rbenv-well-won-t-rbenv-fixing-shell-extension-madness.html</guid>
        
        <category>ruby</category>
        
        <category>rbenv</category>
        
        <category>rails</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>RSpec - Uninitialized Constant Errors on Model Tests</title>
        <description>&lt;p&gt;This one is an easy one but still tripped me up.  I’m working on a project where generators on RSpec stub files are turned off (don’t ask; disagreement about the utility of generators between two senior engineers and I lost) and I just got this error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rspec spec/models/metric_type_spec.rb

An error occurred while loading ./spec/models/metric_type_spec.rb.
Failure/Error:
  RSpec.describe MetricType, type: :model do
    describe &quot;#val_col&quot; do
      it &quot;should return int_val for word_count&quot; do
        h = FactoryBot.create(:metric_type_word_count)
        expect(h.val_col).to eq :int_val
      end

      it &quot;should return float_val for weight&quot; do
        h = FactoryBot.create(:metric_type_weight)
        expect(h.val_col).to eq :float_val

NameError:
  uninitialized constant MetricType
# ./spec/models/metric_type_spec.rb:1:in `&amp;lt;top (required)&amp;gt;'
No examples found.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the error turned out to be that this line was missing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rails_helper'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That line is normally inserted by the generator but I built this spec file from scratch and just missed it.  I’ve stared at that line a thousand, thousand times over the years but I suspect I never realized that what it did was tell RSpec something like this:&lt;/p&gt;

&lt;p&gt;“Read the Rails directory structure and autoload all classes in the directories below /app”.  Doh!&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2019/07/10/rspec-uninitialized-constant-errors-on-model-tests.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2019/07/10/rspec-uninitialized-constant-errors-on-model-tests.html</guid>
        
        <category>rails</category>
        
        <category>rspec</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
