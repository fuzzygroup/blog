<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 09 Jun 2017 09:34:25 -0400</pubDate>
    <lastBuildDate>Fri, 09 Jun 2017 09:34:25 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Nerd Coach</title>
        <description>&lt;p&gt;I’m not ashamed to admit that I’m a nerd.  I read.  I write code.  I work alone (in a basement).  I’m also a &lt;strong&gt;coach&lt;/strong&gt; – of youth sports – something I never expected.  And I thought writing up what this nerd learned about sports coaching might be useful&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I’m a father of two sons I’ve now coached 4 seasons of sports all of which my sons were playing.  So, yes, I’m that kind of coach – I do it for my kids, not for the love of the game.  Still&lt;/p&gt;

&lt;h1 id=&quot;rule-1-write-it-down&quot;&gt;Rule 1: Write It Down&lt;/h1&gt;

&lt;h1 id=&quot;rule-2-its-like-benchmarking---until-you-run-the-numbers-you-dont-understanding-it&quot;&gt;Rule 2: Its Like Benchmarking - Until You Run the Numbers You Don’t Understanding it&lt;/h1&gt;

&lt;p&gt;I would never have guessed that Alyssa was our #1 player&lt;/p&gt;

&lt;h1 id=&quot;rule-3-be-the-voice-of-reason&quot;&gt;Rule 3: Be the Voice of Reason&lt;/h1&gt;

&lt;h1 id=&quot;rule-4-do-something-with-the-data&quot;&gt;Rule 4: Do Something with the Data&lt;/h1&gt;
</description>
        <pubDate>Sun, 04 Jun 2017 05:28:49 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/04/nerd-coach.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/04/nerd-coach.html</guid>
        
        
      </item>
    
      <item>
        <title>Protecting Your Kids Online with Disney Circle</title>
        <description>&lt;p&gt;I don’t care how permissive / how liberal a parent you are, I suspect that you would have problems with your relatively young kid (let’s say &lt;strong&gt;under&lt;/strong&gt; 18) going into a place like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/porn_shop.jpg&quot; alt=&quot;sex_shop_image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I look at putting the Internet into your home without some kind of Internet filtering as analogous to letting your kids walk into a place like this and not stopping them.  In the rest of this post I’ll talk about Internet filtering and the first ever product, Disney Circle, that I’ve found is worth using&lt;/p&gt;

&lt;h1 id=&quot;my-credentials-to-even-write-this&quot;&gt;My Credentials to Even Write This&lt;/h1&gt;

&lt;p&gt;On a personal level I am a husband and father (two sons, 16 and 10).  I’m also a software engineer who has been active on the Internet since the pre-web days and I’ve spent a large amount of my professional life dealing with spam and bad actors on the Internet.  Finally I’m a firm believer in free speech and as my wife might comment, I’m the furthest thing from a prude in any way, shape or form.  Those last two points, free speech and not being a prude make this a hard post for me to write as I am generally philosophically opposed to Internet filtering.  Now, that said, I would never let my kid walk into a place like that pictured above and I don’t think you should either – what happens there is an adult activity and there is a reason why its actually illegal to be in there if you’re under 18.&lt;/p&gt;

&lt;h1 id=&quot;internet-filtering-overview&quot;&gt;Internet Filtering Overview&lt;/h1&gt;

&lt;p&gt;Internet filtering is a hard technical problem.&lt;/p&gt;

&lt;h1 id=&quot;disney-circle&quot;&gt;Disney Circle&lt;/h1&gt;

&lt;h1 id=&quot;mobile-devices&quot;&gt;Mobile Devices&lt;/h1&gt;

&lt;h1 id=&quot;where-this-falls-down&quot;&gt;Where this Falls Down&lt;/h1&gt;

</description>
        <pubDate>Fri, 26 May 2017 05:11:03 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/parenting/2017/05/26/protecting-your-kids-online-with-disney-circle.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/parenting/2017/05/26/protecting-your-kids-online-with-disney-circle.html</guid>
        
        <category>parenting</category>
        
        <category>disney</category>
        
        <category>circle</category>
        
        
        <category>parenting</category>
        
      </item>
    
      <item>
        <title>Fixing Chart.js Sizing Issues with Rails Using chartjs-ror</title>
        <description>&lt;p&gt;I’ve spent the past few weeks struggling with a Chart.js graph sizing issue.  I’m not a real JavaScript guy so I’m using the Ruby gem &lt;a href=&quot;https://github.com/airblade/chartjs-ror&quot;&gt;chartjs-ror&lt;/a&gt; from AirBlade.  Out of all the charting gems I’ve looked at recently, Airblade’s has been the best (so thank you!).  The problem was that my graphs were appearing like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/chartjs_graph_size_bad.png&quot; alt=&quot;bad_graphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where what I was really looking for was this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/chartjs_graph_size_good.png&quot; alt=&quot;good_graphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the partial I’m using to render the graph:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%
times = []
metrics.each do |metric|
  times &amp;lt;&amp;lt; metric.created_at.in_time_zone(current_user.time_zone).to_s(:db)
end
data = {
  
  labels: times,
  datasets: [
    {
        label: label,
        background_color: &quot;rgba(220,220,220,0.2)&quot;,
        border_color: &quot;rgba(220,220,220,1)&quot;,
        data: metrics.map(&amp;amp;:amount)
    }

  ]
}
%&amp;gt;

&amp;lt;% options = { :height =&amp;gt; 100, 
               :responsive =&amp;gt; true, 
               maintainAspectRatio: true, # &amp;lt;== this option needs to be true not false
               :yAxes =&amp;gt; [:ticks =&amp;gt; {:beginAtZero =&amp;gt; false }] } %&amp;gt;
&amp;lt;%= line_chart data, options %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue was the &lt;strong&gt;maintainAspectRatio: true&lt;/strong&gt; setting.  Somehow it got mistakenly set to false and that completely changes the look and feel of the graph.  Bizarre but apparently true.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 May 2017 18:05:18 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/05/24/fixing-chart-js-sizing-issues-with-rails-using-chartjs-ror.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/05/24/fixing-chart-js-sizing-issues-with-rails-using-chartjs-ror.html</guid>
        
        <category>rails</category>
        
        <category>chartjs-ror</category>
        
        <category>chartjs</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Fixing Better Errors Performance Problems on Rails 5.1</title>
        <description>&lt;p&gt;https://github.com/charliesome/better_errors/issues/77&lt;/p&gt;

&lt;p&gt;https://github.com/charliesome/better_errors/issues/341&lt;/p&gt;

&lt;p&gt;Add to application controller:&lt;/p&gt;

&lt;p&gt;before_action :better_errors_hack, if: -&amp;gt; { Rails.env.development? }&lt;/p&gt;

&lt;p&gt;def better_errors_hack
  request.env[‘puma.config’].options.user_options.delete :app
end&lt;/p&gt;
</description>
        <pubDate>Tue, 23 May 2017 21:26:34 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/23/fixing-better-errors-performance-problems-on-rails-5-1.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/23/fixing-better-errors-performance-problems-on-rails-5-1.html</guid>
        
        
      </item>
    
      <item>
        <title>Why I Didn't Choose Codeship for CI / CD</title>
        <description>&lt;p&gt;Understood; just trying to wrap my head around it.
getting this live means deploys of: site, web app, page archiver, page_archive api and store front so I’m debating CI server of my own
that’s enough containers that I’m not sure I can justify paying for it since I’ll blow thru container build limits quickly over the course of a month with constant changes.
Nick Janetakis (nick.janetakis@gmail.com)
what happened to circleci or codeship?
I don’t think the billing model works.  The limits we saw weren’t practical over this many repos.  Not for greenfield dev.&lt;br /&gt;
The First Container Is Free + Each Additional Container Is $50/Month &amp;lt;== circle ci
CodeShip
You will always start with the free $0 plan which grants these resources
100 BUILDS/MONTH&lt;/p&gt;

&lt;p&gt;1 CONCURRENT BUILD&lt;/p&gt;

&lt;p&gt;1 PARALLEL TEST PIPELINE&lt;/p&gt;

&lt;p&gt;Nick Janetakis (nick.janetakis@gmail.com)
that is exactly what you want
you are not going to be building a bunch of things in parallel, or having 5 devs constantly pushing changes
would be really surprised if you hit 100 builds a month too, because you’re only going to be building those things once you have a fairly stable version (something you deem is production worthy)
Codeship is a confusing mess – its still tied to appdatallc and I can’t remove it.  They suggest my using an organization and let me create one but then I can’t do anything with it since organizations are a paid feature.
if i disconnect github and reconnect github then the old projects go away and then come right back.&lt;br /&gt;
Using the X on their UI doesn’t delete the project.  I don’t care if anyone / everyone can use this.  Its crap.
Nick Janetakis (nick.janetakis@gmail.com)
why not just sign in with an email not associated with app data?
i’ve tried that before.  Trying it again.
Nick Janetakis (nick.janetakis@gmail.com)
and github, i’m not sure. usually apps let you pick what account to link it with if there’s &amp;gt; 1
maybe you’re still logged into app data on github somewhere, and it’s picking that for whatever reason
its because you generally only have 1 github identity and it spans personal and professional.
Sigh.  They want you to duplicate your docker config just for them.  Sigh.
Nick Janetakis (nick.janetakis@gmail.com)
yeah, but most apps i use that integrate with github will let you pick the organization
Nick Janetakis (nick.janetakis@gmail.com)
Not dry at all.
Example they give: https://github.com/codeship/discourse-demo/blob/master/codeship-services.yml
Nope.  I’m out.&lt;/p&gt;

&lt;p&gt;https://github.com/codeship/discourse-demo/blob/master/codeship-steps.yml&lt;/p&gt;

&lt;p&gt;their docs say their format is compatible with docker-compose.yml
its not that – its the duplication
Nick Janetakis (nick.janetakis@gmail.com)
and if doesn’t find a codeship-services.yml file, it falls back to using docker-compose.yml
Well that’s fine.  But their shitty docs already convinced me to quit.
Now&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 09:33:10 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/22/why-i-didn-t-choose-codeship-for-ci-cd.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/22/why-i-didn-t-choose-codeship-for-ci-cd.html</guid>
        
        
      </item>
    
      <item>
        <title>Obscure Rails Error - Undefined Method Collation for nil:NilClass</title>
        <description>&lt;p&gt;undefined method `collation’ for nil:NilClass&lt;/p&gt;

&lt;p&gt;I added a validates_uniqueness_of :url&lt;/p&gt;

&lt;p&gt;NoMethodError - undefined method &lt;code class=&quot;highlighter-rouge&quot;&gt;collation' for nil:NilClass:
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract_mysql_adapter.rb:617:in &lt;/code&gt;case_sensitive_comparison’
  activerecord (5.0.2) lib/active_record/validations/uniqueness.rb:75:in &lt;code class=&quot;highlighter-rouge&quot;&gt;build_relation'
  activerecord (5.0.2) lib/active_record/validations/uniqueness.rb:18:in &lt;/code&gt;validate_each’
  activemodel (5.0.2) lib/active_model/validator.rb:151:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in validate'
  activemodel (5.0.2) lib/active_model/validator.rb:148:in &lt;/code&gt;validate’
  activesupport (5.0.2) lib/active_support/callbacks.rb:405:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in make_lambda'
  activesupport (5.0.2) lib/active_support/callbacks.rb:169:in &lt;/code&gt;block (2 levels) in halting’
  activesupport (5.0.2) lib/active_support/callbacks.rb:547:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block (2 levels) in default_terminator'
  activesupport (5.0.2) lib/active_support/callbacks.rb:546:in &lt;/code&gt;block in default_terminator’
  activesupport (5.0.2) lib/active_support/callbacks.rb:170:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in halting'
  activesupport (5.0.2) lib/active_support/callbacks.rb:454:in &lt;/code&gt;block in call’
  activesupport (5.0.2) lib/active_support/callbacks.rb:454:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  activesupport (5.0.2) lib/active_support/callbacks.rb:101:in &lt;/code&gt;&lt;strong&gt;run_callbacks&lt;/strong&gt;’
  activesupport (5.0.2) lib/active_support/callbacks.rb:750:in &lt;code class=&quot;highlighter-rouge&quot;&gt;_run_validate_callbacks'
  activemodel (5.0.2) lib/active_model/validations.rb:408:in &lt;/code&gt;run_validations!’
  activemodel (5.0.2) lib/active_model/validations/callbacks.rb:113:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in run_validations!'
  activesupport (5.0.2) lib/active_support/callbacks.rb:97:in &lt;/code&gt;&lt;strong&gt;run_callbacks&lt;/strong&gt;’
  activesupport (5.0.2) lib/active_support/callbacks.rb:750:in &lt;code class=&quot;highlighter-rouge&quot;&gt;_run_validation_callbacks'
  activemodel (5.0.2) lib/active_model/validations/callbacks.rb:113:in &lt;/code&gt;run_validations!’
  activemodel (5.0.2) lib/active_model/validations.rb:338:in &lt;code class=&quot;highlighter-rouge&quot;&gt;valid?'
  activerecord (5.0.2) lib/active_record/validations.rb:65:in &lt;/code&gt;valid?’
  activerecord (5.0.2) lib/active_record/validations.rb:82:in &lt;code class=&quot;highlighter-rouge&quot;&gt;perform_validations'
  activerecord (5.0.2) lib/active_record/validations.rb:44:in &lt;/code&gt;save’
  activerecord (5.0.2) lib/active_record/attribute_methods/dirty.rb:22:in &lt;code class=&quot;highlighter-rouge&quot;&gt;save'
  activerecord (5.0.2) lib/active_record/transactions.rb:319:in &lt;/code&gt;block (2 levels) in save’
  activerecord (5.0.2) lib/active_record/transactions.rb:395:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in with_transaction_returning_status'
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract/database_statements.rb:232:in &lt;/code&gt;block in transaction’
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract/transaction.rb:189:in &lt;code class=&quot;highlighter-rouge&quot;&gt;within_new_transaction'
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract/database_statements.rb:232:in &lt;/code&gt;transaction’
  activerecord (5.0.2) lib/active_record/transactions.rb:211:in &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction'
  activerecord (5.0.2) lib/active_record/transactions.rb:392:in &lt;/code&gt;with_transaction_returning_status’
  activerecord (5.0.2) lib/active_record/transactions.rb:319:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in save'
  activerecord (5.0.2) lib/active_record/transactions.rb:334:in &lt;/code&gt;rollback_active_record_state!’
  activerecord (5.0.2) lib/active_record/transactions.rb:318:in &lt;code class=&quot;highlighter-rouge&quot;&gt;save'
  activerecord (5.0.2) lib/active_record/suppressor.rb:41:in &lt;/code&gt;save’
  app/models/course.rb:130:in &lt;code class=&quot;highlighter-rouge&quot;&gt;save_all_objects'
  app/controllers/courses_controller.rb:32:in &lt;/code&gt;create’
  actionpack (5.0.2) lib/action_controller/metal/basic_implicit_render.rb:4:in &lt;code class=&quot;highlighter-rouge&quot;&gt;send_action'
  actionpack (5.0.2) lib/abstract_controller/base.rb:188:in &lt;/code&gt;process_action’
  actionpack (5.0.2) lib/action_controller/metal/rendering.rb:30:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/abstract_controller/callbacks.rb:20:in &lt;/code&gt;block in process_action’
  activesupport (5.0.2) lib/active_support/callbacks.rb:126:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  activesupport (5.0.2) lib/active_support/callbacks.rb:506:in &lt;/code&gt;block (2 levels) in compile’
  activesupport (5.0.2) lib/active_support/callbacks.rb:455:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  activesupport (5.0.2) lib/active_support/callbacks.rb:101:in &lt;/code&gt;&lt;strong&gt;run_callbacks&lt;/strong&gt;’
  activesupport (5.0.2) lib/active_support/callbacks.rb:750:in &lt;code class=&quot;highlighter-rouge&quot;&gt;_run_process_action_callbacks'
  activesupport (5.0.2) lib/active_support/callbacks.rb:90:in &lt;/code&gt;run_callbacks’
  actionpack (5.0.2) lib/abstract_controller/callbacks.rb:19:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/action_controller/metal/rescue.rb:20:in &lt;/code&gt;process_action’
  actionpack (5.0.2) lib/action_controller/metal/instrumentation.rb:32:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in process_action'
  activesupport (5.0.2) lib/active_support/notifications.rb:164:in &lt;/code&gt;block in instrument’
  activesupport (5.0.2) lib/active_support/notifications/instrumenter.rb:21:in &lt;code class=&quot;highlighter-rouge&quot;&gt;instrument'
  activesupport (5.0.2) lib/active_support/notifications.rb:164:in &lt;/code&gt;instrument’
  actionpack (5.0.2) lib/action_controller/metal/instrumentation.rb:30:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/action_controller/metal/params_wrapper.rb:248:in &lt;/code&gt;process_action’
  activerecord (5.0.2) lib/active_record/railties/controller_runtime.rb:18:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/abstract_controller/base.rb:126:in &lt;/code&gt;process’
  actionview (5.0.2) lib/action_view/rendering.rb:30:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process'
  actionpack (5.0.2) lib/action_controller/metal.rb:190:in &lt;/code&gt;dispatch’
  actionpack (5.0.2) lib/action_controller/metal.rb:262:in &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch'
  actionpack (5.0.2) lib/action_dispatch/routing/route_set.rb:50:in &lt;/code&gt;dispatch’
  actionpack (5.0.2) lib/action_dispatch/routing/route_set.rb:32:in &lt;code class=&quot;highlighter-rouge&quot;&gt;serve'
  actionpack (5.0.2) lib/action_dispatch/journey/router.rb:39:in &lt;/code&gt;block in serve’
  actionpack (5.0.2) lib/action_dispatch/journey/router.rb:26:in &lt;code class=&quot;highlighter-rouge&quot;&gt;serve'
  actionpack (5.0.2) lib/action_dispatch/routing/route_set.rb:725:in &lt;/code&gt;call’
  apartment (1.2.0) lib/apartment/elevators/generic.rb:24:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  apartment (1.2.0) lib/apartment/reloader.rb:18:in &lt;/code&gt;call’
  meta_request (0.4.2) lib/meta_request/middlewares/app_request_handler.rb:13:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  meta_request (0.4.2) lib/meta_request/middlewares/meta_request_handler.rb:13:in &lt;/code&gt;call’&lt;/p&gt;
</description>
        <pubDate>Thu, 18 May 2017 11:17:59 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/18/obscure-rails-error-undefined-method-collation-for-nil-nilclass.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/18/obscure-rails-error-undefined-method-collation-for-nil-nilclass.html</guid>
        
        
      </item>
    
      <item>
        <title>10 Things Software Engineering Daily Taught Me</title>
        <description>&lt;p&gt;Software Engineering Daily is my absolute favorite podcast and it has replaced almost all my daily listens – no more Major Spoilers, very limited Geek History Lessons, etc.  And the main reason is 
## Homomorphic Encryption&lt;/p&gt;

&lt;h2 id=&quot;indie-hacking-exists&quot;&gt;Indie Hacking Exists!&lt;/h2&gt;

&lt;p&gt;That indie hacking is a thing&lt;/p&gt;

&lt;p&gt;SE Daily - Learned&lt;/p&gt;

&lt;p&gt;Software Psychology&lt;/p&gt;

&lt;p&gt;Subtle Engineering Complexitits - transition of&lt;/p&gt;

&lt;p&gt;a distributed system of services is much harder in its debugging characteristics than a monolith – its much harder to put in breakpoints&lt;/p&gt;

&lt;p&gt;17:03&lt;/p&gt;

</description>
        <pubDate>Tue, 16 May 2017 12:18:16 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/16/10-things-software-engineering-daily-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/16/10-things-software-engineering-daily-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Adding Cron to a Dockerized Rails Application Using Clockwork</title>
        <description>&lt;p&gt;If you talk to any computer scientist they will easily tell you that 50 plus years into the computer age, scheduling is NOT a solved problem.  Even something as simple as cron which is decades old can still be challenging under different environments (example - cron and RVM is a bloody nightmare).  And then when you add containers into the mix, well …  In this blog post I outline how I’m handling a daily scheduled process using Docker and Clockwork (a cron like gem for Ruby).&lt;/p&gt;

&lt;h1 id=&quot;why-is-cron-and-docker-a-problem&quot;&gt;Why is Cron and Docker a Problem&lt;/h1&gt;

&lt;p&gt;Docker represents a simplified computing environment where you generally don’t have a full Linux stack – instead the model is generally a single root process.  Now there are people who challenge that approach, notably the good folks at Phusion, but this is generally regarded as a best practice.  So you’re not your own application stack and then cron as well.&lt;/p&gt;

&lt;h1 id=&quot;enter-clockwork&quot;&gt;Enter Clockwork&lt;/h1&gt;

&lt;p&gt;Clockwork is a long standing Ruby gem which acts as a persistent daemon with its own scheduler that executes a simple DSL allow your models to be easily executed.  Here’s an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;every(1.day, 'Midnight.job -- PageArchive.update_everything', :at =&amp;gt; '00:00') do |job|
  PageArchive.update_everything
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unlike traditional cron syntax, I’ve never found an issue with reading the Clockwork dsl, this says:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every day&lt;/li&gt;
  &lt;li&gt;execute at midnight&lt;/li&gt;
  &lt;li&gt;run PageArchive.update_everything&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;adding-clockwork-to-your-rails-application&quot;&gt;Adding Clockwork to your Rails Application&lt;/h1&gt;

&lt;p&gt;Here are the steps to add clockwork to your Rails application:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add the clockwork gem to your Gemfile:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem ‘clockwork’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Create a clock.rb file in lib:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;touch lib/clock.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write one or more clockwork expressions in clock.rb.  Here’s an example from my application:&lt;/p&gt;

    &lt;p&gt;require ‘clockwork’
include Clockwork&lt;/p&gt;

    &lt;p&gt;require File.expand_path(‘../../config/boot’, &lt;strong&gt;FILE&lt;/strong&gt;)&lt;/p&gt;

    &lt;p&gt;require File.expand_path(‘../../config/environment’, &lt;strong&gt;FILE&lt;/strong&gt;)&lt;/p&gt;

    &lt;p&gt;require ‘clockwork’&lt;/p&gt;

    &lt;p&gt;include Clockwork&lt;/p&gt;

    &lt;p&gt;module Clockwork&lt;/p&gt;

    &lt;p&gt;every(1.day, ‘Midnight.job – PageArchive.update_everything’, :at =&amp;gt; ‘03:58’) do |job|
    PageArchive.update_everything
  end&lt;/p&gt;

    &lt;p&gt;every(1.week, ‘Weekly Job – PageArchive.update_bing’, :at =&amp;gt; ‘00:00’) do |job|
    PageArchive.update_bing
  end&lt;/p&gt;

    &lt;p&gt;end&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To test this you can just use the command line:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle exec clockwork lib/clock.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you set that running then you need to simply watch it to make sure that tasks execute.  Yes, provided that your syntax is correct, they certainly should but I’ve seen enough scheduled jobs fail over the years that I always feel better when I actually see them run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you were previously using a Rake task to run your daily jobs then you need to refactor that as something like a class method that can be called from the Rake task.  This allows you to continue using the Rake task but also make your code easily executable from Clockwork.&lt;/p&gt;

&lt;h1 id=&quot;the-dockerfile&quot;&gt;The Dockerfile&lt;/h1&gt;

&lt;p&gt;In this example I have a simple Rails app which exists to populate a page archive database consisting of data harvested daily from the Internet.  Here’s the Dockerfile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ruby:2.3.1-alpine

RUN apk update &amp;amp;&amp;amp; apk add build-base nodejs mariadb-dev tzdata

RUN mkdir /app
WORKDIR /app

COPY Gemfile Gemfile.lock ./
RUN bundle install --binstubs

COPY . .

CMD bundle exec clockwork lib/clock.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The secret to making the scheduling work is to execute the clockwork executable as the root command in the container. This causes the Clockwork executable to be launched when the container initializes.  At that point Clockwork will run the command until it finishes and then remain running, waiting for its next invocation.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-and-issues&quot;&gt;Conclusion and Issues&lt;/h1&gt;

&lt;p&gt;As you can see, when you have a scheduling process as the root process in your container, it provides an easy way to handle your scheduled job needs and Clockwork really does make it easy.  Still this doesn’t mean that scheduling for your application is necessarily solved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What if your needs are large enough that you have to have multiple machines?&lt;/li&gt;
  &lt;li&gt;How do you log issues with the scheduled jobs?&lt;/li&gt;
  &lt;li&gt;What happens when a deploy occurs while your container is running a job?  How do you ensure that the day’s work actually got processed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiple-machines&quot;&gt;Multiple Machines&lt;/h2&gt;

&lt;p&gt;If I needed to have multiple machines involved, I would likely implement some kind of a work queue where they scheduler is solely responsible for setting up a queue of the work to be done and then containers on other machines are responsible for processing the data in the queue.  This approach is also useful for the deploy issue covered below.&lt;/p&gt;

&lt;h2 id=&quot;logging-issues-with-scheduled-jobs&quot;&gt;Logging Issues with Scheduled Jobs&lt;/h2&gt;

&lt;p&gt;There are enough issues with containers and logs that addressing it here is really out of the scope of this blog post.  I did want to point it out, however, as logging around scheduled jobs is usually necessary and needs to be thought through.&lt;/p&gt;

&lt;h2 id=&quot;deploy-conflicts&quot;&gt;Deploy Conflicts&lt;/h2&gt;

&lt;p&gt;There are at least three strategies that I’d use for handling deploy conflicts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start your jobs early and simply don’t deploy while they are running.  This is the least desirable strategy but it does actually work provided the execution time of the job is only a few hours (i.e. until when people need to deploy).  Obviously this works poorly with a globally distributed labor pool and a CI server that deploys code automatically.&lt;/li&gt;
  &lt;li&gt;Change the code so that jobs become idempotent i.e. the job knows that a particular data item can be processed, for example, only once per day and then allow the scheduled process to be run multiple times per day.  This decreases the chance of a deploy shutting things down fully for an entire day since statistically it becomes less likely that you’ll conflict with something every single time that it is running allowing at least one of the runs to complete.&lt;/li&gt;
  &lt;li&gt;Use the multiple machines strategy mentioned above so that you have a work queue and multiple asynchronous processing engines on the data.  As long as the queue is atomic in nature this avoids duplication issues and the additional parallelism that multiple containers bring should process the data more quickly thereby leading to fewer deploy conflicts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of each of these strategies, the third is likely the best but incurs the most application level changes.  Please keep in mind that you can iteratively evolve your application towards the right strategy for your needs.&lt;/p&gt;

</description>
        <pubDate>Thu, 11 May 2017 05:02:25 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/05/11/adding-cron-to-a-dockerized-rails-application-using-clockwork.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/05/11/adding-cron-to-a-dockerized-rails-application-using-clockwork.html</guid>
        
        <category>rails</category>
        
        <category>docker</category>
        
        <category>cron</category>
        
        <category>clockwork</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Adding Cron to a Dockerized Rails Application Using Clockwork</title>
        <description>&lt;p&gt;If you talk to any computer scientist they will easily tell you that 50 plus years into the computer age, scheduling is NOT a solved problem.  Even something as simple as cron which is decades old can still be challenging under different environments (example - cron and RVM is a bloody nightmare).  And then when you add containers into the mix, well …  In this blog post I outline how I’m handling a daily scheduled process using Docker and Clockwork (a cron like gem for Ruby).&lt;/p&gt;

&lt;h1 id=&quot;why-is-cron-and-docker-a-problem&quot;&gt;Why is Cron and Docker a Problem&lt;/h1&gt;

&lt;p&gt;Docker represents a simplified computing environment where you generally don’t have a full Linux stack – instead the model is generally a single root process.  Now there are people who challenge that approach, notably the good folks at Phusion, but this is generally regarded as a best practice.  So you’re not your own application stack and then cron as well.&lt;/p&gt;

&lt;h1 id=&quot;enter-clockwork&quot;&gt;Enter Clockwork&lt;/h1&gt;

&lt;p&gt;Clockwork is a long standing Ruby gem which acts as a persistent daemon with its own scheduler that executes a simple DSL allow your models to be easily executed.  Here’s an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;every(1.day, 'Midnight.job -- PageArchive.update_everything', :at =&amp;gt; '00:00') do |job|
  PageArchive.update_everything
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unlike traditional cron syntax, I’ve never found an issue with reading the Clockwork dsl, this says:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every day&lt;/li&gt;
  &lt;li&gt;execute at midnight&lt;/li&gt;
  &lt;li&gt;run PageArchive.update_everything&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;adding-clockwork-to-your-rails-application&quot;&gt;Adding Clockwork to your Rails Application&lt;/h1&gt;

&lt;p&gt;Here are the steps to add clockwork to your Rails application:&lt;/p&gt;

&lt;p&gt;Add the clockwork gem to your Gemfile:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem ‘clockwork’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a clock.rb file in lib:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;touch lib/clock.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Write one or more clockwork expressions in clock.rb.  Here’s an example from my application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'clockwork'
include Clockwork

require File.expand_path('../../config/boot', __FILE__)

require File.expand_path('../../config/environment', __FILE__)

require 'clockwork'

include Clockwork

module Clockwork

  every(1.day, 'Midnight.job -- PageArchive.update_everything', :at =&amp;gt; '03:58') do |job|
    PageArchive.update_everything
  end

  every(1.week, 'Weekly Job -- PageArchive.update_bing', :at =&amp;gt; '00:00') do |job|
    PageArchive.update_bing
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To test this you can just use the command line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle exec clockwork lib/clock.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you set that running then you need to simply watch it to make sure that tasks execute.  Yes, provided that your syntax is correct, they certainly should but I’ve seen enough scheduled jobs fail over the years that I always feel better when I actually see them run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you were previously using a Rake task to run your daily jobs then you need to refactor that as something like a class method that can be called from the Rake task.  This allows you to continue using the Rake task but also make your code easily executable from Clockwork.&lt;/p&gt;

&lt;h1 id=&quot;the-dockerfile&quot;&gt;The Dockerfile&lt;/h1&gt;

&lt;p&gt;In this example I have a simple Rails app which exists to populate a page archive database consisting of data harvested daily from the Internet.  Here’s the Dockerfile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ruby:2.3.1-alpine

RUN apk update &amp;amp;&amp;amp; apk add build-base nodejs mariadb-dev tzdata

RUN mkdir /app
WORKDIR /app

COPY Gemfile Gemfile.lock ./
RUN bundle install --binstubs

COPY . .

CMD bundle exec clockwork lib/clock.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The secret to making the scheduling work is to execute the clockwork executable as the root command in the container. This causes the Clockwork executable to be launched when the container initializes.  At that point Clockwork will run the command until it finishes and then remain running, waiting for its next invocation.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-and-issues&quot;&gt;Conclusion and Issues&lt;/h1&gt;

&lt;p&gt;As you can see, when you have a scheduling process as the root process in your container, it provides an easy way to handle your scheduled job needs and Clockwork really does make it easy.  Still this doesn’t mean that scheduling for your application is necessarily solved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What if your needs are large enough that you have to have multiple machines?&lt;/li&gt;
  &lt;li&gt;How do you log issues with the scheduled jobs?&lt;/li&gt;
  &lt;li&gt;What happens when a deploy occurs while your container is running a job?  How do you ensure that the day’s work actually got processed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiple-machines&quot;&gt;Multiple Machines&lt;/h2&gt;

&lt;p&gt;If I needed to have multiple machines involved, I would likely implement some kind of a work queue where they scheduler is solely responsible for setting up a queue of the work to be done and then containers on other machines are responsible for processing the data in the queue.  This approach is also useful for the deploy issue covered below.&lt;/p&gt;

&lt;h2 id=&quot;logging-issues-with-scheduled-jobs&quot;&gt;Logging Issues with Scheduled Jobs&lt;/h2&gt;

&lt;p&gt;There are enough issues with containers and logs that addressing it here is really out of the scope of this blog post.  I did want to point it out, however, as logging around scheduled jobs is usually necessary and needs to be thought through.&lt;/p&gt;

&lt;h2 id=&quot;deploy-conflicts&quot;&gt;Deploy Conflicts&lt;/h2&gt;

&lt;p&gt;There are at least three strategies that I’d use for handling deploy conflicts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start your jobs early and simply don’t deploy while they are running.  This is the least desirable strategy but it does actually work provided the execution time of the job is only a few hours (i.e. until when people need to deploy).  Obviously this works poorly with a globally distributed labor pool and a CI server that deploys code automatically.&lt;/li&gt;
  &lt;li&gt;Change the code so that jobs become idempotent i.e. the job knows that a particular data item can be processed, for example, only once per day and then allow the scheduled process to be run multiple times per day.  This decreases the chance of a deploy shutting things down fully for an entire day since statistically it becomes less likely that you’ll conflict with something every single time that it is running allowing at least one of the runs to complete.&lt;/li&gt;
  &lt;li&gt;Use the multiple machines strategy mentioned above so that you have a work queue and multiple asynchronous processing engines on the data.  As long as the queue is atomic in nature this avoids duplication issues and the additional parallelism that multiple containers bring should process the data more quickly thereby leading to fewer deploy conflicts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of each of these strategies, the third is likely the best but incurs the most application level changes.  Please keep in mind that you can iteratively evolve your application towards the right strategy for your needs.&lt;/p&gt;

</description>
        <pubDate>Thu, 11 May 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/05/11/adding-cron-to-a-dockerized-rails-application-using-clockwork.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/05/11/adding-cron-to-a-dockerized-rails-application-using-clockwork.html</guid>
        
        <category>rails</category>
        
        <category>docker</category>
        
        <category>cron</category>
        
        <category>clockwork</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Building a Rails API App Which Accepts Data from JavaScript</title>
        <description>&lt;p&gt;A friend recently described a web tracking problem to me and we discussed looking at it via Google Analytics or by rolling our own approach.  Google Analytics is tremendously powerful but I looked at this as a chance to improve my JavaScript skills which are, admittedly, not my strongest part of my technical skill set so I went with the roll my own approach.  As with most things I do, I’m writing this out in full to clarify my own thinking and understanding of the problem as well as to make this information publicly available.&lt;/p&gt;

&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;The problem at hand was to record tracking data as people viewed pages on an e-commerce web site.  The goal was to correlate the tracking data and try and resolve the per visitor url paths that were traversed.  I also wanted to experiment with browser fingerprinting so I used the FingerprintJS2 library.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;The solution was two fold:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript that runs in the browser and executes an HTTP get with the details of the url that the user visited&lt;/li&gt;
  &lt;li&gt;A Rails API server that accepts the details of the url that was visited and logs it to a database&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;part-1-javascript&quot;&gt;Part 1: JavaScript&lt;/h1&gt;

&lt;p&gt;I’m not a JavaScript expert by any means so this js code was largely pulled together from StackOverflow and other sources (references are at the end).  I ended up writing this twice, first starting with jQuery and then realizing that for something embeddable you really want to eliminate every dependency – so getting rid of jQuery itself is a desirable goal.&lt;/p&gt;

&lt;h2 id=&quot;browser-fingerprinting&quot;&gt;Browser Fingerprinting&lt;/h2&gt;

&lt;p&gt;A browser fingerprint is an SHA / MD5 style hash which reflects a unique profile of a browser based on the browser’s uniquely exposed capabilities, platform, fonts and other attributes.  While not necessarily as unique as a fingerprint, browser fingerprint is actually a robust approach to tracking a user and since it is based on readily available &lt;a href=&quot;https://github.com/Valve/fingerprintjs2&quot;&gt;open source libraries&lt;/a&gt;, it isn’t something that needs to be developed from scratch.  And, happily, it even gets good marks on my new &lt;a href=&quot;http://shouldigem.com/report_cards/146?url=https%3A%2F%2Fgithub.com%2FValve%2Ffingerprintjs2&quot;&gt;Should I Gem&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;Here’s all it takes to calculate a browser fingerprint:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- bring in the library --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fingerprintjs2/1.5.1/fingerprint2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- the hash will be in the variable result --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    new Fingerprint2().get(function(result, components){
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we know how to calculate a browser fingerprint, the next step is the sending it to our API service either by jQuery or a native XHR call.&lt;/p&gt;

&lt;h2 id=&quot;the-jquery-approach&quot;&gt;The jQuery Approach&lt;/h2&gt;

&lt;p&gt;Here’s the jQuery code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fingerprintjs2/1.5.1/fingerprint2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    new Fingerprint2().get(function(result, components){
 
    $(document).ready(function(){

         $.post('http://localhost:3820/api/log_it', {
           &quot;api_key&quot;: &quot;foobarbaz&quot;,
           &quot;url&quot;: window.location.href,
           &quot;fingerprint&quot;: result
         }, function(serverResponse){
         })

     })
 
   });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-xhr-approach&quot;&gt;The XHR Approach&lt;/h2&gt;

&lt;p&gt;Here’s the XHR code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fingerprintjs2/1.5.1/fingerprint2.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    new Fingerprint2().get(function(result, components){
      var xhr = new XMLHttpRequest();
      var dest_url = &quot;http://localhost:3820/api/log_it?&quot; + &quot;api_key=&quot; + &quot;foobarbaz&quot; + &quot;&amp;amp;&quot; + &quot;url=&quot; + window.location.href + &quot;&amp;amp;&quot; + &quot;fingerprint=&quot; + result;
      xhr.open('GET', dest_url);
      xhr.onreadystatechange = function(e) {
        if(xhr.readyState === 4)
          console.log(&quot;got result: &quot;, xhr.responseText);
      };
      xhr.send();
   });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;part-2-rails-api-server&quot;&gt;Part 2: Rails API Server&lt;/h1&gt;

&lt;p&gt;I’ve become an increasing fan of microservices as an architectural paradigm and Rails API servers are something I now generate regularly.  Here’s how I did that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rails new –api tracking_api –database=mysql –skip-spring –skip-listen –skip-sprockets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ll notice that I’m skipping spring and listen which gets rid of the &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2017/03/20/getting-around-osx-bash-fork-issues.html&quot;&gt;disaster that is the evented file watcher on OSX&lt;/a&gt; / &lt;a href=&quot;https://github.com/puma/puma-dev/issues/56&quot;&gt;Github Issue&lt;/a&gt; (this causes huge issues with overly aggressive process launching).&lt;/p&gt;

&lt;h2 id=&quot;getting-past-cors-restrictions&quot;&gt;Getting Past CORS Restrictions&lt;/h2&gt;

&lt;p&gt;Once this is done we need to add the rack-cors gem with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem ‘rack-cors’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in the Gemfile.  In case you’ve been following what I’ve done with &lt;a href=&quot;http://www.shouldigem.com&quot;&gt;ShouldIGem.com&lt;/a&gt;, you might be curious how rack-cors fared – it got an &lt;a href=&quot;http://shouldigem.com/report_cards/141?url=https%3A%2F%2Fgithub.com%2Fcyu%2Frack-cors&quot;&gt;A&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rack-cors gem addresses the problems with Cross Origin Scripting (CORS) by allowing domain X to post or get to domain Y.  While there are a bunch of other approaches to getting around CORS, the rack-cors gem was by far the best solution I found.&lt;/p&gt;

&lt;p&gt;Note: There are security implications if you open rack-cors to everything; please keep that in mind.&lt;/p&gt;

&lt;h2 id=&quot;writing-the-api&quot;&gt;Writing the Api&lt;/h2&gt;

&lt;p&gt;After a bundle install, I generated an Api controller with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle exec rails g controller api&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I then wrote a simple method to capture the data and save it to a PageView object in the database:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ApiController &amp;lt; ApplicationController
  
  def log_it
    PageView.create_page_view(params[:fingerprint], request.remote_ip, params[:url], request.user_agent)
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I then needed to write a route for this as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails.application.routes.draw do
  get '/api/log_it', to: 'api#log_it'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The PageView object is simply an ActiveRecord model which logs the view to the database and it is simple enough that I’m not going to cover it here.&lt;/p&gt;

&lt;p&gt;Note: This is a simplified controller.  I have deliberately omitted handling the api key parameter which limits calls against the API to only those with valid API keys.&lt;/p&gt;

&lt;h2 id=&quot;testing-this-with-wget-or-curl&quot;&gt;Testing this with Wget or Curl&lt;/h2&gt;

&lt;p&gt;As I wrote about previously, I’m a huge believer in using curl or wget to test APIs.  Here is a simple wget statement that exercises the API as you tail a log file to make sure everything works:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;wget “http://localhost:3820/api/log_it?api_key=foobarbaz&amp;amp;url=http%3A%2F%2Flocalhost%3A3400%2F&amp;amp;fingerprint=e82eaadd”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;testing-this-from-the-browser&quot;&gt;Testing this From the Browser&lt;/h2&gt;

&lt;p&gt;To test this from the browser just embed it in an HTML page and tail the logs on the API service.  Here’s what those logs look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started GET &quot;/api/log_it?api_key=foobarbaz&amp;amp;url=http://localhost:3400/&amp;amp;fingerprint=e82eaadd998e1aae0309b781029f8edb&quot; for 127.0.0.1 at 2017-05-09 18:35:32 -0400
Processing by ApiController#log_it as */*
  Parameters: {&quot;api_key&quot;=&amp;gt;&quot;hyde314159&quot;, &quot;url&quot;=&amp;gt;&quot;http://localhost:3400/&quot;, &quot;fingerprint&quot;=&amp;gt;&quot;e82eaadd998e1aae0309b781029f8edb&quot;}
   (0.2ms)  BEGIN
  SQL (0.4ms)  INSERT INTO `page_views` (`created_at`, `updated_at`, `date_created_at`, `fingerprint`, `ip_address`, `user_agent`, `url`, `url_base`) VALUES ('2017-05-09 22:35:32', '2017-05-09 22:35:32', '2017-05-09', 'e82eaadd998e1aae0309b781029f8edb', '127.0.0.1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36', 'http://localhost:3400/', 'localhost/')
   (0.8ms)  COMMIT
Completed 204 No Content in 4ms (ActiveRecord: 1.4ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;This was an interesting exercise which taught me a bit of JavaScript, illustrated how to use the browser fingerprinting and finally taught me a way around CORS restrictions – the rack-cors gem.  Hopefully this blog post illustrated for you how to integrate external JavaScript with a Rails api.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38290552/using-rest-api-and-send-post-request&quot;&gt;http://stackoverflow.com/questions/38290552/using-rest-api-and-send-post-request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1034621/get-current-url-in-web-browser&quot;&gt;http://stackoverflow.com/questions/1034621/get-current-url-in-web-browser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://test-cors.org/&quot;&gt;http://test-cors.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monsur/test-cors.org&quot;&gt;https://github.com/monsur/test-cors.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jpillora/xdomain&quot;&gt;https://github.com/jpillora/xdomain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.jquery.com/ajax/working-with-jsonp/&quot;&gt;https://learn.jquery.com/ajax/working-with-jsonp/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29751115/how-to-enable-cors-in-rails-4-app&quot;&gt;http://stackoverflow.com/questions/29751115/how-to-enable-cors-in-rails-4-app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cyu/rack-cors&quot;&gt;https://github.com/cyu/rack-cors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/20035101/no-access-control-allow-origin-header-is-present-on-the-requested-resource&quot;&gt;http://stackoverflow.com/questions/20035101/no-access-control-allow-origin-header-is-present-on-the-requested-resource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/05/10/building-a-rails-api-app-which-accepts-data-from-javascript.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/05/10/building-a-rails-api-app-which-accepts-data-from-javascript.html</guid>
        
        <category>rails</category>
        
        <category>javascript</category>
        
        <category>api</category>
        
        <category>cors</category>
        
        <category>fingerprint</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
