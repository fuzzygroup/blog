<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Mar 2017 17:33:38 -0400</pubDate>
    <lastBuildDate>Thu, 16 Mar 2017 17:33:38 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>When Your Font Awesome Etsy Icon Doesn't Display</title>
        <description>&lt;p&gt;I’m a fan of &lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt; and I think enough of it that it was actually the &lt;strong&gt;first&lt;/strong&gt; bit of software I purchased for use on my side project.&lt;/p&gt;

&lt;p&gt;I recently had the situation where most of my Font Awesome icons would show up but a few wouldn’t.  I knew it wasn’t a layout problem because the code was all machine generated and the Amazon icon was showing up just a few lines earlier.  An example of an icon which wouldn’t show up is the Etsy icon.&lt;/p&gt;

&lt;p&gt;As with almost all my crazy CSS / Bootstrap issues, I reached out to my buddy &lt;a href=&quot;http://dasari.me/&quot;&gt;Dv&lt;/a&gt; and a quick pairing session set it right.  The first solution we found was to add the following snippet to custom.scss in /app/assets/stylesheets:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.fa-etsy:before {
  content: &quot;\0045&quot;
  font-family: georgia, serif
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that fixed the Etsy icon – but it was really a work around and the credit goes to &lt;a href=&quot;https://hayley.cc/2016/10/05/Font-Awesome-No-Etsy-icon-No-problem/&quot;&gt;Hayley.cc&lt;/a&gt; (brilliant but still a work around).  But only fixing the Etsy icon clearly wasn’t enough.&lt;/p&gt;

&lt;p&gt;Dv did some digging and came up with the thesis that the &lt;a href=&quot;https://github.com/bokmann/font-awesome-rails&quot;&gt;font-awesome-rails gem&lt;/a&gt; wasn’t up to date and suggested I replace it with the CDN.  So by adding this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;link href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN&quot; crossorigin=&quot;anonymous&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem was entirely fixed.  Given the problems with CloudBleed, a month ago, I’m mildly paranoid with a CDN but this did simply and brilliantly fix the problem.&lt;/p&gt;

&lt;p&gt;Thank you Dv!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/css/2017/03/16/when-your-font-awesome-etsy-icon-doesn-t-display.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/css/2017/03/16/when-your-font-awesome-etsy-icon-doesn-t-display.html</guid>
        
        <category>css</category>
        
        <category>fontawesome</category>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Developer Employee Transitions When You're an AWS Shop</title>
        <description>&lt;p&gt;So I find myself advising a former employer on how to lock out an employee with fairly pervasive access (and, yes, I am the employee).  Here was my advice:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The safest option would be to move to white listing &lt;strong&gt;all&lt;/strong&gt; ip addresses needed for SSH login.  That would be an absolute ban on any incoming SSH logins from the old employee and, while inconvenient, is a wonderful means to lock down a system.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair&quot;&gt;Re-issue a new SSH pem file&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Delete the old SSH pem file on your machine and then verify login to at least 2 systems with the new PEM file.  I’d make sure to verify access to the primary db server using the new PEM file but that’s just me.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31912037/how-to-delete-deactivate-the-current-pem-file-and-create-new-one-in-aws&quot;&gt;De-authorize the old PEM file&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-api-key.html&quot;&gt;Delete the API keys that the employee had access to&lt;/a&gt;.  Make sure that you delete them in all regions where they were valid.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 14 Mar 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/14/developer-employee-transitions-when-you-re-an-aws-shop.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/14/developer-employee-transitions-when-you-re-an-aws-shop.html</guid>
        
        
      </item>
    
      <item>
        <title>Ansible Error with AWS, AMI Creation and Encrypted</title>
        <description>&lt;p&gt;Here is a bizarre Ansible / AWS error I just found:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;An exception occurred during task execution. To see the full traceback, use -vvv. The error was: TypeError: __init__() got an unexpected keyword argument 'encrypted'
fatal: [localhost]: FAILED! =&amp;gt; {&quot;changed&quot;: false, &quot;failed&quot;: true, &quot;module_stderr&quot;: &quot;Traceback (most recent call last):\n  File \&quot;/tmp/ansible_prCPvG/ansible_module_ec2_ami.py\&quot;, line 560, in &amp;lt;module&amp;gt;\n    main()\n  File \&quot;/tmp/ansible_prCPvG/ansible_module_ec2_ami.py\&quot;, line 552, in main\n    create_image(module, ec2)\n  File \&quot;/tmp/ansible_prCPvG/ansible_module_ec2_ami.py\&quot;, line 381, in create_image\n    bd = BlockDeviceType(**device)\nTypeError: __init__() got an unexpected keyword argument 'encrypted'\n&quot;, &quot;module_stdout&quot;: &quot;&quot;, &quot;msg&quot;: &quot;MODULE FAILURE&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A quick google revealed &lt;a href=&quot;https://github.com/ansible/ansible-modules-core/issues/1773&quot;&gt;this solution&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;pip install boto –upgrade&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which I had to execute as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo pip install boto –upgrade&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 14 Mar 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/14/ansible-error-with-aws-ami-creation-and-encrypted.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/14/ansible-error-with-aws-ami-creation-and-encrypted.html</guid>
        
        
      </item>
    
      <item>
        <title>Dropbox for the Software Developer</title>
        <description>&lt;p&gt;An old friend asked me a great question recently:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I saw you mentioning your use of Dropbox the other day. I’ve been using GitHub as my “cloud device”: when would I find Dropbox a better option?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the single best decisions that I made in 2016 was to adopt &lt;a href=&quot;http://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt; as the key part of my personal computing environment.  I last talked about this back on &lt;a href=&quot;http://fuzzyblog.io/blog/postmac/2016/11/05/life-in-a-postmac-world.html&quot;&gt;November&lt;/a&gt;, see the section “Conclusion - A Synchronized Computing Environment For Me” but it really does bear further description.&lt;/p&gt;

&lt;p&gt;My use for Dropbox is exactly what it is designed for – synchronization.  I’ve always had multiple machines but one has always been my “primary”” machine.  Since all my code was on Github, I could generally get to my code from any machine but what about my spreadsheets?  Or my documents?  Or just about any other file that I needed.  Here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Signup for a 1 Terabyte Dropbox account (roughly $50 / year so dirt cheap).&lt;/li&gt;
  &lt;li&gt;Install Dropbox on all my machines including my ChromeBook, my Linux box, my iPhone and iPad.&lt;/li&gt;
  &lt;li&gt;Symlink ~/Dropbox to ~/me so I have an easier path to type.&lt;/li&gt;
  &lt;li&gt;Move all the files that matter to me into ~/me under a logical file structure related to my usage context - ~/me/blogging for all my blogs, ~/me/Documents for Documents, ~/me/consulting for consulting work, ~/me/fuzzygroup for anything I do online and so on.&lt;/li&gt;
  &lt;li&gt;Move important things like SSH keys under ~/me and then use symlinks to insert them back into their correct location.&lt;/li&gt;
  &lt;li&gt;Create a ~/me/transfer directory to copy transitory data from one machine to anther.&lt;/li&gt;
  &lt;li&gt;Move all the git repos that matter underneath ~/me.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My working set of data for Dropbox is about 40 gigabytes and I suspect that could be made smaller but I haven’t seen the need.  This approach has meant that literally no matter what computing device I am on, I always have access to the data that actually matters to me.  True I don’t have, for example, my iTunes music synchronized or my Photos but in terms of the data that I, as a software developer, actually rely on, this is about as perfect an environment as I could dream up.  The only objection I have is that on one of my machines, oddly the most powerful, Dropbox refuses to fully sync, always stalling out on two files that never complete.  Since there are no user facing logs on Dropbox for OSX, well, I have no idea what they are.  And, worse, it spikes my CPU past 100% always running up the fan and down the battery life.  But, other than that, I’m ridiculously happy with this as an approach.&lt;/p&gt;

&lt;p&gt;I know that this was supposed to be what Apple was going to give us with iCloud but iCloud:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Doesn’t seem to work particularly well&lt;/li&gt;
  &lt;li&gt;Removes local file storage of documents into the cloud solely thus absolutely screwing you over if you don’t have internet access&lt;/li&gt;
  &lt;li&gt;Has no cross platform support – I really wanted all my data on my ChromeBook and my Linux box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is astonishing to me that the cross machine synchronization environment that I’ve been searching for most of my professional life is nothing more than a simple Dropbox subscription but that’s all it took.&lt;/p&gt;

&lt;p&gt;I still do full OS level backups periodically but I don’t generally worry about it terribly since the data that matters is always safe being mirrored across all my computing devices and into the Dropbox cloud.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/dropbox/2017/03/13/dropbox-for-the-software-developer.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/dropbox/2017/03/13/dropbox-for-the-software-developer.html</guid>
        
        <category>dropbox</category>
        
        
        <category>dropbox</category>
        
      </item>
    
      <item>
        <title>Leveling Up as a Developer Part 2 - Interstitial Time</title>
        <description>&lt;p&gt;I recently wrote about &lt;a href=&quot;http://fuzzyblog.io/blog/software_engineering/2017/02/24/leveling-up-as-a-developer.html&quot;&gt;Leveling Up as a Developer&lt;/a&gt;.  Leveraging Interstitial Time is another approach to improve your skills.  As a developer there are at least two very different types of learning that you have to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Deep, Focused Learning&lt;/strong&gt;.  The classic example here is the syntax of a language.  Some of us can do that by simply reading a book but most of us need the focused, “muscle memory” effort of actually doing it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Awareness Learning&lt;/strong&gt;.  A huge part of the IT or Information Technology space is simply being aware that something exists.  Whether it is a tool, a particular library, an algorithm or merely a way to approach a problem, awareness is often all you need.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We all know how to do deep focused learning – you sit, generally alone, in a quiet space with a computer and lots of time and you work at it.  Some of us have a set of problems that we like to solve to teach ourselves.  Others focus on working through tutorials.  And there are certainly other approaches.&lt;/p&gt;

&lt;p&gt;But how do you tackle &lt;em&gt;awareness learning&lt;/em&gt;?  Given how vast the world of IT is in 2017, how can you possibly be aware of everything you need to know to be an effective software engineer?&lt;/p&gt;

&lt;p&gt;The remainder of this post talks about awareness learning and my approach to it.&lt;/p&gt;

&lt;h1 id=&quot;understanding-interstitial-time&quot;&gt;Understanding Interstitial Time&lt;/h1&gt;

&lt;p&gt;Just as an interstitial ad is the ad that shows up between page transitions, I view interstitial time as the &lt;em&gt;time between times&lt;/em&gt;.  A good example of this came up last night – I had to peel two pounds of shrimp for dinner.  This was easily 30 minutes of time when my hands were occupied and I really couldn’t do much.  Given that my hands were nasty dirty, I couldn’t even turn the pages of a book while I did it.  To me that’s interstitial time – normally it would be entirely wasted.  What I do, however, is turn interstitial time into awareness learning because while I can’t do much, I can &lt;strong&gt;listen&lt;/strong&gt; – and that’s at the heart of awareness learning.&lt;/p&gt;

&lt;h1 id=&quot;required-items&quot;&gt;Required Items&lt;/h1&gt;

&lt;p&gt;These are the things you need:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/smart_phone.jpg&quot; alt=&quot;smart_phone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some type of smart phone; doesn’t have to be iOS, android is just fine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/bluetooth_headset.jpg&quot; alt=&quot;bluetooth_headset.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bluetooth headset.  Personally I favor the &lt;a href=&quot;https://www.amazon.com/Plantronics-Universal-Cancelling-Wireless-Bluetooth/dp/B010XDJTWS&quot;&gt;Plantronics M180&lt;/a&gt; but any one will work.  This one has good volume, easy pairing and a 7 hour battery.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/icatcher-podcast-player/id414419105?mt=8&quot;&gt;&lt;img src=&quot;/blog/assets/icatcher.jpg&quot; alt=&quot;icatcher.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need some kind of podcasting listening tool.  Personally I Use &lt;a href=&quot;https://itunes.apple.com/us/app/icatcher-podcast-player/id414419105?mt=8&quot;&gt;iCatcher&lt;/a&gt; on iOS but &lt;a href=&quot;https://itunes.apple.com/us/app/overcast-podcast-player/id888422857?mt=8&quot;&gt;OverCast&lt;/a&gt; by Marco Arment is also excellent and I recently bought &lt;a href=&quot;https://itunes.apple.com/app/apple-store/id1080840241?mt=8&amp;amp;ign-mpt=uo%3D4&quot;&gt;Castro&lt;/a&gt; but haven’t used it as well.  There are great ones on Android as well but none that I have personally used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/podcast_feed.jpg&quot; alt=&quot;podcast_feed.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most important thing is some podcast feed that’s going to download new things to learn right into your phone on an ongoing basis.  Thankfully, in 2017, that essentially means any podcast on the planet – since they pretty much all have an RSS feed.&lt;/p&gt;

&lt;p&gt;From top to bottom this is a smart phone, a bluetooth headset and a podcast feed or podcast feeds of things that for your type of software engineering you should be aware.  I’m a generalist with a focus on web and back end so I find &lt;a href=&quot;https://softwareengineeringdaily.com/&quot;&gt;Software Engineering Daily&lt;/a&gt; to be outstanding.  But here are some more great learning sources by category:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DevOps - &lt;a href=&quot;http://packetpushers.net/datanauts-podcast/&quot;&gt;Datanaughts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Big Data - &lt;a href=&quot;https://www.drilltodetail.com/&quot;&gt;Drill to Detail&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Online Marketing - &lt;a href=&quot;http://okdork.com/podcast/&quot;&gt;Noah Kagan Presents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Machine Learning - &lt;a href=&quot;http://www.thetalkingmachines.com/&quot;&gt;Talking Machines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Data Science - &lt;a href=&quot;https://dataskeptic.com/podcast&quot;&gt;Data Skeptic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JavaScript - &lt;a href=&quot;https://devchat.tv/js-jabber&quot;&gt;JavaScript Jabber&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby - &lt;a href=&quot;http://5by5.tv/rubyonrails&quot;&gt;5by5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Elixir - &lt;a href=&quot;https://soundcloud.com/elixirfountain&quot;&gt;Elixir Fountain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think you can see that there is a podcast for almost any time of IT learning.  For example I just googled for Embedded System podcast and found &lt;a href=&quot;http://embedded.fm/&quot;&gt;Embedded.fm&lt;/a&gt; which is 189 episodes long on Embedded Systems and is currently covering Soft Robotics.&lt;/p&gt;

&lt;p&gt;Just google for what you need to learn about and then “podcast” and you’re very likely to find something.&lt;/p&gt;

&lt;h1 id=&quot;pulling-off-awareness-learning-on-an-ongoing-basis&quot;&gt;Pulling Off Awareness Learning On an Ongoing Basis&lt;/h1&gt;

&lt;p&gt;The key to this is that you need to develop a &lt;strong&gt;habit&lt;/strong&gt; around applying interstitial time to learning.  Here’s all you need to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the things above&lt;/li&gt;
  &lt;li&gt;Keep your headset and phone regularly charged&lt;/li&gt;
  &lt;li&gt;Whenever you’ve got at least 5 minutes doing something crappy – commuting, dishes, peeling shrimp, raking leaves, building your kids tree house, widening your driveway with a pickaxe, sitting with your kids while the fall asleep – it can be anything, you &lt;strong&gt;listen&lt;/strong&gt; and &lt;strong&gt;learn&lt;/strong&gt;.  And, yes, I did build a tree house while listening to Ruby podcasts and I widened a driveway doing the same thing.&lt;/li&gt;
  &lt;li&gt;Keep at it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last one, Keeping at it, is the hard part.  If you work in IT then your days tend to be long and there are times that your brain just hurts and you don’t want to listen to, well, YMITC (yet more IT crap).  It doesn’t matter, this only works if you stick with it.  So you suck it up and build it into a habit where you just keep at it.&lt;/p&gt;

&lt;p&gt;And that’s pretty much it but let me finish up with a concrete example.&lt;/p&gt;

&lt;h1 id=&quot;an-example&quot;&gt;An Example&lt;/h1&gt;

&lt;p&gt;I was recently listening to Software Engineering Daily, their podcast on &lt;a href=&quot;https://softwareengineeringdaily.com/2017/02/28/heroku-autoscaling-with-andrew-gwozdziewycz/&quot;&gt;Heroku AutoScaling&lt;/a&gt; and Andrew Gwozdziewycz gave their algorithm for determining when to auto scale.  He described it this way:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time point: 35:40 Autoscaling like I said is a little bit more complicated.  The only data we use for auto scaling is your response time, the p95 response time, the number of requests that you’re serving be it errors or successful requests and the number of dynos that you currently have.  And what we do is utilize Little’s Law, this thing from queueing theory that basically  says (gives example of bank tellers and queues) - think of the arrival rate as through put and think of the latency as the time a teller takes to make a deposit or withdrawal.  These things are interrelated into this relationship – Little’s Law.  We look at the actual number of bank tellers versus the theoretical number if the latency is zero.  If you’re app starts responding greater than that latency then we’ll scale it up to get that latency down.  We put that into an exponential weighted moving average and we plot a regression line and the slope of that regression line gives us whether or not its ok to scale up or scale down.  (Time point: 38:50)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I may have munged the description a bit but if you start listening at minute 35 and go thru it once or twice, you’ll pick it up.&lt;/p&gt;

&lt;p&gt;Just having heard that much, I can think of about a dozen different ways to apply that algorithm to my daily work as I’m sure you can.&lt;/p&gt;

&lt;p&gt;And that’s why I listen to podcasts so avidly – trying to come up with something like this on your own is truly hard but just knowning that this exists often gives you the critical first step to solving this type of problem.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/software_engineering/2017/03/12/leveling-up-as-a-developer-part-2-interstitial-time.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_engineering/2017/03/12/leveling-up-as-a-developer-part-2-interstitial-time.html</guid>
        
        <category>software_engineering</category>
        
        <category>learning</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>Using ngrok for Web Development</title>
        <description>
</description>
        <pubDate>Sat, 11 Mar 2017 17:22:12 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/11/using-ngrok-for-web-development.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/11/using-ngrok-for-web-development.html</guid>
        
        
      </item>
    
      <item>
        <title>There's Always A Reason</title>
        <description>&lt;p&gt;So the side project I’ve been referring to&lt;/p&gt;

</description>
        <pubDate>Thu, 09 Mar 2017 03:07:57 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/software_engineering/2017/03/09/there-s-always-a-reason.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_engineering/2017/03/09/there-s-always-a-reason.html</guid>
        
        <category>software_engineering</category>
        
        <category>developer_psychology</category>
        
        <category>cartazzi</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>When Sidekiq Makes You Nuts Check Your Types</title>
        <description>&lt;p&gt;Much of what I do at the job I’m in the process of leaving is large scale data processing and it is all done through queues and &lt;a href=&quot;http://www.sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt;.  I generally do it with a method call that looks like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CompileWorker.perform_async(id)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today though I had to do it and pass in a date to my method call so I had this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CompileWorker.perform_async(id, date)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I got crazy, crazy, crazy results – my object would get about 10 lines into the call and then … nothing.  I’d test my method line by line in rails console on production and it would work perfectly.  I even went so far as to isolate it down to one Sidekiq thread and one redis server (on local host no less to make sure that no other sidekiq worker was messing with things).  And nothing made any difference.  Finally I realized that the crucial difference was actually that I was passing in a date.  Here’s the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t pass symbols, named parameters or complex Ruby objects (like Date or Time!) as those will not survive the dump/load round trip correctly. &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Best-Practices&quot;&gt;More&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, sure enough, when I removed the date by treating it as an internal constant, it worked perfectly.  Here’s the workaround I came up with:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then I call it as&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CompileWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows my internal use of the compile method where a date is passed in normally to function without issue but to work correctly when called in an asynchronous manner.&lt;/p&gt;

&lt;p&gt;I actually don’t have a problem with Sidekiq working in this fashion but it does bother me that while the Sidekiq documentation warns about this, there’s no error thrown or alert raised.  Now it might be impossible to pull off an error message but this is a damn easy mistake to make.  I knew about the ActiveRecord object limitation in Sidekiq but didn’t have a clue that it extended to a simple date.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/03/08/when-sidekiq-makes-you-nuts-check-your-types.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/03/08/when-sidekiq-makes-you-nuts-check-your-types.html</guid>
        
        <category>rails</category>
        
        <category>sidekiq</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Side Project Validation - Finally</title>
        <description>&lt;p&gt;Note: I wrote this blog post a number of weeks ago when this happened (about 1 minute after) but there was no point to publishing it until the product launched.&lt;/p&gt;

&lt;p&gt;Developing a side project is a damn lonely thing.  You sit in front of a blank code editor with no code to start and then you literally &lt;strong&gt;will&lt;/strong&gt; it into existence.  Often you don’t even discuss it with the people in your life – perhaps the idea is too ludicrous or perhaps past side projects haven’t panned out and you don’t want the scrutiny.  Or perhaps you have kids in which case how the kids did in school the previous day is far, far more relevant than minor code triumphs.  But there is always that spark when you realize “Oh man – this might really work”.  That just happened for me.  It was 3:07 am on Tuesday March 7th.&lt;/p&gt;

&lt;p&gt;Cartazzi, as you know by now, is a personal analytics dashboard that helps you succeed online with one click analytics.  Like any data centric product I’ve ever built, Cartazzi is built from real world data.  I was looking at the home page for my friend &lt;a href=&quot;http://www.davidrovics.com&quot;&gt;David Rovics&lt;/a&gt; and noticed that he was a &lt;a href=&quot;http://www.songkick.com/artists/152746-david-rovics&quot;&gt;SongKick user&lt;/a&gt;.  I had no idea what SongKick was but Cartazzi is built to support the analytics sources people actually use and someone linking to something on their home page is a strong signal to us to support it.  So I follow the link and discover that David has 847 fans.  Ok then – that’s a metric and that’s something I should be able to support.  So I go through my “build a new parser dance” for Cartazzi and scaffold together a new parser.  At this point I’ve implemented 42 of these things comprising almost 4K lines of code so I’m pretty good at it.  About 5 minutes later I have a new PageSongKickArtist parser object and it works out of the gate.  These things working the first time wasn’t a surprise by this point.&lt;/p&gt;

&lt;p&gt;I do my normal testing dance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start with the data I began with and confirm that it works&lt;/li&gt;
  &lt;li&gt;find another instance of this type of data - I found the band &lt;a href=&quot;http://www.songkick.com/artists/5183683-houndmouth&quot;&gt;HoundMouth&lt;/a&gt; by just randomly clicking around SongKick&lt;/li&gt;
  &lt;li&gt;I notice that HoundMouth has 39,058 fans&lt;/li&gt;
  &lt;li&gt;I build a parser object in Rails console and verify the data – and it increased to 39,059!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s not a glitch.  It is absolute confirmation that what I built for Cartazzi is on point and will work.&lt;/p&gt;

&lt;p&gt;And then I bandsintown&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2017 04:15:26 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/cartazzi/2017/03/07/side-project-validation-finally.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/cartazzi/2017/03/07/side-project-validation-finally.html</guid>
        
        <category>cartazzi</category>
        
        
        <category>cartazzi</category>
        
      </item>
    
      <item>
        <title>The Cartazzi Parser Dance</title>
        <description>&lt;p&gt;wget the url&lt;/p&gt;

&lt;p&gt;bundle exec rails g page_parser page_song_kick_artist&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Mar 2017 03:49:42 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/07/the-cartazzi-parser-dance.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/07/the-cartazzi-parser-dance.html</guid>
        
        
      </item>
    
  </channel>
</rss>
