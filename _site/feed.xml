<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 05 Feb 2017 05:57:40 -0500</pubDate>
    <lastBuildDate>Sun, 05 Feb 2017 05:57:40 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Ruby Regex Performance - Scan versus Match</title>
        <description>&lt;p&gt;I got my start with text processing using a custom version of &lt;a href=&quot;https://en.wikipedia.org/wiki/AWK&quot;&gt;Awk&lt;/a&gt;, HyperAwk, that my first company, NTERGAID, built.  What made HyperAwk unique was its ability to read not just ASCII but Word, WordPerfect, Ami and other binary structures and render them into a generic parseable format where you could look for document structures like bold facing, heading tags and the like.  We used it constantly from roughly 90 to 96 for things like “Transform every issue of &lt;a href=&quot;http://www.drdobbs.com/&quot;&gt;Dr. Dobb’s Journal&lt;/a&gt; from source file to hypertext”.  I even got a &lt;a href=&quot;http://www.drdobbs.com/web-development/the-ddj-hypertext-project/201800824?queryText=%2522Scott%2BJohnson%2522%2Bhypertext&quot;&gt;cover story&lt;/a&gt; out of it which was a huge personal win.  The engineer on the project, &lt;a href=&quot;http://gene-callahan.blogspot.com/2011/06/reference-management-software.html&quot;&gt;Gene Callahan&lt;/a&gt;, was a Unix guy surrounded by a bunch of DOS heads and he recognized that as our document recognition tasks got harder, what started as a tool, became a language.&lt;/p&gt;

&lt;p&gt;Because I started with text processing from an Awk perspective, I’m a &lt;em&gt;regex kind of guy&lt;/em&gt;.  Yes I know Nokogiri and, yes, I know xpath but for simple data extraction, my goto is always a regex. And when I’m in Ruby I tend to use .scan.  It is easy, convenient and I know it cold.  But is it fast?  I don’t think I’ve ever even thought about it.  I’ve always known that there are different things like .match but I never ventured there – until now.&lt;/p&gt;

&lt;p&gt;What I just found out is that .match is dramatically faster.  Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;tpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;:blaahs_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;324&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;ss&quot;&gt;:blaaaargs_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;281&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;ss&quot;&gt;:followers_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;139&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:match_seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;841700000455603&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;:scan_seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;030331000016303733&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;043&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;:blaahs_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;ss&quot;&gt;:blaaaargs_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;:match_seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;006&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;857000000309199&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;ss&quot;&gt;:scan_seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;022454&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99999844469&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you do the math that’s between &lt;em&gt;3.2&lt;/em&gt; and &lt;em&gt;3.6&lt;/em&gt; times faster.  On other tests I found about a 3 fold increase in speed.  As my old friend Pete Jenney would have said &lt;strong&gt;Great Googlely Moogley!&lt;/strong&gt;  I should point out that he was saying that in 1996 long before Google even existed.&lt;/p&gt;

&lt;p&gt;As with any benchmark, your results will definitely vary.  I’m working here with pretty big strings (web pages; this is a simple data extractor).&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2017/02/05/ruby-regex-performance-scan-versus-match.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2017/02/05/ruby-regex-performance-scan-versus-match.html</guid>
        
        <category>ruby</category>
        
        <category>regex</category>
        
        <category>performance</category>
        
        <category>ntergaid</category>
        
        <category>hyper_awk</category>
        
        <category>gene_callahan</category>
        
        <category>pete_jenney</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Good Developer Podcasts to Listen To</title>
        <description>&lt;p&gt;aws podcast&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Feb 2017 15:02:26 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/04/good-developer-podcasts-to-listen-to.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/04/good-developer-podcasts-to-listen-to.html</guid>
        
        
      </item>
    
      <item>
        <title>Understanding the Modern Bittorrent Scene</title>
        <description>&lt;p&gt;The modern bittorent / media piracy scene is absolutely astounding.  If you’re nerdy enough, well, you don’t ever have to pay for media again and you can get a vastly better selection of media far more easily than you would expect.  In particular you don’t ever have to see a commercial again and that’s particularly wonderful.  Finally you can have full control over what your kids watch which, as a parent, is something I find invaluable.&lt;/p&gt;

&lt;p&gt;Note: This document is being shared with you because you’re a friend.  Please don’t re-share.&lt;/p&gt;

&lt;h1 id=&quot;the-hardware&quot;&gt;The Hardware&lt;/h1&gt;

&lt;p&gt;Here’s my recommended hardware configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modern computer; if you want a dedicated computer for this then I’m a fan of the Intel NUC - small, fast and silent with more than enough power to download and serve media&lt;/li&gt;
  &lt;li&gt;Two hard drives (large media drives tend to fail; use rsync to synchronize all data from a master drive to a slave drive and then throw out the master when it fails, promote the slave to master and buy a new slave)&lt;/li&gt;
  &lt;li&gt;Large screen TV&lt;/li&gt;
  &lt;li&gt;Roku box for interfacing to your shared content and watching it on screen; you can go for the new 4K roku but I personally favor the older &lt;a href=&quot;https://www.amazon.com/Roku-Streaming-Player-Certified-Refurbished/dp/B016LBZVN2/ref=sr_1_1?s=tv&amp;amp;ie=UTF8&amp;amp;qid=1486204785&amp;amp;sr=1-1-spons&amp;amp;keywords=roku+3&amp;amp;psc=1&amp;amp;smid=A334XHS1C5Y12J&quot;&gt;Roku 3&lt;/a&gt; You should note that there are lots and lots of Roku like devices.  What you really want is one that is Plex compatible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I favor a dedicated computer for this because a VPN can get in the way of normal computer activity.  If, for example, your VPN is locked down to say Sweden then that’s where Google perceives you to be which can cause search issues, gmail problems and more.  The computer also handles the transcoding (or at least that’s what the log messages say).  .  You can also run Plex on top of a NAS device but I have no particular experience with that.&lt;/p&gt;

&lt;p&gt;If you find that you only have a limited number of HDMI ports then a &lt;a href=&quot;https://www.amazon.com/Fosmon-HD1831-3-Port-Switch-Pigtail/dp/B008GVOVK0/ref=pd_lpo_23_bs_t_2?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=03FFEM9AM3VZYZC0016B&quot;&gt;$11 HDMI splitter&lt;/a&gt; from Amazon makes it all better.&lt;/p&gt;

&lt;h1 id=&quot;the-software&quot;&gt;The Software&lt;/h1&gt;

&lt;p&gt;I’m a huge, huge fan of &lt;a href=&quot;http://www.plex.tv&quot;&gt;Plex.tv&lt;/a&gt;.  Plex is, well, iTunes for All Media with the difference that you don’t consume content in Plex on your PC – you use a TV with a box like Roku or a mobile app on your phone.  What Plex does is take in a file system hierarchy that you specify and serve it out to your devices.  If you are very sophisticated then you can even watch your Plex content when away from home thru a subscription that Plex.tv offers.&lt;/p&gt;

&lt;p&gt;Plex is just a media server.  You still need to acquire media somehow.  This can be done with any of a number of tools including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bittorrent Client Software&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nzbget.net/&quot;&gt;NZBGet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sickrage.github.io/&quot;&gt;SickRage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://couchpota.to/&quot;&gt;CouchPotato&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CouchPotato/CouchPotatoServer&quot;&gt;CouchPotatoServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally there area  raft of tools and utilities that make the overall process easier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/seedbox/deploy&lt;/li&gt;
  &lt;li&gt;https://github.com/seedbox/sync&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.filebot.net/&quot;&gt;FileBot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The open source community has been impressive in its support for media consumption.  The links above have barely touched the surface.&lt;/p&gt;

&lt;h1 id=&quot;avoiding-detection---vpn-or-seedbox&quot;&gt;Avoiding Detection - VPN or Seedbox&lt;/h1&gt;

&lt;p&gt;There are two basic approaches to avoiding detection:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VPN&lt;/li&gt;
  &lt;li&gt;Seedbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A VPN is just that - a virtual private network - that routes your traffic away from your host so that where you go on the Internet can’t be monitored. If you are running a local bittorent client then a VPN is absolutely essential.  Be careful though - if your VPN fails then your bittorent traffic can be exposed to your ISP and you’ll likely get a cease and desist letter.  If you use a dedicated computer for media then you really, really want a VPN that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starts on boot&lt;/li&gt;
  &lt;li&gt;shuts down your Internet connection if the VPN fails&lt;/li&gt;
  &lt;li&gt;requires NO manual action on startup (MullVad, on OSX, requires you to always enter a sudo password and this stops it from launching automatically)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A seedbox is a dedicated Internet host who generally provides a VPN, web based torrenting software (ruTorrent normally) and an instance where your content can be torrented.  In this case the torrenting happens NOT on your computer but on an instance in the cloud, often in a non-US jurisdiction.  Then, after the files have been pulled into your cloud instance, you can FTP them down to your computer (or watch them from the cloud but I’ve never done that).  &lt;a href=&quot;http://https://torrentfreak.com/&quot;&gt;Seedboxes.cc&lt;/a&gt; has worked great for me but choose one according to your needs.&lt;/p&gt;

&lt;p&gt;Seedboxes are astonishingly fast.  The days of bittorrent taking hours are long gone – a modern 700 meg movie download might take as little as 5 minutes.&lt;/p&gt;

&lt;p&gt;For information on choosing seedboxes, see the [Reddit SeedBox thread](https://www.reddit.com/r/seedboxes/.&lt;/p&gt;

&lt;h1 id=&quot;media-sources&quot;&gt;Media Sources&lt;/h1&gt;

&lt;p&gt;There are a number of ways that media can be acquired:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bittorrent in which case ThePirateBay is still a huge factor&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Usenet; Here’s a &lt;a href=&quot;https://www.codecguide.com/usenet_tutorial.htm&quot;&gt;general usenet tutorial&lt;/a&gt;  Usenet vendors include:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.supernews.com/&quot;&gt;SuperNews&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.giganews.com/&quot;&gt;GigaNews&lt;/a&gt; (includes VPN)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A general tutorial on downloading with Usenet is &lt;a href=&quot;https://paulstamatiou.com/how-to-download-with-newsgroups/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://torrentfreak.com/&quot;&gt;News on Torrenting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 04 Feb 2017 10:31:10 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/04/understanding-the-modern-bittorrent-scene.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/04/understanding-the-modern-bittorrent-scene.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Succeed at a Side Project</title>
        <description>&lt;p&gt;I have started, by my own metrics, well over 20 side projects since I entered the Rails world.  That’s at least 2 a year, sometimes more.  I’ve just launched Hyde in its first, albeit free, MVP stage.  I’ve been working on this, every single day, since December 27, 2016 when I decided to get serious.  Here’s how I did it.&lt;/p&gt;

&lt;h1 id=&quot;realize-that-your-paying-job-is-only-40-hours--week&quot;&gt;Realize that Your Paying Job is Only 40 Hours / Week&lt;/h1&gt;

&lt;p&gt;This was the critical epiphany for me.  I wrote my side project so far while I had a full time gig.  But as my wife helpfully pointed out to me - “You want to do this and you’re spending more time than you are actually paid for on someone else’s thing – work your 40 hours and spend all your other time on the side project”.  She was right and I have.&lt;/p&gt;

&lt;p&gt;Work culture, at least in America, has gotten so bizarre where people now define themselves entirely by their job and they think nothing of working around the clock.  There’s no need for that.  As a full time employee you are paid for 40 hours / week (generally).  If you’re working more than 40 hours per week then you’re effectively lowering your hourly rate and giving your employer &lt;strong&gt;free money&lt;/strong&gt;.  Given that most employers don’t see fit to giving you free money, well, think about it.&lt;/p&gt;

&lt;h1 id=&quot;establish-a-schedule-give-side-project-your-best-time&quot;&gt;Establish a Schedule; Give Side Project Your Best Time&lt;/h1&gt;

&lt;p&gt;I think most software engineers have natural rhythms.  For me my best time is the quiet hours at the beginning of the day.  From the moment I wake up until my actual (paid) work day starts, I work on side project.  So I normally rise around 3 am which gets me anywhere from 1 to 4 hours on side project every single day.  Your schedule will likely vary – hopefully you’re not up pre dawn like I am – but figure out a repeatable schedule where you can give your best time to your side project.&lt;/p&gt;

&lt;h1 id=&quot;write-code-every-single-day&quot;&gt;Write Code Every Single Day&lt;/h1&gt;

&lt;p&gt;I’ve written code every single day since I started on this.  On days where I’m blocked I write something.  There’s a lot of infrastructure if I’m going to write this side project in a scalable way without killing myself down the road so I think I’ve actually spent more time there than I have on the features.  That’s ok – personally the real technical challenge here is in the infrastructure.&lt;/p&gt;

&lt;p&gt;And, if you don’t like coding enough to write code for a side project every single day, well, a side project isn’t for you.  I’m sorry if that’s harsh but I think that’s the reality.&lt;/p&gt;

&lt;h1 id=&quot;take-a-laptop-everywhere&quot;&gt;Take a Laptop Everywhere&lt;/h1&gt;

&lt;p&gt;If you’re doing a side project then its really important to take advantage of what I have always referred to as interstitial time – the time between times.  For example I wrote UrlCommon.is_valid? which validates whether or not the user entered a valid url while watching my son play basketball at an Indianapolis Pacers Junior training thing.  Doubt me?  Here’s the YouTube video!&lt;/p&gt;

&lt;p&gt;Any modern laptop should be small enough and light enough to go with you always.  I have a go bag with everything I need to code successfully whether in the car while waiting for the kid to come home from the bus, taking my wife to the store, etc.  Every minute counts.&lt;/p&gt;

&lt;h1 id=&quot;minimize-costs-ruthlessly&quot;&gt;Minimize Costs Ruthlessly&lt;/h1&gt;

&lt;p&gt;Like a lot of us, when we work for a funded startup, I use all kind of services.  For a side project, &lt;strong&gt;Nope&lt;/strong&gt;!  Every dollar counts so the only “service” I use is my $7 / month paid github account.  Not airbrake / hoptoad / dockerhub / etc.&lt;/p&gt;

&lt;h1 id=&quot;take-a-paper-notebook-everywhere&quot;&gt;Take a Paper Notebook Everywhere&lt;/h1&gt;

&lt;p&gt;The best tool I’ve had in developing this has been this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/spidey_notebook.png&quot; alt=&quot;spidey_notebook.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paper and pen is a superior thinking tool than just about anything else.  This notebook has gone everywhere with me and the pages are filled with scrawls about features, marketing, naming, architecture diagrams, plans how to minimize cloud hosting costs, etc.  It is small enough that it fits into the pockets on most of the cargo shorts I wear everywhere (yes, even in March as I write this, I’m still in shorts).&lt;/p&gt;

&lt;p&gt;If you don’t write it down, at some point, you’re going to forget it.  Don’t make that mistake.  I wrote more about &lt;a href=&quot;http://fuzzyblog.io/blog/software_engineering/2016/11/19/the-engineer-s-design-notebook-or-what-s-in-the-notebook-scott.html&quot;&gt;Design Notebooks&lt;/a&gt; back in November.&lt;/p&gt;

&lt;h1 id=&quot;recognize-your-own-failings&quot;&gt;Recognize Your Own Failings&lt;/h1&gt;

&lt;p&gt;Like most people I have serious failings.  From a technical perspective I tend to not treat data validity as a significant enough issue.  From a business perspective I pay more attention to the product than the revenues and the costs.  Neither of these is acceptable and I strongly believe that a side project should make you better at what you do so use your side project as a way of addressing your own failings.  Here’s an example of one of the first bits of Hyde that I implemented – I call it Revenues &amp;amp; Costs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/hyde_revenues_and_costs.png&quot; alt=&quot;hyde_revenues_and_costs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yep - I wrote an accounting dashboard.  Why?  Well I’m going to pay a lot more attention to revenues and costs if I like / understand the tool which tracks them.&lt;/p&gt;

&lt;h1 id=&quot;recognize-that-writing-content-is-part-of-it&quot;&gt;Recognize that Writing Content is Part of It&lt;/h1&gt;

&lt;p&gt;There have been days where I did nothing but write the contact page and the about page.  And about 20 other pages that aren’t yet visible (sorry; the cat isn’t fully out of the bag yet).  Any side project isn’t just the code – its &lt;strong&gt;everything&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;give-something-back&quot;&gt;Give Something Back&lt;/h1&gt;

&lt;p&gt;At this stage Hyde is a non revenue producing side project with only a free MVP released.  But, even so, I’ve already released something as &lt;a href=&quot;http://github.com/fuzzygroup/sync-dot-rake&quot;&gt;open source&lt;/a&gt;.  I could talk about karma, how we’re all reliant on open source and should morally give somethign back or some other drivel.  Here’s a simple fact - giving stuff back gets you attention.  Getting attention to a side project is hard and giving something back is easy.  Think of giving something back as &lt;strong&gt;marketing&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;recognize-when-youre-in-the-weeds&quot;&gt;Recognize When You’re in the Weeds&lt;/h1&gt;

&lt;p&gt;I cook quite a bit and one term I’ve adopted from the professional cooking world is “being in the weeds”.  This refers to when you’re swamped with orders and can’t see the forest for the trees.  This is all too common in technology.  A few weeks ago I had the brilliant idea – write my own Rails generators to create some specific types of classes that I use a lot.  Well, an hour later, I was &lt;strong&gt;nowhere&lt;/strong&gt;.  I’ve even done this before but Rails 5 has changed things and I was just plain stuck.  I made the realization that either my only goal for today was going to be “make some progress on a generator” or I should &lt;strong&gt;stop cold&lt;/strong&gt; and go back to features.&lt;/p&gt;

&lt;h1 id=&quot;treat-it-professionally&quot;&gt;Treat it Professionally&lt;/h1&gt;

&lt;p&gt;I have a side project which has only barely launched.  A month and five days into it there were 122 issues in Github and 3 milestones.  Just because its a side project doesn’t mean that you don’t track bugs, do project planning, etc.  All of those things that your Product Manager normally does for you?  Guess what – you get to do them now!&lt;/p&gt;

&lt;h1 id=&quot;dont-stress-about-domain-name-product-name-marketing&quot;&gt;Don’t Stress About Domain Name, Product Name, Marketing&lt;/h1&gt;

&lt;p&gt;Here’s the sad truth about side projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most don’t amount to anything&lt;/li&gt;
  &lt;li&gt;Most never get finished&lt;/li&gt;
  &lt;li&gt;Few even get launched&lt;/li&gt;
  &lt;li&gt;Of the few that get launched, even fewer actually ever produce a dime in revenue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So why, oh dear lord, why are you even worrying about domain name, product name, marketing, etc.  &lt;strong&gt;JUST WRITE CODE / GET IT DONE !&lt;/strong&gt;  If you write code then maybe you’ll be lucky enough to get to this stage.  Domain names can be changed, product names can be changed, marketing can be figured out.  If you want to product yourself from the impact of a name change then store the product name in an internal constant and always reference it from the contant.  Hell I have a whole file of marketing related constants since I &lt;strong&gt;hate&lt;/strong&gt; rewriting stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A side project might be code.  Or it might be an online course.  Or even a blog post.  That’s why I added “GET IT DONE” above next to “JUST WRITE CODE”.&lt;/p&gt;

&lt;h1 id=&quot;find-an-accountability-partner&quot;&gt;Find an Accountability Partner&lt;/h1&gt;

&lt;p&gt;I’m writing this at 5:10 am and I’ve been up and at my desk since 2:33 am – when you’re trying to establish a new habit, a useful technique is to find an accountability partner.  I have one friend who is also trying to get something new going and so every day, at 5 pm, I text him “Here’s what I got done on my side project today: …”.  Its usually a bulleted list.  Sometimes there is one item. Sometimes there are 10+ items.  Your spouse might be your accountability partner – or not.  In my case, I prefer not use my spouse since if I do something glaringly wrong in the code, she’s not in a position to challenge me on it whereas this friend is.&lt;/p&gt;

&lt;h1 id=&quot;find-a-helper-where-you-are-weak&quot;&gt;Find a Helper Where You Are Weak&lt;/h1&gt;

&lt;p&gt;All of us technology folk, even the “full stack” folks, have one or more areas where we are weak.  In my case, my internal understanding of HTML basically stopped with HTML table tags.  I’m not proud of it but there it is.  So what I’ve done is arranged an informal learning swap with my buddy Dv where if I have issues with front end HTML / CSS / JavaScript, he’s willing to pitch in and I’m always available to help him with any back end stuff he needs.  Its not a formal arrangement by any means – we’re both busy so sometimes it might be a few days before he’s available to pitch in but that’s ok.  There’s always something to work on in a side project and there really shouldn’t ever be a block at least in the early, pre-release stage.&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Feb 2017 05:24:18 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/side_project/2017/02/04/how-to-succeed-at-a-side-project.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/side_project/2017/02/04/how-to-succeed-at-a-side-project.html</guid>
        
        <category>side_project</category>
        
        <category>startup</category>
        
        
        <category>side_project</category>
        
      </item>
    
      <item>
        <title>Linux Tip of the Day - git-standup</title>
        <description>&lt;p&gt;Over on Twitter, &lt;a href=&quot;https://twitter.com/kamranahmedse&quot;&gt;@kamranahmedse&lt;/a&gt; pointed out to me that git-standup does similar things to &lt;a href=&quot;http://fuzzyblog.io/blog/linux/2017/01/30/linux-tip-of-the-day-git-recall.html&quot;&gt;git-recall&lt;/a&gt; which I recently talked about – and more.  First off – thank you!  Based on his &lt;a href=&quot;https://github.com/kamranahmedse/git-standup&quot;&gt;github account&lt;/a&gt;, I’d assume that git-standup is his project and he’s done really nice work here.&lt;/p&gt;

&lt;p&gt;In case you missed the previous post on git-recall, git-standup helps you to understand what’s been going on with a codebase by looking at commits either during the same day or a given range of days.&lt;/p&gt;

&lt;p&gt;Install on Linux as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;curl -L https://raw.githubusercontent.com/kamranahmedse/git-standup/master/installer.sh&lt;/td&gt;
        &lt;td&gt;sudo sh&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;or you can use npm:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm install -g git-standup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or if you are on OSX then you can use brew:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;brew install git-standup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are the &lt;strong&gt;very useful&lt;/strong&gt; options that git-standup supports:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git standup &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-a &amp;lt;author name&amp;gt;] 
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-w &amp;lt;weekstart-weekend&amp;gt;] 
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-m &amp;lt;max-dir-depth&amp;gt;]
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-f]
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-L]
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-d &amp;lt;days-ago&amp;gt;]
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-D &amp;lt;date-format&amp;gt;] 
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-g] 
              &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-h]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After you change into a directory where you’re working on something git, do this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git-standup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and you’ll get a view of what happened over the past day.  Where git-standup shines over git recall is in its use of command line options to expand beyond the previous day.  And here’s an example of looking back over the past 5 days:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/git-standup.png&quot; alt=&quot;git-standup.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/linux/2017/02/04/linux-tip-of-the-day-git-standup.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/linux/2017/02/04/linux-tip-of-the-day-git-standup.html</guid>
        
        <category>linux_tip_of_the_day</category>
        
        <category>linux</category>
        
        <category>git</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Thoughts on Using Windows in 2017</title>
        <description>&lt;p&gt;I use Windows daily in my job. It has come a long way from the consumer/business driven PITA it was years ago. The issues are pretty simple: I don’t trust Microsoft to not screw me over a few years down the line, and I don’t like the in your face consumerism of every aspect of the OS.
I literally had to spend an hour removing every POS adware app installed by the OEM, then I still have to put up with notices from M$ asking me to buy their stuff, even though I don’t use their software for anything. And there’s the virus software, which are all installed by two or three different people and all of which are asking me everyday to buy their stuff.
It’s nice that they’ve moved devs out of the ghetto and I admire the work people have put in to make sure we have nice things again. But I still will be at best lukewarm to anything from M$.&lt;/p&gt;

&lt;p&gt;https://news.ycombinator.com/item?id=13517288&lt;/p&gt;

&lt;p&gt;https://news.ycombinator.com/item?id=13515962&lt;/p&gt;

&lt;p&gt;http://www.economist.com/news/science-and-technology/21715831-why-so-many-pc-users-are-refusing-upgrade-windows-10-woes-windows-10&lt;/p&gt;

&lt;p&gt;It used to be that only free software came with advertising; users paid a fee, if they chose to do so, to get the software free of advertising. Microsoft charges top dollar for Windows 10 ($120 or $200, depending on the edition) and now wants to bombard users with sales pitches to boot—without so much as by your leave, let alone the option to turn the nuisance off. Despite their idiosyncrasies, Macintosh and Linux have never looked so attractive.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Feb 2017 22:25:03 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/03/thoughts-on-using-windows-in-2017.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/03/thoughts-on-using-windows-in-2017.html</guid>
        
        
      </item>
    
      <item>
        <title>Ruby One Liner Examples</title>
        <description>&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;farm_instances.each {&lt;/td&gt;
      &lt;td&gt;fi&lt;/td&gt;
      &lt;td&gt;fi.update_attribute(:ended_at, dt) }&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 18:09:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/03/ruby-one-liner-examples.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/03/ruby-one-liner-examples.html</guid>
        
        
      </item>
    
      <item>
        <title>Troubleshooting Rails with Passenger and Apache2</title>
        <description>&lt;p&gt;passenger-status&lt;/p&gt;

&lt;p&gt;passenger-status –show=requests&lt;/p&gt;

&lt;p&gt;passenger-memory-stats&lt;/p&gt;

&lt;p&gt;sudo apt-get update&lt;/p&gt;

&lt;p&gt;sudo apt-get upgrade&lt;/p&gt;

&lt;p&gt;https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/aws/apache/oss/trusty/install_passenger.html&lt;/p&gt;

&lt;p&gt;I’m going to make a pretty strong, very general statement about Passenger based on using it for almost a decade:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you find something wrong, it is generally you, not Passenger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;https://www.phusionpassenger.com/library/admin/apache/overall_status_report.html
https://www.phusionpassenger.com/library/admin/apache/overall_status_report.html
https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/aws/apache/oss/deploy_updates.html
https://www.phusionpassenger.com/library/config/apache/optimization/&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 17:24:05 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/03/troubleshooting-rails-with-passenger-and-apache2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/03/troubleshooting-rails-with-passenger-and-apache2.html</guid>
        
        
      </item>
    
      <item>
        <title>Ten Tips to Surviving the Whole 30</title>
        <description>&lt;ol&gt;
  &lt;li&gt;Cocktail Replacement&lt;/li&gt;
  &lt;li&gt;Better Quality Proteins&lt;/li&gt;
  &lt;li&gt;Be Adventurus&lt;/li&gt;
  &lt;li&gt;Crunch Means Tera Chip Time!&lt;/li&gt;
  &lt;li&gt;Eat Your Own Meal Before the Pizza Arrives&lt;/li&gt;
  &lt;li&gt;Come Up With Sweets That Work for You&lt;/li&gt;
  &lt;li&gt;Consider Pairing it with Zero&lt;/li&gt;
  &lt;li&gt;Their Recipes Don’t Always Work&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;Bear In Mind Its a Diet Not a Religion&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 16:32:36 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/03/surviving-the-whole-30.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/03/surviving-the-whole-30.html</guid>
        
        
      </item>
    
      <item>
        <title>Redirecting HTTP to HTTPS with AWS and ELB</title>
        <description>&lt;p style=&quot;text-align:center&quot;&gt;A Tale of Four Redirects&lt;/p&gt;

&lt;p&gt;Every technologist worth his or her salt has an internal list of “most hated technologies”.  These are the things that no matter what they do always, always give them trouble.  Whether its because the technology in question is actually hard, a mental block or just plain ‘ol bad luck, we all have them.  For me it is always, always &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;mod_rewrite&lt;/a&gt;.  &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache’s&lt;/a&gt; mod_rewrite is just plain magic – when it works (and it can always be made to work), it does in place url transformations that let you change your entire technology stack but let Google keep on serving those old urls.  It really is outstanding.  But Great Ghu does it ever give me trouble at times.&lt;/p&gt;

&lt;p&gt;Note: For a basic tutorial on mod_rewrite, please see this &lt;a href=&quot;http://fuzzyblog.io/blog/apache/2017/02/03/apache2-and-mod-rewrite.html&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The situation in question was that I had a client with Rails being served by Apache / &lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Passenger&lt;/a&gt; (my very &lt;strong&gt;favorite&lt;/strong&gt; Rails deployment tool) and the client wanted, correctly, to convert all http based url requests to https.  Here’s the transition of the redirects one by one.&lt;/p&gt;

&lt;h1 id=&quot;important---remove-allowoverride-all-from-your-apache-conf-file&quot;&gt;Important - Remove AllowOverride all from Your Apache Conf File&lt;/h1&gt;

&lt;p&gt;I can’t stress this enough.  The Apache directive &lt;strong&gt;AllowOverride all&lt;/strong&gt; means that redirects will not work.  Honestly I don’t even understand what AllowOverride all even does but I did confirm, experimentally, that if you have this, redirects simply will not work.  So make sure that you’ve got this turned off.&lt;/p&gt;

&lt;h1 id=&quot;redirect-1&quot;&gt;Redirect 1&lt;/h1&gt;

&lt;p&gt;Here was my first attempt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would actually work but our Apache isn’t actually serving https at all.  When you use an AWS ELB (Elastic Load Balancer) in conjunction with the ACM (AWS Certificate Manager) then your web server talks http on port 80 and the ELB acts as an intermediary translating it to and from https.  If you’re lucky with this redirect then your site may, possibly work.  If you’re unlucky then you’ll get stuck in an infinite loop of http to https to http and so on.  &lt;a href=&quot;http://stackoverflow.com/questions/16200501/http-to-https-apache-redirection&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;redirect-2&quot;&gt;Redirect 2&lt;/h1&gt;

&lt;p&gt;My second attempt actually came straight from the &lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/redirect-http-https-elb/&quot;&gt;AWS docs&lt;/a&gt; and it is &lt;strong&gt;flat out wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine On
RewriteCond %{HTTP:X-Forwarded-Proto} =http
RewriteRule . https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem here is that the 301 redirect which this is generating causes the ELB health check to go poorly and your site is declared offline at which point no traffic gets to it.  This can be very annoying to troubleshoot but you should watch for back end not available messages.&lt;/p&gt;

&lt;h1 id=&quot;redirect-3&quot;&gt;Redirect 3&lt;/h1&gt;

&lt;p&gt;On an &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?messageID=745509&quot;&gt;AWS forum thread&lt;/a&gt; I found this redirect which an AWS engineer contributed and claimed would work.  Again it is &lt;strong&gt;flat out wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine on
RewriteCond %{HTTP:X-Forwarded-Proto} !https
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This causes the same health check problem as #2.&lt;/p&gt;

&lt;h1 id=&quot;redirect-4---the-working-one&quot;&gt;Redirect 4 - The Working One&lt;/h1&gt;

&lt;p&gt;If you read support forum threads &lt;em&gt;closely&lt;/em&gt; and &lt;strong&gt;well&lt;/strong&gt; then you often, always near the end, find the right answer.  Here’s the redirect that worked for me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# the final correct redirect
RewriteEngine on
RewriteCond %{HTTP:X-Forwarded-Proto} ^http$
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is from the same thread above (#3).  You’ll notice that #2, #3 and #4 all rely on the HTTP:X-Forwarded-Proto http header feature - this prevents problems with the ELB.  The description that the author gave is interesting:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Apache block (#2) above caused our ELB health check to fail from the HTTP 301 response. To allow this and other local requests over HTTP while redirecting external requests through the ELB to HTTPS, adjust the rewrite condition to match on http instead of a negative match on https:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This solution was contributed by &lt;a href=&quot;https://forums.aws.amazon.com/profile.jspa?userID=342382&quot;&gt;holeinonenv&lt;/a&gt; and, sir, I owe you a beer.  Thank you for your help. It is the only thing he’s ever posted on the AWS forums and man am I glad he posted it.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/02/03/redirecting-http-to-https-with-aws-and-elb.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/02/03/redirecting-http-to-https-with-aws-and-elb.html</guid>
        
        <category>aws</category>
        
        <category>apache</category>
        
        <category>elb</category>
        
        <category>http</category>
        
        <category>https</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
