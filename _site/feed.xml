<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 26 Oct 2016 10:19:46 -0400</pubDate>
    <lastBuildDate>Wed, 26 Oct 2016 10:19:46 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Rails Tip How to Fix Incomplete response received from application</title>
        <description>&lt;p&gt;Again, one of my least favorite things in the entire rails ecosystem is deployment.  Deployment was ass painful in 2007 when I started with Rails and it is still ass painful.  Sigh.  Even as much as I love passenger, it is a fickle beast at best and you always end up with arcane error messages that you haven’t solved in six months or so so you never quite have the answer.&lt;/p&gt;

&lt;p&gt;When you hit the error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Incomplete response received from application
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The usual answer is that you’re missing the secret from:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config/secrets.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You want to solve this with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rake secret
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then copy the result and define a secret for the correct environment or load it from the environment variable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29241053/incomplete-response-received-from-application-from-nginx-passenger&quot;&gt;Obligatory Stack Overflow Reference on this&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-incomplete-response-received-from-application.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-incomplete-response-received-from-application.html</guid>
        
        <category>rails</category>
        
        <category>apache</category>
        
        <category>passenger</category>
        
        <category>bundler</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails Tip How to Fix Could not find a JavaScript runtime</title>
        <description>&lt;p&gt;One of my least favorite things in the entire rails ecosystem is deployment.  Deployment was ass painful in 2007 when I started with Rails and it is still ass painful.  Sigh.  Capistrano is worlds better than it used to be but its still tricky.  And you always end up with arcane error messages that you haven’t solved in six months or so so you never quite have the answer.&lt;/p&gt;

&lt;p&gt;When you hit the error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Could not find a JavaScript runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The right thing to do is to first bitch out loud about the mind boggling stupidity that you can’t run db:migrate w/o a JS runtime.  After you’ve done that 3 or 20 times then the solution is to just install nodejs on every one of your production boxes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This sucks hard but it does work.  Another solution is to use a native ruby tool like therubyracer but I have projects where therubyracer cannot be installed – it just gives “gem not found” errors no matter what I do so cie la vie.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-could-not-find-a-javascript-runtime.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-could-not-find-a-javascript-runtime.html</guid>
        
        <category>rails</category>
        
        <category>javascript</category>
        
        <category>therubyracer</category>
        
        <category>bundler</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Rails Tip How to Fix Cannot/Load Bundler/setup</title>
        <description>&lt;p&gt;One of my least favorite things in the entire rails ecosystem is deployment.  Deployment was ass painful in 2007 when I started with Rails and it is still ass painful.  Sigh.  Even as much as I love passenger, it is a fickle beast at best and you always end up with arcane error messages that you haven’t solved in six months or so so you never quite have the answer.&lt;/p&gt;

&lt;p&gt;When you hit the error message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cannot load such file -- bundler/setup (LoadError)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The usual answer is to run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;in the Rails root application.  Unfortunately this can’t generally be done until the source code of your application is installed making it hard to ansible-ize.  Alas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19061774/cannot-load-such-file-bundler-setup-loaderror&quot;&gt;Obligatory Stack Overflow Reference on this&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-cannot-load-bundler-setup.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/10/26/rails-tip-how-to-fix-cannot-load-bundler-setup.html</guid>
        
        <category>rails</category>
        
        <category>apache</category>
        
        <category>passenger</category>
        
        <category>bundler</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Its Monday and Murphy was an Optimist</title>
        <description>
</description>
        <pubDate>Mon, 24 Oct 2016 18:20:37 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/24/its-monday-and-murphy-was-an-optimist.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/24/its-monday-and-murphy-was-an-optimist.html</guid>
        
        
      </item>
    
      <item>
        <title>AWS Quickie - Making Your Boxes Pingable</title>
        <description>&lt;p&gt;The security default for AWS is brilliantly simple: &lt;strong&gt;Everything, absolutely everything, is locked down by default&lt;/strong&gt;.  Once you understand that then developing on the AWS platform becomes a lot simpler.  Let’s take, for example, a simple EC2 instance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create it and you would generally assume that a server is pingable.&lt;/li&gt;
  &lt;li&gt;So you try pinging the DNS name and it fails.  Hm…&lt;/li&gt;
  &lt;li&gt;So you try pinging the public IP and that fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The answer here is simple – everything is locked down by default.  Even something as innocuous as ping.  Every AWS box comes with what’s called a Security Group and Amazon describes this a &lt;em&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html&quot;&gt;virtual firewall that controls the traffic for one or more instances&lt;/a&gt;&lt;/em&gt;.  Every box you create on AWS will automatically get a Security Group, confusingly named, Launch Wizard N where N is just an incrementing integer.&lt;/p&gt;

&lt;p&gt;Stack Overflow, as always, has a useful &lt;a href=&quot;http://stackoverflow.com/questions/21981796/cannot-ping-aws-ec2-instance&quot;&gt;piece&lt;/a&gt; on this.&lt;/p&gt;

&lt;p&gt;You have to edit the Security Group to which your EC2 instance belongs and allow access (or alternatively create a new one and add the instance to it).&lt;/p&gt;

&lt;p&gt;By default everything is denied. The exception you need to add to the Security Group depends on the service you need to make available to the internet.&lt;/p&gt;

&lt;p&gt;If it is a webserver you will need to allow access to port 80 for 0.0.0.0/0 (which means every IP address).&lt;/p&gt;

&lt;p&gt;To allow pinging the instance you need to enable ICMP traffic.&lt;/p&gt;

</description>
        <pubDate>Mon, 24 Oct 2016 07:49:52 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/24/aws-quickie-making-your-boxes-pingable.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/24/aws-quickie-making-your-boxes-pingable.html</guid>
        
        <category>aws</category>
        
        <category>security_group</category>
        
        <category>ping</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Consulting - The Answer Is Yes</title>
        <description>&lt;p&gt;This happened a year or two ago but the memory just descended on me in a flash of blinding deja vu that was so powerful it was frightening.  If you’re a consultant and a customer calls you with a problem, there’s only one answer:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remember this vividly.  I was in the final stages of a project – I had just assembled the staging server and I was looking forward to the end of the night and sleep, blessed sleep.  I heard from the customer who was clearly panicked.  His vendor was holding him up on a data migration issue and was charging an arm and a leg and then three more body parts for something simple – $25K for migrating 60 users from staging to production.  I’m not going to say the vendor since they’re long gone.  I would point out that the charge for the migration was more than my whole software development bill to that point.&lt;/p&gt;

&lt;p&gt;So my answer to the question of could I handle the data migration – &lt;strong&gt;Yes&lt;/strong&gt;.  When I said it, I didn’t know anything about the data I was migrating.  I didn’t have a schema, properties, etc.  What I did know was that $25K for doing data migration was absurd and, as a consultant, I’m there to help the client.  Always remember that – you’re there to help the client.  So even though I didn’t want more work, I’ll still do it and, ultimately, the client will remember who helped them out in a point of crisis.&lt;/p&gt;

&lt;p&gt;Bottom line – if you’re a consultant, the answer is &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/consulting/2016/10/24/consulting-the-answer-is-yes.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/consulting/2016/10/24/consulting-the-answer-is-yes.html</guid>
        
        <category>consulting</category>
        
        <category>business</category>
        
        
        <category>Consulting</category>
        
      </item>
    
      <item>
        <title>Hiring Practices - Fast versus Slow; It Depends on How Fast You Fire</title>
        <description>&lt;p&gt;I started this draft six months ago and I had to sit on it for personal reasons; some organizational changes had to happen before I could publish it.&lt;/p&gt;

&lt;p&gt;I recently made a hiring decision that I was concerned about.  In fact I was so concerned that I said this to the candidate before he was hired:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If you don't work out, you'll be fired within a month.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And I have to admit that I was wrong – after a month he was &lt;strong&gt;still&lt;/strong&gt; present.  But he wasn’t working out.  I’ve always taken the position that as an incoming engineer that &lt;strong&gt;it is your job to adapt to the codebase you’re working on&lt;/strong&gt;.  To some extent it doesn’t matter what your personal preferences are for things, you’re the employee and unless your job title specifically empowers you to re-architect things, well, &lt;em&gt;suck it up buttercup&lt;/em&gt;!  This problem is particularly acute when new hires join from structurally different organizations – say you’re a startup and the new hire is from a slow moving, regulated organization.  The culture the new hire came from generally permeates their thinking and just their approach to everything.&lt;/p&gt;

&lt;p&gt;With this new hire we had the problem that despite having gotten both verbal instructions, documentation and slack instructions, he would still either do exactly what he was told not to do or skirt the letter of the law by taking his own approach (let’s not use database.yml and instead put database configuration into application.yml).&lt;/p&gt;

&lt;p&gt;The biggest mistake I made here was that I followed what I call Fast Hire with him.  Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I relied on his github as a representation of technical competency instead of administering a detailed verbal examination of Rails competency&lt;/li&gt;
  &lt;li&gt;I took the first candidate that applied&lt;/li&gt;
  &lt;li&gt;I didn’t require multiple candidates i.e. “we’ll hire the best of the the first five candidates”&lt;/li&gt;
  &lt;li&gt;I didn’t set up a pair programming session with him first and watch him work thru a problem&lt;/li&gt;
  &lt;li&gt;I didn’t assess the speed at which he worked&lt;/li&gt;
  &lt;li&gt;I didn’t hire him for a project on a consulting basis BEFORE he was hired full time&lt;/li&gt;
  &lt;li&gt;I trusted that the organization would support me in my desire to fire when it didn’t work out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And bear this in mind: this was my mistake.  We’ve been technically overloaded with work for over a year and when the purse strings were loosened to hire, I jumped at the chance.  What I forgot, something that I know terribly well, is that bad hires cause ripple effects throughout the organization both at the technical level and at the human resources level.&lt;/p&gt;

&lt;p&gt;So here’s my thesis:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hiring is painful.  The best way to find out if someone can work out in your organization is, ironically, to hire them.&lt;/li&gt;
  &lt;li&gt;If you’re willing to &lt;strong&gt;Fast Hire&lt;/strong&gt; then you have to be willing to &lt;strong&gt;Fast Fire&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re not willing to fast fire and you take the approach of a 30 day plan, remediation, opportunity to fix things, etc then you have to move with &lt;strong&gt;slow hire&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-fast-hire-approach&quot;&gt;The Fast Hire Approach&lt;/h1&gt;

&lt;p&gt;Here’s what I call the fast hire approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Technical interview with the hiring manager with a focus on culture fit and their interest in the problem space.  Make the assumption that the person’s resume correctly represents their skills.&lt;/li&gt;
  &lt;li&gt;Review the person’s online presence and assess their technical competency from their side projects, github presence, blog posts, etc.&lt;/li&gt;
  &lt;li&gt;Have them interview with all senior staff with the founder and president having final yes / no say.&lt;/li&gt;
  &lt;li&gt;Make offer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-slow-hire-approach&quot;&gt;The Slow Hire Approach&lt;/h1&gt;

&lt;p&gt;Here’s what I call the slow Hire approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initial technical interview with the hiring manager with a focus on culture fit.  Make the assumption that the person’s resume is, well, biased in their favor and you have to defend the company from them.&lt;/li&gt;
  &lt;li&gt;If the culture fit interview goes well then schedule another interview for specific technical skills.  Do an hour long, deep, hard dive on their platform knowledge.  If this is a Rails position then you can guarantee that questions like “Atoms Vs. Strings, Pros / Cons”, “Where is the database configured”, “How do you execute a sql query when there is no model” will be asked.&lt;/li&gt;
  &lt;li&gt;If the technical skills interview passes then the next step up is a pair programming session using a shared screen tool like Screen Hero.&lt;/li&gt;
  &lt;li&gt;If the pair programming test passes then I would strongly argue for a paid programming project.  Ideally this should be something that costs less than $600 so it doesn’t require any U.S. tax issues, not even a 1099.  Pick some small bit of code, command line tool, etc and see what happens.  Require it to be submitted via github and furnish them a copy of your internal coding standards.  See if they follow them.&lt;/li&gt;
  &lt;li&gt;If steps 1 thru 5 are ALL successful then review the person’s online presence and assess their technical competency from their side projects, github presence, blog posts, etc.  If you notice a serious disconnect between what you learned in 1 to 4 and their public presence, drill into it.&lt;/li&gt;
  &lt;li&gt;Have them interview with all senior staff with the founder and president having final yes / no say.&lt;/li&gt;
  &lt;li&gt;Make offer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;fast-hire-vs-slow-hire&quot;&gt;Fast Hire vs Slow Hire&lt;/h1&gt;

&lt;p&gt;Despite this person not working out and causing me an astonishing amount of rage, I still don’t regret the Fast Hire approach.  Unfortunately I thought that because I was giving hiring authority, that also meant that I had firing authority.  To my infinite regret, that has not turned out to be the case.  You can guarantee that in the future I’ll be more certain of that.  Or I’ll slow hire with the best of them.&lt;/p&gt;

</description>
        <pubDate>Sun, 23 Oct 2016 06:28:40 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/10/23/hiring-practices-fast-versus-slow-it-depends-on-how-fast-you-fire.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/10/23/hiring-practices-fast-versus-slow-it-depends-on-how-fast-you-fire.html</guid>
        
        <category>hiring</category>
        
        <category>firing</category>
        
        <category>hr</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 21 - Naming Your EC2 Machines, Defining Your Bash Prompt and More</title>
        <description>&lt;p&gt;It has been said that there are really only two hard problems in computer science – &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;naming things and cache invalidation&lt;/a&gt;.  Once upon a time I would have argued against that but increasingly I tend to fall into this camp.  I would tend to argue that if you can’t name something that you don’t &lt;em&gt;understand&lt;/em&gt; it.  And I’ve recently run up against this in terms of my EC2 instances:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how should they be named&lt;/li&gt;
  &lt;li&gt;where should that name be represented&lt;/li&gt;
  &lt;li&gt;how should the bash prompt look&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know this sounds simple but its really not.  We’re still at the stage of actively debugging our EC2 cluster of boxes and I’m regularly zipping into a box or out of a box via SSH along with frequent cursing such as “Dang it – why isn’t X working #&lt;em&gt;$#&amp;amp;$()#$&lt;/em&gt;#($)”.  I know according to a lot of people you’re not supposed to bother SSH’ing into EC2 instances – they are supposed to be single purpose, ephemeral, etc.  But even though everything is live, well, we’re still debugging &lt;strong&gt;everything&lt;/strong&gt;.  Sorry folks but that’s just the state of my life right now.&lt;/p&gt;

&lt;p&gt;So I’ve got some number of EC2 instances – more than 10, less than 1000 and any one of them could fail at any point.  I might learn about failures from &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/20/aws-tutorial-20-adding-machine-and-process-monitoring-to-your-aws-instance-with-inspeqtor.html&quot;&gt;Inspeqtor&lt;/a&gt; or &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/16/aws-tutorial-17-wrapping-up-our-ssh-issues-by-using-monit-for-process-monitoring.html&quot;&gt;Monit&lt;/a&gt; or by some other means (log files).  Some failures I might discard and others I might need to investigate at the box level by ssh’ing in.  So what has this told us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to easily be able to get into any box at any time&lt;/li&gt;
  &lt;li&gt;Any alerts that we get need to include the machine name&lt;/li&gt;
  &lt;li&gt;We need to know what box we’re in when we are in it (otherwise its easy to get confused)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And what do we know about working with EC2 boxes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The instance id is really all that Amazon cares about&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we know that EC2 machines are supposed to be non snowflakes, ephemeral and automatically provisioned, this, to me, argues for a naming convention something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PrefixRoleNumber
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;with those tokens defined as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;prefix - something distinct to the overall project; allows you to have different machines in the same aws account with the same role&lt;/li&gt;
  &lt;li&gt;role - what the machine is doing; its function; something like worker or web&lt;/li&gt;
  &lt;li&gt;number - just an integer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you this all together you get a naming structure like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fiworker1&lt;/li&gt;
  &lt;li&gt;fiweb1&lt;/li&gt;
  &lt;li&gt;fiworker199&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then if you pair this with an ssh config file where names like these are mapped to hosts, particularly if you generate your SSH config file dynamically, you can easily ssh into any box by typing something like &lt;strong&gt;ssh fiworker199&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note: If we are going to have a single AWS account manage boxes across multiple projects then we may want to inject the prefix into the role as well.  This would allow automated manipulation of classes of boxes by just tapping into the ec2 name / value space.  If we don’t do this then we might manipulate say all web servers for all projects at a time instead of just the web servers for a single project.&lt;/p&gt;

&lt;p&gt;So now we know how we want to name boxes, the question comes up as to our bash prompt (or zshell prompt if you’re fancy).  I’m not a bash expert by any means but I do know the importance of a good prompt.  What we likely want is something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username@local_ip@machine_name@instance_id:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s long but it actually gives us everything we need.  The advantage to a token like @ being injected is that when you double click a portion of the prompt you’ll get that information selected so you’re just a command+c away from copying it to the clipboard for use somewhere else.&lt;/p&gt;

&lt;h1 id=&quot;the-ansible-side-of-things&quot;&gt;The Ansible Side of Things&lt;/h1&gt;

&lt;p&gt;Given how much I do with Ansible, you’re likely not surprised that I’m going to automate this.  Given the number of boxes, automation is the only way to go and Ansible, while quirky, is a fantastic tool.&lt;/p&gt;

&lt;p&gt;Given how well my previous approach of illustrating the structure and then giving a git repo for the code went recently, I’m doing the same thing again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the git repo.&lt;/p&gt;

&lt;p&gt;One of the tricks that we’re going to use to make this work is push variables at the host level into the inventory file.  This is a very simple trick&lt;/p&gt;

&lt;p&gt;Here’s how to use it:&lt;/p&gt;

</description>
        <pubDate>Sat, 22 Oct 2016 10:07:43 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/22/aws-tutorial-21-what-should-your-ec2-bash-prompt-look-like.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/22/aws-tutorial-21-what-should-your-ec2-bash-prompt-look-like.html</guid>
        
        <category>aws</category>
        
        <category>bash</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Startup Learnings What Francois Schiettecatte Taught Me</title>
        <description>&lt;p&gt;Its been more than a few weeks since I’ve written anything categorized as startup so I guess its time for one of these.  In the Spring of 2003, I was happily running Feedster. We were maybe a few months old – and I saw we but it was really just me – and an email showed up over the transom that read something like this: “I found your contact info thru a DNS lookup.  My name is &lt;a href=&quot;https://fschiettecatte.wordpress.com&quot;&gt;Francois Schiettecatte&lt;/a&gt; and I have a small search engine called rss-search and I’m just 15 miles from you, perhaps we should have lunch”.  At lunch our personalities basically clicked and and a few weeks later, Francois and I were partners.  We felt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;that we were stronger together than we were apart&lt;/li&gt;
  &lt;li&gt;Feedster was a substantially stronger brand than rss-search&lt;/li&gt;
  &lt;li&gt;our technological strengths complemented each other; Francois was strong on the core search engine and I had a better approach towards data management and structuring of everything&lt;/li&gt;
  &lt;li&gt;it feel too serendipitous – two people of entirely different backgrounds ending up 15 miles from each other doing the exact same thing at the exact same time.  Talk about signals from the universe…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway Francois and I then built Feedster together from that point forward.  I became the external face of the company while he focused on the search engine core that he had brought to the table.  We hired &lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/09/02/what-scott-rafer-taught-me.html&quot;&gt;Scott Rafer&lt;/a&gt; together.  And while it was, at times fractious, that’s normal for startup life.  He was a strong technical co-founder and I never regretted it.&lt;/p&gt;

&lt;p&gt;When I first met Francois at his condo in Salem, Mass, I saw his workspace and it was glorious – dual samsung flat screen monitors, a long workspace and an &lt;a href=&quot;http://www.hermanmiller.com/about-us/press/press-releases/all/herman-miller-launches-new-aeron-chair.html&quot;&gt;&lt;strong&gt;Aeron chair&lt;/strong&gt;&lt;/a&gt;.  At that time I was still using the Nth in a long succession of crappy Stables / Office Max chairs.  I had big chairs, small steno chairs, chairs with arms and chairs without.  Each one always cost around $100 and they all, universally &lt;strong&gt;sucked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That day Francois taught me a valuable lesson: &lt;strong&gt;It is ok to spend money on yourself; even on something as simple as a chair&lt;/strong&gt;.  When you think about it, my job could easily be described as &lt;em&gt;I sit professionally, 7 days a week&lt;/em&gt;.  I spend more time in an office chair than I do with my kids, my wife or any other place in my house.  Yes that includes sleep – I average maybe 6 hours per night so that’s 42 hours per week – but I work an easy 70 plus hours per week.&lt;/p&gt;

&lt;p&gt;It would be years later before I got an Aeron chair of my very own.  My wife, bless her heart, took me to Carmel Indiana for a Father’s Day surprise and lo and behold she had arranged for me to get an Aeron chair.  I’ve now been sitting in that same chair going on a decade now and it is still fantastic.&lt;/p&gt;

&lt;p&gt;Francois was brilliant at figuring out what to spend money on and doing it well.  I’d like to think that I picked up at least some of that from him.&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/10/21/startup-learnings-what-francois-schiettecatte-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/10/21/startup-learnings-what-francois-schiettecatte-taught-me.html</guid>
        
        <category>startup</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 20 - Adding Machine and Process Monitoring To Your AWS Instances with Inspeqtor</title>
        <description>&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Inspeqtor is an excellent piece of open source software, any errors are mine and mine alone.  This was fully tested by deploying onto a clean EC2 instance and verifying that it functioned correctly end to end.&lt;/p&gt;

&lt;p&gt;One of the aspects of cloud computing versus traditional hosting is that with cloud computing you tend to work with computing resources that, in general, are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;less &lt;strong&gt;powerful&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;less &lt;strong&gt;reliable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;have less &lt;strong&gt;storage&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally there tend to be &lt;strong&gt;more&lt;/strong&gt; of these resources.  One way to term this might be that traditional data centers are &lt;em&gt;molecular&lt;/em&gt; where as cloud computing is more &lt;em&gt;atomic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In my own experience, I ran a data center for 5 years without having to worry about process monitoring and tools like Monit or Inspeqtor but the very first time I put my AWS data center under heavy load, I found things &lt;a href=&quot;https://fuzzygroup.github.io/blog/tag.html#ssh&quot;&gt;crashing right, left and center&lt;/a&gt;.  All of my problems were magically solved simply by the addition of &lt;a href=&quot;https://mmonit.com/monit/&quot;&gt;Monit&lt;/a&gt; to watch dog the sidekiq process and restart it when it gets too large.  And while this solved my sidekiq problem, two nights ago, I ran out of disc space on a key resource – my MariaDB instance.&lt;/p&gt;

&lt;p&gt;One approach would be to continue to use Monit and add rules to it for disc space monitoring but I’ve been intrigued by the &lt;em&gt;simple&lt;/em&gt; configuration that &lt;a href=&quot;http://www.mikeperham.com&quot;&gt;Mike Perham’s&lt;/a&gt; &lt;a href=&quot;https://github.com/mperham/inspeqtor&quot;&gt;Inspeqtor&lt;/a&gt; offers.  Sidekiq has served me well as of late and Mike’s support, even &lt;a href=&quot;https://fuzzygroup.github.io/blog/ruby/2016/10/10/a-conversation-with-mike-perham.html&quot;&gt;the free community support&lt;/a&gt;, he offers is fantastic.  So rather than double down on Monit, I’m going to branch out and use Inspeqtor.&lt;/p&gt;

&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;p&gt;We want to use Inspeqtor as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;be configured on all boxes by ansible so we never have to do anything manually&lt;/li&gt;
  &lt;li&gt;function on Ubuntu 14.04 with upstart&lt;/li&gt;
  &lt;li&gt;deliver alerts by email (sendmail) that contain the problem and the instance id&lt;/li&gt;
  &lt;li&gt;monitor sidekiq&lt;/li&gt;
  &lt;li&gt;monitor apache&lt;/li&gt;
  &lt;li&gt;monitor disc space&lt;/li&gt;
  &lt;li&gt;monitor ram&lt;/li&gt;
  &lt;li&gt;monitor load&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;inspeqtor-vs-monit&quot;&gt;Inspeqtor vs Monit&lt;/h1&gt;

&lt;p&gt;Monit and Inspeqtor are two very different animals.  Whereas Monit is a general purpose monitoring tool, Inspeqtor is specialized focusing on process that are run thru &lt;a href=&quot;https://github.com/mperham/inspeqtor/wiki/Initd&quot;&gt;init.d / upstart&lt;/a&gt; as well as generalized machine configuration.  So while you can technically do more with Monit, you’ll have a much easier time doing what you generally need with Inspeqtor.&lt;/p&gt;

&lt;h1 id=&quot;configuring-sendmail&quot;&gt;Configuring Sendmail&lt;/h1&gt;

&lt;p&gt;Inspeqtor can work with a number of different email delivery approaches from gmail to a local sendmail instance.  The configuration for Inspeqtor for different email delivery engines looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# This is the default alert statement.  This tells Inspeqtor where to
# send alert emails.
#
# Here we'll configure the default to send email alerts via gmail to &quot;dev@example.com&quot;
#
# send alerts via gmail
#   with username mike, password fuzzbucket, to_email dev@example.com

#
# Here's a generic email example, not requiring Google Mail.
# Your SMTP server must accept Authentication/TLS.
#
# send alerts via email with
#   username bob,
#   password &quot;foo bar baz&quot;,
#   smtp_server smtp.example.com,
#   tls_port 587,
#   to_email analytics@example.com,
#   from_email inspeqtor@example.com

#
# Here is another generic email example, not requiring authentication.
# Your local SMTP server must be listening on port 25.
#
send alerts via email with
  smtp_server localhost,
  to_email fuzzygroup@gmail.com,
  from_email inspeqtor@
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve got the other approaches commented out just showing the local smtp_server (in my case sendmail).&lt;/p&gt;

&lt;p&gt;Here’s an ansible role to configure sendmail:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ansible_root/roles/sendmail/tasks
touch ansible_root/roles/sendmail/tasks/main.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Edit the file main.yml and add these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: install sendmail 
  apt: name=sendmail state=present
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In your playbook, call this role as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: sendmail, tags: sendmail}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s how to verify if your local sendmail instance is actually running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;ficrawler1 My test email being sent from sendmail&quot; | /usr/sbin/sendmail fuzzygroup@gmail.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check your inbox for the message.  You may find that you need to check a spam or junk folder since this isn’t a modern mail server using SPIF / DKIM standards.  If the message didn’t arrive then you need to troubleshoot and figure out why.&lt;/p&gt;

&lt;h1 id=&quot;configuring-inspeqtor-with-ansible&quot;&gt;Configuring Inspeqtor with Ansible&lt;/h1&gt;

&lt;p&gt;Inspeqtor relies on several files that determine how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/etc/inspeqtor/inspeqtor.conf – how the overall inspeqtor instance runs and how to notifies&lt;/li&gt;
  &lt;li&gt;/etc/inspeqtor/host.inq – what to monitor about the host itself&lt;/li&gt;
  &lt;li&gt;/etc/inspeqtor/services.d/WHATEVER_YOU_WANT_TO_MONITOR.inq&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of each of these are given below.&lt;/p&gt;

&lt;h2 id=&quot;here-is-etcinspeqtorinspeqtorconf&quot;&gt;Here is /etc/inspeqtor/inspeqtor.conf&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# Welcome to the global Inspeqtor config file!
#

#
# The cycle time is how often Inspeqtor will capture metrics and
# verify rules, in seconds.
#
set cycle_time 15

#
# The deploy length is the maximum length of your application deploys, in
# seconds. If you start a deploy and then never signal its finish, Inspeqtor will
# time out the deploy after this many seconds and start checking rules again.
#
# This is a failsafe.  Normally you will signal Inspeqtor when your
# deploys finish.
#
set deploy_length 300

#
# Set logging level, legal values are:
#   warn
#   info (default)
#   debug (-l debug)
#   verbose (-l verbose)
# At info, inspeqtor will not log anything when everything is ok.
#
set log_level info

# Inspeqtor Pro can send collected metrics to Statsd
# set statsd_location localhost:8125

#
# This is the default alert statement.  This tells Inspeqtor where to
# send alert emails.
#
# Here we'll configure the default to send email alerts via gmail to &quot;dev@example.com&quot;
#
# send alerts via gmail
#   with username mike, password fuzzbucket, to_email dev@example.com

#
# Here's a generic email example, not requiring Google Mail.
# Your SMTP server must accept Authentication/TLS.
#
# send alerts via email with
#   username bob,
#   password &quot;foo bar baz&quot;,
#   smtp_server smtp.example.com,
#   tls_port 587,
#   to_email analytics@example.com,
#   from_email inspeqtor@example.com

#
# Here is another generic email example, not requiring authentication.
# Your local SMTP server must be listening on port 25.
#
send alerts via email with
  smtp_server localhost,
  to_email fuzzygroup@gmail.com,
  from_email inspeqtor@ip-172-31-38-2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;here-is-etcinspeqtorhostinq&quot;&gt;Here is /etc/inspeqtor/host.inq&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;check host
  if load:1 &amp;gt; 1 for 2 cycles then alert
  if load:5 &amp;gt; 1 then alert
  if cpu:user &amp;gt; 95% for 2 cycles then alert
  if swap &amp;gt; 20% for 2 cycles then alert
  if disk:/ &amp;gt; 90% then alert
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;here-is-etcinspeqtorservicesdserviceinqtemplate&quot;&gt;Here is /etc/inspeqtor/services.d/service.inq.template&lt;/h2&gt;

&lt;p&gt;This is a generic starting point template to monitor any service in /etc/init.d&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat  /etc/inspeqtor/services.d/service.inq.template
# NOTE this file should be renamed to &amp;lt;name&amp;gt;.inq where name is explained below.
#
# Inspeqtor is designed to monitor a host and the services running
# on that host. Services must be controlled by your OS's init system:
# upstart, systemd, launchd or runit.
#
# Inspeqtor knows how to monitor services for each major init system,
# as long as you give the exact name of that service.
#
# In systemd:
#   /usr/lib/systemd/system/&amp;lt;name&amp;gt;.service
# In upstart:
#   /etc/init/&amp;lt;name&amp;gt;.conf
# In runit:
#   /etc/service/&amp;lt;name&amp;gt;/run
# In launchd:
#   ~/Library/LaunchAgents/&amp;lt;name&amp;gt;.plist
#
# Supporting traditional init.d is a little trickier, see the
# https://github.com/mperham/inspeqtor/wiki/Initd wiki page
# for more details. tl;dr You need to populate a PID file at
# /var/run/&amp;lt;name&amp;gt;.pid or /var/run/&amp;lt;name&amp;gt;/&amp;lt;name&amp;gt;.pid
#

#
# Here we define the service to monitor. The name of the service
# ('mysql') must match the name that your init system uses.
# You'll want to rename this file to mysql.inq to match.
#
check service mysql

  #
  # if you want to monitor daemon-specific metrics, you'll need
  # to tell Inspeqtor how to connect to the daemon.
  # See https://github.com/mperham/inspeqtor/wiki/Daemon-Specific-Metrics
  #
  #with username root, socket /var/run/mysqld/mysqld.sock

  #
  # Add any normal process metrics you want to verify.
  #
  if memory:rss &amp;gt; 2g then alert

  #
  # Since a cycle defaults to 15 seconds, this rule triggers if
  # there's excessive CPU usage for more than 30 seconds.
  #
  if cpu:user &amp;gt; 90% for 2 cycles then alert

  #
  # Alert if we see too many queries or slow queries. These are
  # examples of Daemon-Specific Metrics.
  #
  #if mysql:Queries &amp;gt; 100/sec for 2 cycles then alert
  #if mysql:Slow_queries &amp;gt; 1/sec for 2 cycles then alert    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more on writing your own inq files, see the &lt;a href=&quot;https://github.com/mperham/inspeqtor/wiki/INQ-Configuration&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;here-is-my-sample-sidekiqinq-file&quot;&gt;Here is my sample sidekiq.inq file&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;check service sidekiq
  if memory:rss &amp;gt; 6g then alert, restart
  if cpu:user &amp;gt; 95% for 2 cycles then alert
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-inspeqtor-with-ansible-1&quot;&gt;Configuring Inspeqtor with Ansible&lt;/h2&gt;

&lt;p&gt;Rather than write out a playbook, roles and template files manually, I hosted it on &lt;a href=&quot;https://github.com/fuzzygroup/ansible_inspeqtor&quot;&gt;github&lt;/a&gt;.  Clone it from there and adapt it for your needs.  But, in case you’re curious, here is the overall structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tree
.
├── ansible.cfg
├── group_vars
│   └── all
├── inventories
│   └── ficrawler11
├── playbook_inspeqtor.yml
├── playbooks
├── readme.md
└── roles
    ├── inspeqtor
    │   ├── files
    │   │   ├── apache.inq
    │   │   ├── host.inq
    │   │   ├── inspeqtor.conf
    │   │   └── sidekiq.inq
    │   └── tasks
    │       └── main.yml
    ├── sendmail
    │   └── tasks
    │       └── main.yml
    └── setup
        └── tasks
            └── main.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The setup task exists to register an ansible variable that gives the instance-id so it can be used in alerting.  This is handled by calling the &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/09/07/aws-tutorial-getting-your-instance-id.html&quot;&gt;instance id api&lt;/a&gt; which I covered previously.  While there is an instance_ids method in the &lt;a href=&quot;http://docs.ansible.com/ansible/ec2_module.html&quot;&gt;Ansible EC2 module&lt;/a&gt;, this approach means you don’t have your security keys as its a private API you only call from inside the instance itself.&lt;/p&gt;

&lt;h1 id=&quot;managing-inspeqtor-on-a-daily-basis&quot;&gt;Managing Inspeqtor on a Daily Basis&lt;/h1&gt;

&lt;p&gt;With almost any Unix tool you need to know how to do at least two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start / stop&lt;/li&gt;
  &lt;li&gt;view logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start / Stop on Ubuntu is handled with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service inspeqtor restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Logs can be viewed with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo tail -f /var/log/upstart/inspeqtor.log  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;more-info&quot;&gt;More Info&lt;/h1&gt;

&lt;p&gt;More info on Inspeqtor can be found on the &lt;a href=&quot;https://github.com/mperham/inspeqtor/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/20/aws-tutorial-20-adding-machine-and-process-monitoring-to-your-aws-instance-with-inspeqtor.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/20/aws-tutorial-20-adding-machine-and-process-monitoring-to-your-aws-instance-with-inspeqtor.html</guid>
        
        <category>aws</category>
        
        <category>inspeqtor</category>
        
        <category>ubuntu</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
