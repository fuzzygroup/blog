<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 07 Sep 2016 04:10:15 -0400</pubDate>
    <lastBuildDate>Wed, 07 Sep 2016 04:10:15 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>AWS - An Example of Development Speed</title>
        <description>
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/09/07/aws-an-example-of-development-speed.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/09/07/aws-an-example-of-development-speed.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails2Elixir - rake spec</title>
        <description>&lt;p&gt;The command &lt;strong&gt;rake spec&lt;/strong&gt; runs your rspec test suite.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-spec.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-spec.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rake db:migrate</title>
        <description>&lt;p&gt;In the Rails world, rake db:migrate stands for “migrate the database and execute the latest migrations”.  In the Elixir world the &lt;strong&gt;mix&lt;/strong&gt; command fills the role that the rake and rails executables used to.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-db-migrate.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-db-migrate.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails new</title>
        <description>&lt;p&gt;Rails new is the command which generates a new Rails project.  The equivalent would be the phoenix new command.  Here is the equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other things to know:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new --help

mix phoenix.new project_name --database mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org/docs/up-and-running&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails g migration something_to_change</title>
        <description>&lt;p&gt;In the Rails world, rails g migration something_to_change means  db:migrate stands for “migrate the database and execute the latest migrations”.  In the Elixir world the &lt;strong&gt;mix&lt;/strong&gt; command fills the role that the rake and rails executables used to.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.gen.migration something_to_change
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-g-migration-something-to-change.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-g-migration-something-to-change.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails c</title>
        <description>&lt;p&gt;rails c, the Rails Console, is one of those canonical things in the rails world - it launches the rails console with all your objects loaded.&lt;/p&gt;

&lt;p&gt;The elixir equivalent to this is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This compiles your project and is a great way to quickly test your code.  If the console comes up then you don’t have any syntactic errors&lt;/p&gt;

&lt;p&gt;Just as, in the Rails world, you can run irb, you can also just run iex:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This won’t compile anything and its a fast way to test basic elixir snippets.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - bundle install</title>
        <description>&lt;p&gt;The command bundle install tells your ruby / rails application to read the Gemfile and install or update the components in Gemfile.  The elixir equivalent to Gemfile is mix.exs and the command to update it is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A sample mix.exs file looks quite different from Gemfile.  Here’s an example of just the &lt;strong&gt;defp deps&lt;/strong&gt; method where the equivalent to gems are listed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defp deps do
  [{:mariaex, &quot;&amp;gt;= 0.0.0&quot;},
   {:ecto, &quot;~&amp;gt; 2.0&quot;},
   {:aws, &quot;~&amp;gt; 0.2.0&quot;}]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-bundle-install.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-bundle-install.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Practical Things Learned at ElixirConf</title>
        <description>&lt;p&gt;Its been a few days since ElixirConf and I was reflecting on the practical stuff I learned.  Yes I saw the grand vision driving things but I’m always more concerned about the little stuff because everything you build is entirely dependent on the little stuff.  Attribution given by name only since I don’t want to call anyone out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It’s real&lt;/strong&gt;.  People are really using this in production which means that I can too.  Just knowing that is huge.  Thanks Ben!&lt;/li&gt;
  &lt;li&gt;Deploy is still kind of a mess.  At least one company I met is handling deploy via building it into containers and then deploying the containers.  Again thanks to Ben!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hex.pm/packages/timex&quot;&gt;Timex&lt;/a&gt; is the rough equivalent to the Rails ActiveSupport Time.now style stuff.  That’s huge since I rely on that constantly.&lt;/li&gt;
  &lt;li&gt;Despite the above comment on Timex, I was advised that datetime stuff is kind of a mess and “just get the unix epoch from the server and do with it what you will”.  I don’t know how to reconcile this yet but I’m sure I will.  Thanks Pete!&lt;/li&gt;
  &lt;li&gt;As with Rails development local development using containers “just doesn’t feel right”.  Not terribly surprising given how many times I’ve tried to get a full rails stack running for local development using Docker and how many times I’ve failed.&lt;/li&gt;
  &lt;li&gt;Ecto is surprisingly robust and I’m looking forward to using&lt;/li&gt;
  &lt;li&gt;There are starting to be lots of good development tools including an &lt;a href=&quot;https://github.com/KronicDeth/intellij-elixir&quot;&gt;IntelliJ plugin for Elixir&lt;/a&gt;.  This is the first time I’ve ever even considered a JetBrains product so that’s surprising.  Hat tip to &lt;a href=&quot;https://github.com/KronicDeth&quot;&gt;KronicDeath&lt;/a&gt; who I’m pretty sure I had dinner with; its all a bit blurry now in retrospect.&lt;/li&gt;
  &lt;li&gt;I purely can’t wait to start using &lt;a href=&quot;https://github.com/gamache/fuzzyurl.ex&quot;&gt;FuzzyUrl&lt;/a&gt;  I’ve written a lot of this kind of code over the years.  Curious to see how it compares (hint - this will be better)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/06/practical-things-learned-at-elixircon.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/06/practical-things-learned-at-elixircon.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Notes from My ElixirConf Trip Report at Indianapolis Meetup</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Background: 10 years doing ruby / 9 years doing rails; I tired of crap performance and unreliability; mostly a consultant&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Six months of mucking with elixir so I sent myself to elixirconf to force myself to get started&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overview: Its real&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People are actually using it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I expected Rails 1 and got Rails 3 (level of finish)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy is still hard (expected)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Great training class - sonny scrogson highly recommended&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Big changes coming to phoenix&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Personality - “Get Off My Beam” erlang folks versus “Beam for Millenials”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talented, smart, helpful, nice community&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Big emphasis on documentation – replaces the rails focus on TDD&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Hex.pm is immature
    &lt;ul&gt;
      &lt;li&gt;Use erlang libraries versus 0.1x elixir&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DRY is no longer the motto&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Surprising thing for me was boyd multerer
    &lt;ul&gt;
      &lt;li&gt;nerves - 16 K for a full fault tolerant embedded stack&lt;/li&gt;
      &lt;li&gt;former architect of xbox live&lt;/li&gt;
      &lt;li&gt;could have chosen anything he wanted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/06/notes-from-my-elixirconf-trip-report-at-indianapolis-meetup.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/06/notes-from-my-elixirconf-trip-report-at-indianapolis-meetup.html</guid>
        
        <category>meetup</category>
        
        <category>elixir</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>AWS - I was Wrong; Dead Wrong</title>
        <description>&lt;p&gt;It isn’t easy for me to write this but I have to admit that &lt;strong&gt;I was flat out wrong about aws&lt;/strong&gt; – and I have been for years.  I started use AWS in 2008 using its crack cocaine feature – S3.  S3 makes anything related to cross machine storage so damn easy that it really is the &lt;strong&gt;crack cocaine of AWS&lt;/strong&gt;.  You start with just a little and then you look up and its everywhere.  And, unfortunately, that was pretty much where my usage stopped.  Sure, as a consultant, if a client was already committed to AWS, I used it but I never sat down and really &lt;strong&gt;grokked it&lt;/strong&gt;.  I didn’t internalize the AWS model of thinking.  Well that is at an end – I’m deep in to AWS now and let me repeat myself:&lt;/p&gt;

&lt;p&gt;{!.center}
&lt;strong&gt;I was wrong&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started in high tech in 1987 building hypertext linking tools (authoring and browsing) and, yes, that’s 4+ years prior to the web so I’ve been pretty good at anticipating change.  Similarly I made the leap to solely open source development technologies in 1999.  And I was building blogging technology at the start of the Web 2.0 boom.  Unfortunately I completely missed the significance of AWS.  While I looked at it and saw “supporting technologies like S3”, what I missed were these key points:&lt;/p&gt;

&lt;p&gt;{!.center}
&lt;strong&gt;AWS is your data center&lt;/strong&gt; 
{!.center}
&lt;strong&gt;And any software engineer can now build a data center.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And its really that simple - AWS is now an entire data center.  Everything from:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;storage (s3)&lt;/li&gt;
  &lt;li&gt;db (rds)&lt;/li&gt;
  &lt;li&gt;queuing (sqs)&lt;/li&gt;
  &lt;li&gt;servers (ec2)&lt;/li&gt;
  &lt;li&gt;load balancing&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And all of this is wrapped up in an easy to use, albeit mildly ugly, web user interface that almost any software engineer can use.  Just as an example I’ve always shied away from the low level networking aspect of the stack like firewalls, etc.  However, earlier today, I found myself easily says “Ok here’s my VPC of boxes and here is a firewall which will limit access to all my internal servers - mysql / redis / memcache - to only my box on this subnet”.  And it all worked the very first time.  When is the last time that a firewall rule worked on all the boxes you had the very first time – when you weren’t a network specialist?&lt;/p&gt;

&lt;p&gt;In closing I completely missed the significance of how AWS will fundamentally change the economics of building Internet applications.  If you’ve been stuck, as I have, with a hosting company where you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can’t get what you want&lt;/li&gt;
  &lt;li&gt;get overcharged for crappy performance on old hardware&lt;/li&gt;
  &lt;li&gt;get crappy support&lt;/li&gt;
  &lt;li&gt;can’t easily create a new server w/o killing yourself on configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you should find AWS a refreshing alternative.  Yes, it is a completely different way of thinking about infrastructure and there is a metric ton of things to learn but the end result is &lt;strong&gt;just outstanding&lt;/strong&gt;.  In less than a week’s worth of part time effort, I’ve replaced equivalent infrastructure that took multiple weeks to configure and was lower performance than my AWS equivalent.  Additionally I can easily clone an individual server to setup a duplicate.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/09/06/aws-i-was-wrong-dead-wrong.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/09/06/aws-i-was-wrong-dead-wrong.html</guid>
        
        <category>aws</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
