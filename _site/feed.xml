<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Aug 2017 11:08:17 -0400</pubDate>
    <lastBuildDate>Tue, 01 Aug 2017 11:08:17 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Hacks for When Ansible Galaxy Isn't Working</title>
        <description>&lt;p&gt;As of late I have manually bootstrapped a handful of machines into production using a text file with some command lines.  Yes this is a crap ass way to do it but one of the key things, Docker, is a damn pain in the ass to install.  Here’s what I was using as the command lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update
sudo apt-get install docker-ce
sudo apt install docker-compose
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even for me that’s damn ugly – so it is clearly time for &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;.  Ansible is a machine provisioning tool that lets you reduce commands like the above to something short, sweet and idempotent.  For this particular thing I wanted to use &lt;a href=&quot;https://nickjanetakis.com/blog/automate-installing-docker-and-docker-compose-with-ansible&quot;&gt;Nick Janetakis’ Ansible Galaxy role&lt;/a&gt; to make installing this trivial.  Specifically I wanted what his blog post promises:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: nickjj.docker, tags docker}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is all you need to setup Docker.  And that’s actually what I got but I hit a few snags hence the workaround.&lt;/p&gt;

&lt;p&gt;The problem that I hit was that his ansible galaxy role has some kind of version control conflict so that the version that gets installed when you type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-galaxy install nickjj.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is actually the version from November 2016, not the current 17.xx version.  What I needed was the master version of the Github repo not the older tagged version.  A bit of googling and some interactions with Nick told me just clone it directly into my own project as a work around.  Here’s how I did that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change into the right directory
cd ~/me/fuzzygroup/hyde/seira_watch/ansible/roles

git clone git@github.com:nickjj/ansible-docker.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This created an ansible-docker folder in my roles directory and all that I needed to make it work was to change the nickjj.docker reference to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: ansible-docker, tags docker}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nick also helpfully pointed out that I could have also cloned to tmp and then renamed to nickjj-docker before copying it over and that would have worked just fine tool.  Thanks Nick!&lt;/p&gt;

&lt;p&gt;Note: Another workaround supposedly would be to make a requirements.yml file and specify the branch there but I’m less certain on how to do that.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/ansible/2017/08/01/hacks-for-when-ansible-galaxy-isn-t-working.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ansible/2017/08/01/hacks-for-when-ansible-galaxy-isn-t-working.html</guid>
        
        <category>ansible</category>
        
        <category>ansible-galaxy</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>Configuring Your Mac with Ansible Take 2</title>
        <description>&lt;p&gt;The last new Mac I setup was back in &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2016/11/20/ansible-for-configuring-your-mac-so-much-better.html&quot;&gt;2016, November 20&lt;/a&gt; and to do that I used ansible which was a wonderful experience.  Rather than groveling for software to install, shell hacks, etc, my ansible routine handled all of those crappy tasks and it was brilliant.  I can’t claim any originality here – lots of people other than me have done this.  In specific I drew inspiration from &lt;a href=&quot;https://twitter.com/geerlingguy&quot;&gt;Jeff Geerling’s&lt;/a&gt; ansible Macbook Pro repository.  He and I did it differently (his ansible skills are better than mine) but the end result was much the same – a functional machine with minimal manual work.&lt;/p&gt;

&lt;p&gt;I recently wrote about &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html&quot;&gt;my lack of system stability&lt;/a&gt; and figured that it was time to address it.  My thesis for some time has been that most of my errors are somehow related to lack of RAM so moving to a bigger box made sense.  Over the weekend I converted my Linux Intel NUC over to an OSX Hackintosh and used an updated version of the same playbook to handle configuration.  This means that I’m now working on a 32 gigs of RAM development box.  It is unclear if this will work out long term or not but it is an interesting experiment.  Of course since its a Hackintosh there are certain bits of weirdness like the fact that audio doesn’t work at all at present.  Ah well…&lt;/p&gt;

&lt;h1 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geerlingguy/mac-dev-playbook&quot;&gt;Jeff Geerling’s Github Mac Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fuzzygroup/ansible-macbook-pro&quot;&gt;My Github Repo for Macbook Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/&quot;&gt;TonyMacx86&lt;/a&gt; - The definitive OSX Hackintosh Resource&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html</guid>
        
        <category>mac</category>
        
        <category>ansible</category>
        
        <category>hackintosh</category>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Rails and Address Already In Use - Bind Error</title>
        <description>&lt;p&gt;Lately I’ve seen this error come up quite a few times:&lt;/p&gt;

&lt;p&gt;/Users/sjohnson/.rvm/gems/ruby-2.3.1@seira_watch_web_app_api/gems/puma-3.9.1/lib/puma/binder.rb:269:in `initialize’: Address already in use - bind(2) for “::1” port 3220 (Errno::EADDRINUSE)&lt;/p&gt;

&lt;p&gt;I’m running a fairly complex stack that mirrors an 8 micro service application where things are expected to be on certain points in development so having port 3220 not working means that one of my APIs isn’t available – and that’s &lt;strong&gt;unacceptable&lt;/strong&gt;.  So I dug into it a bit and with the help of &lt;a href=&quot;https://stackoverflow.com/questions/10261477/tcpserver-error-address-already-in-use-bind2&quot;&gt;this StackOverflow&lt;/a&gt;, I found the answer was to locate the offending process and then kill it dead:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;lsof -wni tcp:3220&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That gives the process id or PID and then you can just kill it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kill -9 12345 (or whatever)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/07/29/rails-and-address-already-in-use-bind-error.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/07/29/rails-and-address-already-in-use-bind-error.html</guid>
        
        <category>rails</category>
        
        <category>sysadmin</category>
        
        <category>bind</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Planning the Bare Minimum Billing Side of a SAAS Product</title>
        <description>&lt;p&gt;I’ve spent part of this week working through the billing side of my new SAAS product which I’m planning to use with Stripe as my credit card solution.  And what I did was focus solely on the &lt;em&gt;how&lt;/em&gt; of the code, you know, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do I use &lt;a href=&quot;https://stripe.com/docs/elements&quot;&gt;Stripe Elements&lt;/a&gt; with Rails&lt;/li&gt;
  &lt;li&gt;How do I support credit card updating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of this I learned from the excellent &lt;a href=&quot;http://courses.gorails.com&quot;&gt;Stripe course&lt;/a&gt; from &lt;a href=&quot;http://www.gorails.com/&quot;&gt;Go Rails&lt;/a&gt; which I strongly recommend for any Rails / Stripe projects you have.&lt;/p&gt;

&lt;p&gt;What I never did was actually outline the functions that a bare minimum SAAS billing engine needs.  So you consider this a “retrospective specification”.  I’m not going to talk at all about the code – go buy the course for that – but, instead, about the minimum amount of features you need to have a SAAS product in 2017.  The criteria I used to define minimum functionality was pretty simple: I don’t ever want to have to get involved in day to day transactional crap.&lt;/p&gt;

&lt;p&gt;Here are the bare minimum SAAS functions you need in 2017:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user has to be able to order the product with the product name and price displayed on the order form and a standard bootstrap approach to form elements. &lt;strong&gt;DONE&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The system needs to be able to support at least Basic and Pro subscriptions from the very beginning. &lt;strong&gt;DONE&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The user has to be able to enter a stripe coupon code on checkout so the user can get a discount. &lt;strong&gt;SKIP&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The user has to be able to get a receipt for their transaction. &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The user has to be able to cancel a subscription by forcing the user through one or two “please don’t cancel” screens first where you try and convince them not to cancel.  Now, that said, the user needs to be able to cancel on their own, without a refund, but with the service being available until the end of their payment period.&lt;/li&gt;
  &lt;li&gt;The system has to be able to receive transactions from Stripe events and log them to a charges table.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There needs to be easy access to admin tools with restricted access to only admin users.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There needs to be an admin page which shows daily revenue and total revenue.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;There needs to be an admin page with calculation of lifetime customer value on a per customer basis.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;A basic has_valid_account? method on an instance of user needs to exist.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;An api needs to be exposed so other parts of the system can find out if a user’s account is still valid.  This isn’t a standard feature so I listed it last.  I chose to build my product in a distributed fashion thus requiring a basic authorization api to be implemented.  &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll notice that I don’t put anything in on the admin pages about sorting, searching or even pagination.  This is purely an internal tool and since, right now, I have 0 transactions, none of that is needed.  If I get transactions for this side project, then and only then, do I need to worry about that.&lt;/p&gt;

&lt;p&gt;There are a near infinite amount of billing / SAAS features that can be implemented but these are the bare minimum.  Each of these is discussed below.&lt;/p&gt;

&lt;p&gt;I have specifically noted which features I was able to easily re-use from the Stripe course.&lt;/p&gt;

&lt;h1 id=&quot;user-has-to-be-able-to-order-the-product&quot;&gt;User Has to be Able to Order the Product&lt;/h1&gt;

&lt;h1 id=&quot;system-needs-to-support-basic-and-pro-subscriptions&quot;&gt;System Needs to Support Basic and Pro Subscriptions&lt;/h1&gt;

&lt;h1 id=&quot;user-has-to-be-able-to-enter-a-coupon-code&quot;&gt;User Has to be Able to Enter a Coupon Code&lt;/h1&gt;

&lt;p&gt;I made the executive decision to skip this based on complexity. A good reference to implementing it can be found here: https://stripe.com/docs/recipes/coupons-for-charges&lt;/p&gt;

&lt;h1 id=&quot;user-has-to-be-able-to-get-a-receipt&quot;&gt;User Has to Be Able to Get a Receipt&lt;/h1&gt;
&lt;p&gt;# User Has to Be Able to Cancel 
# System Has to Receive Stripe Events
# Admin Page with Daily Revenue and Total Revenue
# Admin Page of Lifetime Customer Value&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jul 2017 11:12:26 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/saas/2017/07/22/planning-the-bare-minimum-billing-side-of-a-saas-product.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/saas/2017/07/22/planning-the-bare-minimum-billing-side-of-a-saas-product.html</guid>
        
        <category>rails</category>
        
        <category>stripe</category>
        
        <category>saas</category>
        
        <category>billing</category>
        
        
        <category>saas</category>
        
      </item>
    
      <item>
        <title>Blog as Well as Automate</title>
        <description>&lt;p&gt;This morning I was reading &lt;a href=&quot;https://www.amazon.com/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107/ref=sr_1_1?ie=UTF8&amp;amp;qid=1500632263&amp;amp;sr=8-1&amp;amp;keywords=Effective+Engineer&quot;&gt;The Effective Engineer&lt;/a&gt; by Edmond Lau, an excellent read, and I hit on the section where he talks about how important it is to automate things that you do more than twice – and he’s right.&lt;/p&gt;

&lt;p&gt;The very first thing I did on my current side project was dramatically reduce the amount of effort it is to build applications with Rails that aren’t monoliths and it absolutely has paid off.  I do think that there is a related aspect to automation – writing it down or blogging.&lt;/p&gt;

&lt;p&gt;There are things that you do somewhat regularly that don’t merit automation but are often a pain in the arse to figure out.  The example this morning was I wrote the first test coverage on a new bit of greenfield code and RSpec ever so helpfully told me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;An error occurred while loading ./spec/models/subscription_common_spec.rb.
Failure/Error: require 'rails_helper' 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This particular “app” has 8 separate git repos so, yes, I’ve done this more than twice but it isn’t amenable to automation since its an oddball step that I only do N times where N is the number of repos (its a setup task).  Now, in the age of monolithic Rails apps, this wasn’t a big deal – you only ever had one repo so you did it once and then you forgot about it.  Now I’ve already hit this more than twice so I made sure to write it down – on my &lt;a href=&quot;http://fuzzyblog.io/blog/rails/2017/02/26/setting-up-rails-with-rspec-from-the-start.html&quot;&gt;blog&lt;/a&gt;.  All I had to do was hit my &lt;a href=&quot;http://fuzzyblog.io/blog/&quot;&gt;blog home page&lt;/a&gt; and search for RSpec and there it was.  If you’ve ever wondered why my blog page is a long, long list of 600+ titles, that’s why – I want a single searchable thing that I can zoom through.  My blog gets very little traffic but it is incredibly useful l – to &lt;strong&gt;me&lt;/strong&gt;.  Anything that I expect to do more than twice, if I don’t think its worth automating, I write it down.&lt;/p&gt;

&lt;p&gt;So, to me, the corollary to automate things you do more than twice is if you can’t automate it then write it down (preferably blog it) and make sure its searchable.&lt;/p&gt;

&lt;p&gt;And you should buy The Effective Engineer by &lt;a href=&quot;https://twitter.com/edmondlau&quot;&gt;Raymond Lau&lt;/a&gt;.  It really is good.&lt;/p&gt;

&lt;p&gt;Oh and my tests passed, first time out of the gate.  w00t!&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jul 2017 06:28:25 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/software_development/2017/07/21/blog-as-well-as-automate.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_development/2017/07/21/blog-as-well-as-automate.html</guid>
        
        <category>books</category>
        
        <category>monolith</category>
        
        <category>automation</category>
        
        <category>blogging</category>
        
        
        <category>software_development</category>
        
      </item>
    
      <item>
        <title>Rails Sys Admin When Puma Won't Run But Its Not Running</title>
        <description>&lt;p&gt;I use Puma for local Rails development and I’m running a stack of roughly 7 related Rails apps on a series of varying ports starting from 3200 going up by increments of 10.  I run all development using Tmux as a way to launch all the resources for a single “app” in one shot.&lt;/p&gt;

&lt;p&gt;I recently ran into the situation where Puma would not start even though I had exited all sessions and killed all instances of Tmux.  But, even so, I could not get Puma to start.  I kept getting the bind error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails s -p3220
=&amp;gt; Booting Puma
=&amp;gt; Rails 5.0.0.1 application starting in development on http://localhost:3220
=&amp;gt; Run `rails server -h` for more startup options
Puma starting in single mode...
* Version 3.6.0 (ruby 2.3.1-p112), codename: Sleepy Sunday Serenity
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://localhost:3220
Exiting
/Users/sjohnson/.rvm/gems/ruby-2.3.1/gems/puma-3.6.0/lib/puma/binder.rb:266:in `initialize': Address already in use - bind(2) for &quot;::1&quot; port 3220 (Errno::EADDRINUSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I did a bunch of digging and found this [Stack Overflow answer] (https://stackoverflow.com/questions/39505675/ruby-on-rails-server-isnt-starting):&lt;/p&gt;

&lt;p&gt;Step 1 is to run lsof on the offending port and find the PID associated with the port. In my case somehow vpnkit picked up this port and wouldn’t release it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -i :3220

COMMAND   PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
vpnkit  99947 sjohnson   27u  IPv4 0x8a1799bf7e1441df      0t0  TCP *:xnm-ssl (LISTEN)
vpnkit  99947 sjohnson   28u  IPv6 0x8a1799bf93a6e2d7      0t0  TCP localhost:xnm-ssl (LISTEN)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Step 2 was a kill -9 on the offending port:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kill -9 99947
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then Puma ran like a champ:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails s -p3220
=&amp;gt; Booting Puma
=&amp;gt; Rails 5.0.0.1 application starting in development on http://localhost:3220
=&amp;gt; Run `rails server -h` for more startup options
Puma starting in single mode...
* Version 3.6.0 (ruby 2.3.1-p112), codename: Sleepy Sunday Serenity
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://localhost:3220
Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 13:55:41 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/07/20/rails-sys-admin-when-puma-won-t-run-but-its-not-running.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/07/20/rails-sys-admin-when-puma-won-t-run-but-its-not-running.html</guid>
        
        <category>rails</category>
        
        <category>puma</category>
        
        <category>sysadmin</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Why I Haven't Switched Away from OSX</title>
        <description>&lt;p&gt;I’m writing this at 4:12 am sitting next to a machine with 11:50 hours of uptime.  The machine I’m using is an old OSX Macbook Air running OSX El Capitan 10.11.6 and the machine with less than 12 hours of uptime is running Sierra 10.12.5 and is a new (6 months old) Macbook Pro 13, the last one of the old generation before Apple foolishly messed around with the keyboard travel and layout on the new generation.  Yesterday my wife was driving and I was in the car drafting blog entries for a new, very focused blog I want to launch.  We were on flat dead empty and she stopped at a gas station so I got out to pump the fuel.  I came back to that worst of all experiences – my laptop had rebooted spontaneously and was sitting at the login prompt.  &lt;em&gt;Groan&lt;/em&gt;.  Even worse there was no system report this time so I don’t even know what pathetic excuse for a piece of software screwed up (again).  So I’m just left wondering.  But since this happens so frequently, I found a &lt;a href=&quot;https://gist.github.com/fuzzygroup/a4589f50665fd62f9ded74d54cd77e74&quot;&gt;crash report from about a week ago&lt;/a&gt; when my box had an uptime of 94000 seconds (yes that’s just one day).&lt;/p&gt;

&lt;p&gt;My old friend &lt;a href=&quot;https://gene-callahan.blogspot.com/&quot;&gt;Gene Callahan&lt;/a&gt;, the man who two decades ago taught me Awk and pattern matching, skills that have subsequently defined much of my technical career, asked me recently why don’t I switch to something stable and answering that is a challenge but I think I’m finally ready to address that.  Here’s the tldr with a deep discussion on each below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of Faith in the Alternatives&lt;/li&gt;
  &lt;li&gt;Textmate, Textmate, Textmate&lt;/li&gt;
  &lt;li&gt;iTerm2&lt;/li&gt;
  &lt;li&gt;My Phone&lt;/li&gt;
  &lt;li&gt;My Pictures / My Data&lt;/li&gt;
  &lt;li&gt;Time Machine&lt;/li&gt;
  &lt;li&gt;Apple Hardware is Simply Beautiful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gene was asking me this, I suspect, because I wrote &lt;a href=&quot;http://fuzzyblog.io/blog/tag.html#postmac&quot;&gt;a series of Postmac&lt;/a&gt; blog posts at the end of 2016 into 2017 and then I simply stopped.  I was &lt;a href=&quot;http://fuzzyblog.io/blog/postmac/2016/11/05/life-in-a-postmac-world.html&quot;&gt;very serious&lt;/a&gt; about this initially and then I went dark on the topic and this digs into that.&lt;/p&gt;

&lt;h1 id=&quot;disclaimer-im-a-power-user&quot;&gt;Disclaimer: I’m a Power User&lt;/h1&gt;

&lt;p&gt;It should be noted that I’m a power user and a software developer.  I mostly use a terminal and an editor.  My recent list of “5 Apps I use Everyday” on &lt;a href=&quot;iTerm, TextMate, Enpass, Ruby, Git&quot;&gt;Hacker News&lt;/a&gt; was iTerm, TextMate, Enpass, Ruby, Git – just one of those was a GUI app (a password manager).  What I develop are mostly Rails apps with a smattering of straight ruby and, lately, some JavaScript / Node for a &lt;a href=&quot;http://fuzzyblog.io/blog/how_to_be_a_developer/2017/07/02/how-to-be-a-developer-001.html&quot;&gt;course I’m teaching / mentoring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now the way I develop Rails apps is optimized for developer productivity so I start every project by opening a succession of terminal windows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Server Tail&lt;/li&gt;
  &lt;li&gt;Database window&lt;/li&gt;
  &lt;li&gt;Rails Console&lt;/li&gt;
  &lt;li&gt;Command Line&lt;/li&gt;
  &lt;li&gt;Remote Command Line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By keeping all the resources for whatever I need to do always active, I minimize cognitive overhead due to switching time / “ok do I want to drop out of console to check the log file; is that worth it?”.&lt;/p&gt;

&lt;p&gt;I have the definition of these set in a &lt;a href=&quot;https://github.com/tmuxinator/tmuxinator&quot;&gt;Tmuxinator&lt;/a&gt; profile so when I want to work on project xyz, I just tell the command line “tmuxinator seira_watch_web_app” and all the terminals for that project spring into existence (and it is wonderful to not have to think about ‘ok what port do I need the web server on’).  Right now I have 97 profiles setup for Tmuxinator.&lt;/p&gt;

&lt;p&gt;You’re probably thinking well – 5 terminal windows, how is that a power user?  &lt;em&gt;Chuckle&lt;/em&gt;, you should know play the opening bars of &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=o1tj2zJ2Wvg&quot;&gt;welcome to the jungle&lt;/a&gt;&lt;/em&gt; in your head.  I’ve made the technical focus for 2017 learning how to do Rails development in a distributed, &lt;strong&gt;non monolithic&lt;/strong&gt; fashion so that means your traditional Rails monolith has now been decomposed into N separate Rails projects with formal APIs between them and that you generally need all parts live concurrently.  In my case that generally amounts to 8 separate projects, each with at least 5 terminal windows so my 5 terminal windows is now 5 * 8 or 40 plus terminal windows just to work on one side project – and that doesn’t include consulting work, side, side projects, etc.  Generally speaking I run about 100 to 200 separate bash sessions.  The reason why I know about things like &lt;a href=&quot;http://fuzzyblog.io/blog/unix/2016/11/23/pkill-rocks.html&quot;&gt;pkill&lt;/a&gt; is from trying to tease out just one terminal session from the sea of them that I normally am swamped by.&lt;/p&gt;

&lt;p&gt;Now I’m sure that 100 terminal sessions sounds like absolute madness but it actually isn’t all bad.  The terminal ITerm2 is actually pretty damn good and I manage it through a combination of tooling (&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;Tmux&lt;/a&gt; / Tmuxinator) and convention (terminal 2 is my core software development window; terminal 3 is blogging and so on).&lt;/p&gt;

&lt;p&gt;So if you add 100 plus terminal windows to a browser or three each running say 50 plus tabs, I have very, very serious memory needs.  Apple’s persistent inability / lack of desire to ship a laptop with more than 16 gigs of RAM is something I find absolutely maddening.&lt;/p&gt;

&lt;p&gt;But for all of my bitching about stability and investigating alternatives, 8 months since I first wrote about “postmac”, I’m still here using OSX every single day so what went wrong?&lt;/p&gt;

&lt;h1 id=&quot;lack-of-faith--everything-crashes&quot;&gt;Lack of Faith / Everything Crashes&lt;/h1&gt;

&lt;p&gt;I’m now 49 years old and I have an appalling lack of faith in software quality – or as I like to describe it “everything crashes”.  This past November I bought an Intel NUC for the purposes of just running Ubuntu and experimenting with desktop linux to see if it was an alternative.  I went with Ubuntu 16 and used Ubuntu Mate as the closest linux experience to OSX that I could find (and yes I flirted heavily with &lt;a href=&quot;http://www.hongkiat.com/blog/elementary-os-luna/&quot;&gt;Elementary&lt;/a&gt; but it wasn’t stable).  And you know what I found out, while Ubuntu didn’t crash as hard as OSX, I still lost the networking stack about every week.  And a machine without networking, well in 2016 / 2017, that’s not much of a computer.  And the only way I ever found to get this fixed was a full system restart.  Now I’m sure that if I had dug into it enough, I could have found a way to restart the network stack but I never found it.  Oh and this was an Intel NUC with twice the ram of my OSX that I was using under far less demanding circumstances.&lt;/p&gt;

&lt;p&gt;Honestly the experience of trying to switch off OSX onto Ubuntu and finding that Ubuntu wasn’t stable, at least when used in a GUI context, was absolutely disheartening, so much so that that box sites on my desk and every time my eye falls on it, I get more than a little sad.  I run ubuntu linux boxes 24x7x365 with well over a &lt;em&gt;full year&lt;/em&gt; of uptime so the network stack on my personal Ubuntu box failing after less than a week (and failing consistently) puzzles me.  My suspicion is that this somehow related to a full GUI running on top of Ubuntu itself.&lt;/p&gt;

&lt;p&gt;So, honestly, everything crashes and if you’re going to run a full computing stack, with a GUI, browser and everything else, I no longer think that there is such a thing as stability – at least not if you’re a power user like myself and really pushing the limits of the machine.  And yes that’s a crap ass attitude but it is what a lifetime of being a power user has reduced me to; sigh.&lt;/p&gt;

&lt;h1 id=&quot;if-everything-crashes-then-resume-quality-is-key&quot;&gt;If Everything Crashes then Resume Quality is Key&lt;/h1&gt;

&lt;p&gt;So if you assume that everything crashes then the quality of resume is key.  And this is something where I found a dramatic difference between Ubuntu and OSX.  Sure Ubuntu didn’t hard crash but if I have to restart the machine to get networking running again, well, it might as well have.  While I remain pissed that my machine crashes regularly (I’m averaging about once per week now), I will state that Apple / the application vendors have finally managed to make this suck less.  Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2 remembers every window and tab’s position so all I have to do is relaunch Tmuxinator with a profile; since tab names are persistent (I’m glaring at you Apple Terminal), the name tells me what profile to launch&lt;/li&gt;
  &lt;li&gt;My editor, covered next, restores bloody everything&lt;/li&gt;
  &lt;li&gt;Apple generally relaunches every application I had going&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So while its not perfect, resume quality is far, far better than I have ever had it before.  Even the core browsers I rely on, Chrome, Firefox and Safari actually get window / tab restoration mostly correct.&lt;/p&gt;

&lt;h1 id=&quot;textmate-textmate-textmate&quot;&gt;Textmate, Textmate, Textmate&lt;/h1&gt;

&lt;p&gt;The very first editor I used once I switched fulltime to OSX from Windows / Linux (both on ThinkPad hardware) back in 2006 was &lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate&lt;/a&gt; and I’m still using it.  I’ve written hundreds of thousands of lines of code in it and while the world has mostly moved on, I still find it to be the single best editor I’ve ever used.  Sure its old and a wee bit clunky but it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Has restore implemented perfectly (even “unsaved” files are restored after a crash allowing you to treat it as a virtual scratch pad; once you drop things into a new window they never go away unless you choose kill them)&lt;/li&gt;
  &lt;li&gt;Has extensions specific to Ruby / Rails&lt;/li&gt;
  &lt;li&gt;Has extensions for almost anything&lt;/li&gt;
  &lt;li&gt;Fast enough&lt;/li&gt;
  &lt;li&gt;Great syntax highlighting&lt;/li&gt;
  &lt;li&gt;Macro facility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used to laugh at engineers who were so closely tied to a particular editor and think “I’ll never be that”; karma is a bitch. But, seriously, an editor is what I spend maybe 90% + of my time in so having one that I love really matters and that is actually a switching cost.&lt;/p&gt;

&lt;p&gt;When I attempted to using Ubuntu on the NUC, I used &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt;, &lt;a href=&quot;http://www.atom.io&quot;&gt;Atom&lt;/a&gt; and &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.  Sublime never felt right and I just can’t get past the performance / memory bloat of anything written using Electron (as beautiful as VS Code is). I should note that Visual Studio Code is actually awesome and Microsoft has done amazing work on it.&lt;/p&gt;

&lt;p&gt;But I still love my TextMate.&lt;/p&gt;

&lt;h1 id=&quot;iterm2&quot;&gt;iTerm2&lt;/h1&gt;

&lt;p&gt;While iTerm2 takes some crap for not always fixing bugs, being sometimes &lt;a href=&quot;https://danluu.com/term-latency/&quot;&gt;slow&lt;/a&gt; and a few other failings, I personally find it awesome.  Once again the ability to resume after a crash looms large.  Oddly if I choose to install updates, it can’t resume anything so I rarely choose to update it.  Similarly its resumption doesn’t work if you exit so if I have to shut it down, well, I use Activity Monitor to kill it and then it brings back all my terminals perfectly.  I wish I could accept the updates but, honestly, decent resume is so wonderful that I can live without them.&lt;/p&gt;

&lt;p&gt;iTerm2 has Tmux integration and decent multi pane support that could theoretically save me from having to be so reliant on Tmuxinator but I’ve explored it being really happy with Tmux / Tmuxinator.&lt;/p&gt;

&lt;h1 id=&quot;my-iphone--phone-integration&quot;&gt;My iPhone / Phone Integration&lt;/h1&gt;

&lt;p&gt;This one is an absolute killer.  I’m an iPhone user and the integration that Apple has put together is fairly compelling.  Specifically if my wife or kids text me, I can just reply using my laptop and not have to struggle with my fat fingers on a small phone screen.  That one feature is huge for me and after WhatsApp has completely stopped working for me since early 2017, I’m back to using SMS for texting with my family so this is huge.  I used to get around this with a dedicated WhatsApp app on OSX (which I think exist on other platforms).  Given that mobile isn’t going to any less important, integration is key and I find it hard to believe that I could ever have a better experience with an iPhone on non Apple hardware.&lt;/p&gt;

&lt;h1 id=&quot;my-pictures--my-data&quot;&gt;My Pictures / My Data&lt;/h1&gt;

&lt;p&gt;Moving between systems is always a lossy operation – you’re going to lose something whether it is a much loved app or data that doesn’t convert correctly or something else.  Given that I have a decade plus worth of files on OSX, I’m going to lose stuff when I move and just the prospect of that is daunting.&lt;/p&gt;

&lt;h1 id=&quot;one-device&quot;&gt;One Device&lt;/h1&gt;

&lt;p&gt;I used to have a work laptop for coding and then a personal computer for “my data”.  Ever since I switched to OSX, I’ve had only one device to worry about and that’s pretty damn wonderful.  Given that I use an iPhone, if I was to switch away from OSX for my daily coding, I’m likely still going to have OSX in life and that ruins the one device strategy.&lt;/p&gt;

&lt;h1 id=&quot;time-machine&quot;&gt;Time Machine&lt;/h1&gt;

&lt;p&gt;If you weren’t a hardcore Mac person when Time Machine shipped you likely don’t remember how rarely, if ever, most of us backed up.  I keep one machine constantly backed up with Time Machine and I actually trust it.  I’ve had only one back up issue with Time Machine since I started using it and that includes reformatting a machine that had every family photo on it ever and Time Machine brought back every drop of data.  Sure there are other backup solutions on other platforms but I &lt;strong&gt;know&lt;/strong&gt; that Time Machine works and that level of trust is pretty important.&lt;/p&gt;

&lt;h1 id=&quot;apple-hardware-is-simply-beautiful-and-lasts&quot;&gt;Apple Hardware is Simply Beautiful and Lasts&lt;/h1&gt;

&lt;p&gt;If you’re a PC guy then you may not understand the hardware quality of an Apple box.  While I have lots and lots of issues with Apple at times, I have to admit that their hardware is simply &lt;strong&gt;beautiful&lt;/strong&gt; – and it &lt;strong&gt;lasts&lt;/strong&gt;.  My first 15” Macbook pro, that old 2010 model, it still runs daily as the family Plex server hooked up to like 9 gigs of storage and runs pretty much like a champ.  My 2012 Macbook Pro?  Its still around and working perfectly.  So while the software has issues, the physical hardware is beautiful and durable.  If you’re going to use something on a daily basis then it being beautiful isn’t a bad thing – I spent a lot of years using Dell and Toshiba hardware and the build quality just sucked.  I used to know that when I heard rattling in my Toshiba’s it meant that a screw had come out (again) and that the machine would die shortly thereafter.  Overall the hardware side of my Macs haven’t let me down.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts-on-software-quality&quot;&gt;Closing Thoughts on Software Quality&lt;/h1&gt;

&lt;p&gt;I should note that software quality problems are rampant in the industry.  Just as an example, if I prematurely abort a test run on RSpec with ctrl+c, well, I lose the cursor in the terminal – and there is nothing I can do to get it back, not clear, not ctrl+k, etc.  I just have to shut down that terminal session.  So it isn’t just OSX or the GUI on Ubuntu, it is everywhere and it is a damn pity.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html</guid>
        
        <category>osx</category>
        
        <category>linux</category>
        
        
        <category>OSX</category>
        
      </item>
    
      <item>
        <title>Improving Your Bash Scripting with shellcheck</title>
        <description>&lt;p&gt;I know to the outside world it often appears that a “developer” or “software engineer” knows everything when it comes to “coding” but the reality is that most of us are fairly specialized and we have both strengths and weaknesses.  My personal weaknesses include Bash scripting and current front end technologies (JavaScript, CSS).  Now, even when you have weaknesses, you can still improve them and I’m currently working hard on my Bash skills.  The project at hand is that I’m writing a custom deployer for a stack of software related to a new SAAS app I’m building.&lt;/p&gt;

&lt;p&gt;Bash is one of those technologies that most of us know a little but that small amount of knowledge often prevents you from really learning – you, instead, google about a bit and put some crap into a file with a .sh extension (or that you add an executable bit to and a shebang line) and you think “I know bash”.&lt;/p&gt;

&lt;p&gt;I recently found a tool that dramatically improved my shell scripting and, well, is really what enabled me to write a deployer for Rails apps under Docker using bash.  The tool is called &lt;a href=&quot;https://github.com/koalaman/shellcheck&quot;&gt;shellcheck&lt;/a&gt; and it is a linting tool for bash scripts.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;Here’s how to install it on OSX:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;brew install shellcheck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;tutorial-and-examples&quot;&gt;Tutorial and Examples&lt;/h1&gt;

&lt;p&gt;ShellCheck is ridiculously easy to use:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;shellcheck filename &lt;ENTER&gt;&lt;/ENTER&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously press ENTER not type it and this will analyze your bash script and give you feedback.  Here are some examples and the errors it found for me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip-10-19-48-2% shellcheck deploy.sh

In deploy.sh line 40:
for host in &quot;${hosts[@]}&quot;; do
^-- SC1009: The mentioned parser error was in this for loop.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This was a problem in overall parsing of the shell script; &lt;a href=&quot;https://github.com/koalaman/shellcheck/wiki/SC1009&quot;&gt;more details&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In deploy.sh line 42:
  for file in &quot;${files[@]}&quot;; do
  ^-- SC1073: Couldn't parse this for loop.
                             ^-- SC1061: Couldn't find 'done' for this 'do'.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here I was missing the done terminator for the loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In deploy.sh line 6:
  cmd_output=$(eval $1)
                    ^-- SC2086: Double quote to prevent globbing and word splitting.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Technically I should have been using double quotes around the variable to prevent any issues with globbing / splitting.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In deploy.sh line 31:
files=(&quot;.env&quot;, &quot;.env.production&quot;, &quot;dockerstats&quot;, &quot;docker-compose.production.yml&quot;)
      ^-- SC2054: Use spaces, not commas, to separate array elements.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m a Ruby guy so my natural array syntax has commas between elements.  Here ShellCheck is pointing out that I just need to have spaces between them.&lt;/p&gt;

&lt;h1 id=&quot;more-details--some-good-bash-stuff&quot;&gt;More Details / Some Good Bash Stuff&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ShellCheck home page: &lt;a href=&quot;https://github.com/koalaman/shellcheck&quot;&gt;https://github.com/koalaman/shellcheck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hacker News on getting better at bash: &lt;a href=&quot;https://news.ycombinator.com/item?id=14634964&quot;&gt;https://news.ycombinator.com/item?id=14634964&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mywiki.wooledge.org/BashGuide&quot;&gt;Bash Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mywiki.wooledge.org/BashFAQ&quot;&gt;Bash FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 17 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/bash/2017/07/17/improving-your-bash-scripting-with-shellcheck.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/bash/2017/07/17/improving-your-bash-scripting-with-shellcheck.html</guid>
        
        <category>bash</category>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Examples of Data Parsing with Nokogiri</title>
        <description>&lt;p&gt;http://stackoverflow.com/questions/17782061/how-do-i-parse-and-scrape-the-meta-tags-of-a-url-with-nokogiri&lt;/p&gt;

&lt;p&gt;0
down vote
I actually did this just yesterday. Here was my html:&lt;/p&gt;

&lt;div data-purpose=&quot;video-length&quot;&gt;[^&amp;gt;]+&amp;lt;\/div&amp;gt;
Here was my nokogiri expression:

page.parser.css(&quot;div[data-purpose=video-length]&quot;).first.try(:text).try(:strip)
That took the value I wanted out from inside the div tags and stripped off the extra returns. The reason for using .try calls is to skip having to have if statements to handle when a nil is returned. The secret here lies in using [] inside the .css expression: div[data-purpose=video-length].

(answer is in my stack overflow)

&lt;/div&gt;
</description>
        <pubDate>Sun, 16 Jul 2017 05:58:55 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/07/16/examples-of-data-parsing-with-nokogiri.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/07/16/examples-of-data-parsing-with-nokogiri.html</guid>
        
        
      </item>
    
      <item>
        <title>SeiraWatch Blog - Udemy Warning 2 The Dangers of Free, Problems with Cross Promotion</title>
        <description>&lt;p&gt;wow this is fucked, i can’t promote the let’s encrypt course to my free dive into docker course on udemy
in other words, it’s useless to have that on udemy
what can’t you?
Why can;t you?
Nick Janetakis (nick.janetakis@gmail.com)
it’s not “eligible” because it’s free
sheesh
Nick Janetakis (nick.janetakis@gmail.com)
this is a huge unexpected bullshit thing
it means i can’t market any paid content to any of those people&lt;/p&gt;

&lt;p&gt;Contact Udemy ? 
how many thousands of people are free ?
Nick Janetakis (nick.janetakis@gmail.com)
almost 7,000 – it’s like a third of my audience
Wow.  That completely ruins having free content on udemy
Nick Janetakis (nick.janetakis@gmail.com)
yep
can you promote free to free ?
Nick Janetakis (nick.janetakis@gmail.com)
nope, because you’re not allowed to promote anything outside of udemy
there’s announcements and promotions
promotions are paid content for existing students (only paid i guess)
if you made a free ssl intro course could you promote that to your free udemy people ? 
Nick Janetakis (nick.janetakis@gmail.com)
announcements are meant for like blog posts and other updates, not advertising courses
no idea, all i know is i’m sick now
as soon as i send this promo out
i’m removing dive into docker on udemy
anything I can do ?
Now&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Jul 2017 05:55:48 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/07/16/seirawatch-blog-udemy-warning-2-the-dangers-of-free-problems-with-cross-promotion.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/07/16/seirawatch-blog-udemy-warning-2-the-dangers-of-free-problems-with-cross-promotion.html</guid>
        
        
      </item>
    
  </channel>
</rss>
