<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Aug 2019 22:32:35 -0400</pubDate>
    <lastBuildDate>Sun, 04 Aug 2019 22:32:35 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Rails Migration Tips and Tricks</title>
        <description>&lt;p&gt;A migration is the Rails facility which alters a database’s structure.  Migrations are an essential aspect of all database development with Rails and they generally work quite well with the default command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rake db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-or-&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That command will cause Rails to execute all pending migrations.  A pending migration is one where the timestamp on the migration is &lt;strong&gt;not&lt;/strong&gt; stored in the table schema_migrations.&lt;/p&gt;

&lt;p&gt;The trick with migrations is understanding how to manipulate them, replay them, etc when they fail.&lt;/p&gt;

&lt;h2 id=&quot;the-hard-way---the-schemamigrations-table&quot;&gt;The Hard Way - The schema_migrations Table&lt;/h2&gt;

&lt;p&gt;Let’s start with the hard way - manipulating schema_migrations table directly.  Let’s say that you need to re-run the last 2 migrations.  Here’s what you need to do:&lt;/p&gt;

&lt;p&gt;Start by getting the timestamps of the last two migrations.  You can do this with an ls -ltr db/migrations and pick them out of what might be a giant list of migrations (my current work project has 858 migrations) – and this can, well, &lt;strong&gt;suck&lt;/strong&gt;.  You can also be smart about it and use tail to get just the last few (default 8 on OSX) migrations.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -ltr db/migrate | tail
-rw-r--r--  1 sjohnson  staff   201 Jul 18 04:44 20190717234458_create_units.rb
-rw-r--r--  1 sjohnson  staff   120 Jul 18 04:44 20190717235922_add_unit_id_to_habits.rb
-rw-r--r--@ 1 sjohnson  staff   154 Jul 18 04:44 20190718000145_add_unit_id_to_habit_tasks.rb
-rw-r--r--@ 1 sjohnson  staff   129 Jul 18 04:44 20190718075945_add_unit_preferences_json_to_users.rb
-rw-r--r--@ 1 sjohnson  staff   154 Jul 18 04:44 20190718080511_add_unit_type_to_units.rb
-rw-r--r--@ 1 sjohnson  staff   131 Jul 18 09:28 20190718110444_fix_stupidity_with_float_val.rb
-rw-r--r--  1 sjohnson  staff   164 Jul 18 13:33 20190718133051_add_options_to_habits.rb
-rw-r--r--@ 1 sjohnson  staff   151 Jul 25 15:48 20190725100535_add_has_loggable_tasks_to_habits.rb
-rw-r--r--@ 1 sjohnson  staff   257 Jul 26 15:21 20190726191446_add_plan_id_to_habits.rb
-rw-r--r--@ 1 sjohnson  staff   523 Jul 27 03:29 20190726133807_create_plans.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can delete from schema_migrations using a database console or by using ActiveRecord in the Rails console so either:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;delete from schema_migrations where version in (20190726133807, 20190726191446);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-or- in a Rails console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActiveRecord::Base.connection.execute(&quot;delete from schema_migrations where version in (20190726133807, 20190726191446)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you would also need to undo any changes your migrations might have partially implemented.  If this was table creation then this is a relatively simple “drop table foo” statement but if it was an index creation or something harder, you need to selectively alter individual tables.  And even a hard core SQL guy like myself generally doesn’t want to do that.  So let’s look at the easier options.&lt;/p&gt;

&lt;h2 id=&quot;the-easy-way&quot;&gt;The Easy Way&lt;/h2&gt;

&lt;p&gt;Happily Rails provides some additional facilities for this allowing you to rollback the last migration or an individual migration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake db:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gets rid of the last migration.  I do NOT, however, ever recommend that you do this.  I’m currently working on an active side project where pull requests are flowing and even when you might think that you know what the last migration &lt;strong&gt;you created&lt;/strong&gt; was, you may not realize that another developer slipped a migration in and &lt;em&gt;whammo&lt;/em&gt;, “Houston we have a problem”.&lt;/p&gt;

&lt;p&gt;My recommendation is to always specify the version with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake db:migrate:down VERSION=20190726133807
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is absolute and will only affect the migration in question.  Given that I’m a big damn fan of always understanding the state of my persistent storage, it isn’t surprising that I recommend this.&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;All of this can be easily referenced:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4352848/how-to-rollback-just-one-step-using-rake-dbmigrate/21119193&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/migrations.html#running-migrations&quot;&gt;Core Rails Docs on Migrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 31 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2019/07/31/rails-migration-tips-and-tricks.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2019/07/31/rails-migration-tips-and-tricks.html</guid>
        
        <category>rails</category>
        
        <category>migration</category>
        
        <category>db</category>
        
        <category>database</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Nerd Humor - When You Blog in Bright Sunlight in a Convertible</title>
        <description>&lt;p&gt;Disclaimer: There is likely only one person on the planet who will find this funny.  Hi!&lt;/p&gt;

&lt;p&gt;So I found myself last night in a convertible with my wife driving and I thought to myself, “I know; I’ll write something”.  And I began writing a screed on the use of the underlying Rails Migration commands that manipulate the state of your database.  Rails has a number of these commands that, after MORE THAN A DECADE of daily rails programming, I’ve never bothered to use.  I have known for a long time I need to master these and I finally have.&lt;/p&gt;

&lt;p&gt;I finish up that post this morning and go to find it and publish it and a git status shows me &lt;strong&gt;nothing&lt;/strong&gt;.  Gulp.  This just doesn’t happen to me.  Scramble around looking for it – no love.  Confirm that it actually exists in my editor and I didn’t just have a surreal “out of keyboard” experience – yep.  It is there.  And then it hits me – I have multiple blogs, one for nerd writing and one for recipes.  Yep:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  recipes git:(gh-pages) ✗ git commit -m &quot;updates to pickle&quot;
[gh-pages 0e34bce] updates to pickle
 1 file changed, 3 insertions(+), 1 deletion(-)
➜  recipes git:(gh-pages) git push origin gh-pages
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 568 bytes | 0 bytes/s, done.
Total 4 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), completed with 3 local objects.
remote: 
remote: GitHub found 7 vulnerabilities on fuzzygroup/recipes's default branch (1 critical, 1 high, 4 moderate, 1 low). To find out more, visit:
remote:      https://github.com/fuzzygroup/recipes/network/alerts
remote: 
To github.com:fuzzygroup/recipes
   9fc96ec..0e34bce  gh-pages -&amp;gt; gh-pages
➜  recipes git:(gh-pages) jekyll post &quot;Rails Migration Tips and Tricks&quot;
New post created at _posts/2019-07-30-rails-migration-tips-and-tricks.md.
➜  recipes git:(gh-pages) ✗ mate _posts/2019-07-30-rails-migration-tips-and-tricks.md 
➜  recipes git:(gh-pages) ✗   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Moral of the story?  Don’t tech blog where you food blog.  Sigh.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/humor/2019/07/31/nerd-humor-when-you-blog-in-bright-sunlight-in-a-convertible.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/humor/2019/07/31/nerd-humor-when-you-blog-in-bright-sunlight-in-a-convertible.html</guid>
        
        <category>humor</category>
        
        <category>blogging</category>
        
        
        <category>humor</category>
        
      </item>
    
      <item>
        <title>Patterns and Anti-Patterns</title>
        <description>&lt;p&gt;There times when I use terms so common to software engineering that I forget that there is a wide audience out there to whom these aren’t native concepts.  That’s my bad – using things before you define them is not a good thing.&lt;/p&gt;

&lt;p&gt;Earlier today I referenced “&lt;a href=&quot;https://fuzzyblog.io/blog/anti_patterns/2019/07/26/development-anti-pattern-two-objects-with-almost-the-same-structure.html&quot;&gt;anti-patterns&lt;/a&gt;” but failed to define it.  The idea of an anti-pattern is intimately tied to the idea of a pattern and let’s let Wikipedia do the talking:&lt;/p&gt;

&lt;p&gt;“In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.” &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;Software Design Pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if a pattern is a best practice, something that you do then an anti-pattern is the inverse – it is something that you &lt;strong&gt;do not do&lt;/strong&gt;.  I’ll blog about another one soon – the going dark anti pattern.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/anti_patterns/2019/07/26/patterns-and-anti-patterns.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/anti_patterns/2019/07/26/patterns-and-anti-patterns.html</guid>
        
        <category>software_development</category>
        
        <category>anti_patterns</category>
        
        
        <category>anti_patterns</category>
        
      </item>
    
      <item>
        <title>Development Anti Pattern - Two Objects with Almost the Same Structure</title>
        <description>&lt;p&gt;One of the beautiful things about greenfield development, that joyous process of starting anew on something, is that it lets you see errors that you make much more cleanly.  And this is a combination of a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Forest for the Trees.  In a big code base, any errors you make aren’t that visible because they are drowned out by all the other bits of code.&lt;/li&gt;
  &lt;li&gt;Willingness to Get It Right.  When you start a new code base, it is like starting a new love affair – this time, you are going to get it &lt;strong&gt;right&lt;/strong&gt;.  This time, it will be &lt;strong&gt;different&lt;/strong&gt;.  So you are a bit more able to see errors then a lot more willing to rip apart something that is already working to make it right.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The specific example at hand is the anti pattern of two objects with almost the same structure.  Here’s an example from my current side project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;desc habits;
+-----------------+--------------+------+-----+---------+----------------+
| Field           | Type         | Null | Key | Default | Extra          |
+-----------------+--------------+------+-----+---------+----------------+
| id              | bigint(20)   | NO   | PRI | NULL    | auto_increment |
| created_at      | datetime     | NO   |     | NULL    |                |
| updated_at      | datetime     | NO   |     | NULL    |                |
| name            | varchar(255) | YES  | MUL | NULL    |                |
| hardness        | int(11)      | YES  |     | NULL    |                |
| frequency       | int(11)      | YES  |     | NULL    |                |
| economic_value  | int(11)      | YES  |     | NULL    |                |
| user_id         | int(11)      | YES  | MUL | NULL    |                |
| description     | text         | YES  |     | NULL    |                |
| shareable       | tinyint(1)   | YES  |     | NULL    |                |
| habit_type_id   | int(11)      | YES  | MUL | NULL    |                |
| master_habit_id | int(11)      | YES  | MUL | NULL    |                |
| unit_id         | int(11)      | YES  |     | NULL    |                |
| options         | text         | YES  |     | NULL    |                |
| has_tasks       | tinyint(1)   | YES  |     | 0       |                |
+-----------------+--------------+------+-----+---------+----------------+
15 rows in set (0.00 sec)

desc habit_tasks;
+----------------------------+--------------+------+-----+---------+----------------+
| Field                      | Type         | Null | Key | Default | Extra          |
+----------------------------+--------------+------+-----+---------+----------------+
| id                         | bigint(20)   | NO   | PRI | NULL    | auto_increment |
| created_at                 | datetime     | NO   |     | NULL    |                |
| updated_at                 | datetime     | NO   |     | NULL    |                |
| habit_id                   | int(11)      | YES  | MUL | NULL    |                |
| name                       | varchar(255) | YES  |     | NULL    |                |
| hardness                   | int(11)      | YES  |     | NULL    |                |
| frequency                  | int(11)      | YES  |     | NULL    |                |
| economic_value             | float        | YES  |     | NULL    |                |
| user_id                    | int(11)      | YES  |     | NULL    |                |
| metric_type_id             | int(11)      | YES  |     | NULL    |                |
| unit_id                    | int(11)      | YES  |     | NULL    |                |
| best_general_time_for_this | varchar(255) | YES  |     | NULL    |                |
| options                    | text         | YES  |     | NULL    |                |
+----------------------------+--------------+------+-----+---------+----------------+
13 rows in set (0.06 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These are pretty close to the same and they represent an attempt to give a 1 level hierarchy (the habit_task) onto the parent object (habit).&lt;/p&gt;

&lt;p&gt;And the simple answer here is that what I’m actually looking for are groups not a sub-object i.e. invent a group concept an then simply reduce all the habit_task objects to habits that are grouped together.  That achieves roughly 95% of what habit_tasks did and dramatically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reduces code duplication (the same routine to calculate economic_value is used multiple places)&lt;/li&gt;
  &lt;li&gt;reduces complexity overall&lt;/li&gt;
  &lt;li&gt;gets rid of a huge wart in the display views where nesting is needed&lt;/li&gt;
  &lt;li&gt;improves performance by not having to constantly check if a habit has tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bottom line here is that whenever you have two objects with almost the same structure, start asking yourself is that really the same damn object somehow.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/anti_patterns/2019/07/26/development-anti-pattern-two-objects-with-almost-the-same-structure.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/anti_patterns/2019/07/26/development-anti-pattern-two-objects-with-almost-the-same-structure.html</guid>
        
        <category>software_development</category>
        
        <category>anti_patterns</category>
        
        
        <category>anti_patterns</category>
        
      </item>
    
      <item>
        <title>A Bootstrap 4 Two Column Example that Just Works</title>
        <description>&lt;p&gt;I remain, alas, CSS Challenged.  I’m from an era where the height of HTML layout was tables and once upon a time I know all the tricks including images in the corners for that rounded corner effect.  But, as is all too often in technology, the tricks that once served you well – don’t.&lt;/p&gt;

&lt;p&gt;Now we exist in a whole new world for layout i.e. CSS and for me that means &lt;a href=&quot;https://getbootstrap.com/docs/4.0/getting-started/introduction/&quot;&gt;bootstrap introduction&lt;/a&gt; or &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;bootstrap main page&lt;/a&gt;.  Bootstrap isn’t perfect but I fully respect what it tries to do and the simple fact that, imho, Bootstrap made the Internet &lt;strong&gt;better&lt;/strong&gt;.  So when I want to make two columns and I naturally reach for a table tag, I need to come look this example up from &lt;a href=&quot;https://codepen.io/SitePoint/pen/WMYOxb&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;
  &amp;lt;div class=&quot;row header&quot;&amp;gt;
    &amp;lt;div class=&quot;col-xs-12 text-center&quot;&amp;gt;
      &amp;lt;h1&amp;gt;Bootstrap 4 2-Column Layout &amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;row&quot;&amp;gt;
    &amp;lt;div class=&quot;col-sm-6 first-column&quot;&amp;gt;
      &amp;lt;p&amp;gt;This column takes the full height as its sibling column thanks to Flexbox&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;col-sm-6 second-column&quot;&amp;gt;
      &amp;lt;p&amp;gt;
        Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum 
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;row&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And I’m not pretending that this is hard or not but the shift from tables to a css grid isn’t exactly simple (or at least it isn’t for me).&lt;/p&gt;

&lt;p&gt;I’m noting this particular example because I’ve tried several and this one just worked right out of the box.  The others should have – and maybe it was just my ham fisted approach – but this one did.  Recommended.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/bootstrap/2019/07/26/a-bootstrap-4-two-column-example-that-just-works.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/bootstrap/2019/07/26/a-bootstrap-4-two-column-example-that-just-works.html</guid>
        
        <category>boostrap</category>
        
        <category>css</category>
        
        
        <category>bootstrap</category>
        
      </item>
    
      <item>
        <title>Git Rebasing Old Migrations Easily When SourceTree Fails</title>
        <description>&lt;p&gt;So I’ve written before about schema.rb changes, SourceTree and migrations and the problem with git rebase before:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fuzzyblog.io/blog/rails/2019/05/09/rails-migrations-multiple-developers-and-the-schema-wtf-moment.html&quot;&gt;Schema WTF Take 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fuzzyblog.io/blog/rails/2019/05/10/the-schema-wtf-moment-take-2-an-excursion-into-sourcetree.html&quot;&gt;Schema WTF Take 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I just hit this again and my normal pairing partner is offline and while he has the patience to deal with the crazy ass error messages from SourceTree, I do not.  Personally I think Atlassian (the maker of SourceTree) should simply be killed with fire while my pagan friends dance naked around a drum circle but hey – that’s just me.&lt;/p&gt;

&lt;p&gt;Anyway my tooling has let me down.  And, yes I could learn the specific range level commit commands that SourceTree is generating behind the scenes but I think there’s an easier way.  Here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Abort the git rebase with git rebase –abort&lt;/li&gt;
  &lt;li&gt;Change back into my develop branch which is now current.&lt;/li&gt;
  &lt;li&gt;Copy schema.rb to ~ i.e. cp db/schema.rb ~&lt;/li&gt;
  &lt;li&gt;Look at my pull request to identify the specific migration that I ran.&lt;/li&gt;
  &lt;li&gt;Roll back the specific migration with: rake db:migrate:down VERSION=20190610143443&lt;/li&gt;
  &lt;li&gt;Copy in the schema.rb from ~ i.e. cp ~/schema.rb db&lt;/li&gt;
  &lt;li&gt;Run the migration with bundle exec rake db:migrate&lt;/li&gt;
  &lt;li&gt;Do the git add / commit / push dance&lt;/li&gt;
  &lt;li&gt;Get someone to do the pull request review&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that, dear reader, should have worked swimmingly.  Alas, it did not.  And this was one of those software engineering cases where trying to understand something fully likely would have been a waste of time.  This change amounted to a few lines in a model, a migration to add an index and a small update to a spec file – I simply recreated the branch from the current develop as “-a” (on top of the original branch number) and then re-made the same damn changes.  Yeah that sucks but it worked.&lt;/p&gt;

&lt;p&gt;Today was definitely a day in the trenches.  Sigh.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2019/07/24/git-rebasing-old-migrations-easily-when-sourcetree-fails.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2019/07/24/git-rebasing-old-migrations-easily-when-sourcetree-fails.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>migrations</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Bullshite rsync Subtleties</title>
        <description>&lt;p&gt;So yesterday or the day before &lt;a href=&quot;https://fuzzyblog.io/blog/osx/2019/07/22/backing-mac-to-mac-via-scp-rsync.html&quot;&gt;I blogged about rsync&lt;/a&gt; and how good it was.  And that’s true but rsync is notoriously tricky and today I became very, very aware of rsync’s trickiness.&lt;/p&gt;

&lt;p&gt;So my scenario was that I had an old MacBook Air which I was trying to get all the data off of since DropBox seemed to have an incomplete sync.  And I figured that if I just got all the files copied up to my big desktop then I could reformat the machine and give it to my wife as a replacement for her laptop on which the keyboard died.&lt;/p&gt;

&lt;p&gt;Note: Some of these things are perhaps known issues / not issues because I’m on OSX.  What I can say is that as a Mac user some of these things make no damn sense.&lt;/p&gt;

&lt;h1 id=&quot;problem-the-first---directory-names-with-spaces&quot;&gt;Problem the First - Directory Names with Spaces&lt;/h1&gt;

&lt;p&gt;So here was the first thing that I observed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync -avh -e ssh Dropbox/&quot;Camera Uploads&quot;/ 192.168.1.25:/Users/sjohnson/backups/macbook_air/Dropbox/&quot;Camera Uploads&quot;
Password:
building file list ... done
created directory /Users/sjohnson/backups/macbook_air/Dropbox/Camera
./
.DS_Store
.dropbox
2017-07-03 05.30.42.jpg
2017-07-03 07.03.03.jpg
2017-07-09 08.54.25.jpg
2017-07-09 08.54.31.jpg
2017-07-09 11.09.16.jpg
2017-07-09 11.09.23.jpg
2017-07-10 18.48.37.jpg
2017-07-10 18.48.43.jpg
2017-07-10 18.48.47.mov
^Crsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-52.200.1/rsync/rsync.c(244) [sender=2.6.9]'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what you’re seeing is that even tho the data came from “Camera Uploads”, it got moved to “Camera”.  The issue is obviously directory names with spaces.  And since I had started with an scp approach this meant that rsync was copying up data that it already had in place.  ARRGHH!&lt;/p&gt;

&lt;p&gt;And here’s a second pass with a different approach to space encoded filenames:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync -avh -e ssh Dropbox/&quot;Camera Uploads&quot;/ 192.168.1.25:/Users/sjohnson/backups/macbook_air/Dropbox/Camera\ Uploads/
Password:
building file list ... done
./
2017-07-14 18.09.19.jpg
2017-07-14 18.09.37.jpg
2017-07-14 18.09.39.jpg
2017-07-14 18.28.18.jpg
[A bunch of filenames omitted for brevity]
2017-07-30 09.27.13.jpg
2017-07-30 09.27.23.jpg
^Crsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-52.200.1/rsync/rsync.c(244) [sender=2.6.9] 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before the second pass:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ls -ltr Camera | wc -l
      15
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After the second pass&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ScottiMac:Dropbox sjohnson$ ls -ltr Camera | wc -l
      36
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So even after changing how I handled the destination filename, it still went to “Camera”.  Double ARGH.&lt;/p&gt;

&lt;p&gt;So what’s the obvious workaround when rsync seems to entirely fsck up OSX filenames with spaces?  I’m sure there are other options but my approach was drop dead simple, rename each folder on source and destination from:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Camera Uploads
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Camera_Uploads
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and re-run the sync command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync -avh -e ssh Dropbox/Camera_Uploads/ 192.168.1.25:/Users/sjohnson/backups/macbook_air/Dropbox/Camera_Uploads/
Password:
building file list ... done
.DS_Store

sent 18.87K bytes  received 1.64K bytes  8.21K bytes/sec
total size is 4.57G  speedup is 222553.34
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;problem-the-second---excluded-directories&quot;&gt;Problem the Second - Excluded Directories&lt;/h1&gt;

&lt;p&gt;My next issue was that I wanted to exclude the Library directory from the files being synced.  This would eliminate all the giant Docker files that are stored in Library (and Library mostly isn’t needed since it is Application level stuff; not really user data).&lt;/p&gt;

&lt;p&gt;Here was my first attempt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ rsync -avh --exclude '/Users/sjohnson/Library/' -e ssh ~ 192.168.1.25:/Users/sjohnson/backups/seas
Password:
building file list ... rsync: opendir &quot;/Users/sjohnson/Library/Application Support/CallHistoryTransactions&quot; failed: Operation not permitted (1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So that clearly failed.  Now I’ve long been aware that Apple has old versions of core open source tools like rsync, so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ rsync --version
rsync  version 2.6.9  protocol version 29
Copyright (C) 1996-2006 by Andrew Tridgell, Wayne Davison, and others.
&amp;lt;http://rsync.samba.org/&amp;gt;
Capabilities: 64-bit files, socketpairs, hard links, symlinks, batchfiles,
              inplace, IPv6, 64-bit system inums, 64-bit internal inums

rsync comes with ABSOLUTELY NO WARRANTY.  This is free software, and you
are welcome to redistribute it under certain conditions.  See the GNU
General Public Licence for details.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clearly the 2006 copyright date is a problem.  This calls for brew!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install rsync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, naturally, brew does &lt;a href=&quot;https://fuzzyblog.io/blog/ruby/2019/07/10/when-rbenv-well-won-t-rbenv-fixing-shell-extension-madness.html&quot;&gt;shell magic trickery&lt;/a&gt; that messed up for me.  Happily tho rsync is just an executable that I can fully path to (all brew executables always end up in /usr/local/bin):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/bin/rsync --version
rsync  version 3.1.3  protocol version 31
Copyright (C) 1996-2018 by Andrew Tridgell, Wayne Davison, and others.
Web site: http://rsync.samba.org/
Capabilities:
    64-bit files, 64-bit inums, 64-bit timestamps, 64-bit long ints,
    socketpairs, hardlinks, symlinks, IPv6, batchfiles, inplace,
    append, ACLs, xattrs, iconv, symtimes, no prealloc, file-flags

rsync comes with ABSOLUTELY NO WARRANTY.  This is free software, and you
are welcome to redistribute it under certain conditions.  See the GNU
General Public Licence for details.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and that still failed but here was the magic (and Virginia, yes, the error was &lt;strong&gt;all damn mine&lt;/strong&gt;, not the version of rsync):&lt;/p&gt;

&lt;p&gt;“Excluding a specific directory is same as excluding a file, just pass the relative path to the directory to the –exclude option” from &lt;a href=&quot;https://linuxize.com/post/how-to-exclude-files-and-directories-with-rsync/&quot;&gt;Rsync Exclusion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that made my rsync command this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync -avh --exclude 'Library/' -e ssh ~ 192.168.1.25:/Users/sjohnson/backups/seas
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that worked like a charm.  Sigh.  Always read the docs well if at all possible.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2019/07/24/bullshite-rsync-subtleties.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2019/07/24/bullshite-rsync-subtleties.html</guid>
        
        <category>osx</category>
        
        <category>rsync</category>
        
        <category>mac</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Getting Around the Makara ActiveRecord Proxy</title>
        <description>&lt;p&gt;One of the key approaches to database scalability is the use of a replica server so that read only queries (i.e. SELECT queries) get shunted away from the master database.  When you use a framework based approach to development such as Rails, this is generally implemented as an ActiveRecord connector that sits between your SQL and the server on which it gets executed.  One such example is &lt;a href=&quot;https://github.com/taskrabbit/makara&quot;&gt;Makara&lt;/a&gt; from TaskRabbit.&lt;/p&gt;

&lt;p&gt;The problem here is that not all SELECT queries are created equally and not all select queries can run correctly on a replica.  I recently had the situation where a given query was complex enough (think 500+ lines of select query) that it could only execute on the replica server maybe 3 times out of 10 with a 45 plus second runtime.  I was assured by the query author that this would execute correctly on the production database.  And while I was absolutely dubious about this, I realized that there was literally no way to prove this without getting around Makara.&lt;/p&gt;

&lt;p&gt;I looked at Makara and like a lot of gems, I didn’t find the documentation much to my liking (although I had a hint that if I got funky with it, it might work) but then I saw this little snippet:&lt;/p&gt;

&lt;p&gt;“Calls inside a transaction will always be sent to the master (otherwise changes from within the transaction could not be read back on most transaction isolation levels)”&lt;/p&gt;

&lt;p&gt;And that gave me this example (not the real sql; just something I had open in a db console):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;results = ActiveRecord::Base.transaction do 
  ActiveRecord::Base.connection.select_rows
  (&quot;
  select user_id, date_created_at, sum(int_val) from metrics where habit_id = 2 
  group by date_created_at order by date_created_at desc LIMIT 10;
  &quot;) 
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, sure enough, that worked.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2019/07/23/getting-around-the-makara-activerecord-proxy.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2019/07/23/getting-around-the-makara-activerecord-proxy.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>So You Need to Write</title>
        <description>&lt;p&gt;I’m a long time blogger and from time to time I get people asking me how I produce as many words as I do.  I know a few people looking to start writing projects and I thought I’d put together a few notes on the topic of how I’m productive.&lt;/p&gt;

&lt;h1 id=&quot;my-guidelines-for-writing-productively&quot;&gt;My Guidelines for Writing Productively&lt;/h1&gt;

&lt;p&gt;Here is the quick version of my writing guidelines:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Break the tyranny of the file&lt;/li&gt;
  &lt;li&gt;Write in smaller chunks - never chapters&lt;/li&gt;
  &lt;li&gt;Write don’t format&lt;/li&gt;
  &lt;li&gt;Look into different writing tools&lt;/li&gt;
  &lt;li&gt;Realize that no one thing you write matters all that much&lt;/li&gt;
  &lt;li&gt;Measure your progress and improve on it&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;break-the-tyranny-of-the-file&quot;&gt;Break the Tyranny of the File&lt;/h2&gt;

&lt;p&gt;I haven’t primarily written using a classical word processor software now since 1987 and I attribute most of my productivity to this one fact, specifically I think that I haven’t had to think about files in almost 30 years.  I refer to this as “breaking the tyranny of the file”.  As stupid as it may sound, the need to decide how to name a file, where to locate a file, etc are all cognitive decisions that pull mental energy away from the actual writing process.  And lest you think that in 2019, files are simpler than ever, consider this dialog box from trying to close an unsaved document in Pages:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/a/CYHtw37.png&quot;&gt;View Pic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m sorry but this doesn’t make much sense even to me (the answer here is to click Delete; sigh).&lt;/p&gt;

&lt;p&gt;The easiest way for most people to break the tyranny of the file is to use a content management system like a blog where, yes, there are files but their creation and management is hidden.  As an example, here’s how I create something in my blogging tool:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll post &quot;So You Need to Write&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-or- if I want to make a draft that isn’t going to go live today:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll draft &quot;So You Need to Write&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that one command builds what I need and I can then open it in my editor.  I never have to worry about filename / location / etc.&lt;/p&gt;

&lt;h2 id=&quot;write-in-smaller-chunks---never-chapters&quot;&gt;Write in Smaller Chunks - Never Chapters&lt;/h2&gt;

&lt;p&gt;Along with breaking the tyranny of the file comes the idea of working in small chunks - think sections (or posts) not chapters.  The longer the thing that you are “writing” is, the harder it is to hold it all in your head at once.  If you can write a long work it at the section / post level and then composite it together at the end you will find that each section is easier to write.&lt;/p&gt;

&lt;p&gt;And if you are a software developer trying to write, consider this analogy.  At one time or another, we’ve all written functions that were longer than one screen.  Remember how hard it was to keep all of that function in your head.  Well, working at the section level is analogous.&lt;/p&gt;

&lt;h2 id=&quot;write-dont-format&quot;&gt;3. Write Don’t Format&lt;/h2&gt;

&lt;p&gt;I view formatting as the absolute bane of writing.  Tools like Microsoft Word make formatting so seductive because you feel “productive” but, really, you aren’t being productive when you are formatting, you are just “twiddling” with the content.  To me one of the worst advances in modern software for writing productivity is the full integration of formatting tools right into the writing process.  From my perspective, you write and then you format as a final step before output.&lt;/p&gt;

&lt;p&gt;Note: Structural formatting like headings, inline emphasis such as bold facing / italics are fine.  I’m more referring to the “let’s see what this looks like with a different font / margins / etc” type of twiddling.&lt;/p&gt;

&lt;h2 id=&quot;look-into-different-writing-tools&quot;&gt;4. Look Into Different Writing Tools&lt;/h2&gt;

&lt;p&gt;To paraphrase McLuhan’s famous “&lt;a href=&quot;https://en.wikipedia.org/wiki/The_medium_is_the_message&quot;&gt;The Medium is the Message&lt;/a&gt;”, I would argue that the tool alters the output.  If all you have ever used to write is Microsoft Word, well, there is a whole world out there of writing tools that will dramatically affect how you write.  I cover these in the next section and I would strongly, strongly argue that you at least explore different tools.&lt;/p&gt;

&lt;p&gt;Note: If you’re addicted to some of the actually excellent tools inside Word such as the grammar checker then you can always do what I do and copy and paste a chunk of writing into Word, let the grammar checker give you changes and then move it back.  I do this regularly.&lt;/p&gt;

&lt;h2 id=&quot;realize-that-no-one-thing-you-write-matters-all-that-much&quot;&gt;5. Realize That No One Thing You Write Matters All That Much&lt;/h2&gt;

&lt;p&gt;When you write a lot, you come to realize that no one thing actually matters all that much.  I tend to view writing as a corpus – some bits are stronger than others and the value is in the totality.  I no longer fret about if a particular piece is perfect because I have accepted that some will be and some won’t be.&lt;/p&gt;

&lt;h2 id=&quot;measure-your-progress-and-improve-on-it&quot;&gt;6. Measure Your Progress and Improve On It&lt;/h2&gt;

&lt;p&gt;One of the best changes I’ve made for being a productive writer in 2019 is that I now benchmark my progress and I use it to motivate myself.  Here’s an example&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imgur.com/a/IJF29FK&quot;&gt;View Pic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I should note that my numbers here are lower than they would normally be.  A big part of the reason for that is that I wrote the tooling driving the screenshot above (new product coming soon).&lt;/p&gt;

&lt;h1 id=&quot;writing-tools&quot;&gt;Writing Tools&lt;/h1&gt;

&lt;p&gt;For the purposes of being transparent, I will tell you what writing tools I use.  But, for the sake of kittens everywhere, DO NOT use what I use.  My tool choices would likely lead to incessant, Tourette’s style cursing.  I use idiosyncratic tools because I’ve been doing this forever and I’m an uber nerd.  These work for me and likely don’t work for you.&lt;/p&gt;

&lt;h2 id=&quot;my-personal-writing-tools&quot;&gt;My Personal Writing Tools&lt;/h2&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate&lt;/a&gt; as an editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown&lt;/a&gt; as a drop dead simple content formatter&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; as a blogging tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fuzzygroup/blog&quot;&gt;Github&lt;/a&gt; for content management (and Jekyll is intimately tied to github)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/fuzzygroup&quot;&gt;gist.github.com&lt;/a&gt; for generating temporary content versions that I can show people a quick draft.  &lt;a href=&quot;https://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; taught me this trick.  Thanks Nick!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com&quot;&gt;Google Docs&lt;/a&gt; if I need a way for people to edit something but Google Docs WILL NOT re-produce Markdown so it is a suck ass, bullcrap tool. Argh.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To repeat, do not try and use these tools the way I do.  After all, I modeled my writing process after the way I do software development right down to using git …&lt;/p&gt;

&lt;h3 id=&quot;a-note-about-github&quot;&gt;A Note About Github&lt;/h3&gt;

&lt;p&gt;I thought my comment about using Github / git for managing my writing was my being a typically overly nerdy developer and Mark Bernstein gave me some interesting feedback:&lt;/p&gt;

&lt;p&gt;“This might actually be OK advice for writers; I liked the Pragmatic Programmer’s advice, back in the day, to keep all your writing in subversion.  It’s possible that Time Machine obviates some of the need for this, but it’s a good idea.”&lt;/p&gt;

&lt;p&gt;If you are committed to using a plain ASCII format for writing such as MarkDown or HTML then Github / git might actually be something to consider.  Do bear in mind that Git is an industrial strength tool and &lt;a href=&quot;https://fuzzyblog.io/blog/git/2019/06/27/understanding-a-small-organization-s-git-development-model.html&quot;&gt;not always the easiest thing to use&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tools-you-should-consider&quot;&gt;Tools You Should Consider&lt;/h2&gt;

&lt;p&gt;Here are the writing tools that you should look at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eastgate.com/Tinderbox/&quot;&gt;Tinderbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eastgate.com/storyspace/&quot;&gt;Storyspace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.literatureandlatte.com/scrivener/overview&quot;&gt;Scrivener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wordpress&quot;&gt;WordPress&lt;/h3&gt;

&lt;p&gt;If you are looking to write daily and just build that skill then I strongly recommend that you blog.  I’ve been blogging now since 2002 and I was one of the authors on the &lt;a href=&quot;https://www.amazon.com/Essential-Blogging-Selecting-Doctorow-Paperback/dp/B00ME3RFYA/&quot;&gt;O’Reilly Essential Blogging book&lt;/a&gt; (by the way O’Reilly, I’ve never once gotten a royalty check – did no copies ever sell?).  Anyway, blogging is a drop dead simple way to write that incorporates a lot of my approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Break the tyranny of the file&lt;/li&gt;
  &lt;li&gt;Write in smaller chunks&lt;/li&gt;
  &lt;li&gt;Write Don’t Format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you’re going to blog then WordPress is a damn fine way to do it.  And hosted WordPress is both easy and cheap; you don’t need your own server.  Recommended.&lt;/p&gt;

&lt;h3 id=&quot;tinderbox--storyspace&quot;&gt;Tinderbox / Storyspace&lt;/h3&gt;

&lt;p&gt;I’m covering these tools together because they both come from the same creative mind and, to me, they are heavily interlinked (despite being different products).  Tinderbox and Storyspace are both more tools for thinking about / planning what you have to write than the writing itself.  Both tools are heavily oriented around graphical views of the structure of your writing.  And Tinderbox is specifically designed for note taking.&lt;/p&gt;

&lt;p&gt;Here is some commentary from the author:&lt;/p&gt;

&lt;p&gt;“Storyspace 3 works seamlessly with Tinderbox, with which it shares files. Tinderbox is designed for making, visualizing, and analyzing notes, making it ideal for the early stages of ambitious projects. Storyspace is designed for writing and reading interlinked narrative; many writers will move freely between Tinderbox and Storyspace.”&lt;/p&gt;

&lt;h3 id=&quot;scrivener&quot;&gt;Scrivener&lt;/h3&gt;

&lt;p&gt;Scrivener is the best thought-out tool I’ve seen for writing long form works (think books / novels) in a damn long time.   With a focus on structural views and working in small chunks, Scrivener addresses my top three concerns (tyranny of the file / smaller chunks / write don’t format).  You have to be open to really learning a new tool to use Scrivener, but it is worth it.&lt;/p&gt;

&lt;h3 id=&quot;disclaimers&quot;&gt;Disclaimers&lt;/h3&gt;

&lt;p&gt;Matt Mullenweg, the founder of WordPress, is a friend and one of the coolest folks I know online.  But despite that bias, WordPress is still damn awesome.&lt;/p&gt;

&lt;p&gt;Tinderbox and Storyspace are both written by Mark Bernstein who is also a friend and has been doing this stuff even longer than I have.  I met Mark back in ‘87 when we both attended the first ACM Conference on Hypertext at University of North Carolina, Chapel Hill.  And while I have done a lot of different things career wise, Mark has focused exclusively on writing tools and brought a lot of good into the world that way.  I respect him greatly for this.&lt;/p&gt;

&lt;p&gt;Mark Bernstein read an early draft of this post and gave me a number of great changes.  Thank you Mark!&lt;/p&gt;

&lt;p&gt;All of the techniques above I have used extensively – for non fiction writing.  I have never tried them in a fiction context.  I suspect that they would work but I can’t attest to that.&lt;/p&gt;

&lt;h1 id=&quot;in-closing&quot;&gt;In Closing&lt;/h1&gt;

&lt;p&gt;Someone I used to know once made a wonderful observation on how to be a successful writer.  It was short, succinct and beautiful in its clarity:&lt;/p&gt;

&lt;p&gt;“Fingers on keys; ass in chair”&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/writing/2019/07/22/so-you-need-to-write.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/writing/2019/07/22/so-you-need-to-write.html</guid>
        
        <category>writing</category>
        
        <category>blogging</category>
        
        <category>heinlein</category>
        
        
        <category>writing</category>
        
      </item>
    
      <item>
        <title>Backing Mac to Mac via scp / rsync</title>
        <description>&lt;p&gt;I found myself turning my old Macbook Air over to my wife to use when the cursed butterfly keyboard on her new MacBook died.  And even tho I had theoretically used Dropbox to sync my data with other machines, a quick check on this machine revealed something like 200 top level directories in ~/Dropbox while a check against my “current” machine revealed only 148 top level directories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT THE FERENGI Dropbox !!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that convinced me that I needed to run a backup on this machine before I turned it over to my wife.  Naturally I found that a Time Machine backup failed and, honestly, I found myself with little desire, inclination or will to fix Time Machine.&lt;/p&gt;

&lt;p&gt;This led me to attempt to backup this Mac via an scp command to my big desktop Mac which has plenty of free disc space.  So I used this shell command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -p -r ~/Downloads/* 192.168.1.25:/Users/sjohnson/backups/macbook_air/Downloads/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;as a test command to backup the ~/Downloads directory from one machine to another.  And, annoyingly, I found that after only a few gigabytes, my scp would fail with a networking error.  After trying this again (and again and again), I came to the conclusion that I was fighting an untenable battle that felt a lot like a land war in Asia.  And this led me to Google which, rapidly, led me to rsync, a tool I love but which I never seem to think to use.  Here was the command I finally came up with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync -avh -e ssh Downloads/* 192.168.1.25:/Users/sjohnson/backups/macbook_air/Downloads/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In case you aren’t aware, the benefit to &lt;a href=&quot;https://linux.die.net/man/1/rsync&quot;&gt;rsync&lt;/a&gt; is that it will keep track of your progress to date and resume incomplete copies.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2019/07/22/backing-mac-to-mac-via-scp-rsync.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2019/07/22/backing-mac-to-mac-via-scp-rsync.html</guid>
        
        <category>osx</category>
        
        <category>backup</category>
        
        
        <category>osx</category>
        
      </item>
    
  </channel>
</rss>
