<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Sep 2016 15:26:35 -0400</pubDate>
    <lastBuildDate>Tue, 06 Sep 2016 15:26:35 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Rails2Elixir - rails new</title>
        <description>&lt;p&gt;Rails new is the command which generates a new Rails project.  The equivalent would be the phoenix new command.  Here is the equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other things to know:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new --help

mix phoenix.new project_name --database mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org/docs/up-and-running&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails c</title>
        <description>&lt;p&gt;rails c, the Rails Console, is one of those canonical things in the rails world - it launches the rails console with all your objects loaded.&lt;/p&gt;

&lt;p&gt;The elixir equivalent to this is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This compiles your project and is a great way to quickly test your code.  If the console comes up then you don’t have any syntactic errors&lt;/p&gt;

&lt;p&gt;Just as, in the Rails world, you can run irb, you can also just run iex:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This won’t compile anything and its a fast way to test basic elixir snippets.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Practical Things Learned at ElixirConf</title>
        <description>&lt;p&gt;Its been a few days since ElixirConf and I was reflecting on the practical stuff I learned.  Yes I saw the grand vision driving things but I’m always more concerned about the little stuff because everything you build is entirely dependent on the little stuff.  Attribution given by name only since I don’t want to call anyone out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It’s real&lt;/strong&gt;.  People are really using this in production which means that I can too.  Just knowing that is huge.  Thanks Ben!&lt;/li&gt;
  &lt;li&gt;Deploy is still kind of a mess.  At least one company I met is handling deploy via building it into containers and then deploying the containers.  Again thanks to Ben!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hex.pm/packages/timex&quot;&gt;Timex&lt;/a&gt; is the rough equivalent to the Rails ActiveSupport Time.now style stuff.  That’s huge since I rely on that constantly.&lt;/li&gt;
  &lt;li&gt;Despite the above comment on Timex, I was advised that datetime stuff is kind of a mess and “just get the unix epoch from the server and do with it what you will”.  I don’t know how to reconcile this yet but I’m sure I will.  Thanks Pete!&lt;/li&gt;
  &lt;li&gt;As with Rails development local development using containers “just doesn’t feel right”.  Not terribly surprising given how many times I’ve tried to get a full rails stack running for local development using Docker and how many times I’ve failed.&lt;/li&gt;
  &lt;li&gt;Ecto is surprisingly robust and I’m looking forward to using&lt;/li&gt;
  &lt;li&gt;There are starting to be lots of good development tools including an &lt;a href=&quot;https://github.com/KronicDeth/intellij-elixir&quot;&gt;IntelliJ plugin for Elixir&lt;/a&gt;.  This is the first time I’ve ever even considered a JetBrains product so that’s surprising.  Hat tip to &lt;a href=&quot;https://github.com/KronicDeth&quot;&gt;KronicDeath&lt;/a&gt; who I’m pretty sure I had dinner with; its all a bit blurry now in retrospect.&lt;/li&gt;
  &lt;li&gt;I purely can’t wait to start using &lt;a href=&quot;https://github.com/gamache/fuzzyurl.ex&quot;&gt;FuzzyUrl&lt;/a&gt;  I’ve written a lot of this kind of code over the years.  Curious to see how it compares (hint - this will be better)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/06/practical-things-learned-at-elixircon.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/06/practical-things-learned-at-elixircon.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Startup Learnings - What Eric Howard Taught Me</title>
        <description>&lt;p&gt;Eric Howard, a good friend of mine, is the founder of &lt;a href=&quot;http://www.outreachindiana.org&quot;&gt;Outreach Indiana&lt;/a&gt;, and he is not a part of the high tech world and he is no one that anyone in high tech has likely ever heard of.  But learnings can come from anywhere and Eric taught me a powerful one.&lt;/p&gt;

&lt;p&gt;I spent a big chunk of my yesterday assembling a chandelier:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/chandelier.png&quot; alt=&quot;chandelier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is on &lt;a href=&quot;https://www.amazon.com/Whse-Tiffany-RL8049-Edwards-Chandelier/dp/B00MUTIJ84/ref=sr_1_2?ie=UTF8&amp;amp;qid=1473065813&amp;amp;sr=8-2&amp;amp;keywords=chandelier+RL8049&quot;&gt;Amazon&lt;/a&gt; and while it looks amazing, the reviews are consistent: “Looks great; instructions suck bad; &lt;strong&gt;hard&lt;/strong&gt; to assemble.”&lt;/p&gt;

&lt;p&gt;So you start unpacking this chandelier and you end up with what seems to be 1,000 different pieces strewn over your workspace and two sheets of illegible, incorrect, crap ass instructions that make you want to drink heavily.  And I was reminded of Eric Howard.&lt;/p&gt;

&lt;p&gt;Eric is a professional non-profit worker and he’s the founder of a local Indiana charity that helps homeless youth.  In 1996, Eric felt compelled to do something about the homeless problem in Indianapolis.  And, not knowing what exactly to do, he got into his car with &lt;strong&gt;bread&lt;/strong&gt;, &lt;strong&gt;peanut butter&lt;/strong&gt; and a few other supplies and he drove around Indianapolis.  As he found people who were homeless, he &lt;strong&gt;fed them&lt;/strong&gt; and he &lt;strong&gt;helped them&lt;/strong&gt;.  Down the road he found other people to work with and ultimately ended up founding Outreach Indiana which is a very real charity that does fantastic work in our community.&lt;/p&gt;

&lt;p&gt;So here’s what Eric taught me:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Just Start.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In anything you’re doing, it is always easy to get &lt;em&gt;paralyzed&lt;/em&gt; by the scale of the problem.  Whether its assembling a chandelier, learning a new language or even tackling homelessness, &lt;strong&gt;just starting&lt;/strong&gt; is the most important thing.  There’s even a term for this, &lt;a href=&quot;https://en.wikipedia.org/wiki/Analysis_paralysis&quot;&gt;Analysis Paralysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As far as that chandelier goes?  Once I thought about Eric and &lt;em&gt;just start&lt;/em&gt;, I grabbed the only two pieces that I could see had a logical connection and put them together.  Then the next three and so on.  Four hours later it was hanging in my dining room and my wife was delighted.&lt;/p&gt;

&lt;p&gt;Note: &lt;a href=&quot;https://www.facebook.com/shelley.johnson.luke923?fref=ts&quot;&gt;My wife&lt;/a&gt; helped put it together too; the writings above makes it sound like she wasn’t involved at all and that’s just not true.&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/05/startup-learnings-what-eric-howard-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/05/startup-learnings-what-eric-howard-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>MySQL - How Do You Know Your MySQL Data Load Worked?</title>
        <description>&lt;p&gt;This post outlines my strategy of how to verify a multi terabyte data load across hundreds of different tables from database 1 (source) to database 2 (target).&lt;/p&gt;

&lt;p&gt;There are three metrics that we can track:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dump file size&lt;/li&gt;
  &lt;li&gt;row count&lt;/li&gt;
  &lt;li&gt;sampled row data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these is discussed below.&lt;/p&gt;

&lt;h1 id=&quot;dump-file-size&quot;&gt;Dump File Size&lt;/h1&gt;

&lt;p&gt;Given that all of our databases are simply too large to transfer as a single entity, we’re going to have to go with a table by table dump strategy.  This gives us one basic metric on the load process – the dump file on source needs to be the same size as the dump file on target.&lt;/p&gt;

&lt;h1 id=&quot;row-count&quot;&gt;Row Count&lt;/h1&gt;

&lt;p&gt;After the data is loaded from source to target the row count should be identical and that’s simple to verify with a SELECT COUNT(*) FROM table query.&lt;/p&gt;

&lt;h1 id=&quot;sampled-row-data&quot;&gt;Sampled Row Data&lt;/h1&gt;

&lt;p&gt;If we’ve verified the dump file size and the row count, it would be easy to assume that everything loaded correctly but do we really know?  One way to address this is thru sampling.  What we can do is apply a hash function on the contents of an entire row.  If we’re using the same hash function on both source and target and on the same rows (i.e. row 1315789 on source and row 1315789 on target) then we should get the same result.  And if we did this consistently – say first row, last row and then say 1,000 randomly chosen rows for every table, we should have a fairly high degree of certainty that source and target are in sync.&lt;/p&gt;

&lt;h1 id=&quot;high-degree-of-certainty&quot;&gt;High Degree of Certainty&lt;/h1&gt;

&lt;p&gt;I used that term very deliberately and I recognize that its a mealy mouthed way of saying “well I’m not entirely sure that source and target on the same” and that’s true.  Once you move to a certain scale, it is essentially impossible to know anything completely.  What you need to do is look at overall metrics and then random samples and figure out how many samples make you feel safe.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/mysql/2016/09/05/mysql-how-do-you-know-your-data-load-worked.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/mysql/2016/09/05/mysql-how-do-you-know-your-data-load-worked.html</guid>
        
        <category>mysql</category>
        
        
        <category>mysql</category>
        
      </item>
    
      <item>
        <title>The Anthony Bourdain of Finance - A Book Review of Straight to Hell</title>
        <description>&lt;p&gt;I remember reading &lt;a href=&quot;https://www.amazon.com/Kitchen-Confidential-Updated-Adventures-Underbelly/dp/0060899220/ref=sr_1_1?ie=UTF8&amp;amp;qid=1472978808&amp;amp;sr=8-1&amp;amp;keywords=kitchen+confidential&quot;&gt;Kitchen Confidential&lt;/a&gt; like a bolt of lightning had struck me.  I’m an avid &lt;a href=&quot;http://fuzzygroup.github.io/recipes/&quot;&gt;cook&lt;/a&gt; and whenever you really love something you have illusions that, someday, you might do it professionally.  Kitchen Confidential cured me of that in a hurry.  Reading about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just how hard you have to work in a professional kitchen&lt;/li&gt;
  &lt;li&gt;The amount of drugs and sex&lt;/li&gt;
  &lt;li&gt;The absolutely pitiful pay scales&lt;/li&gt;
  &lt;li&gt;The rampant sexism&lt;/li&gt;
  &lt;li&gt;The level of theft and illegality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well I no longer have the desire to work in a kitchen.  I’m plenty happy cooking for family and friends and I do far better financially than I would unless I had that lightning in a bottle moment where your new restaurant is temporarily the new hot thing.  And the odds there seem equivalent to that of your startup succeeding so …&lt;/p&gt;

&lt;p&gt;Reading &lt;a href=&quot;https://www.amazon.com/Straight-Hell-Deviance-Debauchery-Billion-Dollar/dp/0802123309/ref=sr_1_1?ie=UTF8&amp;amp;qid=1472978850&amp;amp;sr=8-1&amp;amp;keywords=Goldman+Sachs+Hell&quot;&gt;Straight to Hell: Tales of Deviance, Debauchery and Billion - Dollar Deals&lt;/a&gt; makes me want to term the author, John LeFevre, the Anthony Bourdain of finance. This book is based on the popular twitter feed &lt;a href=&quot;https://twitter.com/@GSElevator&quot;&gt;“Heard in the Goldman Sachs”&lt;/a&gt; elevator. If you scrub out “kitchen” and replace it with “trading floor” and change the location from Manhattan to Hong Kong, well, its pretty much the same book. In the book you read about how a young trader rises thru the ranks and with every success descends deeper and deeper into a morass of bad behavior.  Anything bad that you’ve ever thought about people in finance appears to be true.  I particularly liked the description of chatroom bingo where they assign points to people who say increasingly ridiculous things on investor conference calls.  Given how many times I’ve played buzzword bingo in long meetings myself, I certainly can’t fault him for this.&lt;/p&gt;

&lt;p&gt;Overall it is a very entertaining read.  There’s not a lot about finance specifically here – it is really about bad, frat boy like, behavior.&lt;/p&gt;

&lt;p&gt;As a parent, I will say that I don’t ever want any of my sons to enter the finance world after reading this.  Wow.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/book_review/2016/09/04/the-anthony-bourdain-of-finance.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/book_review/2016/09/04/the-anthony-bourdain-of-finance.html</guid>
        
        <category>book_review</category>
        
        <category>finance</category>
        
        
        <category>book_review</category>
        
      </item>
    
      <item>
        <title>Good Riddance to Zoom or Video Conferencing Is Still Not the Future</title>
        <description>&lt;p&gt;Over the past 11 months or so I’ve had the opportunity to fairly regularly use a video conferencing tool known as &lt;a href=&quot;http://www.zoom.us&quot;&gt;Zoom&lt;/a&gt; and I’m finally rid of it and &lt;strong&gt;thank heavens&lt;/strong&gt;.  Ever since I stopped using it, I’m free of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;absolute CPU killing performance; now that I am not using it any more, my machine is fast again&lt;/li&gt;
  &lt;li&gt;the requirement to always have a shirt on - I work from home and my office gets hot at times&lt;/li&gt;
  &lt;li&gt;getting nattered at about not always facing the camera; I have multiple machines so I can get work done while video conferencing is running&lt;/li&gt;
  &lt;li&gt;constant log in and log out issues when you have multiple machines like, oh I don’t know - iPhone, iPad, laptop; not an uncommon use case now a days.&lt;/li&gt;
  &lt;li&gt;its many user interface idiocies including the fact that they want you have a “zoom number” which is like a phone number without the chunking.  So if you have to type it in manually, which for me happens constantly, you have to try and read this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/zoom.png&quot; alt=&quot;zoom.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The stupidest thing of all on this last point is that the damn system understands a chunked phone number because it formats the number for you when you type it in.  Why they can’t generate the url like this: http://zoom.us/j/649-428-379 and then just throw away the dashes, I do not know.  The whole reason the US has area codes is because of &lt;a href=&quot;http://blog.screensteps.com/chunking-information&quot;&gt;chunking and its not hard to understand&lt;/a&gt;.  Even if we’re not trying to remember it permanently, its easier to visually see and type it in. Why don’t I want to use the link?  Well I’m a developer and my calendar isn’t always on the box where I want to take a video call.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/video%20conferencing/2016/09/02/zoom-or-video-conferencing-is-still-not-the-future.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/video%20conferencing/2016/09/02/zoom-or-video-conferencing-is-still-not-the-future.html</guid>
        
        <category>zoom</category>
        
        <category>video conferencing</category>
        
        <category>rant</category>
        
        
        <category>video conferencing</category>
        
      </item>
    
      <item>
        <title>Software Engineering Learnings - What Wolfram Arnold Taught Me</title>
        <description>&lt;p&gt;The year was 2007 and the month was August.  I had just joined eduFire and we made the decision at a corporate level that despite my technical expertise being in anything but Rails, we were going to move all of our development efforts to Rails.  Thankfully I did have Ruby experience but Rails was new to me so we brought in a consultant, &lt;a href=&quot;https://twitter.com/wolframarnold&quot;&gt;Wolfram Arnold&lt;/a&gt;, to bring me up to speed.&lt;/p&gt;

&lt;p&gt;You can easily be familiar with something intellectually and still have it throw you.  Sure I knew what &lt;strong&gt;pair programming&lt;/strong&gt; was – I’d read the Ward Cunningham stuff but I’d never done it.  And I’d certainly never done it intensively as we proceeded to do for the next month.  I suspect to my dying day,  I will never forget my very first day with Wolf.  I’d been working on my own for a few weeks at this point and I’d cobbled together an authentication system for our educational application.  Within the first fifteen minutes he looked at it and then with, teutonic precision, he said to me “&lt;em&gt;And now we’ll throw all this away.&lt;/em&gt;”  I was absolutely flummoxed but when you hire a consultant, if you’re not going to trust them, then why did you hire them?  So over the next 30 days or so, Wolfram taught me rails, pairing and test driven development (tdd).  Oh and that code throw away thing?  He was right.  Damn it.  ;-)&lt;/p&gt;

&lt;p&gt;Tossing out your new boss’ work on your very first day, even if you are a consultant, that takes guts.  And it was the right call but it was still gutsy.&lt;/p&gt;

&lt;p&gt;So here’s what Wolfram Arnold taught me: &lt;strong&gt;Pair Programming Works&lt;/strong&gt; or what is also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Linus%27s_Law&quot;&gt;Linus’ Law&lt;/a&gt;: &lt;strong&gt;With enough eyes, all bugs are shallow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pair programming is one of those absolutely uncomfortable experiences that’s absolutely good for you.  I’ve now been pairing for years and years so I’m used to it but when you’re just starting out, you feel like an idiot having someone watch you stumble through things.  Pair programming, imho, remains the single best way to get a new hire up to speed on a code base.  And because the cost of fixing a bug is &lt;strong&gt;directly proportional&lt;/strong&gt; to amount of time that lapses from when a bug was created, I can make a pretty solid argument that two man teams are much more effective than solo developers. If a bug never gets into the code base in the first place then fixing it has effectively zero cost.  When we developed eduFire, we took the practices that Wolfram drilled into me and we ran development almost exclusively as a paired thing for the next two years.  I don’t think I’ve ever had such a well tested, stable code base. We used to average about 90% to 95% test coverage on any given day.&lt;/p&gt;

&lt;p&gt;Pairing wasn’t the only thing I learned from Wolfram, Rails itself was an eye opener and tdd changed everything for me.  I’ve always felt that tdd was what let me describe myself as “Software Engineer” instead of “Coder” but pair programming fundamentally changed my perspective on software engineering.&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software%20engineering/2016/09/02/what-wolfram-arnold-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software%20engineering/2016/09/02/what-wolfram-arnold-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        <category>feedster</category>
        
        <category>software engineering</category>
        
        
        <category>software engineering</category>
        
      </item>
    
      <item>
        <title>Startup Learnings - What Scott Rafer Taught Me</title>
        <description>&lt;p&gt;When I founded Feedster in 2003, I always knew that I wasn’t the CEO.  Sure – I could blog and communicate well – but I didn’t want to raise money and, in a startup, that’s the CEO’s job.  Also I was in Boston at the time, 2003, and in those days the funding climate was much better on the West Coast so Feedster was always going to be a West Coast company.  The only thing I didn’t know was the how.  That happened at the &lt;a href=&quot;https://www.supernovagroup.net&quot;&gt;1st SuperNova Conference&lt;/a&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Kevin_Werbach&quot;&gt;Kevin Werbach&lt;/a&gt;.  Since I was a poor, unfunded startup, ok technology experiment at that point, Kevin very graciously comped me a pass.&lt;/p&gt;

&lt;p&gt;At SuperNova, I met &lt;a href=&quot;http://rafer.net&quot;&gt;Scott Rafer&lt;/a&gt; and, as I wrote in my first blogging tool,  &lt;a href=&quot;http://radio-weblogs.com/0103807/2003/07/10.html#a1871&quot;&gt;radio.weblogs.com&lt;/a&gt;,we ended up sharing a ride to the airport.  Thanks to crappy weather, the airport was socked in and he and I hung out for about six hours.  Not too long after that Scott agreed to be an informal adviser to Feedster.  And not long after that I asked him to be the CEO and run the business side of things.&lt;/p&gt;

&lt;p&gt;So here’s what Scott Rafer taught me:  &lt;strong&gt;always be nice everyone but be particularly nice to the little guy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Scott was experienced, smart as a whip and had been around the high tech block more than a few times.  But despite that, he was unfailingly polite to anyone and everyone - waiters, taxi cab drivers, etc.  There wasn’t a hint of “silicon valley arrogance” in him and I made the decision to hire him, to a large extent, based on that.  I knew that he had the personal background and credentials that I wanted but, when you start a company, you need to expect that there will be bad times as well as good times.  Generally there are more bad times than good so character matters.  And I’ve never found &lt;strong&gt;good manners&lt;/strong&gt; without &lt;strong&gt;good character&lt;/strong&gt;.  Anyone can be polite to other people in a socially upward context but it takes both grace and humility to be nice to everyone.  Its easy to be nice to people when they can do something for you.  So this one thing told me a huge amount about Scott Rafer.&lt;/p&gt;

&lt;p&gt;Now to be honest this isn’t anything I didn’t already know.  My mom taught me this.  So did my father and my grandfather.  I had it drilled into me from a very early age, as you always do, when you grow up working retail.  But even when you already know something you can learn it again.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/02/what-scott-rafer-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/02/what-scott-rafer-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        <category>feedster</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>What Keeps You From Using Using Elixir</title>
        <description>&lt;p&gt;So I’m at roughly 35,000 feet coming back from ElixirCon, and I saw a tweet that sparked my interest: &lt;a href=&quot;https://twitter.com/georgeguimaraes/status/771722738994180096&quot;&gt;What Keeps You from Using Elixir?&lt;/a&gt;.  Wow.  That’s a fantastic question.  I’d like to break that down to several issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Elixir Language&lt;/li&gt;
  &lt;li&gt;The Phoenix Framework&lt;/li&gt;
  &lt;li&gt;Deployment&lt;/li&gt;
  &lt;li&gt;Ecosystem&lt;/li&gt;
  &lt;li&gt;“It Has to be Standard Platform”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is exactly the right question to ask and I believe that the &lt;a href=&quot;http://twitter.com/georgeguimaraes/&quot;&gt;author&lt;/a&gt; works for Platformatec so this is effectively market research for them and I’m delighted to answer at least for myself.&lt;/p&gt;

&lt;p&gt;Personally I’m a hard core rubyist.  I’ve been using Ruby since 2006 and Rails since 2007.  I’m responsible for a pure ruby codebase doing hardcore data processing at a very large scale (6,000,000 data points per day) for one application / 1/4 terabyte of crawled data per month for another application. Our aggregate code base is approaching 500,000 lines of code in total and the design pattern is, well, the all too familiar &lt;strong&gt;Ruby Monolith&lt;/strong&gt;.  I came to ElixirCon because the tooling I’ve devoted over a decade to simply can’t cut it anymore.  Its is the fragility that all of us know all too well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;brittle gem stack (but better than Node)&lt;/li&gt;
  &lt;li&gt;test coverage that runs slowing, inconsistently if at all&lt;/li&gt;
  &lt;li&gt;performance issues that range from annoying to dreadful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now don’t get me wrong – I actually do love ruby but I no longer feel like I can build stable, reliable distributed systems with it.  And, honestly, the less reliable my systems are the less time I can get with my wife and kids.  After over a decade of ruby, the failures just aren’t fun anymore.  I go into work and it feels, too often, like I’m an architect building something on a foundation of wet sound.&lt;/p&gt;

&lt;p&gt;Personally I’ve been experimenting with Elixir now since &lt;a href=&quot;http://localhost:4000/blog/elixir/2016/03/05/getting-started-installation.html&quot;&gt;March 5, 2016&lt;/a&gt; and I still don’t have anything save toys so, now with the context in place, let’s talk about the issues.&lt;/p&gt;

&lt;p&gt;I’d draw a firm distinction between the Elixir language and the phoenix framework.&lt;/p&gt;

&lt;h1 id=&quot;elixir&quot;&gt;Elixir&lt;/h1&gt;

&lt;p&gt;Getting going with a new language in production is &lt;strong&gt;hard&lt;/strong&gt;.  And its particularly hard when the language breaks with existing paradigms and then leverages other technology (Erlang).  You end up having to master a language and then master the other technology.  And even if you don’t have to master Erlang to use Elixir you do have to be able to get it running and feel comfortable with it in a production context.&lt;/p&gt;

&lt;p&gt;However, for most of us, I think the issue comes down to finding that perfect penetration point.  The killer app which the language is really good for.  Its taken me six months to figure that out for my organization and I finally have it.&lt;/p&gt;

&lt;p&gt;Maybe Platformatec needs to work on a twitter campaign like #MyElixirKillerApp and get people talking about what they want to use Elixir for.  We all just saw #MyElixirStatus do quite well over the past few days.&lt;/p&gt;

&lt;h1 id=&quot;phoenix&quot;&gt;Phoenix&lt;/h1&gt;

&lt;p&gt;Phoenix is interesting as heck to me although Chris McCord’s presentation yesterday on changes to the layout does make me a bit apprehensive.  Knowing that major changes are coming to the layout makes me mildly concerned about starting work on it today – although I did start on an application before I boarded this plane.  Honestly the single biggest thing that concerns me about Phoenix is having to write the authentication layer myself.  I’m hard pressed to think of anything I’ve built in the last 5 if not 10 years that didn’t have login as part of it.  So the concept that I have to roll my own authentication for Phoenix when I know that Devise comes from the parents of Elixir really bothers me.&lt;/p&gt;

&lt;p&gt;And don’t get me wrong, I know that I can build a simple password form and use Comeonin for hashing.  And it doesn’t even have to be Devise but I’m very reluctant to implement security in what is to me a brand new language and brand new framework.  I’m too damn likely to screw something up and leave a hole.  I don’t have to have all the features of Devise but I really feel like this out to be a provided facility and not something that we all implement poorly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; I don’t even like Devise; I struggle with it regularly but I trust their understanding of security better than my own.  The guy who &lt;a href=&quot;https://fuzzygroup.github.io/blog/software%20engineering/2016/09/02/what-wolfram-arnold-taught-me.html&quot;&gt;taught me rails&lt;/a&gt; drilled this into me when I started and its as good advice now as it was then.  People who exploit security holes are scary good.&lt;/p&gt;

&lt;h1 id=&quot;deployment&quot;&gt;Deployment&lt;/h1&gt;

&lt;p&gt;I should admit that I couldn’t make the deployment presentation at ElixirConf so perhaps the answer as at the conference and I missed it.  The state of deployment for an Elixir / Phoenix “thing” bothers me.  I know that I can develop in it but I don’t fully understand how I regularly get this into my daily code / fix / release workflow.  I do know that the state of Ruby deployment in the early days was poor and that makes me think that things aren’t all that different.  And perhaps the answer is that classical deployment is irrelevant and all this needs to be done at the container level. If so then that’s another issue since not all of us are fully conversant with containers yet.&lt;/p&gt;

&lt;h1 id=&quot;ecosystem&quot;&gt;Ecosystem&lt;/h1&gt;

&lt;p&gt;For all the bashing of Ruby / Rails at the conference, it should be noted that Rails has a rich ecosystem at this point.  In talking with a potential client just after the conference they brought up “Technology X” and, yep, there was a gem for it.&lt;/p&gt;

&lt;h1 id=&quot;it-has-to-be-a-standard-platform&quot;&gt;“It Has to be A Standard Platform”&lt;/h1&gt;

&lt;p&gt;As a consultant you do have to listen to your clients and in while talking with the potential client I mentioned in the preceding section, they did make it clear to me that if I built anything for them that it “had to be a standard platform”.  What that exactly means wasn’t defined but, somehow, I don’t think elixir / phoenix was it.&lt;/p&gt;

&lt;h1 id=&quot;conclusion--what-is-the-killer-app-for-elixir&quot;&gt;Conclusion / What is the Killer App for Elixir?&lt;/h1&gt;

&lt;p&gt;I really, really want to use Elixir / Phoenix.  Ever since the first day, picking up my rails apps has felt, well wrong.  Its been very, very hard to motivate myself to write code and that’s unusual for me.  I suspect my recent &lt;a href=&quot;http://fuzzyblog.github.io&quot;&gt;prolific writing output&lt;/a&gt; is a part of that.&lt;/p&gt;

&lt;p&gt;As I look down upon the world from afar (remember I’m still on a plane), I wonder if the killer app settles down to three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;who will use a crazy new technology?&lt;/li&gt;
  &lt;li&gt;what are the one or two defining attributes of elixir?&lt;/li&gt;
  &lt;li&gt;how do the who and the what intersect?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One possible strategy would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;people without an installed code base - &lt;strong&gt;startups&lt;/strong&gt; - the same type of people who leveraged Rails to success over the past ten years&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt; / &lt;strong&gt;reliability&lt;/strong&gt;.  I’ve listened to a lot of Chris’ and Jose’s presentations by now and they always say how it isn’t all about performance.  And I get it – its a rich, elegant language that can do so, so much – but you can’t be everything to everybody.  And a reliable, microsecond response time?  That’s unheard of.  Good heavens, how can you not take advantage of that?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you went with startups and performance / reliability then what’s the intersection?  &lt;strong&gt;API backend for apps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I think about all the companies that have tried to reliably scale Ruby as a back end api strategy and kept having to either add more servers or more cache layers and it just makes you want to weep then die.  A microsecond response time solves a ton of issues.  And I agree that Elixir can do just about anything but it needs its equivalent of CRUD apps to get past the adoption hurdle.  And just as we now do lots and lots of different things now with Ruby, it all started from one thing.  Similarly Elixir needs that one thing.&lt;/p&gt;

&lt;p&gt;I don’t think it would be all that hard for Platformatec to document / promote building APIs in the the same way that CRUD stuff was promoted on Rails in the early days.  I can even see the marketing materials in my head – case studies, application engineers, training classes, sample apps, git repos, etc.  You could even coin a slogan like “Elixir Inside - powering the app economy”.&lt;/p&gt;

&lt;p&gt;Personally I think Platformatec has a tiger by the tail with Elixir.  I haven’t been this excited about a new language since Ruby and I’ve looked at everything ever since Ruby started failing me in the past two years and Elixir is the only thing that feels right.  I do think they need a killer app for it and this is my .02 on the topic.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;h1 id=&quot;postscript---but-nerves-needs-performance-and-reliability-too&quot;&gt;Postscript - But Nerves Needs Performance and Reliability Too&lt;/h1&gt;

&lt;p&gt;Given the absolute coolness of the nerves project and the intersection of Phoenix Presence with Nerves you could easily shout out “But Scott what about IOT and Nerves?”  The problem here is that the people who do hardware in volume don’t care about the elegance that Elixir embodies.  Honestly when I think of IOT hardware that’s sold (as opposed to stuff that Chris McCord builds), the image that comes to my mind is Mos Eisley – a wretched hub of scum and villany.  It isn’t people building elegant software in a reliable, thoughtful way.  Its ship boxes as quickly as possible and do the software as cheaply and easily as they can.  We’ve all read the articles on Hacker News about IOT disasters and I don’t think that’s Elixir or Nerves.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/02/what-keeps-you-from-using-using-elixir.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/02/what-keeps-you-from-using-using-elixir.html</guid>
        
        <category>elixir</category>
        
        <category>phoenix</category>
        
        
        <category>elixir</category>
        
      </item>
    
  </channel>
</rss>
