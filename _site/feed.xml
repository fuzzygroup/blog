<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Feb 2017 03:02:22 -0500</pubDate>
    <lastBuildDate>Fri, 24 Feb 2017 03:02:22 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Advice on Complex Caching Schemes</title>
        <description>&lt;p&gt;It is reputed to have been said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things. &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Personally I’d generalize this to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two hard things in Computer Science: caching things and naming things. (Me/Today)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or the JWZ variant:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;I had a performance problem so I implemented a cache.  Now I had two problems.  (Me/Today&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;http://regex.info/blog/2006-09-15/247&quot;&gt;JWZ Variant&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;I recently spoke with a client that wanted to implement a fairly complex scheme for caching the results of API operations.  They had a memcached implementation using &lt;a href=&quot;https://aws.amazon.com/elasticache/&quot;&gt;AWS ElastiCache&lt;/a&gt; and wanted to extend this to CloudFront.  My advice was simple:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hell No!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any kind of cache is always &lt;strong&gt;finicky&lt;/strong&gt; and &lt;strong&gt;hard to debug&lt;/strong&gt;.  The more complexity in your caching architecture, the absolutely harder it is to debug and the less likely it is to work reliably.  I’ve implemented a lot of caches over the years and I’ve tried to be trickier and tricker and, generally, when I bothered to track cache hits, the trickier ones never seemed to work quite right.  Part of it may have been logic errors and part of it may been misunderstanding how caches get called in this new crazy multi core world but I think my point stands – &lt;em&gt;complex caching schemes are hard to get right&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here was my advice to the client:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://memcached.org/&quot;&gt;memcached&lt;/a&gt; solely (as part of ElastiCache); don’t bring in cloudfront.  Memcached has that brilliantly simple, automagical cache invalidation where you a) set when the object is available until allowing it to just disappear &lt;em&gt;automatically&lt;/em&gt; and b) if enough other objects crowd it out, it is expired using a FIFO architecture.  Those two properties make the cache invalidation issues pretty much disappear.&lt;/li&gt;
  &lt;li&gt;Take the incoming API call params and a) put them in a hash, b) call hash.to_json to get a stringified version, c) call a SHA1 routine on that stringified version.  That gives you a dirt simple cache key that you can store into memcached.&lt;/li&gt;
  &lt;li&gt;If their implementation of ElastiCache allows having multiple caches then set up a new cache for this new data and separate it logically from the current cache as this is high volume but low value.&lt;/li&gt;
  &lt;li&gt;If their implementation of ElastiCache doesn’t allow multiple caches then simply increase the size of the current cache.  Your goal here is to ensure that this new cache (which is on low value data) doesn’t crowd out the current cache citizens (which are higher value data).&lt;/li&gt;
  &lt;li&gt;Look into their current implementation of ElastiCache and see if they have any metrics on cache hit ratio and the like.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s 458 words on caching and I could honestly write a book on it but I think I’ll stop here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sidebar 1&lt;/strong&gt;: (Not part of the 458 words).  If you never watched Brad Danga’s video on Live Journal architecture then I absolutely recommend it unfortunately it seems to have expired from YouTube and the best I can do are the &lt;a href=&quot;http://danga.com/words/2005_oscon/oscon-2005.pdf&quot;&gt;slides&lt;/a&gt; (my favorite version) / &lt;a href=&quot;http://danga.com/words/&quot;&gt;More Slides&lt;/a&gt;.  Brad is my favorite Internet Architect and if he had a baseball card, well, I’d treasure it.  Recommended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sidebar 2&lt;/strong&gt;: (Not part of the 458 words).  If you haven’t used ElastiCache then I highly recommend it.  It is truly the simplest way you’ll ever setup caching infrastructure.  AWS really knocked it out of the park on this one.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/software_engineering/2017/02/24/advice-on-complex-caching-schemes.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_engineering/2017/02/24/advice-on-complex-caching-schemes.html</guid>
        
        <category>software_engineering</category>
        
        <category>caching</category>
        
        <category>aws</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>Diagnosing Slow Selects in MySQL</title>
        <description>&lt;p&gt;show indexes and look at cardinality&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 09:02:29 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/23/diagnosing-slow-selects-in-mysql.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/23/diagnosing-slow-selects-in-mysql.html</guid>
        
        
      </item>
    
      <item>
        <title>Leveling Up as a Developer</title>
        <description>&lt;p&gt;I have spent the past week handing off about 450,00 lines of ruby / ansible code (as measured by rake stats) that are an interface to about 6 terabytes of MySQL data handled by n AWS instances where n varies between 15 and several hundred to a single developer – who happened to be more junior I was.  He’s not a bad guy by any means but, at times, it felt like I had hit him with an intellectual anvil.  We had one week for the transition and, well, this wasn’t a one week thing.  Honestly one month wouldn’t have been enough.&lt;/p&gt;

&lt;p&gt;Towards the end of the hand off, this developer pulled me aside and indicated his concerns and I can understand this.  So I thought I’d write out some recommendations for &lt;em&gt;Leveling Up as a Developer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;# Its All About Immersion&lt;/p&gt;

&lt;p&gt;About 6 months ago, I realized that the future of computing lay, imho, in AWS.  After having resisted cloud hosting for years, I finally buckled down and immersed myself in it.&lt;/p&gt;

&lt;p&gt;# You Need a Side Project&lt;/p&gt;

&lt;p&gt;I think every single developer out to have a side project.  It doesn’t have to be grandoise in nature but your day job doesn’t always allow you to learn the things that you need.  And a side project should let you do whatever you need&lt;/p&gt;

&lt;p&gt;# You Need to Write Code Every Single Day&lt;/p&gt;

&lt;p&gt;# You Need to Write It Down&lt;/p&gt;

&lt;p&gt;The way I got good&lt;/p&gt;

&lt;p&gt;# You Need to Read Until You’re Sick of It Then You Need to Read Some More&lt;/p&gt;

&lt;p&gt;# Realize This Basic Fact&lt;/p&gt;

&lt;p&gt;I’ve now been working in software development since ‘87 and it took me years and years to learn this basic fact:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any software engineer increases their skills in direct proportion to the &lt;strong&gt;number&lt;/strong&gt; of different codebases that they work on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem here is that when you’re an employee the number of different codebases you’re generally exposed to is, well, &lt;strong&gt;one&lt;/strong&gt;.  The single best thing I ever did for my engineering skills was to move to being a freelancer.  I can cite which experience, since 2010, the start of my freelancing, taught me what:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AppData - Large scale data &lt;em&gt;everything&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;HowAboutWe - ActiveRecord optimization&lt;/li&gt;
  &lt;li&gt;StreamSend - Alternative ActiveRecord sharding architecures for decreasing hosting costs&lt;/li&gt;
  &lt;li&gt;LiveText - How to take a code base without any tests and grandfather them in without breaking things&lt;/li&gt;
  &lt;li&gt;FI Navigator - Devops&lt;/li&gt;
  &lt;li&gt;Interana - SAML&lt;/li&gt;
  &lt;li&gt;SigStr - MongoDB i.e. the world is not entirely MySQL&lt;/li&gt;
  &lt;li&gt;AddApp - Primary market research and ideation&lt;/li&gt;
  &lt;li&gt;Inside Network - How to write a billing system end to end that scales to millions of dollars and operates with zero downtime over a multiyear period&lt;/li&gt;
  &lt;li&gt;MDDX - Complex mathemetical workflows in Ruby&lt;/li&gt;
  &lt;li&gt;LinkedIn - Low level optimizations for an intensive Ruby workload&lt;/li&gt;
  &lt;li&gt;Trazzler - Geopositioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Had I been stuck in 1 or even maybe 3 different jobs since 2010, I’m absolutely certain that I would never have picked up all these things.&lt;/p&gt;

&lt;p&gt;# Learning is Multi-Medium These Days&lt;/p&gt;

&lt;p&gt;You Tube
 Podcasts
 Udemy Courses&lt;/p&gt;

&lt;p&gt;# Apply It For Yourself&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 08:45:19 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/software_engineering/2017/02/23/leveling-up-as-a-developer.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_engineering/2017/02/23/leveling-up-as-a-developer.html</guid>
        
        <category>software_engineering</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>Rails Tutorial - Setting Up Sphinx Search with Rails and Thinking Sphinx</title>
        <description>&lt;p&gt;Sphinx Search is an open source search product that powers CraigsList as well as lots of other things on the Internet.  Unfortunatey Sphinx Search has more than a bit of a reputation of being finicky to configure and get working.  Given that it is both Linux and Open Source, this likely isn’t suprising.  The rest of this short tutorial covers how to get Sphinx Search working with Ruby on Rails using the Thinking Sphinx gem in a relatively standard configuration such as this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;database server&lt;/li&gt;
  &lt;li&gt;indexing / search server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first problem you’re going to hit with Sphinx Search is absolutely atrocious documentation.  This is true both of Sphinx Search itself and the Thinking Sphinx ruby gem (both of these criticisms, as with all such things are IMHO).&lt;/p&gt;

&lt;p&gt;Elastic File System&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Feb 2017 16:03:39 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/02/22/rails-tutorial-setting-up-sphinx-search-with-rails-and-thinking-sphinx.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/02/22/rails-tutorial-setting-up-sphinx-search-with-rails-and-thinking-sphinx.html</guid>
        
        <category>rails</category>
        
        <category>sphinx</category>
        
        <category>sphinx_search</category>
        
        <category>thinking_sphinx</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Understanding The Culture of Software Developers and How It Affects Management</title>
        <description>&lt;p&gt;russian - good at math but dour
british good at fundamentals 
indian - follow the rules&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Feb 2017 08:38:32 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/22/understanding-the-culture-of-software-developers-and-how-it-affects-management.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/22/understanding-the-culture-of-software-developers-and-how-it-affects-management.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux Tip of the Day - Using a for loop in bash</title>
        <description>&lt;p&gt;https://www.cyberciti.biz/faq/bash-for-loop/&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Welcome &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; times&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3 4 5
&lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Welcome &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; times&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 04:11:53 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/21/linux-tip-of-the-day-using-a-for-loop-in-bash.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/21/linux-tip-of-the-day-using-a-for-loop-in-bash.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails Humor The Sound of Crickets when rails g Is Used</title>
        <description>&lt;p&gt;So I’m starting work on a new project that promises to be interesting.  This is pure green field development – one of my very, very favorite things.  I did a skeleton application generation like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exploder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then I did the normal repository initialization dance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
git add .
git commit -m &quot;First commit&quot;
git remote add origin git@github.com:fuzzygroup/exploder.git
git push -u origin/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;No surprises so far.  Time for the first model:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails g model TextCommon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And I got … nothing. Hm… Here’s app/models:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l app/models/
total 0
drwxr-xr-x@ 3 sjohnson  staff   102B Feb 20 08:32 concerns/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;blink&lt;/em&gt;  Oh right – skip-active-record.  This is going to be purely an API and one that processes a lot of text.  But, in an amazing lack of foresight, apparently there’s no such thing as a model generator when you don’t have ActiveRecord installed.  Sheesh.&lt;/p&gt;

&lt;p&gt;I’ll say this much though – it did make me laugh out loud when I really, really needed it.  Off to write a poro (plain old ruby objects) model generator so test files get properly set up and such…&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/02/20/rails-humor-the-sound-of-crickets-when-rails-g-is-used.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/02/20/rails-humor-the-sound-of-crickets-when-rails-g-is-used.html</guid>
        
        <category>rails</category>
        
        <category>humor</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Recording Usable Audio for Screencasting - Tips from a Master</title>
        <description>&lt;p&gt;btw, random recording tips of the day: 1) disable all popup notficications / sounds , 2) cell phone in airplane mode , 3) close as much as you can on your machine to ensure you get a clean audio stream (nothing worse than getting a bunch of random hiccups and pops due to your system being overloaded at points)&lt;/p&gt;

&lt;p&gt;what you got yesterday was around 3 weeks of hardcore audio research and testing in 5 minutesx`&lt;/p&gt;

&lt;p&gt;there’s a lot of other reasons too, but they tend to produce other artifacts like pops and clicks
and if you thought debugging code was hard, debugging this shit is really difficult
i downloaded some tools to diagnosis these things on my computer
having one of your devices create a spike of usb usage for a few milliseconds at the wrong time could completely ruin your audio source at that moment&lt;/p&gt;

&lt;p&gt;yeah maybe
i once talked to a low level audio guy, the type of guy who writes audio drivers
and he said random noises like that are almost always due to random interference – either at the cable level or wireless freqs&lt;/p&gt;

&lt;p&gt;his could be line noise on the usb cable itself, or an artifact related to wireless interference
i’ve seen it happen on my end with cell phones
when recording for real, keep your phone in a different room
if you blog about this, definitely take a 10 second sample from the worst “before” to the next iteration (1-2 millimeters of more gain)’s “after” 10s&lt;/p&gt;

&lt;p&gt;utting the drives in a trunk?
nope, there’s no more room noise at all now
it’s dead silent except for your voice
but it’s worth raising the gain knob up a millimeter or 2, because your levels are just a tiny bit below where they need to be
2:49 to 2:51 has a weird inserted high pitch frequency
it happens again at 2:56 for half a second&lt;/p&gt;

&lt;p&gt;ok, i listened to various points of the view
*video
you have a lot of room noise in the audio
Ok. I bet that’s my hard drive array
I have a trunk I could seal that in
i feel like that blind guy on the movie Contact
just listening carefully
i can’t make out what it is, but it’s really loud – i don’t think udemy would even accept the video in its current form
but the fix is pretty easy with noise cancellation tactics
both pre-recording and post-editing
Ok. Will work on and share other videos w you
Thx
How to Remove Background Noise on Screenflow
How to Remove Background Noise on Screenflow
https://www.youtube.com/watch?v=pfvBmzxldnc
might want to play with that
Thx. I can’t wait for ssd s to hit the cheap terabyte leve
Level
yours does sound like a combination of fans and loud HDs
i just set up a sample for you
of my own recording, so you can test your headphones
https://drive.google.com/open?id=0BzL8S6Xe9kCWUWhlbElleWgtaTQ
The bulk of the noise is the MacBook fan.  Killed firefox and almost every other process and will record a short clip to send you later and see if the background noise is still present.  I also added a towel under the mic.
I think part of the problem is I literally don’t hear it myself.  Probably an issue with low frequencies I’ve heard so long that they just don’t register
All the audio options are actually grayed out in screenflow so
Got it
if you can’t hear a massive difference in my audio you may need to change headphones
there’s a very apparent “hsssssssssssssssss” sound in the background when the filter is turned off
And actually you got the version with the internal mic.  I’m sending you a shorter one with the yeti mic and the noise reduction
it doesn’t sound like a computer fan because the mic doesn’t pick up distant sounds as they are exact, but there’s definite audio distortion
(no towel tho)
oh
the towel is to absorb your key presses?
because i did notice they were loud, but that’s also with the internal mic
The towel is under the mic but I can put one under the notebook
Sent
downloading it now
this is worse imo
the underlying quality of your voice is better, but there’s much more room noise
those popping sounds at 4:31ish are deafening too
i feel like a beaten dog when listening to this video, anticipating a whip on my back at any moment
Ok. Next step is to put the hard drives and plex box into a trunk
terrified of hearing those pops haha
the gain on your mic must be way up
Lol. Won’t give you anything until that’s done. Not sure about 4:31 but will figure it out
My kid last used it so no clue
ok, you need to adjust your yeti and then never touch it again
here’s what you do
on the back of your mic, there’s 2 knobs
the bottom one adjusts the recording pattern of the mic
since you’re effectively podcasting, you want to use the third icon, the one that looks like an upside down heart
that’s the cardoid pattern, it’s aimed for recording 1 voice in a controlled environment
the top knob is the gain, and i’m guessing yours is set way high
try setting the gain to about 10% (no joke, mine is set to this)
100% thanks to him
and it was set to the round setting not cardoid
changes made; cleaning garage and installing more storage; will podcast again later once I isolate the noisy box
Thx so much
round setting is the worst possible setting for  us
that’s omnidirectional, it’ll pick up everything in your room at every angle
Lol
Alas
cardoid just enables the mic pickups for directly in front of the mic
your recording has a subtle reverb and almost sounds like you’re in a fish bowl
but that’s 100% due to omnidirectional
when you set it to cardoid, it will tighten up your voice a lot and remove a lot of the “wishy washy” reverb
lowering the gain will really help to remove the keyboard thunder effect, but also it will drastically cut your volume out
Got it
right now your volume is clipping all over the place
i couldn’t even listen to it with my audio player’s volume past 30% or i would have gone deaf
your steps are: 1. set it to cardoid, 2. set the gain to maybe 5-10% , 3. record without making any physical changes, 4. send 1-2min sample to me
1 - done.  2 - done.  3 - recorded 1st 6 minutes of a screencast for them. This will force me to learn to edit with the timeline so bigger than you wanted but a start.
Sent
checking
night and day difference
you can up the gain ever so slightly if you wanted, we’re talking 2-3% here, a millimeter more
if you went from a ton of room noise and in an echo chamber with a lot of distortion to a very reasonable recording, where this will pass udemy’s tests for sure
Ok. Am I getting to udemy quality yet ?
*you went from
thx
your key presses are a bit loud, but i would say the mic settings are good at this point
Worth putting the drives in a trunk?`&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 13:01:10 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/19/recording-usable-audio-for-screencasting-tips-from-a-master.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/19/recording-usable-audio-for-screencasting-tips-from-a-master.html</guid>
        
        
      </item>
    
      <item>
        <title>ASCII Rules; Binary Drools - Markdown Over PowerPoint FTW</title>
        <description>&lt;p&gt;When an engineer leaves an organization there is a vital need to capture knowledge from that engineer.  In short that engineer needs to give a presentation or presentations.  And if they’ve been there a long time, say 7 years or so, capturing that amount of knowledge is damn near impossible.  Or so I would have thought.  Over the past 48 hours I have authored over 243 slides organized into 22 presentations outlining my knowledge on a project that I am transitioning out of.  Yeah – the 7 years is me.&lt;/p&gt;

&lt;p&gt;My secret weapon for this was actually MarkDown.  Here’s what I did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buy a copy of &lt;a href=&quot;http://www.decksetapp.com/&quot;&gt;DeckSet&lt;/a&gt; or use &lt;a href=&quot;https://github.com/yhatt/marp&quot;&gt;MARP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Write your slides in a limited subset of markdown where — delimits a slide and ## is a slide title&lt;/li&gt;
  &lt;li&gt;Write in your programming editor&lt;/li&gt;
  &lt;li&gt;Present with DeskSet or MARP (MARP doesn’t really have a presentation mode but it works kind of ok and is cross platform)&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;http://www.telestream.net/screenflow/overview.htm&quot;&gt;ScreenFlow&lt;/a&gt; to record your screen&lt;/li&gt;
  &lt;li&gt;Pray hard that you have a brilliant friend like &lt;a href=&quot;https://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; who knows how to set your audio options correctly so your voice doesn’t sound horrible and then thank him profusely for listening to 4 different versions of audio until it was just right while he tells you exactly what you need to adjust.  Or you could just buy his Docker courses(https://nickjanetakis.com/products/); I did and they are awesome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seriously - 265 slides in 48 hours.  There is no way I could have done that with PowerPoint.  Being able to work in my code editor and focus on pure content made all the difference.&lt;/p&gt;

&lt;p&gt;Note: I used to build corporate enterprise knowledge management systems back in the 90s and sold them to clients like the U.S. Navy, etc.  This, with about $130 of software, was a better knowledge capture solution than what we used to ship for about $250,000 / installation.  My how the world has changed.&lt;/p&gt;

&lt;p&gt;Oh and when you are working in a pure ASCII medium you can manipulate your data in bulk like this script (below) which compiled a full table of contents and did a slide count.  Yeah its not elegant but I wrote it in about 10 minutes.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;directories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;slide_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;outline_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^[0-9]/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;notes.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;markdown_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;notes.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outline_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;markdown_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^##/&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outline_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slide_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slide_ctr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;outline_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outline_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outline_entry&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Total slides: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slide_ctr&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thank you &lt;a href=&quot;http://daringfireball.net/&quot;&gt;John Gruber&lt;/a&gt; for MarkDown.  Thank you, Thank you, Thank you, Thank you!&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/software_engineering/2017/02/19/ascii-rules-binary-drools-markdown-over-powerpoint-ftw.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/software_engineering/2017/02/19/ascii-rules-binary-drools-markdown-over-powerpoint-ftw.html</guid>
        
        <category>markdown</category>
        
        <category>writing</category>
        
        <category>udemy</category>
        
        <category>deckset</category>
        
        <category>software_engineering</category>
        
        <category>knowledge_capture</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>OSX to Linux in 10 Minutes 02 - Installing Visual Studio Code</title>
        <description>&lt;p&gt;As I noted recn&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Feb 2017 03:39:54 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/osx_to_linux/2017/02/17/osx-to-linux-in-10-minutes-02-installing-visual-studio-code.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx_to_linux/2017/02/17/osx-to-linux-in-10-minutes-02-installing-visual-studio-code.html</guid>
        
        <category>osx_to_linux</category>
        
        <category>osx</category>
        
        <category>postmac</category>
        
        <category>linux</category>
        
        <category>ubuntu</category>
        
        <category>visual_studio_code</category>
        
        
        <category>osx_to_linux</category>
        
      </item>
    
  </channel>
</rss>
