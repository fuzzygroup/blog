<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 19 Apr 2018 09:16:44 -0400</pubDate>
    <lastBuildDate>Thu, 19 Apr 2018 09:16:44 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Using Elastic Search and Rails for a Compound Query with Text Strings and User ID</title>
        <description>&lt;p&gt;I’m writing this blog post, my first in quite a while, because I recently had to implement &lt;a href=&quot;https://github.com/elastic/elasticsearch-rails&quot;&gt;ElasticSearch for Rails&lt;/a&gt; for a &lt;a href=&quot;https://www.jobhound.io&quot;&gt;new application I’m building&lt;/a&gt; and I find life in the Elastic world a bit different than I had expected.  If you’re an Elastic Search veteran then you should definitely move along because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is fairly basic&lt;/li&gt;
  &lt;li&gt;I’m writing this mostly to cement this in my own brain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Curiously I found very few examples about how to do this type of compound query in Rails and that’s also part of my motivation for writing it.  The closest example I found was in a &lt;a href=&quot;https://stackoverflow.com/questions/19381199/how-to-perform-elasticsearch-query-on-records-from-only-a-certain-user-rails-ti/49900343#49900343&quot;&gt;four year old Stack Overflow post&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-problem-everyone-should-see-only-their-own-data&quot;&gt;The Problem: Everyone Should See Only Their Own Data&lt;/h1&gt;

&lt;p&gt;I have a series of ActiveRecord models that I want to be able to search using Elastic Search.  This can easily be done with this code fragment:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Job.search_user(params[:q])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Given that I was initially the only user on this code base, I didn’t even notice the issue until I thought about deployment.  At which point there was the obligatory light bulb / I’m an idiot moment.  The problem here is that this code searches everyone’s jobs, not just the jobs that &lt;strong&gt;you&lt;/strong&gt; created.  Now since every bit of data encompasses a user_id attribute, this should boil down to two problems:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting user_id into the index&lt;/li&gt;
  &lt;li&gt;Constructing a JSON query for ElasticSearch to execute&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;sidebar-but-what-about-searchkick&quot;&gt;Sidebar: But What About SearchKick&lt;/h1&gt;

&lt;p&gt;I’m sure a number of people are shouting out “Use &lt;a href=&quot;https://github.com/ankane/searchkick&quot;&gt;SearchKick&lt;/a&gt; (dummy)” but whenever I tried to use SearchKick, I got odd errors and I eventually just pulled it from Gemfile.  Given that I’m a long time believer in Ankane’s ChartKick, I’m sure it is me but I still couldn’t make use of it.&lt;/p&gt;

&lt;h1 id=&quot;step-1-getting-userid-into-the-index&quot;&gt;Step 1: Getting user_id into the Index&lt;/h1&gt;

&lt;p&gt;I’ve opted to setup each of my searchable models as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include Elasticsearch::Model
include Elasticsearch::Model::Callbacks

settings do
  mappings dynamic: false do
    indexes :company^5, type: :text, analyzer: :english
    indexes :title^5, type: :text, analyzer: :english
    indexes :why_rejected, type: :text, analyzer: :english
    indexes :location, type: :text, analyzer: :english
    indexes :name, type: :text, analyzer: :english
    indexes :domain, type: :text, analyzer: :english
    indexes :created_at, type: :date
    indexes :user_id, type: :text
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The :title^5 bumps the ranking of search results in the title or company attributes by a factor of 5.&lt;/p&gt;

&lt;h1 id=&quot;step-2-constructing-the-json-query&quot;&gt;Step 2: Constructing the JSON query&lt;/h1&gt;

&lt;p&gt;I ended up with a class method on each of my searchable objects like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.search_user(query, user)
  self.search({
    query: {
      bool: {
        must: [
        {
          multi_match: {
            query: query,
            fields: [:company, :title, :description, :name]
          }
        },
        {
          match: {
            user_id: user.id.to_s
          }
        }]
      }
    }
  })
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I can call this from my search controller like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@jobs = Job.search_user(params[:q], current_user)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and get results bound only to the logged in user – exactly what I was looking for.&lt;/p&gt;

&lt;h1 id=&quot;step-3-re-indexing-everything&quot;&gt;Step 3: Re-indexing Everything&lt;/h1&gt;

&lt;p&gt;After making changes to your settings / mappings, you need to re-index everything.  I handle this with a simple rake task like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace :search do
  # bundle exec rake search:index_all --trace
  task :index_all =&amp;gt; :environment do
    klasses = [Job, Note, CoverLetter, Task]
    klasses.each do |klass|
      klass.send(:import, :force =&amp;gt; true)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This re-indexes every model in full.  You don’t always need this but it is very convenient to have for development when you’re playing with schema changes and the like.&lt;/p&gt;

&lt;h1 id=&quot;recommended-reading&quot;&gt;Recommended Reading&lt;/h1&gt;

&lt;p&gt;I made heavy use of &lt;a href=&quot;https://iridakos.com/tutorials/2017/12/03/elasticsearch-and-rails-tutorial.html&quot;&gt;Iridakos’s excellent tutorial&lt;/a&gt; and I recommend you do too.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2018/04/19/using-elastic-search-and-rails-for-a-compound-query-with-text-strings-and-user-id.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2018/04/19/using-elastic-search-and-rails-for-a-compound-query-with-text-strings-and-user-id.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>elastic_search</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Converting from FactoryGirl to FactoryBot</title>
        <description>&lt;p&gt;This blog post talks about the renaming of FactoryGirl to FactoryBoy  and the necessary refactoring that you have to do to a current Rails app to support it.  The official guide to converting your Rails from &lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/4-9-0-stable/UPGRADE_FROM_FACTORY_GIRL.md&quot;&gt;FactoryGirl to FactoryBot&lt;/a&gt; is here.  Their solution is a search and replace approach and while that works, I wanted to go thru this step by step.&lt;/p&gt;

&lt;h2 id=&quot;step-0-update-your-gemfile&quot;&gt;Step 0: Update Your Gemfile&lt;/h2&gt;

&lt;p&gt;You need to change your Gemfile from FactoryGirl to FactoryBot:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &quot;factory_bot_rails&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-1-specsupportfactorygirlrb&quot;&gt;Step 1: spec/support/factory_girl.rb&lt;/h2&gt;

&lt;p&gt;This file needs to be renamed from spec/support/factory_girl.rb to spec/support/factory_bot.rb and then the contents changed to reflect it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-2-specrailshelperrb&quot;&gt;Step 2: spec/rails_helper.rb&lt;/h2&gt;

&lt;p&gt;Depending on your RSpec configuration you may not need to adjust this file.  In my case I was using FactoryGirl to create an @user variable so I had to adjust this as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@user = FactoryBot.create(:user, options)    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-3-specfactoriesrb&quot;&gt;Step 3: spec/factories/*.rb&lt;/h2&gt;

&lt;p&gt;Each of your factories needs to be rewritten to call FactoryBot not FactoryGirl so you’ll have a structure something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FactoryBot.define do
  factory :user do
    email { Faker::Internet.email }
    username Faker::Name.first_name.downcase
    password &quot;Sample:1&quot;
    password_confirmation &quot;Sample:1&quot;
    first_name Faker::Name.first_name
    last_name Faker::Name.last_name
    active true
    confirmed true
  end
end    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-4-your-actual-spec-files&quot;&gt;Step 4: Your Actual Spec Files&lt;/h2&gt;

&lt;p&gt;In each of your spec files, you’ll need to change calls from FactoryGirl.create to FactoryBot.create like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@job = FactoryBot.create(:job, :user_id =&amp;gt; User.first.id)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-5-also-check-specspechelperrb&quot;&gt;Step 5: Also Check spec/spec_helper.rb&lt;/h2&gt;

&lt;p&gt;You should also check spec/spec_helper.rb as this is a common place where you may have located some Factory* type of stuff.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall this was a simpler conversion than I had expected.  Admittedly this was done in a relatively small &lt;a href=&quot;https://www.jobhound.io&quot;&gt;Rails MVP&lt;/a&gt; but it really was pretty painless.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2018/04/19/converting-from-factorygirl-to-factorybot.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2018/04/19/converting-from-factorygirl-to-factorybot.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>testing</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Enabling Github Security Alerts on Your Private Repositories</title>
        <description>&lt;p&gt;Github recently announced that they would be providing &lt;a href=&quot;https://github.com/blog/2470-introducing-security-alerts-on-github&quot;&gt;security alerts for github repositories&lt;/a&gt;.  These alerts let you know when a dependency that you’re relying on has a critical vulnerability.  Given the importance of security, this is an excellent idea.  Thank you Github!  These alerts are turned on automatically for public repositories but they require you to opt in for your private repositories.  And while this isn’t hard, Github doesn’t make it clear exactly how to set this option for your private repositories.  I just spent an hour or so turning this on for all my private repositories and here’s the step by step approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://www.github.com&quot;&gt;github&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Login if you’re not logged in.&lt;/li&gt;
  &lt;li&gt;Navigate to your dashboard.&lt;/li&gt;
  &lt;li&gt;Go to your repositories list by clicking on the repositories link in the header.&lt;/li&gt;
  &lt;li&gt;Select a private repository by clicking on it.&lt;/li&gt;
  &lt;li&gt;Select the Settings link.&lt;/li&gt;
  &lt;li&gt;Scroll down to &lt;strong&gt;Data services&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Turn on “Allow Github to perform read-only analysis of this repository”.&lt;/li&gt;
  &lt;li&gt;Turn on Dependency graph.&lt;/li&gt;
  &lt;li&gt;Turn on Vulnerability alerts.  You should note that Github saves the status of each of these via ajax as you check them off so there’s no Save button you need to click.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you need to navigate back to repositories and turn this on for any other private repositories that you have. Given the number of private Rails apps I have repositories for, I’m really, really glad I turned this on.&lt;/p&gt;

&lt;p&gt;Note: Its unclear exactly how long it takes to build the Dependency graph and for the Vulnerability alert scan to be completed.  I don’t think it is immediate so you might want to keep an eye on the home page for your repos over the next few days.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Nov 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/github/2017/11/17/enabling-github-security-alerts-on-your-private-repositories.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/github/2017/11/17/enabling-github-security-alerts-on-your-private-repositories.html</guid>
        
        <category>github</category>
        
        <category>git</category>
        
        <category>security</category>
        
        <category>rails</category>
        
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Forensic Computing 2 - Kernel Panics and Kexts</title>
        <description>&lt;p&gt;As I’ve noted in &lt;a href=&quot;http://fuzzyblog.io/blog/text/2017/10/08/forensic-computing-1-finding-textmate-untitled-documents.html&quot;&gt;other places&lt;/a&gt;, my Mac crashes a lot.  For some time now I’ve just sort of accepted this as a consequence of how I do things.  I’m a software developer and I tend to push the limits of everything.  Part of the reason that I accept it is that my computing usage is more than a bit non standard and I suspect that I’m running up against nothing more than resource limits.  Just as an example, at the start of my day, my terminal count looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps auwwx | grep bash | wc -l
      50
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s at the start of my computing day (I open a lot of terminals and generally leave them running).  Just as a side note, my desktop Hackintosh, with double the RAM, also running OSX is pretty much rock solid so I tend to view this as a resource issue.  But what if it is not?  What if this is a solvable software issue?&lt;/p&gt;

&lt;h1 id=&quot;analyzing-kernel-panics&quot;&gt;Analyzing Kernel Panics&lt;/h1&gt;

&lt;p&gt;In order to figure this out, I took a number of my kernel panics and put them online as gists:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/fuzzygroup/ab3a4c81edb3fa80910e25fc12e49993&quot;&gt;October 8th&lt;/a&gt;.  Yes this one happened while I was writing this all down.  Damn it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/fuzzygroup/97bc867094294a2b724f5860d04d09ab&quot;&gt;October 7th&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/fuzzygroup/30ee32761f72d55d1fe8b870dbdc04af&quot;&gt;September 30th&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/fuzzygroup/137e695b9ed5cc2d2ebcda8c983616a4&quot;&gt;August 27&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[September 11](https://gist.github.com/fuzzygroup/5e41b8ccdcdf6c8bf95bbe002aa158&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I’ve been reading these crash by crash, I always attributed it to randomness since there was no consistent application that seemed to cause the crash (WindowServer was the most common but by no means the sole thing).  But there is a lot of information in these reports and the application when it crashed perhaps isn’t the only thing I should be caring about.&lt;/p&gt;

&lt;p&gt;I noticed one interesting thing in going thru the above kernel panics (oh and by the way, you can find many of these logs in /Library/Logs/DiagnosticReports/).  They are all named something like Kernel_2017-09-16-132730_FuzzygroupMacbookPro2016.panic.  &lt;a href=&quot;https://support.apple.com/en-us/TS3742&quot;&gt;Thanks Apple&lt;/a&gt;.  What I noticed was that the kext (Kernel Extension) that always is last loaded is com.github.kbfuse.filesystems.kbfuse which belongs to KeyBase.  This is a part of &lt;a href=&quot;https://keybase.io/&quot;&gt;Keybase&lt;/a&gt; which is a very cool crypto app.  This extension is apparently part of the new &lt;a href=&quot;https://keybase.io/docs/kbfs&quot;&gt;Keybase Filesystem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A kext is a kernel extension and that basically means “code that extends the lowest level of the operating system (the kernel)”.  Fuse is a toolkit that lets you write filesystems in user space and what I do remember about the Fuse project is that I’ve seen a lot of flakiness / crashes over the years from Fuse related stuff.&lt;/p&gt;

&lt;p&gt;A quick google for the term &lt;a href=&quot;https://www.google.com/search?tbs=li:1&amp;amp;q=osx+fuse+kernel+panic&quot;&gt;osx kernel panic fuse&lt;/a&gt; gave me 49,100 results so I’m not the only one thinking this.  Googling instead for (com.github.kbfuse.filesystems.kbfuse)[https://www.google.com/search?tbs=li:1&amp;amp;q=com.github.kbfuse.filesystems.kbfuse] took me to the github page for the &lt;a href=&quot;https://github.com/keybase/client/tree/master/osx/Fuse&quot;&gt;keybase fuse project&lt;/a&gt; where I found the following uninstallation directions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Check for any mounts (if there are you need to umount)
mount -t kbfuse

sudo kextunload -b com.github.kbfuse.filesystems.kbfuse
sudo rm -rf /Library/Filesystems/kbfuse.fs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;what-next&quot;&gt;What Next?&lt;/h1&gt;

&lt;p&gt;I’ve done these steps and now I need to just wait and see if my system stability improves.  I also deleted the Keybase application entirely because its unclear to me what happens to Keybase if I delete a kext that it is using.&lt;/p&gt;

&lt;p&gt;In closing, I’d like to add that I am not the only person who is reporting an issue with this kext and kernel panics.  Here’s an &lt;a href=&quot;https://github.com/keybase/client/issues/5190&quot;&gt;open Github thread&lt;/a&gt; on it.&lt;/p&gt;

&lt;h1 id=&quot;update&quot;&gt;Update&lt;/h1&gt;

&lt;p&gt;As of 24 hours later, my Mac has crashed two more times so the kext apparently had nothing to do with it, alas.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2017/10/08/forensic-computing-2-kernel-panics-and-kexts.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2017/10/08/forensic-computing-2-kernel-panics-and-kexts.html</guid>
        
        <category>osx</category>
        
        <category>kernel_panics</category>
        
        <category>kexts</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Forensic Computing 1 - Finding TextMate Untitled Documents</title>
        <description>&lt;p&gt;So my Mac crashed again last night.  This is now roughly a two to three times per week occurrence.  Once upon a time I would have sworn like a sailor about this but I now, sadly, accept it.  If you’re curious about OSX crashes and kernel panics, I dig into &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2017/10/08/forensic-computing-2-kernel-panics-and-kexts.html&quot;&gt;them here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://macromates.com/&quot;&gt;TextMate&lt;/a&gt; is the programming editor and writing tool I use and normally after a crash, it automatically opens all the documents I previously had open.  And when I say “all”, I mean everything, even the things that weren’t ever formally saved i.e. “untitled 107”, “untitled 132”, etc.  Because TextMate doesn’t force met to assign a file, I’m able to treat TextMate windows as virtual pieces of paper, virtual post-its if you will and just drop stuff into them.  I only bother to save a file when I actually need to make it long term persistent.  And an awful lot of the time, that never happens.  Sometimes these the contents of these windows flows into a &lt;a href=&quot;https://gist.github.com/&quot;&gt;gist&lt;/a&gt; which then gets emailed to someone.&lt;/p&gt;

&lt;p&gt;Now this bizarre “don’t bother to save the file” approach is well and good until it &lt;strong&gt;breaks&lt;/strong&gt;.  Last night, just before my machine crashed, I know for a fact that I was in &lt;strong&gt;untitled 30&lt;/strong&gt;.  But when I restarted my machine, I noticed that untitled 30 wasn’t in my Window list:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/textmate_window_list.png&quot; alt=&quot;/blog/textmate_window_list.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This literally sent a chill down my spine – if untitled 30 isn’t present then:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where did it go?&lt;/li&gt;
  &lt;li&gt;How often has this happened?&lt;/li&gt;
  &lt;li&gt;What other untitled xyz files have I unknowingly lost?&lt;/li&gt;
  &lt;li&gt;Where on the blankety, blank computer is untitled 30 stored so I can bloody well find it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Questions 1 and 2 simply cannot be answered but questions 3 and 4 are actually answerable.  If I can simply find out where TextMate stores its untitled files then I can browse the directory and find them.  I should also then be able to find untitled 30.&lt;/p&gt;

&lt;h1 id=&quot;step-1-google&quot;&gt;Step 1: Google&lt;/h1&gt;

&lt;p&gt;Whenever you are trying to understand something like this Google is generally your first place to look.  Unfortunately these googles didn’t really yield anything:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/search?tbs=li:1&amp;amp;q=where+does+textmate+store+untitled+files&quot;&gt;where does textmate store untitled files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/search?tbs=li:1&amp;amp;q=where+does+textmate+store+untitled+files&quot;&gt;textmate untitled&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-2-spotlight&quot;&gt;Step 2: Spotlight&lt;/h1&gt;

&lt;p&gt;OSX’s Spotlight, the system level search engine was next.  This too yielded nothing, squat, &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=bupkus&quot;&gt;bupkus&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-3-alfred&quot;&gt;Step 3: Alfred&lt;/h1&gt;

&lt;p&gt;The filename search engine in &lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; which you trigger with your Alfred hotkey plus the keyword open and then what you want to search yielded nothing.&lt;/p&gt;

&lt;h1 id=&quot;step-4-mdfind&quot;&gt;Step 4: mdfind&lt;/h1&gt;

&lt;p&gt;Another way to use Spotlight is to trigger the mdfind utility from the command line and look for the filename untitled 30 directly by typing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mdfind “untitled”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The output of mdfind is a list of filenames.  But, unfortunately, mdfind isn’t, by default, for filenames which means that it finds the word untitled in the &lt;em&gt;body of documents&lt;/em&gt; where as we want it in the filename itself. Just to be sure we can feed the mdfind’s output thru grep to winnow it down:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;mdfind untitled&lt;/td&gt;
        &lt;td&gt;grep untitled&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a -name option to mdfind but that also returned nothing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mdfind -name untitled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Cool as Hell Sidenote&lt;/strong&gt;: In looking up &lt;a href=&quot;http://osxdaily.com/2017/08/24/find-all-screenshots-mac/&quot;&gt;details on mdfind&lt;/a&gt;, I found this very, very cool command line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mdfind kMDItemIsScreenCapture:1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What that does is find every screenshot you’ve taken on your Mac.  And I don’t mean files named “Screen Shot xyz” but any screenshot you’ve ever taken, even ones you’ve moved to other directories, renamed, etc.  Wow.&lt;/p&gt;

&lt;h1 id=&quot;step-5-look-elsewhere&quot;&gt;Step 5: Look Elsewhere&lt;/h1&gt;

&lt;p&gt;Now the absence of results in Steps 2, 3 and 4 gave me a strong indication that what I was looking for wasn’t in an indexed location and that gave me a clue.  Spotlight  and mdfind are both generally looking in the files for the user but NOT in the application level files.  OSX has a key directory structure for users that generally isn’t indexed:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/Users/sjohnson/Library/Application Support/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I know for a fact there is a TextMate directory below it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/Users/sjohnson/Library/Application Support/TextMate/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I didn’t know was what was below the TextMate directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l &quot;/Users/sjohnson/Library/Application Support/TextMate/&quot;
total 6488
drwxr-xr-x   10 sjohnson  staff   340B Jan  1  2017 Bundles/
-rw-r--r--    1 sjohnson  staff   732K Oct  8 05:40 ClipboardHistory.db
-rw-r--r--    1 sjohnson  staff    32K Oct  8 05:40 ClipboardHistory.db-shm
-rw-r--r--    1 sjohnson  staff   1.7M Oct  8 07:12 ClipboardHistory.db-wal
-rw-r--r--    1 sjohnson  staff   1.1K Sep 30 08:46 Global.tmProperties
drwxr-xr-x    5 sjohnson  staff   170B Oct  7 06:31 Managed/
-rw-r--r--    1 sjohnson  staff   688K Oct  8 05:51 RecentProjects.db
drwxr-xr-x    4 sjohnson  staff   136B Nov 20  2016 Ruby/
drwxr-xr-x  156 sjohnson  staff   5.2K Oct  8 07:12 Session/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, yep, &lt;strong&gt;bingo&lt;/strong&gt;, &lt;em&gt;Session/&lt;/em&gt;.  A quick look there showed me all my untitled documents including:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /Users/sjohnson/Library/Application\ Support/TextMate/Session/untitled\ 30*

-rw-r--r--@ 1 sjohnson  staff   5.3K Sep 13 04:23 /Users/sjohnson/Library/Application Support/TextMate/Session/untitled 30.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now that I have a path I can just type open “/Users/sjohnson/Library/Application\ Support/TextMate/Session” and get a Finder window of all my untitled documents like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/text_mate_session.png&quot; alt=&quot;text_mate_session.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/text/2017/10/08/forensic-computing-1-finding-textmate-untitled-documents.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/text/2017/10/08/forensic-computing-1-finding-textmate-untitled-documents.html</guid>
        
        <category>textmate</category>
        
        <category>computer_forensics</category>
        
        
        <category>text</category>
        
      </item>
    
      <item>
        <title>The Game Nanny Story Or When Life Gives You Lemons</title>
        <description>&lt;p&gt;I have built a lot of products in my career:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;search engines&lt;/li&gt;
  &lt;li&gt;blogging tools&lt;/li&gt;
  &lt;li&gt;podcasting tools&lt;/li&gt;
  &lt;li&gt;online learning systems&lt;/li&gt;
  &lt;li&gt;hypertext authoring tools&lt;/li&gt;
  &lt;li&gt;email marketing aka spamming tools&lt;/li&gt;
  &lt;li&gt;Even a web UI to calculate radiation doses for prostate cancer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the one thing that I’ve stayed resolutely way from is &lt;em&gt;gaming&lt;/em&gt;.  And, despite that, three days ago, I launched a product named &lt;strong&gt;Game Nanny&lt;/strong&gt; so what happened?&lt;/p&gt;

&lt;p&gt;The short answer is &lt;strong&gt;life happened&lt;/strong&gt; or as I refer to it with my wife, &lt;em&gt;When Life Gives You Lemons&lt;/em&gt;.  Here’s a snippet from the home page that tells the tale:&lt;/p&gt;

&lt;div style=&quot;margin-left: 50px; margin-right: 50px; background-color: #f6f8fa; padding: 16px;overflow: auto;font-size: 85%;line-height: 1.45;background-color: #f6f8fa;border-radius: 3px;&quot;&gt; 
&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;My name is Scott and I'm a parent, I bet a lot like you. I recently discovered that one of my children has been using my credit card to purchase things in the XBox store -- a lot of things. That $347.82 bill I mentioned above, well, that's true -- and it was just the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;I'm also a software developer and I'll admit that while I realized immediately that I had a parenting problem, this was also an opportunity -- and the very next morning I started building Game Nanny.&lt;/p&gt;

&lt;p&gt;As parents, even if we don't like video games, we should admit that our kids love them -- but they can be addictive and lead to crazy bad behavior. I'm not the first parent to be surprised by his kid's gaming spending and I won't be the last.&lt;/p&gt;

&lt;p&gt;Use Game Nanny to take control of your kid's XBox bad habits. Don't be surprised again!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And that’s the honest to god truth as how Game Nanny came into being.  To summarize:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I saw my kid had made a mistake (and, yes, a big one)&lt;/li&gt;
  &lt;li&gt;I realized that this wasn’t just a parenting problem, that it was an opportunity&lt;/li&gt;
  &lt;li&gt;That realization took about all of a minute.&lt;/li&gt;
  &lt;li&gt;After that first minute, I had a pretty good idea of what the product was&lt;/li&gt;
  &lt;li&gt;Two weeks later I had a functional product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bottom line for anyone that either perceives themself to be an entrepreneur or wants to be is that when life gives you a problem, you can look at as just that.  Or you can look at your problem as “Is there an opportunity here?” and then, if you think the answer is “Yes” then build a business around it.&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/startup/2017/10/06/the-game-nanny-story-or-when-life-gives-you-lemons.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/startup/2017/10/06/the-game-nanny-story-or-when-life-gives-you-lemons.html</guid>
        
        <category>game_nanny</category>
        
        <category>startup</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Self Hosting a Jekyll Site</title>
        <description>&lt;p&gt;I’ve been a blogger since 2002 and over the years there have been a lot of different blogging tools: Radio, WordPress, Serendipity, Movable Type, TypePad, b2, etc.  After a long, on and off hiatus, I made the decision in 2016 to get serious about blogging again and at that point I committed to &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.  The reason was really the simplicity of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Having all my blog posts in a filesystem, not a database, was a transformative and wonderful experience&lt;/li&gt;
  &lt;li&gt;Being able to use my coding editor to jot down a simple blog post was a big, big deal&lt;/li&gt;
  &lt;li&gt;Having all my blog posts run thru github, a tool I use not just daily but generally hourly&lt;/li&gt;
  &lt;li&gt;The ease of use of Github Pages which magically hosts a blog for you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, for the past almost 2 years, this has been a great decision.  My blog, &lt;a href=&quot;http://www.fuzzyblog.io/blog/&quot;&gt;FuzzyBlog&lt;/a&gt;, has been an essential tool for writing and just personal documentation.  Basically whenever I have to learn something, I try and write it down and that’s a model which works great for me.&lt;/p&gt;

&lt;p&gt;I recently needed, however, to make a product specific blog, &lt;a href=&quot;https://blog.gamenanny.io&quot;&gt;blog.gamenanny.io&lt;/a&gt;, for my new &lt;a href=&quot;https://www.gamenanny.io/&quot;&gt;Game Nanny&lt;/a&gt; product and I discovered that I just couldn’t use Github Pages for this at all.  Github Pages creates a single blog tied to your github username and, well, I only have one github username.  This meant that I had to get into self hosting my Jekyll blog or changing from Jekyll to something else.  I chose the self hosting route and there in lies a how to tale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Like most things on the Internet, there must be a way around this limitation but I haven’t found it yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: My friend &lt;a href=&quot;https://www.twitter.com/stevegrossi&quot;&gt;Steve Grossi&lt;/a&gt; told me that you can get around this apparent &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/&quot;&gt;Github limitation&lt;/a&gt;. I’m not entirely certain that I understand it but I’m glad to have it as an option. Thx Steve!&lt;/p&gt;

&lt;h1 id=&quot;understanding-jekylls-output&quot;&gt;Understanding Jekyll’s Output&lt;/h1&gt;

&lt;p&gt;The key thing to understand about Jekyll is that, at its heart, it is a static site generator.  What this means is that when you type:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll serve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;it creates a set of static files that represent your site based on the markdown documents in _posts and your _config.yml configuration file.  Self hosting a Jekyll site basically amounts to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creating a jekyll site.&lt;/li&gt;
  &lt;li&gt;Creating content in that Jekyll site.&lt;/li&gt;
  &lt;li&gt;Running jekyll build or jekyll serve to create the static site files.&lt;/li&gt;
  &lt;li&gt;Getting the files in _site to a public server (rsync).&lt;/li&gt;
  &lt;li&gt;Having a web server on a public box that can serve the files generated by Jekyll.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rest of this blog post walks you through all these steps.  I’m a big, big believer in AWS so that’s what I used but any public web host will work.&lt;/p&gt;

&lt;h1 id=&quot;creating-a-jekyll-site&quot;&gt;Creating a Jekyll Site&lt;/h1&gt;

&lt;p&gt;This can be done with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll new site_name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll new game_nanny_blog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m not going to cover Jekyll details like theme configuration much although I have a set of references at the end.  Jekyll theme configuration is to me, well, a &lt;strong&gt;black art&lt;/strong&gt; that best resembles a &lt;em&gt;pagan ritual&lt;/em&gt; (do it at in the dark of night, naked, chanting and so on).  I just use the default minima theme and generally hope I can get away with it.&lt;/p&gt;

&lt;p&gt;Basic configuration can be done by modifying _config.yml in your Jekyll root directory.  Advanced configuration, well, it can be tedious.&lt;/p&gt;

&lt;h1 id=&quot;configuring-your-server&quot;&gt;Configuring Your Server&lt;/h1&gt;

&lt;p&gt;All you need to self host a jekyll blog is a dead simple web server like Nginx.  Although I’ve mostly been doing Docker for executable software for sometime now, it just felt simpler to go old school on this.&lt;/p&gt;

&lt;p&gt;Install nginx with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install nginx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may need to edit the main configuration file with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo vi /etc/nginx/nginx.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found the defaults are pretty basic but your details may vary.  And you’d also need to create a config file specifically for your main blog with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo vi /etc/nginx/conf.d/blog.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s what I have in my blog.conf file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 3301;
  server_name blog.gamenanny.io;
  root /home/ubuntu/gamenannyblog/_site;

  expires 30s;
  add_header Cache-Control public;
  add_header ETag &quot;&quot;;

  error_page 404 /404.html;
  error_page 500 /500.html;

  location  ~ ^/assets/ {
    expires max;
  }

  location ~ /\. {
    return 404;
    access_log off;
    log_not_found off;
  }

  location = /favicon.ico {
    try_files /favicon.ico =204;
    access_log off;
    log_not_found off;
  }

  location / {
    try_files $uri $uri.html $uri/ =404;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The main changes that I made in blog.conf are these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen 3301;
server_name blog.gamenanny.io;
root /home/ubuntu/gamenannyblog/_site;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each of these is explained as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;listen 3301;&lt;/strong&gt; The reason for that is that I have multiple sites on this one AWS instance and my AWS Elastic Load Balancer will be responsible for translation data on port 3301 to an port 80 request on blog.gamenanny.io.  I use a standard set of port mappings on everything I build (*00 is always the main site, *01 is always the blog, *05 is always the ecommerce)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;server_name server_name blog.gamenanny.io;&lt;/strong&gt; This configures the site’s domain name.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;root /home/ubuntu/gamenannyblog/_site;&lt;/strong&gt; This sets the root directory to serve the site’s data from.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;aws-specifics&quot;&gt;AWS Specifics&lt;/h1&gt;

&lt;p&gt;I’m deploying to a basic AWS EC2 instance and here is a quick overview of what I needed to do.  Please note that these are the very broad strokes as I was quite rushed when I did it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add blog.gamenanny.io to my Route 53 domain settings.&lt;/li&gt;
  &lt;li&gt;Add a target group to the ELB for the blog.&lt;/li&gt;
  &lt;li&gt;Add a listener rule to the ELB for the blog.&lt;/li&gt;
  &lt;li&gt;Connect the listener rule to the target group.  Until you do this there will be a 503 error and that’s what always reminds me to couple the two.&lt;/li&gt;
  &lt;li&gt;Create a directory on your file system where the content can reside.  I did this with:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;mkdir /home/ubuntu/gamenannyblog/_site&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The _site corresponds to Jekyll’s _site directory where it generates all data.&lt;/p&gt;

&lt;h1 id=&quot;deployment&quot;&gt;Deployment&lt;/h1&gt;

&lt;p&gt;In order to handle deployment, I wrote a small shell script. deploy3.sh, which invokes jekyll build and then rsync’s the content to the server.  I’ve now spent almost two years using Jekyll with Github pages and my one comment about the git push to get my content live is that &lt;strong&gt;it is slow&lt;/strong&gt;.  I was absolutely shocked just how fast invoking jekyll build and then rsync was.  Here’s my deploy3.sh script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
rsync -avr --rsh&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ssh'&lt;/span&gt; --delete-after --delete-excluded _site/ ubuntu@52.14.179.50:/home/ubuntu/gamenannyblog/_site
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This level of speed is just plain awesome.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;Thank You&lt;/h1&gt;

&lt;p&gt;This is actually the first time I’ve ever successfully used Nginx; previously I was a straight up, old school Apache guy.  My buddy &lt;a href=&quot;http://www.nickjanetakis.com&quot;&gt;Nick&lt;/a&gt; did my Nginx configuration in about 2 shakes of time (read that as “really, really, really quick”).  Thanks Nick!&lt;/p&gt;

&lt;h1 id=&quot;see-also&quot;&gt;See Also&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/resources/wiki/&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll Home Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Customizing Minima&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/themes/&quot;&gt;Customizing Jekyll Themes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/deployment-methods/&quot;&gt;Jekyll Deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vitalyrepin/vrepinblog/blob/master/transfer.sh&quot;&gt;Jekyll RSync Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sgeos.github.io/jekyll/disqus/2016/02/14/adding-disqus-to-a-jekyll-blog.html&quot;&gt;Adding Disqus to Your Jekyll Blog&lt;/a&gt; Disclaimer - this was a total fail for me and I found the documentation horrid but Disqus has always failed for me so perhaps it is just me.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 06 Oct 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/jekyll/2017/10/06/self-hosting-a-jekyll-site.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/jekyll/2017/10/06/self-hosting-a-jekyll-site.html</guid>
        
        <category>jekyll</category>
        
        <category>blogging</category>
        
        <category>startup</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Using Chrome Driver with Docker, Rails and Selenium on AWS</title>
        <description>&lt;p&gt;I’ve done a lot of crawling in my professional career and I mean a &lt;strong&gt;lot&lt;/strong&gt;.  The recent trend towards JavaScript based sites, however, has wreaked havoc on my traditional approach of low level html parsing.  For a new product I’m launching, I recently had to make the switch to using &lt;a href=&quot;https://github.com/SeleniumHQ/&quot;&gt;Selenium&lt;/a&gt; for crawling.  Selenium, commonly known as a testing tool, can be used in an embedded fashion where you use code like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;browser = Selenium::WebDriver.for :chrome
browser.get &quot;https://www.google.com&quot;
html = browser.page_source
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a rough equivalent in Mechanize:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;agent = Mechanize.new
page = agent.get(&quot;https://www.google.com&quot;)
html = page.body
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although the lines of code look similar to something like &lt;a href=&quot;https://github.com/sparklemotion/mechanize&quot;&gt;Mechanize&lt;/a&gt; this is actually an entirely different approach because underneath it all is a full browser including JavaScript which lets something like a page which sends its data down in a JavaScript array and then uses JavaScript to display it actually render and return back to you parseable html.&lt;/p&gt;

&lt;h1 id=&quot;doing-this-server-side&quot;&gt;Doing this Server Side&lt;/h1&gt;

&lt;p&gt;If you’re going to use Selenium for a server side crawling process then what you actually needs is called ChromeDriver which is the embedded chrome executable that represents a browser.  One approach is to locally install ChromeDriver on each of your compute nodes but the better approach is to Dockerize everything and run ChromeDriver as a container.  Here are the steps to do just that.&lt;/p&gt;

&lt;h2 id=&quot;add-chromedriver-to-your-docker-compose-file&quot;&gt;Add ChromeDriver to Your Docker Compose File&lt;/h2&gt;

&lt;p&gt;You’ll likely need to implement both Step 1 and Step 2.&lt;/p&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1&lt;/h3&gt;

&lt;p&gt;Here’s what you’ll need for docker-compose.yml or docker-compose.production.yml:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chromedriver:
  image: 'robcherry/docker-chromedriver'
  ports: 
    - 4444:4444
  restart: on-failure
  shm_size: 1G    
  environment:
    - CHROMEDRIVER_WHITELISTED_IPS=&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-2&quot;&gt;Step 2&lt;/h3&gt;

&lt;p&gt;A docker container is dramatically lighter than a full computer and you’ll find that Chrome will start.  The specific error you are likely to hit is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Selenium::WebDriver::Error::UnknownError: unknown error: Chrome failed to start: crashed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you discover this you need to change your daemon.json file (normally located in /etc/docker/daemon.json) to have a larger shm_size like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat daemon.json
{
  &quot;default-shm-size&quot;:&quot;2g&quot;,
  &quot;storage-driver&quot;: &quot;overlay2&quot;,
  &quot;log-driver&quot;: &quot;json-file&quot;,
  &quot;log-opts&quot;: {
    &quot;max-size&quot;: &quot;10m&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yes I’m aware that I use 1G in the first example and 2g in the second.  This is how I currently have it working and I’m leaving it alone until I play with it more.  I suspect you could sync these but I don’t know that definitively.&lt;/p&gt;

&lt;h3 id=&quot;step-3&quot;&gt;Step 3&lt;/h3&gt;

&lt;p&gt;The next error you are likely to hit is one of these two, possibly both:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Net::ReadTimeout during browser launch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;UnknownError: session deleted because of page crash from tab crashed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution to each of these is how you invoke the core browser object.  Here’s what I used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;browser = Selenium::WebDriver.for :chrome, url: &quot;http://chromedriver:4444&quot;, :prefs =&amp;gt; {:password_manager_enable =&amp;gt; false, :credentials_enable_service =&amp;gt; false}, :switches =&amp;gt; [&quot;disable-infobars&quot;, &quot;no-sandbox&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;security-issues&quot;&gt;Security Issues&lt;/h1&gt;

&lt;p&gt;Here’s an interesting security note:&lt;/p&gt;

&lt;p&gt;Note: ChromeDriver restricts access to local connections by default. To allow external connections, you can pass in a custom CHROMEDRIVER_WHITELISTED_IPS environment variable. By default, this is set to 127.0.0.1, but this can by any comma separated list of IP addresses. Setting the value as empty will allow all remote connections.&lt;/p&gt;

&lt;p&gt;AWS security groups really save you on this one.  By setting CHROMEDRIVER_WHITELISTED_IPS=””, I am able to use ChromeDriver from any other container but nothing else can execute them.  An embedded browser like Selenium is akin to an open proxy so you do not want that.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/robcherry/docker-chromedriver/&quot;&gt;Docker Chrome Driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/Ruby-Bindings&quot;&gt;Ruby and Selenium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ziadoz/3e8ab7e944d02fe872c3454d17af31a5&quot;&gt;Installing Chrome Driver Locally on Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium/issues/198&quot;&gt;Net::ReadTimeout during browser launch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://intoli.com/blog/running-selenium-with-headless-chrome/&quot;&gt;Running Selenium on Headless Chrome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/run/#ipc-settings-ipc&quot;&gt;Setting Docker Shm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/elgalu/docker-selenium&quot;&gt;Docker and Selenium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zalando/zalenium#run-it&quot;&gt;Zalenium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/elgalu/docker-selenium/issues/20#issuecomment-133011186&quot;&gt;Docker and Selenium and Shm / Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;Thank You&lt;/h1&gt;

&lt;p&gt;Kudos and thanks to &lt;a href=&quot;http://www.nickjanetakis.com/&quot;&gt;Nick my Docker buddy&lt;/a&gt;.  He teaches Docker professionally and really knows his stuff.  I probably could have slogged through this but his help turned what would have been a man day into a quick one hour pairing session.  Appreciated.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Sep 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/docker/2017/09/30/using-chrome-driver-with-docker-rails-and-selenium-on-aws.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/docker/2017/09/30/using-chrome-driver-with-docker-rails-and-selenium-on-aws.html</guid>
        
        <category>docker</category>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>selenium</category>
        
        <category>aws</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Creating an HTTPS Site on AWS with a .IO Domain</title>
        <description>&lt;p&gt;I recently registered my first .io domain using an all AWS stack (Route 53, EC2, Elastic Load Balancer or ELB, Amazon Certificate Manager or ACM) and I found the process mildly odd – to the degree that I know that it will either bite me again or it will bite someone else.  Either way I thought that it would be best to fully document the process.&lt;/p&gt;

&lt;p&gt;The site I’m building has login and as such https is important for this site.  Although I could have used &lt;a href=&quot;https://nickjanetakis.com/blog/lets-encrypt-vs-cloudflare-for-https&quot;&gt;Let’s Encrypt or CloudFlare&lt;/a&gt; for the https, if you’re using https on AWS then there’s a good chance that you are using an ELB and ACM as they make SSL brilliantly simple.  In all my years of deploying SSL, it has never been as simple as using this AWS stack and I sincerely recommend it.  The oddness occurred when I had to bind the .io domain into the certificate itself.  This process requires an email authentication to the owner of the domain to ensure that no one compromised your AWS credentials.  When you are using a normal .com or .net domain and you do this, Amazon sends the email to the email address on the domain registration itself, easy peasy.  When you are using a .io account, the email is NOT sent to the email address on the domain registration but it is instead sent to all of these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;administrator@your_domain.io&lt;/li&gt;
  &lt;li&gt;hostmaster@your_domain.io&lt;/li&gt;
  &lt;li&gt;postmaster@your_domain.io&lt;/li&gt;
  &lt;li&gt;webmaster@your_domain.io&lt;/li&gt;
  &lt;li&gt;admin@your_domain.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Amazon’s credit, they do kind of disclose this in the ACM documentation &lt;a href=&quot;http://docs.aws.amazon.com/acm/latest/userguide/troubleshoot-iodomains.html&quot;&gt;here&lt;/a&gt;. Here’s the relevant passage:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ACM does, however, send validation email to the following five common system addresses where your_domain is the domain name you entered when you initially requested a certificate and .io is the top level domain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;(see above)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To receive validation mail for an .IO domain, make sure that you have one of the preceding five email accounts enabled. If you do not, you will not receive validation email and you will not be issued an ACM certificate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem here is that like a lot of us, probably most of us, I don’t have a mail server running on my .io domain so there’s nothing to receive the email (so I can respond to it).  Now I could have set up a mail server but a much, much easier approach is to use &lt;a href=&quot;http://improvmx.com/&quot;&gt;ImprovMX&lt;/a&gt; which promises “Free painless email forwarding for your domains” and it really, really delivers.  Within only a few minutes, I had my ACM mailing and I was off to the races.  With any luck, I will even launch my new site later this week.&lt;/p&gt;

&lt;p&gt;ImprovMX is strongly, strongly recommended.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;Thank You&lt;/h1&gt;

&lt;p&gt;As always, I resolved this with my favorite pairing buddy, &lt;a href=&quot;http://www.nickjanetakis.com&quot;&gt;Nick Janetakis&lt;/a&gt;.  He does Docker stuff and is very, very talented.  He is also a Let’s Encrypt expert.  Recommended.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Sep 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/09/30/creating-an-https-site-on-aws-with-a-io-domain.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/09/30/creating-an-https-site-on-aws-with-a-io-domain.html</guid>
        
        <category>aws</category>
        
        <category>io</category>
        
        <category>https</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Rails, AuthLogic, CSRF, 422 and session_store.rb</title>
        <description>&lt;p&gt;When you’re a professional developer, you come to recognize a category of problems that I refer to as “Pair Programming Required”.  These are those mysterious failures where you know damn well that something should work but &lt;em&gt;nothing&lt;/em&gt; and I repeat &lt;strong&gt;&lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt; works.  In this situation, you really want to bring another set of eyes to bear on the problem.&lt;/p&gt;

&lt;p&gt;I’m in the process of bringing a new Rails powered application online and I discovered around 3:53 am this morning that login, which works perfectly in development, completely fails in production with the wonderfully helpful error message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rails 5 ActionController::InvalidAuthenticityToken error&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I dug into it, I saw that was a CSRF error and, oddly, I was getting a 422 error message returned to me.&lt;/p&gt;

&lt;p&gt;The mystery of all this was that this wasn’t new login code – it was code that I’ve been using in another application for months and it has been flawless.&lt;/p&gt;

&lt;p&gt;Here are just a few of the things that I tried to address this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Switch from Rails 5.1.x back to 5.0.x&lt;/li&gt;
  &lt;li&gt;Investigate the prepend: true approach to protect_from_forgery (&lt;a href=&quot;http://www.stackoverflow.com/questions/38331496&quot;&gt;StackOverflow&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Rewrite most of application_controller.rb&lt;/li&gt;
  &lt;li&gt;Massively hack around in the guts of AuthLogic&lt;/li&gt;
  &lt;li&gt;Google&lt;/li&gt;
  &lt;li&gt;Stack Overflow&lt;/li&gt;
  &lt;li&gt;Run production locally&lt;/li&gt;
  &lt;li&gt;change, deploy, test, change again, Lather, Rinse Repeat N times where N is &amp;gt; 10 and less than 50&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I exhausted all these possibilities, I reached out to a &lt;a href=&quot;http://www.nickjanetakis.com/&quot;&gt;friend&lt;/a&gt; and he and I paired on it.  And that’s where the power of pair programming really illustrated itself.  We fairly quickly discovered that the issue was that session_store.rb didn’t match the production domain.  I find it unbelievable that the error message wasn’t actually useful but since I’ve been guilty of that sin more than a few times, well, karma I guess.&lt;/p&gt;

&lt;p&gt;Documented here for the next time that I hit this (in the spirit of being a good Internet citizen, I did add it to the Stack Overflow as well).&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Sep 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/09/25/rails-authlogic-csrf-422-and-session-store-rb.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/09/25/rails-authlogic-csrf-422-and-session-store-rb.html</guid>
        
        <category>rails</category>
        
        <category>authlogic</category>
        
        <category>csrf</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
