<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Mar 2017 04:02:57 -0500</pubDate>
    <lastBuildDate>Thu, 02 Mar 2017 04:02:57 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>An Engineer's Guide To Having Your Credit Card Stolen</title>
        <description>&lt;p&gt;So the one credit card that my wife and I rely on was recently stolen.  Personally I put the blame on &lt;a href=&quot;https://www.google.com/search?q=cloudbleed&amp;amp;ie=utf-8&amp;amp;oe=utf-8&quot;&gt;CloudFlare / CloudBleed&lt;/a&gt; since it occurred just after I purchased the HumbleBundle for Arduino (Feb 22nd) and that’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the only different credit card transaction done in the past few weeks&lt;/li&gt;
  &lt;li&gt;HumbleBundle was affected by CloudBleed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, that said, I don’t know to 100% certainty and this wasn’t Humble’s fault so I’ll still keep purchasing from them.  But I do feel pretty good in thinking that this was due to CloudFlare and I certain, after having reviewed more technical details, that CloudBleed is a lot worse than the &lt;a href=&quot;http://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; company is admitting.  If you haven’t yet started the login change process you might want to think about it.  Even I am gearing up to change all my damn passwords.  Sigh.&lt;/p&gt;

&lt;p&gt;Now that we just received new credit cards, I thought outlining the process of what to do when you’re a developer might be interesting for someone out there.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you’re not using a digital wallet to manage your secure crap (passwords / credit card data / pins) then I’d highly recommend it.  I’ve tried a bunch but the one I like best is &lt;a href=&quot;https://www.enpass.io/&quot;&gt;EnPass&lt;/a&gt; which runs on iOS, OSX, Windows and Unix, uses DropBox for sync from a small company in India.  &lt;strong&gt;Recommended&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.github.com/settings/billing&quot;&gt;Github&lt;/a&gt;.  Github is keys to the kingdom so it is always my first stop.  Drop down the menu next to your profile picture and choose settings and then billing.  Then do the credit card credentials three step jig.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gorails.com/users/edit&quot;&gt;GoRails&lt;/a&gt;.  &lt;a href=&quot;http://gorails.com/&quot;&gt;GoRails&lt;/a&gt; is a screencast service about Rails.  I have a legacy account grandfathered in at $9 / month and I don’t want to lose it so it was my #2 stop.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.elixirsips.com&quot;&gt;Elixir Sips&lt;/a&gt;. ElixirSips is a screen cast service for Elixir and Josh Adams does a great job on it as it was my #3 stop.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/&quot;&gt;Amazon&lt;/a&gt;.  How can you not change the big A?  I suspect we all know how to do this by now.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.aws.amazon.com/billing/home/#paymentmethods&quot;&gt;AWS&lt;/a&gt;.  Your AWS card can be different from your Amazon card and mine had contact details that were 3 years out of date so make sure to check them.  This is also a great opportunity to shut down any AMIs, instances or snapshots you’re not actually using.  You should also check your Cost Explorer while you’re at it. I’m finding Route 53 Hosted Zones to be oddly pricey but more on that later…&lt;/li&gt;
  &lt;li&gt;VPN.  We don’t all use VPNs but if you are trying to crawl geographically different information like the Google Play store world wide, a VPN is an awesome testing tool.  Everyone’s usage here is different so YMMV.&lt;/li&gt;
  &lt;li&gt;Apple.  This can easily be done under iOS via Settings / Wallet &amp;amp; Apple Pay.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/account/profile&quot;&gt;DropBox&lt;/a&gt;.  I hate DropBox’s performance.  I despise how it runs my CPU at 99% constantly and turns my bloody MacBook Pro fan on but other than my code editor it is probably the one app I just can’t live without at this stage.  DropBox keeps all my files up to date across three MacBooks, a Linux desktop, an iPad and an iPhone.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.backblaze.com/&quot;&gt;BackBlaze&lt;/a&gt;.  I actually am no longer a current BackBlaze subscriber but I know lots and lots of us are so if you use BackBlaze or another cloud backup tool I’d update that.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.meh.com/account&quot;&gt;Meh&lt;/a&gt;.  If you’re reading this and you haven’t ever used Meh then you really, really should.  Its an outstanding Nerd resource.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.freshbooks.com/#/profile&quot;&gt;Freshbooks&lt;/a&gt;.  Since I’m going back to full time freelancing shortly, decent accounting software is called for an Freshbooks is pretty great.&lt;/li&gt;
  &lt;li&gt;Search your email for the word receipt and look at anything in the last 60 days and you’ll likely be ok.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, print this out for your wife / significant other so they know where your card has been updated.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/misc/2017/03/02/an-engineer-s-guide-to-having-your-credit-card-stolen.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/misc/2017/03/02/an-engineer-s-guide-to-having-your-credit-card-stolen.html</guid>
        
        <category>misc</category>
        
        <category>credit_card</category>
        
        <category>cloudflare</category>
        
        <category>cloudbleed</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Things Ganesh Taught Me</title>
        <description>&lt;p&gt;https://github.com/orkohunter/keep&lt;/p&gt;

&lt;p&gt;https://github.com/orkohunter/ping-me&lt;/p&gt;

&lt;p&gt;http://www.araelium.com/screenflick&lt;/p&gt;

&lt;p&gt;http://www.araelium.com/querious&lt;/p&gt;

&lt;p&gt;http://www.araelium.com/rewind&lt;/p&gt;

&lt;p&gt;https://filmora.wondershare.com/mac-os-x-el-capitan/&lt;/p&gt;

&lt;p&gt;Looking at his system gave me a case of “prompt envy”:&lt;/p&gt;

&lt;p&gt;brew install bash-git-prompt&lt;/p&gt;

&lt;p&gt;https://gist.github.com/trey/2722934&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 20:56:35 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/01/things-ganesh-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/01/things-ganesh-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Using Pattern Generator to Make Custom Rails Generators</title>
        <description>&lt;p&gt;Welcome to the pattern_generator wiki!&lt;/p&gt;

&lt;p&gt;I’m a user of pattern_generator, not the author, so any mistakes here are mine and mine alone.  I’ve been very impressed by this gem so I thought I’d write some documentation as a thank you.  Here’s how to use this for your own project and write your own generators.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork It.  Start by forking this to your own repo on github.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone It.  Clone your fork down to your local dev system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change It.  Follow the directions on this repo’s home page to create a custom generator.  Basically you’re going to write a template for a class and a template for a spec / test file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add It.  Add pattern_generator to your Gemfile in one of your development groups.  You need to call out the master branch specifically.  Here’s an example:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem ‘pattern_generator’, :git =&amp;gt; ‘https://github.com/fuzzygroup/pattern_generator.git’, :branch =&amp;gt; “master”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add / Commit / Push.  Get your changes into github.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change Dir.  Change your working directory to the repo where you want to use your new generator and do a bundle update pattern_generator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use It.  Run your new generator with bundle exec rails g WHATEVER&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 16:58:57 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/01/using-pattern-generator-to-make-custom-rails-generators.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/01/using-pattern-generator-to-make-custom-rails-generators.html</guid>
        
        
      </item>
    
      <item>
        <title>Podcasting in 2017 under OSX Tips and Tricks</title>
        <description>&lt;p&gt;Improving Your audio 1:  turkish towel under your mic
Towel under your laptop&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Feb 2017 22:05:04 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/28/podcasting-in-2017-under-osx-tips-and-tricks.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/28/podcasting-in-2017-under-osx-tips-and-tricks.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Do DevOps</title>
        <description>&lt;p&gt;Devops&lt;/p&gt;

&lt;p&gt;no shortcuts&lt;/p&gt;

&lt;p&gt;start with documentation&lt;/p&gt;

&lt;p&gt;continue with the single simplest action&lt;/p&gt;

&lt;p&gt;continue with small working bits&lt;/p&gt;

&lt;p&gt;weave it together into a whole&lt;/p&gt;

&lt;p&gt;DevOps with Ansible - Parenting a Teenager - trust but verify&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 17:00:34 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/28/how-to-do-devops.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/28/how-to-do-devops.html</guid>
        
        
      </item>
    
      <item>
        <title>Working with the Gem Ecosystem Part 2 - Updating Gems and Writing Generators</title>
        <description>&lt;p&gt;In case you haven’t figured out yet that I write stuff here as much for myself as for anyone else, well, its true.  Almost every single day I find myself going back to my own blog as a reference tool.  Today I’m writing a part two to my &lt;a href=&quot;http://fuzzyblog.io/blog/ruby/2016/08/17/working-with-the-gem-ecosystem.html&quot;&gt;Working with the Gem Ecosystem&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;My thanks are extended to &lt;a href=&quot;http://www.nickjanetakis.com/blog/&quot;&gt;Nick&lt;/a&gt; who helped clarify the Gem update process and pointed out the need to embed the branch name in the Gemfile.  He picked this up from his work on the &lt;a href=&quot;https://github.com/nickjj/orats&quot;&gt;Orats gem&lt;/a&gt; which is very useful if you’re into Rails and Docker.&lt;/p&gt;

&lt;h1 id=&quot;generators&quot;&gt;Generators&lt;/h1&gt;

&lt;p&gt;I’m a big believer in custom generators and I’ve always found the process of writing them to be convoluted at best.  I recently found &lt;a href=&quot;https://github.com/sungwoncho/pattern_generator&quot;&gt;pattern_generator&lt;/a&gt; which makes writing generators drop dead easy.  I’m writing a project now where a major part of the process is writing custom data parsers for all kinds of web sites – udemy, leanpub, pluralsight, instagram, etc.  These are all PORO (plain old ruby objects) i.e. no ActiveRecord backed and I wanted a custom generator which:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;created my class&lt;/li&gt;
  &lt;li&gt;created my template&lt;/li&gt;
  &lt;li&gt;filled out the boilerplate structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happily pattern_generator is just plain perfect. Here’s all I did&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fork the gem&lt;/li&gt;
  &lt;li&gt;clone it to my computer&lt;/li&gt;
  &lt;li&gt;open it in an editor&lt;/li&gt;
  &lt;li&gt;create a directory&lt;/li&gt;
  &lt;li&gt;add my template class&lt;/li&gt;
  &lt;li&gt;add my template spec&lt;/li&gt;
  &lt;li&gt;replace the class name with erb style output tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And while this worked great, I ran into issues when I started making changes …&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The issues I had here are mine and mine alone.  &lt;a href=&quot;https://github.com/sungwoncho&quot;&gt;Sung Won Cho&lt;/a&gt; did a great job on pattern_generator and I thank him for it.&lt;/p&gt;

&lt;h1 id=&quot;and-now-back-to-gems&quot;&gt;And Now Back to Gems&lt;/h1&gt;

&lt;p&gt;My problem came when I added my fork of pattern_generator to my project’s Gemfile and did a bundle install.  At first the gem came down perfectly but I noticed a few bugs.  I then updated my code and re-bundled and &lt;em&gt;nothing&lt;/em&gt;.  I didn’t get any of my changes.  Here’s how I had it in my Gemfile initially:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pattern_generator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/fuzzygroup/pattern_generator.git'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Naturally this was located in a development only section of the Gemfile since we don’t want the memory overhead of this in production.&lt;/p&gt;

&lt;p&gt;My first thought was that this was tied to a bundle update versus bundle instlal so I did:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, again, nothing.  Next I tried:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle update –source=https://github.com/fuzzygroup/pattern_generator.git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would have expected a bundle update pattern_generator to work but I did not find that to be the case.  But even with specifying the source explicitly I still did not get the right version of my code.  Happily Nick and I were about to pair anyway so I asked him and he honed right in on the branch i.e. specify the branch in the Gemfile.  Here’s how that looks:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pattern_generator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/fuzzygroup/pattern_generator.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that worked perfectly.  I wrote several new parsers today and then used my &lt;a href=&quot;https://github.com/fuzzygroup/sync-dot-rake&quot;&gt;SyncDotRake&lt;/a&gt; toolkit to merge the parsing code into a new Service Oriented API.  Overall it was a damn good day.  Thanks Nick!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I next updated the gem on the following day and &lt;strong&gt;could not get&lt;/strong&gt; it to update at all.  I finally tried:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle update pattern_generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and that actually seemed to work consistently and reliably.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2017/02/27/working-with-the-gem-ecosystem-part-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2017/02/27/working-with-the-gem-ecosystem-part-2.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>generators</category>
        
        <category>pattern_generator</category>
        
        <category>hyde</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Headphones for Programmers - Bose QC-35 Blue Tooth Over Ear Noise Cancelling Headphones</title>
        <description>&lt;p&gt;Anyone who has ever worked with me since 2007 or so knows that I’m an unabashed fan of pair programming.  While the quantity of pairing I do varies from project to project, I’ve had 12 hour pairing days from time to time and one job that was almost &lt;strong&gt;exclusively pairing&lt;/strong&gt; over a 2 year period.&lt;/p&gt;

&lt;p&gt;There are four types of gear that matter for pairing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Screen Sharing Software w/ Voice Communications&lt;/li&gt;
  &lt;li&gt;Similar or Matched Screen Resolutions&lt;/li&gt;
  &lt;li&gt;Decent Connectivity&lt;/li&gt;
  &lt;li&gt;Headphones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today I’m going to talk about headphones and specifically about Bose Quiet Comfort Headphones.  My wife, after an awful week, surprised me with a pair of Bose QC-35s.  She knew I wanted them and it had been an absolute shite show of a week so this was a wonderful surprise.&lt;/p&gt;

&lt;p&gt;I’ve been wearing wired Bose Quiet Comfort headphones now for almost a decade and I &lt;strong&gt;adore&lt;/strong&gt; them.  I don’t use the word adore oftem with respect to hardware / software.  Yes I adore my wife and, generally, my kids – but headphones?  Well Bose headphones are just that good.  I can wear my wired Bose head phones for 12 hours at a stretch without pain and that’s astonishing.&lt;/p&gt;

&lt;p&gt;I’m not at all an audiophile&lt;/p&gt;

&lt;p&gt;Now while I have long resisted blue tooth for serious audio, I&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 02:09:15 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/gear/2017/02/26/headphones-for-programmers-bose-qc-35-blue-tooth-over-ear-noise-cancelling-headphones.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/gear/2017/02/26/headphones-for-programmers-bose-qc-35-blue-tooth-over-ear-noise-cancelling-headphones.html</guid>
        
        <category>gear</category>
        
        <category>headphones</category>
        
        <category>pair_programming</category>
        
        
        <category>gear</category>
        
      </item>
    
      <item>
        <title>Setting Up Rails with Rspec From the Start</title>
        <description>&lt;p&gt;So this morning I was working on my side project and I realized that one aspect of it alone is now 26 plus PORO (plain old ruby objects) models and growing rapidly.  Given that I’m building this along the lines of a service oriented architeture where I want to be able to replace components prototyped in Ruby down the road with Elixir this would make sense so it was time to isolate it into a standalone http service as a separate Rails API stack.&lt;/p&gt;

&lt;p&gt;And this brings up the need to generate a stack with RSpec from the start.  Here’s how to do this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rails new hyde_page_parser -T –skip-active-record –skip-action-cable –skip-spring –api&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want this to &lt;strong&gt;NOT&lt;/strong&gt; include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test_unit so -T gets rid of that&lt;/li&gt;
  &lt;li&gt;ActiveRecord so –skip-active-refactor&lt;/li&gt;
  &lt;li&gt;ActionCable so –skip-action-cable&lt;/li&gt;
  &lt;li&gt;Spring so –skip-spring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That gets me a baseline project to which I can add RSpec.  Using &lt;a href=&quot;http://nrakochy.github.io/rspec/rails/2015/05/27/How-To-Setup-Rspec-Instead-Of-Test-Unit-Rails/&quot;&gt;Nrakochy’s&lt;/a&gt; instructions, all you need to do is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add gem ‘rspec-rails’ to a development, test group in Gemfile&lt;/li&gt;
  &lt;li&gt;Run bundle install&lt;/li&gt;
  &lt;li&gt;Run bundle exec rails g rspec:install&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/02/26/setting-up-rails-with-rspec-from-the-start.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/02/26/setting-up-rails-with-rspec-from-the-start.html</guid>
        
        <category>rails</category>
        
        <category>rspec</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Multi Line Comments in Ruby - Finally</title>
        <description>&lt;p&gt;I’ve wanted multi line comments in Ruby forever and I just, thanks to &lt;a href=&quot;http://stackoverflow.com/questions/2989762/multi-line-comments-in-ruby&quot;&gt;this Stack Overflow post&lt;/a&gt;, found out that they exist thanks to =begin and =end:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;=begin

A long comment
that spans two
lines

=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a practical example where I’m keeping an example of how to run an instance method on a class in an easy to use copy and paste fashion (copy it and just drop it in Rails console).&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;=begin

url = &quot;https://www.etsy.com/listing/253953555/tacos-tshirt-perfect-for-tacos-lover?ref=finds_l&quot;
parser = Page.new(url)
parser.parse

=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m a fan of keeping code snippets around for easy copy and paste so you can get back to stuff quickly and multi-line comments make that so, so much easier.  Sure, I’d prefer /* and */, but, honestly, this will make me happy.  Matz made a choice to not have multi-line comments and while I don’t personally agree, long ago, I tied my&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2017/02/26/multi-line-comments-in-ruby-finally.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2017/02/26/multi-line-comments-in-ruby-finally.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Understanding Low Level Index Issues in MySQL and Rails</title>
        <description>&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;I had a weird thing recently – a table with 313 million rows had 30+ second queries on a unique index – that’s way, way too long.  Here’s how I went about troubleshooting this.&lt;/p&gt;

&lt;p&gt;A shout out of thanks to &lt;a href=&quot;https://github.com/itsgg&quot;&gt;Ganesh&lt;/a&gt; and to &lt;a href=&quot;https://github.com/wakproductions&quot;&gt;Winston&lt;/a&gt; who both helped out.  Notable mention to Ganesh who actually figured out the core issue; I’m really just the scribe here.&lt;/p&gt;

&lt;h1 id=&quot;viewing-mysql-indexes&quot;&gt;Viewing MySQL Indexes&lt;/h1&gt;

&lt;p&gt;Any performance problem always starts with an explain on the query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;explain select * from line_items where company_id=37 and document_identifier = 'RCON2170' and period = '2008-12-31'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: line_items
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 314459869
        Extra: Using where
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given that I &lt;strong&gt;know&lt;/strong&gt; that there’s an index I found this &lt;em&gt;puzzling&lt;/em&gt;.  The next step was to use a FORCE INDEX syntax on the query to ensure that this isn’t an optimizer issue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;select * from line_items FORCE INDEX (index_line_items_fin_document_identifier_period) where company_id=37 and document_identifier = ‘RCON2170’ and period = ‘2008-12-31’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that gave the same disappointing performance.  Pity. Using FORCE INDEX would have sucked but it would have been an easy fix at least.  Onward!&lt;/p&gt;

&lt;p&gt;This is where Ganesh rose to the challenge and recommended using SHOW INDEXES FROM table_name.  I haven’t used that in years and that’s likely a bad, bad, bad thing on my part (sorry).  Here’s what that gave us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SHOW INDEX FROM line_items\G&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;
MariaDB [data_production]&amp;gt; SHOW INDEX FROM line_items\G
*************************** 1. row ***************************
        Table: line_items
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 313591995
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:

*************************** 2. row ***************************
        Table: line_items
   Non_unique: 0
     Key_name: index_line_items_fin_document_identifier_period
 Seq_in_index: 1
  Column_name: company_id
    Collation: A
  Cardinality: 200
     Sub_part: NULL
       Packed: NULL
         Null: YES
   Index_type: BTREE
      Comment:
Index_comment:

*************************** 3. row ***************************
        Table: line_items
   Non_unique: 0
     Key_name: index_line_items_fin_document_identifier_period
 Seq_in_index: 2
  Column_name: document_identifier
    Collation: A
  Cardinality: 200
     Sub_part: NULL
       Packed: NULL
         Null: YES
   Index_type: BTREE
      Comment:
Index_comment:

*************************** 4. row ***************************
        Table: line_items
   Non_unique: 0
     Key_name: index_line_items_fin_document_identifier_period
 Seq_in_index: 3
  Column_name: period
    Collation: A
  Cardinality: 200
     Sub_part: NULL
       Packed: NULL
         Null: YES
   Index_type: BTREE
      Comment:
Index_comment:
4 rows in set (0.01 sec)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The very, very curious thing is that we see &lt;strong&gt;3 copies&lt;/strong&gt; of the index!  And you may notice that the cardinality of the index is incredibly low – 200 versus the 313591995 cardinality of the primary key index.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/data/library/techarticle/dm-1309cardinal/&quot;&gt;Cardinality&lt;/a&gt; is one of those key database concepts that most of us never have to worry about – essentially it is a measure of uniqueness in the index.  Indices perform better when they are unique and this is way, way, way too low – particularly for a unique index which incorporates 3 columns.  The actual cardinality here should equal that of the primary key index since this is a unique index.&lt;/p&gt;

&lt;h1 id=&quot;understanding-how-indexes-get-corrupted&quot;&gt;Understanding How Indexes Get Corrupted&lt;/h1&gt;

&lt;p&gt;This is the kind of thing that should NEVER happen so what went wrong?  Here’s where you have to guess a bit since we lack enough history to recreate things exactly.  Here’s what I think happened:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We had this running on a 100GB partition where the database was roughly 54 gb and, yes, most of that space was dedicated to this one table.&lt;/li&gt;
  &lt;li&gt;An ALTER TABLE (via a Rails migration) started the index creation and then it failed part way through due to a lack of disc space.&lt;/li&gt;
  &lt;li&gt;And since it likely took a long time to run the ALTER TABLE, the timestamp for the migration was NEVER inserted into the schema_migrations table (deploy timeout).&lt;/li&gt;
  &lt;li&gt;This meant the next time that a deploy happened, the ALTER TABLE was run again.  And again.  And again until the timestamp finally made it into the schema_migrations table (even though technically the index was never fully created).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;fixing-all-this&quot;&gt;Fixing All This&lt;/h1&gt;

&lt;p&gt;The solution to fixing this was actually pretty simple and had four parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run an alter table statement which &lt;strong&gt;deleted&lt;/strong&gt; the original bad migration: &lt;strong&gt;ALTER TABLE line_items DROP INDEX index_line_items_fin_document_identifier_period;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Delete the time stamp for the migration from the table schema_versions: &lt;strong&gt;DELETE FROM schema_migrations WHERE version=20161115210810;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Do a full deploy which will cause the migration to run again.  Given that this is a multi hour migration, the chance of your SSH connectivity staying up long enough to complete is slim.  Just know that and accept that.&lt;/li&gt;
  &lt;li&gt;Manually insert the timestamp back into the schema_migrations table: &lt;strong&gt;INSERT INTO schema_migrations (version) VALUES (20161115210810);&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; A better way to do this, that I just thought of, is to &lt;strong&gt;NOT&lt;/strong&gt; do this as a deploy but instead manually scp the migration to the server (in fact it should be in db/migrate it should be there), delete the timestamp from schema_migrations and then run db:migrate directly on the server.  This would avoid step 4 entirely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; Very &lt;strong&gt;long running&lt;/strong&gt; migrations are generally best run directly on the server without a deploy (in my not so humble opinion).  I used to do this all the time in my AppData hey day but I haven’t had to in ages so it took a while to remember it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 3:&lt;/strong&gt; If you don’t like doing an scp of a migration file then deploy to one node in your cluster of servers that is NOT a db role.  That prevents the migration from running automatically and then you can log in via ssh and start the migration manually.  Migrations &lt;strong&gt;only&lt;/strong&gt; run automatically when you have at least one machine identified as a db role being deployed to.&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/02/24/understanding-low-level-index-issues-in-mysql.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/02/24/understanding-low-level-index-issues-in-mysql.html</guid>
        
        <category>mysql</category>
        
        <category>index</category>
        
        <category>performance</category>
        
        <category>rails</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
