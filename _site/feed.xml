<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 13 Oct 2016 10:34:38 -0400</pubDate>
    <lastBuildDate>Thu, 13 Oct 2016 10:34:38 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Sidekiq - Graceful Versus Forceful</title>
        <description>&lt;p&gt;So now that I’m using Sidekiq for background processes, I need to be able to start it up, shut it down and I need to understand the difference between forceful and graceful.&lt;/p&gt;

&lt;h1 id=&quot;running-sidekiq-interactively&quot;&gt;Running Sidekiq Interactively&lt;/h1&gt;

&lt;p&gt;This is easy and we all should know this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /my_rails_app/where_ever_that_is
bundle exec sidekiq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will run Sidekiq interactively.  Now if you want it to run even if your connection to the remote box drops then you need to use Tmux or something similar.&lt;/p&gt;

&lt;h1 id=&quot;running-it-as-a-service&quot;&gt;Running it as a Service&lt;/h1&gt;

&lt;p&gt;See my last blog post on using Ansible to configure Sidekiq and I think that will become clear.&lt;/p&gt;

&lt;h1 id=&quot;forceful-versus-graceful&quot;&gt;Forceful versus Graceful&lt;/h1&gt;

&lt;p&gt;Forceful versus Graceful defines how you want Sidekiq to shut down and it basically boils down to the speed of the shutdown.  Sidekiq runs “jobs” which basically means “long running methods” and here’s the difference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;forceful – shut down NOW; abandon all work in process&lt;/li&gt;
  &lt;li&gt;graceful – tell sidekiq to shut down when each of its threads is done processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s use an analogy here to make this clear.  Imagine that sidekiq was a hitchhiker you picked up on the side of the road.  Forceful would be you opening the door and kicking the hitchhiker out while the car is still moving.  Graceful would be you saying “I think you need to get out at the next exit and the hitchhiker saying - &lt;em&gt;I’m sorry but I need a bit more time; I’ll get out when I’m ready&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;There isn’t a right answer here whether or not to use Forceful or Graceful – it really depends on your context.  If you use Sidekiq to handle short lived asynchronous tasks like, say, sending a welcome email then you probably want to use Graceful since it shouldn’t take that long for each thread to idle down.  I, on the other hand, use sidekiq to handle tasks that might take hours or even a whole day to finish so I usually use Forceful.  Given that my tasks have their own journal, this isn’t terrible.  It isn’t great but it isn’t terrible.&lt;/p&gt;

&lt;p&gt;Here’s an example of a Forceful shutdown:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -ef | grep sidekiq | grep -v grep | awk '{print $2}' | xargs kill -9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s an example of a Graceful shutdown:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps auwwx | grep sidekiq  # and give the pid value to the next command where &amp;lt;pid&amp;gt; is
sidekiqctl stop &amp;lt;pid&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My thanks to the fine community at &lt;a href=&quot;http://www.sidekiq.com/&quot;&gt;Stack Overflow&lt;/a&gt; for these &lt;a href=&quot;http://stackoverflow.com/questions/12143350/gracefully-shutting-down-sidekiq-processes&quot;&gt;Sidekiq Graceful answers&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ruby/2016/10/13/sidekiq-graceful-versus-forceful.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ruby/2016/10/13/sidekiq-graceful-versus-forceful.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>sidekiq</category>
        
        <category>unix</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 15 - SSH Failures Take 3 - Time to Write Some Monitoring Code</title>
        <description>&lt;p&gt;&lt;img src=&quot;/blog/assets/ood_not_oom.jpg&quot; alt=&quot;ood_not_oom.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My apologies to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tenth_Doctor&quot;&gt;Good Doctor&lt;/a&gt; but when &lt;a href=&quot;https://linux-mm.org/OOM_Killer&quot;&gt;OOM&lt;/a&gt; is failing you, you have to make an &lt;a href=&quot;https://en.wikipedia.org/wiki/Ood&quot;&gt;OOD&lt;/a&gt; joke.  We’re nerdy over hear.  Every one of us.&lt;/p&gt;

&lt;p&gt;Well crap.  I just ran my ansible df -h test which checks to make sure my boxes are up and running and I got complete failure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fiweb1 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
fiansible2 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawlerbig | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler3 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler4 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler5 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler6 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler7 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler8 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler9 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
ficrawler10 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Curiouser and curiouser said Alice.  The interesting thing here is that two of these boxes ARE NOT running our crawler code.  They’re actually doing nothing at all.  So what does this tell us:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perhaps the issue has nothing to do with our code at all.&lt;/li&gt;
  &lt;li&gt;Perhaps it is an underlying Linux problem on AWS w/ Ubuntu.&lt;/li&gt;
  &lt;li&gt;It seems to be related to resource consumption but that’s a guess not a true statement.&lt;/li&gt;
  &lt;li&gt;There is no damn way to monitor this (&amp;amp;$#($&lt;em&gt;#()$&lt;/em&gt;#)) problem since it no one monitors SSH failures.  Sigh.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;writing-your-own-monitoring-tool&quot;&gt;Writing Your Own Monitoring Tool&lt;/h1&gt;

&lt;p&gt;And so I now get to time travel back to 2007, the first time I wrote a monitoring tool in Ruby.  I was working for the late, not-lamented eduFire and there wasn’t money to sign up for a monitoring tool.  Ah life in startup land.  My children can and do tell the tale of Dad’s computer waking up in the middle of the night screaming “eduFire IS DOWN!!!”.  And then there was the incarnation that, a few years later, would plain Billy Idol’s White Wedding at top volume.  So this is old territory for me.  But maybe we can do a bit better.  So what do we need to do?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run forever&lt;/li&gt;
  &lt;li&gt;Run reliably - this is Ruby after all&lt;/li&gt;
  &lt;li&gt;Read from the ansible hosts file and get a list of resources to monitor&lt;/li&gt;
  &lt;li&gt;Loop over the hosts&lt;/li&gt;
  &lt;li&gt;Establish an ssh connection&lt;/li&gt;
  &lt;li&gt;If successful then do nothing&lt;/li&gt;
  &lt;li&gt;If unsuccessful increment a failure counter&lt;/li&gt;
  &lt;li&gt;If failure ctr &amp;gt; a threshold then fire off an alert by playing White Wedding and also send an alert to my phone&lt;/li&gt;
  &lt;li&gt;Optionally incorporate AWS API calls to restart the instance if this is possible and it has failed more times than a restart threshold&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;run-forever&quot;&gt;Run Forever&lt;/h2&gt;

&lt;p&gt;This can be nothing more than a while(true) loop construct.  It isn’t elegant but it will work.&lt;/p&gt;

&lt;h2 id=&quot;run-reliably&quot;&gt;Run Reliably&lt;/h2&gt;

&lt;p&gt;We can wrap this within daemon tools supervise to make sure it stays running.&lt;/p&gt;

&lt;h2 id=&quot;read-from-ansible-hosts-file&quot;&gt;Read from Ansible Hosts file&lt;/h2&gt;

&lt;p&gt;This can be done with any of a number of gems which read from an INI file.  No matter what we use, the Ansible INI syntax is funky so we’re likely to need some parsing.&lt;/p&gt;

&lt;h2 id=&quot;loop-over-the-hosts&quot;&gt;Loop Over The Hosts&lt;/h2&gt;

&lt;p&gt;The INI gem will return an enumerable collection so this is just a .each call.  Piece of cake.  .each is my single favorite thing in all of Ruby.&lt;/p&gt;

&lt;h2 id=&quot;establish-an-ssh-connection&quot;&gt;Establish an SSH connection&lt;/h2&gt;

&lt;p&gt;There has to be a gem for this.  &lt;strong&gt;Google Furiously&lt;/strong&gt;  Yep.  Even better Jamis Buck wrote it.  Fantastic.  That means I can trust it.&lt;/p&gt;

&lt;h2 id=&quot;items-6-thru-9&quot;&gt;Items 6 thru 9&lt;/h2&gt;

&lt;p&gt;This is the core of a monitoring tool and where crap gets tricky:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have to make sure you actually have outbound connectivity so you need something to test against that NEVER goes down.  Hm… 8.8.8.8 is perfect – it is Google’s DNS server and it can be ping’d so I don’t have to test via SSH.  There must be a ping gem.  &lt;strong&gt;More Furious Googling&lt;/strong&gt;.  Yep.&lt;/li&gt;
  &lt;li&gt;You have to alert.  Yep.  That means I’m going to use Twilio again.  Twilio is fantastic.&lt;/li&gt;
  &lt;li&gt;In the event of a failure you have to get my attention and no alert needs to be sent if I’m already at the computer.  I’ll yank out the old white wedding play routine I used for my second monitoring tool (which indirectly was this same damn code base) and I’ll just reuse it.&lt;/li&gt;
  &lt;li&gt;You need a machine which is 24x7 connected to the Internet and never goes away.  Well my Macbook Air travels everywhere I go these days but my Macbook Pro is constantly on.  So I’ll use that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-code&quot;&gt;The Code&lt;/h1&gt;

&lt;p&gt;Listed below is a rake task which encapsulates the bulk of it.  This is actually only the &lt;strong&gt;first draft&lt;/strong&gt; of it.  The actual &lt;a href=&quot;https://github.com/fuzzygroup/aws_monitor&quot;&gt;github&lt;/a&gt; code is better but I’ve been up all night so I don’t think trying to write a good description of it is wise.  The detailed stuff is handled by aws_monitor.rb which is a short class of static methods just to simplify the rake task and make them testable.  The only bad thing I can ever say about Jim Weirich is that Rake tasks aren’t really testable.  Other than that I wish he was still with us.  Right now this code is a bit of a rough draft as the failure hasn’t happened again yet and things like error handling always need to get addressed but it looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace :monitor_aws do
  # bundle exec rake monitor_aws:ansible_hosts --trace
  task :ansible_hosts =&amp;gt; :environment do
    #
    # Things to change easily for adapting to different environments
    #

    # CHANGE THIS to your ansible inventory file
    ansible_hosts_file = File.join(Rails.root, 'script/ansible/inventories/production2')
    # CHANGE THIS to how frequently to monitor
    sleep_time = 60 * 5  # every five minutes we will execute
    # CHANGE THIS to your ssh login
    username = &quot;ubuntu&quot;
    # CHANGE THIS to the number of consecutive failures you want to alert on
    min_failures = 2     

    run_ctr = 0
    while(true) do
      run_ctr = run_ctr + 1
      puts &quot;Monitoring run: #{run_ctr}&quot;
      ansible_hosts = AwsMonitor.load_ansible_hosts(ansible_hosts_file)
      failure_ctr = 0
      ansible_hosts.entries.each do |entry|
        ansible_host = AwsMonitor.ini_entry_to_struct(entry)
        session = Net::SSH.start( ansible_host.host_name, username, :keys =&amp;gt; ansible_host.keyfile )
        if session.error.nil?
          puts &quot;Success!  The box #{ansible_host.human_name} is still alive!!!&quot;.green
        else
          puts &quot;#{session.error}&quot;
          AwsMonitor.play_white_wedding(ansible_host, '')
          debugger          
        end
        session.close
      end
      puts &quot;\n\n\n&quot;
      sleep(sleep_time)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s about all there is to it.  The complicated version, which is also written, but not yet published has some other tricks like using ping to make sure my local connectivity didn’t fail.  I don’t want to publish that yet since I don’t understand if my failure condition is going to be a  Net::SSH::AuthenticationFailed or a session.error message or what.&lt;/p&gt;

&lt;h2 id=&quot;postscript&quot;&gt;Postscript&lt;/h2&gt;

&lt;p&gt;This morning I added a running timer to track how long the boxes were up.  This is what it looks like now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Monitoring run: 31
Success!  The box ficrawler3 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler4 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler5 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler6 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler7 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler8 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler9 is still alive and has been for: 9300 seconds!!!
Success!  The box ficrawler10 is still alive and has been for: 9300 seconds!!!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;postscript-2&quot;&gt;Postscript 2&lt;/h2&gt;

&lt;p&gt;I had wanted to make this work with Twilio for alerting but I just ran out of time.  If anyone needs help with that reach out to me and I’ll get it in.  Its not hard and Twilio is an awesome, awesome company to work with.&lt;/p&gt;

&lt;h2 id=&quot;postscript-3&quot;&gt;Postscript 3&lt;/h2&gt;

&lt;p&gt;I just realized that I think the Twilio credentials are in the git repo.  Sigh.  I turned on 2 factor authentication so that should prevent them from getting used by someone other than me.&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;Do with it as you will.  Enjoy it; fork it, etc.  Sorry it took so long to get this post out.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/13/aws-tutorial-16-ssh-failures-take-4-time-to-write-some-monitoring-code.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/13/aws-tutorial-16-ssh-failures-take-4-time-to-write-some-monitoring-code.html</guid>
        
        <category>aws</category>
        
        <category>ssh</category>
        
        <category>ruby</category>
        
        <category>monitoring</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Ansible Tutorial 02 - Configuring a Sidekiq Upstart Job on Ubuntu 14.04</title>
        <description>&lt;p&gt;As I’ve now noted a number of times, I’m in the process of a large scale AWS migration and we’ve had stability problems.  Unlike previous times in my life where I threw my hands up, got tired with devops and just hacked something together, I’m determined that, this time, things will be different.  At the heart of our issues has been ballooning memory use in Ruby.  Whether the issue is in our code, a gem, an interaction or something else entirely is, at present, unknown.&lt;/p&gt;

&lt;p&gt;The solution I’ve opted to go with for solving this is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remove our own threading code&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;http://www.mikeperham.com&quot;&gt;Mike Perham&lt;/a&gt;’s astonishingly wonderful &lt;a href=&quot;http://sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sign up for paid support / &lt;a href=&quot;http://sidekiq.org/products/pro&quot;&gt;Sidekiq Pro&lt;/a&gt; so any assistance that we need is possible.&lt;/li&gt;
  &lt;li&gt;Move to an upstart job to run sidekiq&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://mmonit.com/monit/&quot;&gt;Monit&lt;/a&gt; or &lt;a href=&quot;https://github.com/mperham/inspeqtor&quot;&gt;inspeqtor&lt;/a&gt; to Monitor Sidekiq&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog post I’m going to focus on #4 – using an Upstart Job to Run Sidekiq and define that job with Ansible.  The very first thing to know is that my previous ansible task, &lt;a href=&quot;https://fuzzygroup.github.io/blog/ansible/2016/10/09/ansible-quickie-fixing-a-poorly-designed-galaxy-role.html&quot;&gt;here&lt;/a&gt;, is absolute crap as best I can tell.  Even with my fixes, like so many things on &lt;a href=&quot;https://galaxy.ansible.com&quot;&gt;Ansible Galaxy&lt;/a&gt;, it was just plain wrong.  Where Galaxy is good, its excellent, but that’s rare in my experience.&lt;/p&gt;

&lt;p&gt;Just a disclaimer - any errors here are mine, not Mike’s or Sidekiq’s.  I own the responsibility here.&lt;/p&gt;

&lt;h1 id=&quot;using-ansible-to-install-a-sidekiq-service&quot;&gt;Using Ansible to Install a Sidekiq Service&lt;/h1&gt;

&lt;p&gt;Here are our assumptions that we’re basing our ansible code on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 14.04&lt;/li&gt;
  &lt;li&gt;Upstart&lt;/li&gt;
  &lt;li&gt;Single, global ruby per server&lt;/li&gt;
  &lt;li&gt;RVM (even though it isn’t strictly necessary)&lt;/li&gt;
  &lt;li&gt;One ruby app per server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s begin with the structure of our role:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/whatever_your_ansible_root_is
mkdir -p roles/software_licenses/tasks
mkdir -p roles/services
mkdir roles/services/tasks
mkdir roles/servies/templates
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;optional---adding-your-sidekiq-pro-software-license&quot;&gt;Optional - Adding Your Sidekiq Pro Software License&lt;/h2&gt;

&lt;p&gt;Sidekiq Pro is commercial software, not open source, so if you’re using it instead of the open source version, you’ll need to authorize it.  Here’s how to do this.  Here’s what goes in your roles/software_licenses/tasks/main.yml:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- 
- name: set the licensing for sidekiq pro
&lt;/span&gt;  become: no
  shell:  &quot;cd /var/www/apps/banks/current &amp;amp;&amp;amp; bundle config gems.contribsys.com YOUR_SECURITY_KEY&quot;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;defining-your-group-vars&quot;&gt;Defining Your Group Vars&lt;/h2&gt;

&lt;p&gt;Here’s what goes in your group_vars context.  I had these in all but you may choose a different approach:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app_name: banks
app_base: /var/www/apps/banks/
app_path: /var/www/apps/banks/current/
user_name: ubuntu
db_root_password: FDFJKSDJFKLSFJSLKFJSKLFSJFKLSDJF
my_ip_address: 64.184.12.117
server_env: production
rvm_path: /usr/local/rvm/bin/rvm    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;your-template-for-the-upstart-job&quot;&gt;Your Template for the Upstart Job&lt;/h2&gt;

&lt;p&gt;Here’s what goes in roles/services/templates/sidekiq_perham_init.j2:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /etc/init/sidekiq.conf - Sidekiq config
# source: https://github.com/mperham/sidekiq/blob/master/examples/upstart/sidekiq.conf

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then manage sidekiq with:
#   sudo start sidekiq index=0
#   sudo stop sidekiq index=0
#   sudo status sidekiq index=0
#
# Hack Upstart's reload command to 'quiet' Sidekiq:
#
#   sudo reload sidekiq index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#

description &quot;Sidekiq Background Worker&quot;

# This script is not meant to start on bootup, workers.conf
# will start all sidekiq instances explicitly when it starts.
#start on runlevel [2345]
#stop on runlevel [06]

# change to match your deployment user
setuid 
setgid 
env HOME=

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sidekiq. Without declaring these as
# normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal USR1

# Upstart waits 5 seconds by default to kill the a process. Increase timeout to
# give sidekiq process enough time to exit.
kill timeout 15

#instance $index
instance 0

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash &amp;lt;&amp;lt;'EOT'
  # Pick your poison :) Or none if you're using a system wide installed Ruby.
  # rbenv
  # source /home/apps/.bash_profile
  # OR
  # source /home/apps/.profile
  # OR system:
  # source /etc/profile.d/rbenv.sh
  #
  # rvm
  # source /home/apps/.rvm/scripts/rvm
  source 

  # Logs out to /var/log/upstart/sidekiq.log by default

  cd 
  #exec bundle exec sidekiq -i ${index} -e production
  exec bundle exec sidekiq -i 0 -e production
EOT
end script
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note that the template above comes directly from Mike Perham’s Sidekiq Wiki, &lt;a href=&quot;https://github.com/mperham/sidekiq/blob/master/examples/upstart/sidekiq.conf&quot;&gt;here&lt;/a&gt;.  I modified it slightly to incorporate ansible variables and to remove the index parameter which didn’t function, at least for me, on Ubuntu 14.04.&lt;/p&gt;

&lt;h2 id=&quot;pulling-the-template-and-service-together&quot;&gt;Pulling the Template and Service Together&lt;/h2&gt;

&lt;p&gt;Here’s what goes in roles/services/tasks/main.yml:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: prevent sidekiq init from running if it has already been done
  stat: path=/etc/init/sidekiq.conf
  register: sidekiq_init_installed
  
- name: Copy sidekiq init template to init.d dir
  template: src=sidekiq_perham_init.j2 dest=/etc/init/sidekiq.conf owner=root group=root force=yes
  sudo: yes
  when: sidekiq_init_installed.stat.exists == False

- name: start_sidekiq
  service: name=sidekiq state=started
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The only real Ansible trick here is to figure out how to make this idempotent so it only installs the upstart job once.  To do that I use the stat module to check the location of the upstart sidekiq.conf file and register a variable.  Then I only install the template when that variable is false.&lt;/p&gt;

&lt;h2 id=&quot;calling-everything-from-the-playbook&quot;&gt;Calling Everything from the Playbook&lt;/h2&gt;

&lt;p&gt;The final step here is to pull the roles into the playbook so it can run.  Here’s how:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: software_licenses, tags: software_licenses }
- { role: services, tags: services }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because the service depends on the gem it is important that the software_licenses role run first so the gem is authorized.  Otherwise Sidekiq won’t start and the service will be borked.&lt;/p&gt;

&lt;h2 id=&quot;optional---your-ruby-apps-gemfile&quot;&gt;Optional - Your Ruby App’s Gemfile&lt;/h2&gt;

&lt;p&gt;If you’re using Sidekiq Pro, you’ll need to update your gem file with the stuff you got from Sidekiq support.&lt;/p&gt;

&lt;h2 id=&quot;running-the-playbook&quot;&gt;Running the Playbook&lt;/h2&gt;

&lt;p&gt;If you just want to run part the services and software_licenses role then you can use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-playbook -i inventories/ficrawler3 playbook_crawler.yml --tags=&quot;software_licenses, services&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the output from running just the services role on a single one of my boxes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-playbook -i inventories/ficrawler3 playbook_crawler.yml --tags=&quot;services&quot;

[DEPRECATION WARNING]: Instead of sudo/sudo_user, use become/become_user and make sure become_method is 'sudo' (default).
This feature will be removed in a future release. Deprecation warnings can be
disabled by setting deprecation_warnings=False in ansible.cfg.

PLAY [crawler, ansibletest] ****************************************************

TASK [setup] *******************************************************************
ok: [ficrawler3]

TASK [services : stop_sendmail] ************************************************
ok: [ficrawler3]

TASK [services : stop_apache2] *************************************************
ok: [ficrawler3]

TASK [services : stop_memcached] ***********************************************
ok: [ficrawler3]

TASK [services : prevent sidekiq init from running if it has already been done]
ok: [ficrawler3]

TASK [services : Copy sidekiq init template to init.d dir] *********************
skipping: [ficrawler3]

TASK [services : start_sidekiq] ************************************************
changed: [ficrawler3]

PLAY RECAP *********************************************************************
ficrawler3                 : ok=6    changed=1    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your results may differ a bit but it should be similar to that.&lt;/p&gt;

&lt;h1 id=&quot;log-file&quot;&gt;Log File&lt;/h1&gt;

&lt;p&gt;It is always terribly important with long running processes to know where their log file goes.  In this case it is located at:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/log/upstart/sidekiq_0.log  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ll return to that in a later Ansible tutorial when I configure cross server log management with Graylog.  For my work, sidekiq logs are critical so I added a bash command to the shells on all my boxes so I can tail them easily.  All it takes is to drop alias tailsidekiq=’tail -f /var/log/upstart/sidekiq_0.log’ into the .bashrc on all your boxes.&lt;/p&gt;

&lt;p&gt;And, yes, I’m am showing off here.  This points out just how awesome automatically provisioning your boxes with ansible is.  When you can make changes across a farm of boxes with a single command, you can apply the same types of refactoring / continuous improvement that you do with code to devops.  In years past if I wanted this I’d have had to do it manually.  Now its a change to a template file and running an ansible playbook.  Tomorrow I’ll likely pipe all log files over the network to Graylog but until then I have my tailsidekiq command.&lt;/p&gt;

&lt;h1 id=&quot;sidebar-why-use-rvm-with-a-single-ruby&quot;&gt;Sidebar: Why Use RVM With a Single Ruby?&lt;/h1&gt;

&lt;p&gt;I know someone’s going to ask this so I may as well answer it.  RVM is the easiest way, that I’ve found, to get Ruby installed anywhere.  Even with a single Ruby, RVM makes getting it installed better.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ansible/2016/10/13/ansible-tutorial-02-configuring-a-sidekiq-upstart-job-on-ubuntu-14-04.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ansible/2016/10/13/ansible-tutorial-02-configuring-a-sidekiq-upstart-job-on-ubuntu-14-04.html</guid>
        
        <category>ansible</category>
        
        <category>sidekiq</category>
        
        <category>ruby</category>
        
        <category>rvm</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>OSX Tip - How to Reposition Your Dock When Google Hangout Messes With It</title>
        <description>&lt;p&gt;So I did an Elixir pair programming session with &lt;a href=&quot;http://www.nickjanetakis.com&quot;&gt;Nick&lt;/a&gt; today and he and I talked Elixir and tried to get some stuff done with it.  We were only marginally successful and the issue was me not him.  A few different things blew up today and then other things when wrong and, well, everything.  Nick is a Google Hangouts fan and perhaps the last person on the planet to not have Skype installed on his development system so we used Google Hangouts.  This led to my inevitable Google Hangouts issues.  Today the browser I used last time failed to work correctly with the microphone (Vivaldi) but Google Chrome itself did work.  Sigh.  But Google Chrome, running Hangouts, decided:&lt;/p&gt;

&lt;p&gt;“Hey!  I’m going to take over your dual monitor setup and relocate your dock and command+tab application switching off your primary monitor and jam it onto your secondary monitor.”&lt;/p&gt;

&lt;p&gt;Grrr….  So rather than luxuriating in my Dell ultra wide monitor with plenty of screen real estate, I was jammed onto a tiny MacBook air monitor and my Dock was wrong and so was everything else.  And after the screen sharing shut down it was still borked.  Here’s how to fix that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Goto System Preferences.&lt;/li&gt;
  &lt;li&gt;Select Dock.&lt;/li&gt;
  &lt;li&gt;Change the Dock position.  If you have it on bottom then put it on left.&lt;/li&gt;
  &lt;li&gt;Change it back to where it was.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even running &lt;a href=&quot;https://fuzzygroup.github.io/blog/osx/2016/08/30/using-missioncontrol-and-loving-it.html&quot;&gt;Mission Control with Total Spaces&lt;/a&gt; on top of that it still worked.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/osx/2016/10/12/osx-tip-how-to-reposition-your-dock-when-google-hangout-messes-with-it.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/osx/2016/10/12/osx-tip-how-to-reposition-your-dock-when-google-hangout-messes-with-it.html</guid>
        
        <category>osx</category>
        
        <category>spaces</category>
        
        <category>dock</category>
        
        <category>virtual_desktop</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Hacking Bundler For Fun, Profit and Less Anger at the World</title>
        <description>&lt;p&gt;I recently wrote a blog post about my rage at Bundler and the fact that I have to manually remember than when the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install json -v1.8.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;blows up, I have to remember to instead use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install json -v1.8.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As someone who has consulted on a LOT of different ruby code bases, I see this constantly.  At times it feels that every time I start a project I have to face some kind of gem / bundler issue.  Now my friend Nick would argue that this is really something best solved by Docker and he does have a point.&lt;/p&gt;

&lt;p&gt;But me?  I’m stubborn.  I want this fixed and I’m finally willing to stop bitching and write some code to do so.  I mean that’s what open source is about.&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;People are universally bad at remembering complex things.  And when complex things have negative contexts, they are even worse at remembering them.  I &lt;strong&gt;hate&lt;/strong&gt; gem failures.  And I don’t mean I hate them a little - gem install failures send me into a rage.  And every time I fix it, I promptly forget about it.  What I want to do is tell bundler about the solution I found to the problem.  I want bundler to &lt;strong&gt;learn&lt;/strong&gt;.  Here’s my proposed syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle learn bad=&quot;&quot; good=&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here’s an actual example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle learn bad=&quot;gem install json -v1.8.1&quot; good=&quot;gem install json -v1.8.3&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what do we need to make a learn option work?  Here’s my initial thoughts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need to add learn as an option with two parameters, good and bad.&lt;/li&gt;
  &lt;li&gt;We need a method which takes the two parameters and saves them to disc&lt;/li&gt;
  &lt;li&gt;We need test coverage&lt;/li&gt;
  &lt;li&gt;We need to hook into the overall failure mode and display any things that we learned that have a close match to the actual failure.&lt;/li&gt;
  &lt;li&gt;Long term: Allow these learnings to be shared over the Internet so that other people can benefit from the issues that you solved.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-context---in-the-minivan&quot;&gt;The Context - In the Minivan&lt;/h1&gt;

&lt;p&gt;When I thought of this I was out and about with my wife and teenage son on &lt;em&gt;The Great Home Schooling Lobster Misadventure&lt;/em&gt;.  While they were shopping before we picked up the lobster that we needed, I thought of this sitting in a minivan in the parking lot.  I don’t have a lot of time and I don’t have much in the way of connectivity so here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Found the &lt;a href=&quot;https://github.com/bundler/bundler&quot;&gt;bundler source&lt;/a&gt; on github.&lt;/li&gt;
  &lt;li&gt;Forked it to my &lt;a href=&quot;https://github.com/fuzzygroup/bundler&quot;&gt;github account&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Cloned it to my local box.&lt;/li&gt;
  &lt;li&gt;Changed to the right directory.&lt;/li&gt;
  &lt;li&gt;Set the ruby version with RVM.&lt;/li&gt;
  &lt;li&gt;Opened the directory in TextMate with mate .&lt;/li&gt;
  &lt;li&gt;Read DEVELOPMENT.md and do steps 1 (groff), 2 (dependencies) 3 (run tests) and 4 (shell alias).&lt;/li&gt;
  &lt;li&gt;Try and figure out where this might go.  And fail &lt;strong&gt;miserably&lt;/strong&gt; – bundler is big!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you think about the code that I want to write, I actually don’t need to understand very much about bundler.  All I need to do, at least to start, is add a command line option that writes some data to a file.  Making this get looked up by a bundler failure obviously will be harder.&lt;/p&gt;

&lt;h1 id=&quot;search-to-the-rescue&quot;&gt;Search to the Rescue!&lt;/h1&gt;

&lt;p&gt;Whenever I’m faced with a complex code base and the need to find an integration point, I always, always do the same thing – I &lt;strong&gt;search&lt;/strong&gt;.  My rationale was this:&lt;/p&gt;

&lt;p&gt;There must be a relatively unused command line option in bundler.  If its relatively unused there won’t be a lot of calls to it so finding it should be simple.&lt;/p&gt;

&lt;p&gt;Running bundle –help and paging thru the results showed me the viz option which I had never heard of.  Here’s a screen shot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/bundler_viz.png&quot; alt=&quot;bundler_viz.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hacking-clirb&quot;&gt;Hacking cli.rb&lt;/h1&gt;

&lt;p&gt;What I found was cli.rb where there was a method that seemed to indicate that you could patch in.  Here’s what it looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;desc &quot;viz [OPTIONS]&quot;, &quot;Generates a visual dependency graph&quot;
long_desc &amp;lt;&amp;lt;-D
  Viz generates a PNG file of the current Gemfile as a dependency graph.
  Viz requires the ruby-graphviz gem (and its dependencies).
  The associated gems must also be installed via 'bundle install'.
D
method_option :file, :type =&amp;gt; :string, :default =&amp;gt; &quot;gem_graph&quot;, :aliases =&amp;gt; &quot;-f&quot;, :desc =&amp;gt; &quot;The name to use for the generated file. see format option&quot;
method_option :format, :type =&amp;gt; :string, :default =&amp;gt; &quot;png&quot;, :aliases =&amp;gt; &quot;-F&quot;, :desc =&amp;gt; &quot;This is output format option. Supported format is png, jpg, svg, dot ...&quot;
method_option :requirements, :type =&amp;gt; :boolean, :default =&amp;gt; false, :aliases =&amp;gt; &quot;-R&quot;, :desc =&amp;gt; &quot;Set to show the version of each required dependency.&quot;
method_option :version, :type =&amp;gt; :boolean, :default =&amp;gt; false, :aliases =&amp;gt; &quot;-v&quot;, :desc =&amp;gt; &quot;Set to show each gem version.&quot;
method_option :without, :type =&amp;gt; :array, :default =&amp;gt; [], :aliases =&amp;gt; &quot;-W&quot;, :banner =&amp;gt; &quot;GROUP[ GROUP...]&quot;, :desc =&amp;gt; &quot;Exclude gems that are part of the specified named group.&quot;
def viz
  require &quot;bundler/cli/viz&quot;
  Viz.new(options.dup).run
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what I need is a similar routine that gets called when the learn option is entered on the command line.  My first several attempts were fairly miserable failures but here’s what I ended up with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;desc &quot;learn [OPTIONS]&quot;, &quot;Allows bundler to learn that what to do when a command is broken&quot;

long_desc &amp;lt;&amp;lt;-D
  learn stores your personal approach to getting around gem breakages.
  Example: bundle learn bad=&quot;gem install json -v1.8.1&quot; good=&quot;gem install json -v1.8.3&quot;.
  will prompt you with the correct command when the failure occurs
D
method_option &quot;bad&quot;, :type =&amp;gt; :string, :default =&amp;gt; &quot;&quot;, :aliases =&amp;gt; &quot;-b&quot;, :desc =&amp;gt; &quot;The bad gem command&quot;
method_option &quot;good&quot;, :type =&amp;gt; :string, :default =&amp;gt; &quot;&quot;, :aliases =&amp;gt; &quot;-g&quot;, :desc =&amp;gt; &quot;The good gem command&quot;

def learn
  require &quot;bundler/cli/learn&quot;
  raise &quot;Hit learn!!!&quot;
  Learn.new(options.dup).run
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That require statement means that I needed to create bundler/cli/learn.rb immediately or I’d get a nasty missing file error.  No big deal though.&lt;/p&gt;

&lt;p&gt;This can be called with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; dbundle learn --bad=&quot;gem install json -v '1.8.1'&quot; --good=&quot;update your ruby&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; dbundle learn --bad=&quot;gem install json -v '1.8.1'&quot; --good=&quot;gem install json -v1.8.3&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: Its called dbundle in this example since I have a local shell alias so my modified bundler will be run instead of bundler itself.&lt;/p&gt;

&lt;p&gt;Here’s an example of the output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dbundle learn --bad=&quot;gem install json --version='1.7.3'&quot; --good=&quot;update your ruby&quot;
--- ERROR REPORT TEMPLATE -------------------------------------------------------
- What did you do?

  I ran the command `/Users/sjohnson/me/fuzzygroup/rails/bundler/exe/bundle learn --bad=gem install json --version='1.7.3' --good=update your ruby`

- What did you expect to happen?

  I expected Bundler to...

- What happened instead?

  Instead, what happened was...


Error details

    RuntimeError: Hit learn!!!
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/cli.rb:426:in `learn'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/vendor/thor/lib/thor/command.rb:27:in `run'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/vendor/thor/lib/thor.rb:359:in `dispatch'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/cli.rb:20:in `dispatch'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/vendor/thor/lib/thor/base.rb:440:in `start'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/cli.rb:11:in `start'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/exe/bundle:32:in `block in &amp;lt;main&amp;gt;'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/lib/bundler/friendly_errors.rb:105:in `with_friendly_errors'
      /Users/sjohnson/me/fuzzygroup/rails/bundler/exe/bundle:24:in `&amp;lt;main&amp;gt;'

Environment

  Bundler   1.13.3
  Rubygems  2.6.6
  Ruby      2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]
  GEM_HOME  /Users/sjohnson/.rvm/gems/ruby-2.3.1
  GEM_PATH  /Users/sjohnson/.rvm/gems/ruby-2.3.1:/Users/sjohnson/.rvm/gems/ruby-2.3.1@global
  RVM       1.26.1 (latest)
  Git       2.2.1
  Platform  x86_64-darwin-15
  OpenSSL   OpenSSL 1.0.2h  3 May 2016
  rubygems-bundler (1.4.4)

      Bundler settings

  build.nokogiri
    Set for the current user (/Users/sjohnson/.bundle/config): &quot;--use-system-libraries&quot;
  disable_postit
    Set via BUNDLE_DISABLE_POSTIT: &quot;1&quot;
--- TEMPLATE END ----------------------------------------------------------------

Unfortunately, an unexpected error occurred, and Bundler cannot continue.

First, try this link to see if there are any existing issue reports for this error:
https://github.com/bundler/bundler/search?q=Hit+learn%21%21%21&amp;amp;type=Issues

If there aren't any reports for this error yet, please create copy and paste the report template above into a new issue. Don't forget to anonymize any private data! The new issue form is located at:
https://github.com/bundler/bundler/issues/new
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;so-now-we-need-a-method-so-bundler-can-learn&quot;&gt;So Now We Need a Method So Bundler Can Learn&lt;/h1&gt;

&lt;p&gt;If you think about what this needs to do, it looks something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Figure out if what you’re telling it to learn is a duplicate or not.&lt;/li&gt;
  &lt;li&gt;Write a file to some kind of local storage which files away the bad, good and machine details.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that’s actually fairly simple.  The hard part is figuring out where that data can live.  I honestly have no idea where that might go given the&lt;/p&gt;

&lt;h1 id=&quot;so-how-do-you-profit-from-this&quot;&gt;So How Do You Profit from this?&lt;/h1&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 16:55:30 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/bundler/2016/10/11/hacking-bundler-for-fun-profit-and-less-anger-at-the-world.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/bundler/2016/10/11/hacking-bundler-for-fun-profit-and-less-anger-at-the-world.html</guid>
        
        <category>bundler</category>
        
        <category>ruby</category>
        
        <category>open_source</category>
        
        <category>github</category>
        
        
        <category>bundler</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 17 - When You've Lost You Web Server, How to Find an AWS Resource</title>
        <description>&lt;p&gt;I find myself, at the time of this writing, in the middle of an embarrassing situtation for a web professional.  You see, the situation is this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I wrote a new feature&lt;/li&gt;
  &lt;li&gt;I deployed my new feature&lt;/li&gt;
  &lt;li&gt;I refreshed my page&lt;/li&gt;
  &lt;li&gt;My feature isn’t there&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great Googly Moogly!  I’ve lost my web server!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me explain one of the things about cloud hosting that’s disconcerting.  When you first move to the cloud, your impulse is to organize your computing resources the way you used to.  So if you used to have say 3 clusters of powerful machines, that’s what you do.  Then you realize just how mind blowingly powerful a platform like AWS actually is and you start to think about &lt;strong&gt;Single Purpose Servers&lt;/strong&gt;.  A single purpose server is just what it sounds like – it does one thing.  And that’s fantastic because it makes trouble shooting so much easier.  When a server does only one thing, well, its easy to know if its broken.  And that’s great but do you know what the side effect of that is?  You don’t have a handful of servers anymore, you have a lot.  Me?  I’ve got over &lt;strong&gt;20&lt;/strong&gt; right now.  And somewhere in there is my web server.  But I can’t find it.  In this tutorial we’re going to quickly and easily figure this out.&lt;/p&gt;

&lt;h1 id=&quot;start-with-a-hypothesis&quot;&gt;Start with a Hypothesis&lt;/h1&gt;

&lt;p&gt;As normal we’re going to start with a theory - that is one of these three boxes:  fimariadb, ficrawler1, ficrawler2.  So our diagnostic dance, crude tho it may be, is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ssh into one of the boxes&lt;/li&gt;
  &lt;li&gt;sudo su -&lt;/li&gt;
  &lt;li&gt;apache2ctl stop&lt;/li&gt;
  &lt;li&gt;reload the page&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the page comes up, well, we know it wasn’t that one box.  So you then lather, rinse, repeat for each of the other 2 boxes.  And, at the end, we’re going to find out that it was none of these.&lt;/p&gt;

&lt;p&gt;You might be saying “Hey wait a minute – why would a web front end be on a box that does crawling?”  Well I’m still feeling all this out and I initially went for the old model where every box could do everything.  And that was a bad decision but I still have to live it for at least a little while longer.&lt;/p&gt;

&lt;h1 id=&quot;formulate-a-new-hypothesis---lets-use-ping&quot;&gt;Formulate a New Hypothesis - Let’s Use Ping!&lt;/h1&gt;

&lt;p&gt;Since our first plan failed, we need a new plan.  The program ping is a basic IP networking tool which lets us send a packet to a destination and if it answers, well, that means its alive.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping banks.finavd.com
PING web-1166333941.us-west-2.elb.amazonaws.com (52.41.182.115): 56 data bytes
64 bytes from 52.41.182.115: icmp_seq=0 ttl=47 time=67.589 ms
64 bytes from 52.41.182.115: icmp_seq=1 ttl=47 time=67.301 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ah ha!  We have an ip address of 52.41.182.115.  I know! I know!  I know!  I’ll just search for that ip address on EC2 dashboard.  And it will fail.  Now the smart kids in the back are already chuckling to themselves and they know the answer.&lt;/p&gt;

&lt;h1 id=&quot;hypothesis-3-elb-is-being-used&quot;&gt;Hypothesis 3: ELB Is Being Used&lt;/h1&gt;

&lt;p&gt;If you look at the url that responded, NOT the ip address, the answer is revealed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;web-1166333941.us-west-2.elb.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You see the text string “.elb.”?  That means that a piece of software called an Elastic Load Balancer is sitting in front of the http request and distributing the load out to one or more EC2 instances.  If you’ve ever used HAProxy, well, ELB is that only far, far better.  Let’s goto the AWS Console and select the Load Balancers option from the choices on the left:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/aws/aws_elb_01_overview.png&quot; alt=&quot;aws_elb_01_overview.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we’ll see an overview of all of our load balancers and their basic settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/aws/aws_elb_02_instances.png&quot; alt=&quot;aws_elb_02_instances.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the instances tab shows us where the HTTP request is being sent.  We can now goto the ec2 console and figure out what we need.  If you put the machine names into your &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/09/20/aws-tutorial-08-using-ssh-s-config-file-with-your-aws-boxes.html&quot;&gt;SSH Config as I recommended&lt;/a&gt; then you might not even need to goto the console.  In my case I just needed to know the names worker2 and worker2a and I know that they’re in my ssh config file and I can just add those boxes to my Capistrano deploy process.  And the “bug” is fixed!&lt;/p&gt;

&lt;h1 id=&quot;conclusion-and-suggestion&quot;&gt;Conclusion and Suggestion&lt;/h1&gt;

&lt;p&gt;I know that it must seem like I’m a bit of a buffoon – how can you lost a web server after all?  Well, things do happen when you move fast.  You start with one plan and then it doesn’t work and before you know it you have something working but its not where you originally planned.  And you mean to fix it but you get busy and then the next &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/01/aws-tutorial-10-diagnosing-ssh-failures-or-when-ping-works-but-ssh-fails.html&quot;&gt;crisis&lt;/a&gt; happens and you’re not even in the same head space any more.  And by the time you return to it over 10 days have passed.&lt;/p&gt;

&lt;p&gt;Here are some suggestions for setting up your AWS architecture to avoid this kind of silliness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name things well.&lt;/li&gt;
  &lt;li&gt;Name things logically.&lt;/li&gt;
  &lt;li&gt;Use the key value options when you set up your EC2 servers.  For example, having keys for both name and role might have helped.&lt;/li&gt;
  &lt;li&gt;Remember that there are often abstractions around everything.&lt;/li&gt;
  &lt;li&gt;Try and use single purpose servers from the start.  Yes the number of discrete servers increases complexity but their very single purpose nature makes debugging vastly easier.  And keep in mind that Amazon offers free servers.  Even a t2.micro free instance has 1 gig of ram and 8 gigs of storage.  I know that sounds funny but travel back in your head 5 years and that’s a beefy server and its &lt;strong&gt;FREE&lt;/strong&gt;.  If you’re just running something small, say Redis, Memcached, sendmail, etc that might be enough for a lot of applications.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 11:26:16 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-17-when-you-ve-lost-you-web-server-how-to-find-an-aws-resource.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-17-when-you-ve-lost-you-web-server-how-to-find-an-aws-resource.html</guid>
        
        <category>aws</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>What to Do When Bundle Install Fails with JSON 1.8.1</title>
        <description>&lt;p&gt;I cannot express my abject frustration at times with the Ruby ecosystem in general and bundler in particular.  When you hit this bug:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

    current directory: /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1/ext/json/ext/generator
/usr/local/rvm/rubies/ruby-2.3.1/bin/ruby -r ./siteconf20161011-22175-140avvd.rb extconf.rb
creating Makefile

current directory: /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1/ext/json/ext/generator
make &quot;DESTDIR=&quot; clean

current directory: /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1/ext/json/ext/generator
make &quot;DESTDIR=&quot;
compiling generator.c
In file included from generator.c:1:0:
../fbuffer/fbuffer.h: In function ‘fbuffer_to_s’:
../fbuffer/fbuffer.h:175:47: error: macro &quot;rb_str_new&quot; requires 2 arguments, but only 1 given
     VALUE result = rb_str_new(FBUFFER_PAIR(fb));
                                               ^
../fbuffer/fbuffer.h:175:20: warning: initialization makes integer from pointer without a cast [enabled by default]
     VALUE result = rb_str_new(FBUFFER_PAIR(fb));
                    ^
make: *** [generator.o] Error 1

make failed, exit code 2

Gem files will remain installed in /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1 for inspection.
Results logged to /usr/local/rvm/gems/ruby-2.3.1/extensions/x86_64-linux/2.3.0/json-1.8.1/gem_make.out

An error occurred while installing json (1.8.1), and Bundler cannot continue.
Make sure that `gem install json -v '1.8.1'` succeeds before bundling.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve hit this error, I suspect, a few hundred times and I always forget the solution.  And I’m not the only one.  &lt;a href=&quot;http://dasari.me&quot;&gt;Dv&lt;/a&gt; and I hit this together today and we shot about 20 minutes today to need this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install json -v1.8.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thank you &lt;a href=&quot;http://stackoverflow.com/questions/21095098/why-wont-bundler-install-json-gem&quot;&gt;Stack Overflow&lt;/a&gt; for this answer.  Even if it was buried so deep in the thread that I almost missed it.&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ruby/2016/10/11/what-to-do-when-bundle-install-fails-with-json-1-8-1.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ruby/2016/10/11/what-to-do-when-bundle-install-fails-with-json-1-8-1.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>json</category>
        
        <category>gem</category>
        
        <category>bundle</category>
        
        <category>things_that_make_me_postal</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 15 - SSH Take 3 - Using Ansible To Diagnose my SSH Troubles</title>
        <description>&lt;p&gt;Everyone wants to think that that complex computing problems are solved with a single flash of blinding insight.  And sometimes you do have that one epiphany that brings everything home.  But, more often than not, computing problems are solved by dogged persistence, by being more stubborn than the problem itself and by careful, diligent incremental progress where you observe the problem in question, altering one variable at a time until you understand what’s happening.&lt;/p&gt;

&lt;p&gt;In this step of our ongoing SSH disaster, we’re going to use Ansible to gather metrics on our running system and give ourselves a command line tool we can execute regularly.  By building this into a single command line tool, we can run it quickly and easily.  When we can do things quickly and easily we will do them more frequently and more frequency means more data.  And, I tend to believe that more data gives us the opportunity for more insights.&lt;/p&gt;

&lt;h1 id=&quot;a-hypothesis&quot;&gt;A Hypothesis&lt;/h1&gt;

&lt;p&gt;We’ve been working on the hypothesis that what’s going on is a problem of memory leaks causing an out of memory (OOM) condition on our Linux EC2 instance.  And even though Linux is supposed to kill a run away process that uses too much memory that doesn’t seem to be happening.  And, no, I don’t understand why.&lt;/p&gt;

&lt;p&gt;There are two basic compute resources that cause any Linux or Unix systems to have problems when they run low:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;memory&lt;/li&gt;
  &lt;li&gt;disc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux has two tools that we can always run when we’re logged into a linux system to monitor these resources:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df -h

df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            7.5G   12K  7.5G   1% /dev
tmpfs           1.5G  376K  1.5G   1% /run
/dev/xvda1      7.8G  5.5G  1.9G  75% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            7.5G     0  7.5G   0% /run/shm
none            100M     0  100M   0% /run/user

free -m

free -m
             total       used       free     shared    buffers     cached
Mem:         15298       8184       7114          0        201       1250
-/+ buffers/cache:       6732       8566
Swap:            0          0          0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;a-script&quot;&gt;A Script&lt;/h1&gt;

&lt;p&gt;What we’re going to do is write a tiny script, in Ruby, that we can use to monitor these resources.  And while there are literally hundreds of different monitoring tools that could do this for us, we’re going to do it ourselves so we introduce the smallest possible changes to our environments.  I call this type of approach reducing things to &lt;strong&gt;first principles&lt;/strong&gt;.  Yes a real monitoring tool would be far more powerful but setting it up would take a bunch of time, introduce multiple changes and then we’d have to learn how to use it.  We’re going to write our Ruby script in about 10 minutes and we’re done.&lt;/p&gt;

&lt;p&gt;Here’s all you need:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;script/free_memory.rb

#!/usr/local/rvm/rubies/ruby-2.3.1/bin/ruby
output = %x(free)
parts = output.split(&quot; &quot;)
total_memory = parts[7].to_i
used_memory = parts[8].to_i
free_memory = parts[9].to_i
output = %x(df -h)
parts = output.split(&quot; &quot;)
free_disc = parts[22]
used_disc = parts[23]
puts  &quot;Total Memory: #{total_memory} (#{total_memory/1024 / 1024} gb) / Used Memory: #{used_memory} (#{used_memory/1024 / 1024} gb) / Free Memory: #{free_memory} (#{free_memory/1024 / 1024} gb) / Free Disc: #{free_disc} / % Used Disc: #{used_disc}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is what I call hobbesian coding after the British philosopher Thomas Hobbes who coined the expression &lt;strong&gt;Life is nasty, brutish and short&lt;/strong&gt;.  This is ugly but its quick.  All we need to do is run the command and capture the output.  This is done with output = %x(free) and output = %x(df -h).  We then split it into an array on the space character and then map it to variables.  Finally we have a single puts statement that we displays the result and does some math.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This could have been written in anything.  Bash / awk would have been great for it but I’m a Ruby guy so I use the tool that I know.&lt;/p&gt;

&lt;h1 id=&quot;the-ansible-connection&quot;&gt;The Ansible Connection&lt;/h1&gt;

&lt;p&gt;If you remember, I said &lt;em&gt;Linux has two tools that we can always run when we’re logged into a linux system&lt;/em&gt;, well being logged into a system is what Ansible &lt;strong&gt;does&lt;/strong&gt;.  Ansible is brilliant because it runs via ssh.   SSH means you have a login so  all we need to monitor our box is an ansible ad hoc command to run this and here that is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -i inventories/production2 -u ubuntu -a &quot;/var/www/apps/banks/current/script/free_memory.rb&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That tells Ansible to run on all boxes in the inventories/production2 collection using the username ubuntu and then run whatever code exists at /var/www/apps/banks/current/script/free_memory.rb.&lt;/p&gt;

&lt;p&gt;And here’s an example of the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -i inventories/production2 -u ubuntu -a &quot;/var/www/apps/banks/current/script/free_memory.rb&quot;
ficrawlerbig | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 351564 (0 gb) / Free Memory: 15314576 (14 gb) / Free Disc: 1.2G / % Used Disc: 84%

ficrawler4 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 327688 (0 gb) / Free Memory: 15338452 (14 gb) / Free Disc: 1.5G / % Used Disc: 81%

fiweb1 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 65966140 (62 gb) / Used Memory: 3847964 (3 gb) / Free Memory: 62118176 (59 gb) / Free Disc: 305M / % Used Disc: 96%

ficrawler3 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 8385776 (7 gb) / Free Memory: 7280364 (6 gb) / Free Disc: 1.9G / % Used Disc: 75%

ficrawler5 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 9511684 (9 gb) / Free Memory: 6154456 (5 gb) / Free Disc: 1.2G / % Used Disc: 85%

ficrawler6 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 946336 (0 gb) / Free Memory: 14719804 (14 gb) / Free Disc: 1.4G / % Used Disc: 83%

ficrawler10 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 351416 (0 gb) / Free Memory: 15314724 (14 gb) / Free Disc: 1.2G / % Used Disc: 84%

ficrawler7 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 12421004 (11 gb) / Free Memory: 3245136 (3 gb) / Free Disc: 2.0G / % Used Disc: 74%

ficrawler8 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 4821588 (4 gb) / Free Memory: 10844552 (10 gb) / Free Disc: 1.4G / % Used Disc: 82%

ficrawler9 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve now been running this repeatedly for several days.  And I’ve learned that I can now pretty well predict when failures are going to occur.  I can also use this to diagnose problems on the boxes.  What we know is that if we’re running a heavy weight process like Sidekiq that is literally chewing through memory, the used memory column should actually show something.  If you look above you can see that ficrawler4 has (0 gb) in use.  That means that something has gone wrong.  So if we log into the box and change to the tmux session where this is executing, here’s what we find:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;after get_mechanize_links_on_a_pageKilled                                                                                                                                                           │·····························
__AWS_PRODUCTION__ ubuntu@ip-172-31-32-54:/var/www/apps/banks/current$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s interesting, isn’t it?  This is actually what’s supposed to happen.  When you see Killed on a Linux machine it means that the OOM actually worked for a change.  Praise Be!  And if we log into the box ficrawler10 we will actually find the same thing.  But when we log into ficrawler6, here’s what we find:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh ficrawler6
ssh_exchange_identification: read: Connection reset by peer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sigh.  Now that’s the whole problem we’re suffering from.  Now here’s what that means – this crash of ssh – just happened!  I’ve been writing this post in real time and running this ad hoc ansible command so about 5 minutes ago ansible could ssh in and run the command.  Now it can’t.  So what that means is that there is a time period where we have 0 gb free and the system is still responsive.  That’s &lt;strong&gt;really&lt;/strong&gt; interesting.  What that means is that we could manually ssh into the box, if we caught it soon enough, and restart the sidekiq process and NOT have to restart the whole box.&lt;/p&gt;

&lt;p&gt;Hm… I need to think about that and I’m pretty sure that it is &lt;strong&gt;important&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what happens on ficrawler6 when we run our ansible routine again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ficrawler6 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve learned some valuable things from gathering metrics and being able to run them easily.  Lots of people would have taken the approach of using an off the shelf tool for this and while tools are great, they’re big.  And they can be intrusive.  Breaking things down to first principles helps you understand.  And sure our ruby script for this is absolute crap.  Move it to a different distro and formatting will likely be off and it will break.  Who cares?  We spent 10 minutes writing it.&lt;/p&gt;

&lt;h1 id=&quot;credit&quot;&gt;Credit&lt;/h1&gt;

&lt;p&gt;A Shout Out to &lt;a href=&quot;http://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; who was a consultant on &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/06/aws-tutorial-14-diagnosing-ssh-failures-take-2.html&quot;&gt;Take 2&lt;/a&gt; of this series of posts.  The first thing Nick said was disc space and I probably wouldn’t have thought to include disc space monitoring in my Ruby script if he hadn’t done that.  Thanks man!&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-15-using-ansible-to-diagnose-my-ssh-troubles.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-15-using-ansible-to-diagnose-my-ssh-troubles.html</guid>
        
        <category>aws</category>
        
        <category>ansible</category>
        
        <category>ssh</category>
        
        <category>ruby</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Rates</title>
        <description>&lt;p&gt;Picture of me on the side&lt;/p&gt;

&lt;p&gt;Resume link&lt;/p&gt;

&lt;p&gt;On a short term basis my rate is $200 per hour.  If you’d like to negotiate an ongoing arrangement that can be done and that can pretty dramatically affect the rate.&lt;/p&gt;

&lt;p&gt;Here’s what I bring to the table&lt;/p&gt;

&lt;p&gt;What can I do for you?&lt;/p&gt;

&lt;p&gt;Who the Heck Are You?&lt;/p&gt;

&lt;p&gt;At heart I’m a software engineer.  Nothing makes me happier than solving complex problems with code.  But I can also qualify as senior technical staff for an organization.&lt;/p&gt;

&lt;p&gt;What Have You Built&lt;/p&gt;

&lt;p&gt;Over the years I’ve built a lot of shipping products including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The HyperWriter family of authoring tools - HyperWriter, HyperWriter for Training, HyperWriter Professional, HyperAwk&lt;/li&gt;
  &lt;li&gt;The Doctor Dobbs Journal on CD-ROM&lt;/li&gt;
  &lt;li&gt;eduFire - An online marketplace for freelance educators and students to discover each other and run for pay video learning sessions using the Adobe Connect platform (Rails)&lt;/li&gt;
  &lt;li&gt;The Feedster blog search platform&lt;/li&gt;
  &lt;li&gt;AppData -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that doesn’t count the different products I’ve consulted on from time to time.  That’s just the full stack systems I’ve been primarily responsible for developing.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Oct 2016 06:30:52 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/10/rates.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/10/rates.html</guid>
        
        
      </item>
    
      <item>
        <title>What Nick Taught Me About Udemy, eBooks and More</title>
        <description>
</description>
        <pubDate>Mon, 10 Oct 2016 05:56:22 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/udemy/2016/10/10/what-nick-taught-me-about-udemy-ebooks-and-more.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/udemy/2016/10/10/what-nick-taught-me-about-udemy-ebooks-and-more.html</guid>
        
        <category>udemy</category>
        
        <category>ebooks</category>
        
        
        <category>udemy</category>
        
      </item>
    
  </channel>
</rss>
