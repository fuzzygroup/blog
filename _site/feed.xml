<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>https://fuzzyblog.io//blog/</link>
    <atom:link href="https://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 18 Jan 2017 13:10:30 -0500</pubDate>
    <lastBuildDate>Wed, 18 Jan 2017 13:10:30 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Startup Learnings - What Hong Lai Taught Me</title>
        <description>&lt;p&gt;/blog/assets/hong_lai.png&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 12:04:38 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/2017/01/18/startup-learnings-what-hong-lai-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/2017/01/18/startup-learnings-what-hong-lai-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Building Hyde 01 - Understanding Twitter Tags</title>
        <description>&lt;p&gt;https://alligator.io/jekyll/twitter-cards/&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 11:44:54 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/2017/01/18/building-hyde-01-understanding-twitter-tags.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/2017/01/18/building-hyde-01-understanding-twitter-tags.html</guid>
        
        
      </item>
    
      <item>
        <title>Why I Didn't Look at Phusion's Union Station But You Should</title>
        <description>&lt;p&gt;Of all the companies that populate the Ruby and Rails world, I think my absolute favorite is &lt;a href=&quot;http://www.phusion.nl&quot;&gt;Phusion&lt;/a&gt;.  I was early into the Rails space – 2007 so I date back to the days of Mongrel based rails installations and when &lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Passenger&lt;/a&gt; from Phusion came out, it was a revelation.  Running a rails application went from a “How the F do I do this” to “I’ll use Passenger and it will just work”.  And Hong Lai is to me a stellar example of how to support an Open Source product.  I cannot say how many times I’ve been researching something and, damn, there’s Hong Lai answering stuff.  The man is a damn machine and I mean that in the very best of ways.  Once upon a time I was a Ruby Enterprise Edition customer for Passenger and other times I’ve been a paid support customer.  And it is all because of the quality of Passenger and the tireless work of Hong Lai.  Every single time I go to deploy a Rails app, I reach for Passenger – it is just that good.&lt;/p&gt;

&lt;p&gt;Phusion has a new product, &lt;a href=&quot;https://www.unionstationapp.com/&quot;&gt;Union Station&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.unionstationapp.com/images/dashboard.png&quot; alt=&quot;https://www.unionstationapp.com/images/dashboard.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Stock image; I never got it running for my apps; alas.)&lt;/p&gt;

&lt;p&gt;And it is squarely in my sweet spot of tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For ruby / rails&lt;/li&gt;
  &lt;li&gt;Deals with performance / scalability&lt;/li&gt;
  &lt;li&gt;Is NOT New Relic&lt;/li&gt;
  &lt;li&gt;Is priced reasonably / rationally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately I am unlikely to look at Union Station and there is a lesson here about &lt;strong&gt;software marketing&lt;/strong&gt; that I think is illustrative.  The first thing to understand is that the person handling my account, &lt;strong&gt;Tinco&lt;/strong&gt;, has been absolutely excellent - he has been helpful, timely and I can’t say anything bad about him as a sales person – which rare for me.  The problem here is that Phusion wants me to make a decision with only 1 to 2 weeks of time.  This is a product that I’m going to need to evaluate at a pretty deep level to make a buying decision and I refuse to rush that kind of thing.  Even just understanding performance tools is hard and takes quite a bit of time.  What happened to me is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I requested the evaluation when I had free time to deal with it&lt;/li&gt;
  &lt;li&gt;There was some kind of glitch where my account wouldn’t activate&lt;/li&gt;
  &lt;li&gt;By the time my account was fixed, there was some other higher priority problem that I had to deal with&lt;/li&gt;
  &lt;li&gt;Now that I have the time, my account is expired&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My problem is with time limited evaluations in general – people these days are &lt;strong&gt;busy&lt;/strong&gt;.  And time limited evaluations, particularly for complex products, are hard to get around to.  This is particularly true for a product where real data needs to be gathered and you might not have an immediate use case for it.  In our case we do intensive processing under Passenger only about once per month.  So with a week long evaluation period, the timing just didn’t work out.&lt;/p&gt;

&lt;p&gt;Yes I can ask for more time and I’m sure that Tinco would grant it; that’s not the point.  This is a general problem with selling complex products to busy people with limited time; I don’t think I’m alone in this.&lt;/p&gt;

&lt;p&gt;Now, with all that said, companies do need to close sales leads – I get that.  I don’t know if there is a solution to this problem.  My personal preference would be usage based or capacity based i.e. I’d like to be able to install Union Station and use it for say 100 times in order to make a decision but that, while good for me, is directly against their interests.&lt;/p&gt;

&lt;p&gt;Overall I’m impressed with Union Station and I suspect if you’re in the Rails space you should look at it.  The pricing model looks particularly rational which, having been burned by New Relic in years past, appeals to me.  Personally I’m going to wait until I have a more pressing front end project in mind but that’s coming up soon for me.&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/rails/2017/01/18/why-i-didn-t-look-at-phusion-s-union-station-but-you-should.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/rails/2017/01/18/why-i-didn-t-look-at-phusion-s-union-station-but-you-should.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>startup</category>
        
        <category>marketing</category>
        
        <category>oobe</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Nylas Mail Review</title>
        <description>&lt;p&gt;Nylas N1 is a new email client that has just been released as free and open source.  And, as a piece of software, it is also actually &lt;strong&gt;good&lt;/strong&gt;.  Among people that know me in the real world, I am notorious for handling personal email poorly if at all and I actually used it for quite a while last night.  Now that’s a great sign for a new app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas.png&quot; alt=&quot;nylas.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;overall&quot;&gt;Overall&lt;/h1&gt;

&lt;p&gt;I actually &lt;strong&gt;really like&lt;/strong&gt; this application and I’m intending to use it to see if perhaps, in 2017, I can put on my big boy pants and deal with email as a professional (i.e. daily). The fact that it works for OSX, Windows and Linux is a huge, huge win.  The UI is impressively good and they’ve open sourced it which means that it has potential to get better – fast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I just tried to install it under Linux and its apparently not fully read yet.  Alas, sigh.&lt;/p&gt;

&lt;p&gt;There is some impressively good thinking here&lt;/p&gt;

&lt;p&gt;Now, that said, I’m still impressed.  I’ll be even more impressed when I can run it on my wide screen Linux desktop with 32 gigs of memory.&lt;/p&gt;

&lt;p&gt;Kudos to the good folks at Nylas and &lt;strong&gt;&lt;em&gt;Thank You&lt;/em&gt;&lt;/strong&gt; – you just made not only the personal computing world a little bit richer but also the open source world.&lt;/p&gt;

&lt;h1 id=&quot;the-bad---memory-usage&quot;&gt;The Bad - Memory Usage&lt;/h1&gt;

&lt;p&gt;Nylas is an Electron app and that means that memory consumption is going to be an issue.  Now I’m old school – &lt;a href=&quot;https://en.wikipedia.org/wiki/TRS-80&quot;&gt;my first computer&lt;/a&gt; had 4K in it and I’ve known people who owned things like the &lt;a href=&quot;https://en.wikipedia.org/wiki/KIM-1&quot;&gt;KIM-1&lt;/a&gt;.  Sure I moved it to 48K as soon as I could but I started small.  That’s why when I see an application like Nylas and how it uses memory it makes me want to &lt;a href=&quot;https://www.youtube.com/watch?v=SZGEiz2cpEw&quot;&gt;weep and then die&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the memory usage after I had used it for about a half hour, 979 megs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_memory_12_hours_earlier.png&quot; alt=&quot;nylas_memory_12_hours_earlier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an additional test I left Nylas running all night long and the next morning it had eaten another 100 megs of RAM:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_memory_12_hours_earlier.png&quot; alt=&quot;nylas_memory_12_hours_earlier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is important to understand that this isn’t all that different from Slack which clocked in at 1.68 gigs.  Here’s my Slack memory usage after multiple days up and running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/slack_after_multiple_days.png&quot; alt=&quot;slack_after_multiple_days.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;

&lt;p&gt;As I write this, I’m seeing very bad performance which is surprising because last night it was actually pretty peppy.  My guess is that with a release yesterday the backend servers which drive Nylas are likely under heavy load right now so even thought my second time experience isn’t all that great, I’m going to give Nylas a pass on performance right now.&lt;/p&gt;

&lt;h1 id=&quot;the-bad---ui-glitches&quot;&gt;The Bad - UI Glitches&lt;/h1&gt;

&lt;p&gt;Note: I mostly reviewed Nylas using the two panel theme.  Some of the problems I experienced you might not see at all if you use the one panel theme.&lt;/p&gt;

&lt;p&gt;I did notice a few screen related UI rendering glitches around selection of non-contiguous mails in a list view.  Here’s an example (5 selected but only 2 shown as selected).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_selection_problems.png&quot; alt=&quot;nylas_selection_problems.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the key Nylas features is the ability to display contextual information related to the emailer and that’s excellent but the app really calls for a very portait style, wide screen monitor.  I’ve seen it get to point where the contextual information was clipping off the right hand side of the message.  Here’s a screenshot that shows this experience but not the clipping:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_clipping.png&quot; alt=&quot;nylas_clipping.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One very real concern that I have is that the Send button is way at the bottom of the screen so if you have a long email there’s a lot of scrolling just to say “Ok” or “Can we reschedule?”.&lt;/p&gt;

&lt;p&gt;Some smaller things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I have Choosy installed on OSX which is supposed to intercept calls to Safari and let you pick which browser to open links in.  Nylas somehow gets around this and launches Safari even though I have 3 other browsers open.  Sigh.&lt;/li&gt;
  &lt;li&gt;I have scroll bars set to always be displayed and Nylas doesn’t respect that.  So I have to click into a content region just to get a scroll bar to scroll.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/email/2017/01/18/nylas-mail-review.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/email/2017/01/18/nylas-mail-review.html</guid>
        
        <category>email</category>
        
        <category>nylas</category>
        
        <category>slack</category>
        
        
        <category>email</category>
        
      </item>
    
      <item>
        <title>Work Life Balance - When Did This Become Acceptable?</title>
        <description>&lt;p&gt;Once upon a time, not so long ago, I had to say to someone who reports to me this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey.  Bob (my manager) asked me to tell you that you should start reading up on Ansible in your off hours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What.  The.  Hell.  When did our work life balance get so out of whack that our managers now don’t see anything wrong with telling us WHAT TO READ WHEN WE AREN’T AT WORK???&lt;/p&gt;

&lt;p&gt;I cannot remember the last time I’ve felt as morally dirty and compromised as I did in that moment.  As a full time employee, which this person was, he is expected to work 40 hours per week.  If a new skill is &lt;strong&gt;required&lt;/strong&gt; for his job then shouldn’t he get to pick it up on the job?  Sheesh.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 17:04:28 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/work/2017/01/17/work-life-balance-when-did-this-become-acceptable.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/work/2017/01/17/work-life-balance-when-did-this-become-acceptable.html</guid>
        
        <category>feels_slimy</category>
        
        <category>work_life_balance  </category>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>SED Example - The Swiss Army Chainsaw of Text Changes</title>
        <description>&lt;p&gt;The unix command line tool sed is one of those things that you don’t know you need – until you need it worse than anything in the whole damn world and then nothing else does what sed does.  sed which I’m pretty sure is short for streaming editor is a tool which does an edit on a file via regular expressions without actually opening the file in an interactive fashion.  This means that you can edit, oh say a 100 meg file, and do it &lt;strong&gt;fast&lt;/strong&gt;.  In years past I used sed for surgery on large MySQL dump files but I haven’t touched it since 2003 when I lived in Newton, Massachusetts back the old blogging days.&lt;/p&gt;

&lt;p&gt;My buddy &lt;a href=&quot;http://www.nickjanetakis.com/&quot;&gt;Nick&lt;/a&gt; and I were pairing today and we had to update a Sphinx Search config file.  I stumbled over the vim search and replace syntax and he was like here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed -ie 's/old/new/g' hello.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and with that one example I knocked it out in nothing flat.  What this example does is search for the regex &lt;em&gt;old&lt;/em&gt; and replace it with &lt;em&gt;new&lt;/em&gt; and do it globally in the file hello.txt.&lt;/p&gt;

&lt;p&gt;Here’s a good tutorial on &lt;a href=&quot;http://www.grymoire.com/Unix/Sed.html&quot;&gt;sed&lt;/a&gt;.  Recommended.  Thanks Nick!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 16:24:23 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/text_processing/2017/01/17/sed-example-the-swiss-army-chainsaw-of-text-changes.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/text_processing/2017/01/17/sed-example-the-swiss-army-chainsaw-of-text-changes.html</guid>
        
        <category>sed</category>
        
        
        <category>text_processing</category>
        
      </item>
    
      <item>
        <title>Porting Your MySQL Database to Amazon AWS - RDS or Your Own Db Server</title>
        <description>&lt;p&gt;Amazon RDS Aurora - db.t2.medium - aurora: $0.082 - 1.968 - 718.32 / year (THIS OMITS STORAGE)
Amazon RDS MariaDB - db.t2.micro - micro maria $0.017 - 0.408 - 148.92 / year
Amazon Your Own Instance -&lt;/p&gt;

&lt;p&gt;$717.03 / MONTH for 3.3 tb of t2.medium aurora at 5% utilization&lt;/p&gt;

&lt;p&gt;PageDataPro - 573G
gPlusData - 115G
AppDataPro - 2.5T&lt;/p&gt;

&lt;p&gt;RDS Storage costs for 3.3T&lt;/p&gt;

&lt;p&gt;$328 for Maria DB for 3.3TB
$390 for RDS Aurora for 3.3 TB&lt;/p&gt;

&lt;p&gt;Usage doesn’t make that much difference - 1 hour per day usage takes the price from 390 down to 332&lt;/p&gt;

&lt;p&gt;http://calculator.s3.amazonaws.com/index.html&lt;/p&gt;

&lt;p&gt;More expensive to leave it in S3 then put it in a functional db server&lt;/p&gt;

&lt;p&gt;It is actually $365 per month if we put up our own DB server just to host 3.3 tb of databases&lt;/p&gt;

&lt;p&gt;https://blog.cloudability.com/aws-s3-understanding-cloud-storage-costs-to-save/&lt;/p&gt;

&lt;p&gt;here is a Reset All button in the upper left of the calculator.  $77.61 for 3.3 tb of data in S3
sounds about right, i got $75.9 with a calculator based on their latest pricing docs
and $13.2 for glacier
cool.  thx.
infrequence is about half of the standard price
*nt
still a lot cheaper over time do the HD unless you do glacier, then $150ish for a year isn’t too bad&lt;/p&gt;

&lt;p&gt;327 to have it in a 5% utilization db 
328.74 to have 3.3 TB of mysql storage in a t2.medium&lt;/p&gt;

&lt;p&gt;Learnings:
* the instance type doesn’t matter that much for RDS at least at the low end
* storage is very expensive
* utilization doesn’t matter much&lt;/p&gt;

&lt;p&gt;https://aws.amazon.com/ec2/pricing/on-demand/&lt;/p&gt;

&lt;p&gt;https://aws.amazon.com/rds/pricing/&lt;/p&gt;

&lt;p&gt;[1/17/17, 10:58:23 AM] J. Scott Johnson: we need about 3.3 tb of storage to do this and even with a bare bones instance on RDS - 717 / month | $718 on our own instance.
[1/17/17, 11:05:25 AM] J. Scott Johnson: It is actually $365 per month if we put up our own DB server just to host 3.3 tb of databases
[1/17/17, 11:06:25 AM] J. Scott Johnson: Given that there is no backups / no redundancy w/ our own server RDS is likely a better choice; just wondering if it is worth it at all.
[1/17/17, 11:08:45 AM] J. Scott Johnson: $77.61 / month if we just leave 3.3 TB of data in the S3 folders.  Cheapest thing would be to backup the data to S3, load it to RDS to confirm the validity fo the backups and hten discard the RDS instance.
[1/17/17, 11:13:13 AM] J. Scott Johnson: $45 / month if S3 access is “infrequent”  no clue what that means or how to do it.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 14:17:18 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/2017/01/17/porting-your-mysql-database-to-amazon-aws-rds-or-your-own-db-server.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/2017/01/17/porting-your-mysql-database-to-amazon-aws-rds-or-your-own-db-server.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails Tutorial - Making Awesome Print Work Everywhere</title>
        <description>&lt;p&gt;I know that Pry is the new hotness for command line Ruby work in a repl – but I’ve never felt comfortable with it.  I stick with the tried and true AwesomePrint.  I recently bootstrapped up two new boxes and I found that I’ve been using AwesomePrint so long that I don’t actually remember how to make it work.  And that, dear reader, is how I write a post – if I can’t rememeber it then I need to write it down.  Here are the steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need awesome_print in your Gemfile so add **gem ‘awesome_print’ **.  I put it into development and test groups only generally but it is awful convenient in production (but you need to follow step 3 server side on ALL servers which sucks).&lt;/li&gt;
  &lt;li&gt;Do the bundle install dance&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a file ~/.irbrc and add the following two lines:&lt;/p&gt;

    &lt;p&gt;require “awesome_print”
AwesomePrint.irb!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information of AwesomePrint, I’ve been going to &lt;a href=&quot;http://www.rubyinside.com/awesome_print-a-new-pretty-printer-for-your-ruby-objects-3208.html&quot;&gt;this web page&lt;/a&gt; for years now.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/rails/2017/01/17/rails-tutorial-making-awesome-print-work-everywhere.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/rails/2017/01/17/rails-tutorial-making-awesome-print-work-everywhere.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>awesome_print</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Blog Standards - It Is the Big Boy's World - We Just Play In It</title>
        <description>
</description>
        <pubDate>Mon, 16 Jan 2017 12:37:43 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/2017/01/16/blog-standards-it-is-the-big-boy-s-world-we-just-play-in-it.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/2017/01/16/blog-standards-it-is-the-big-boy-s-world-we-just-play-in-it.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails Tutorial - Making Font Awesome Work with Rails 5</title>
        <description>&lt;p&gt;Like a lot of back end folks I suspect I’m not alone when I look at a project like Font Awesome and go “Great Work; damn if I know how to actually use that.”  I’d normally toss it over the wall to a front end guy like my buddy &lt;a href=&quot;http://dv2.dasari.me&quot;&gt;Dv&lt;/a&gt; but this is for my side project so I’m all alone on this one.  Since I really, really don’t feel that I understand the world of front end work and CSS / SCSS very well I thought I’d write it all down for you (and myself).&lt;/p&gt;

&lt;h1 id=&quot;heres-what-not-to-do&quot;&gt;Here’s what not to do&lt;/h1&gt;

&lt;p&gt;I took a number of wrong steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I watched this &lt;a href=&quot;https://www.youtube.com/watch?v=RC_jIGABW-E&quot;&gt;video&lt;/a&gt; and it is really good – except for the specific steps he gave me didn’t work.  I really don’t understand why and it might have been me.&lt;/li&gt;
  &lt;li&gt;I used the &lt;a href=&quot;https://github.com/FortAwesome/font-awesome-sass&quot;&gt;font-awesome-sass gem&lt;/a&gt; and it too failed me hard.&lt;/li&gt;
  &lt;li&gt;Don’t follow the Stack Overflow post &lt;a href=&quot;http://stackoverflow.com/questions/37581599/rails-assets-is-having-issues-with-my-fonts&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of the above cases I got the error &lt;strong&gt;No route matches [GET] “/assets/fontawesome-webfont.ttf”&lt;/strong&gt; and I just couldn’t get past it.  The Stack Overflow post might have ultimately gotten me there but it did take me to a different gem – font-awesome-rails discussed in the next section.&lt;/p&gt;

&lt;p&gt;You should note that I don’t meant to malign any fo the urls in above – I’m not a css / front end guy by any means.  All I did was some simple googles and the processes I was taken through ultimately didn’t work and I blew over an hour of development time to find that out.&lt;/p&gt;

&lt;h1 id=&quot;heres-what-to-do&quot;&gt;Here’s What To Do&lt;/h1&gt;

&lt;p&gt;What you actually need is to do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install the &lt;a href=&quot;https://github.com/bokmann/font-awesome-rails&quot;&gt;font-awesome-rails&lt;/a&gt; gem.  Just add &lt;strong&gt;gem “font-awesome-rails”&lt;/strong&gt; to your Gemfile and then do the bundle install dance.&lt;/li&gt;
  &lt;li&gt;In your application.css.scss file add the line: &lt;strong&gt;@import “font-awesome”;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Stop and start your rails server.&lt;/li&gt;
  &lt;li&gt;Add to a test .html.erb view file this line**: fa_icon “camera-retro” ** (you’ll probably need to enclose that in output tags using %= and angle braces)&lt;/li&gt;
  &lt;li&gt;Render that test .html.erb view file in your browser and you should see a camera icon.  What this is doing behind the scenes is outputting this html: &lt;i class=&quot;fa fa-camera-retro&quot;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful Resources&lt;/h1&gt;

&lt;p&gt;Here are some important urls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome Home Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bokmann/font-awesome-rails&quot;&gt;Font Awesome Rails Gem&lt;/a&gt; -&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FortAwesome/Font-Awesome&quot;&gt;The Font Awesome Github Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fontawesome.io/icons/&quot;&gt;The Icon Search Page for Font Awesome&lt;/a&gt; - Use this to search for the icon you need&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fontawesome.io/cheatsheet/&quot;&gt;The Cheat Sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12468359/using-font-awesome-icon-for-bullet-points-with-a-single-list-item-element&quot;&gt;Useful Example of Font Awesome at the HTML Level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Jan 2017 01:49:19 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/rails/2017/01/16/rails-tutorial-making-font-awesome-work-with-rails-5.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/rails/2017/01/16/rails-tutorial-making-font-awesome-work-with-rails-5.html</guid>
        
        <category>tutorial</category>
        
        <category>font_awesome</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
