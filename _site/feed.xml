<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Oct 2016 01:57:26 -0400</pubDate>
    <lastBuildDate>Tue, 11 Oct 2016 01:57:26 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>AWS Tutorial 15 - Using Ansible To Diagnose my SSH Troubles</title>
        <description>&lt;p&gt;Everyone wants to think that that complex computing problems are solved with a single flash of blinding insight.  And sometimes you do have that one epiphany that brings everything home.  But, more often than not, computing problems are solved by dogged persistence, by being more stubborn than the problem itself and by careful, diligent incremental progress where you observe the problem in question, altering one variable at a time until you understand what’s happening.&lt;/p&gt;

&lt;p&gt;In this step of our ongoing SSH disaster, we’re going to use Ansible to gather metrics on our running system and give ourselves a command line tool we can execute regularly.  By building this into a single command line tool, we can run it quickly and easily.  When we can do things quickly and easily we will do them more frequently and more frequency means more data.  And, I tend to believe that more data gives us the opportunity for more insights.&lt;/p&gt;

&lt;h1 id=&quot;a-hypothesis&quot;&gt;A Hypothesis&lt;/h1&gt;

&lt;p&gt;We’ve been working on the hypothesis that what’s going on is a problem of memory leaks causing an out of memory (OOM) condition on our Linux EC2 instance.  And even though Linux is supposed to kill a run away process that uses too much memory that doesn’t seem to be happening.  And, no, I don’t understand why.&lt;/p&gt;

&lt;p&gt;There are two basic compute resources that cause any Linux or Unix systems to have problems when they run low:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;memory&lt;/li&gt;
  &lt;li&gt;disc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux has two tools that we can always run when we’re logged into a linux system to monitor these resources:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df -h

df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            7.5G   12K  7.5G   1% /dev
tmpfs           1.5G  376K  1.5G   1% /run
/dev/xvda1      7.8G  5.5G  1.9G  75% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            7.5G     0  7.5G   0% /run/shm
none            100M     0  100M   0% /run/user

free -m

free -m
             total       used       free     shared    buffers     cached
Mem:         15298       8184       7114          0        201       1250
-/+ buffers/cache:       6732       8566
Swap:            0          0          0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;a-script&quot;&gt;A Script&lt;/h1&gt;

&lt;p&gt;What we’re going to do is write a tiny script, in Ruby, that we can use to monitor these resources.  And while there are literally hundreds of different monitoring tools that could do this for us, we’re going to do it ourselves so we introduce the smallest possible changes to our environments.  I call this type of approach reducing things to &lt;strong&gt;first principles&lt;/strong&gt;.  Yes a real monitoring tool would be far more powerful but setting it up would take a bunch of time, introduce multiple changes and then we’d have to learn how to use it.  We’re going to write our Ruby script in about 10 minutes and we’re done.&lt;/p&gt;

&lt;p&gt;Here’s all you need:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;script/free_memory.rb

#!/usr/local/rvm/rubies/ruby-2.3.1/bin/ruby
output = %x(free)
parts = output.split(&quot; &quot;)
total_memory = parts[7].to_i
used_memory = parts[8].to_i
free_memory = parts[9].to_i
output = %x(df -h)
parts = output.split(&quot; &quot;)
free_disc = parts[22]
used_disc = parts[23]
puts  &quot;Total Memory: #{total_memory} (#{total_memory/1024 / 1024} gb) / Used Memory: #{used_memory} (#{used_memory/1024 / 1024} gb) / Free Memory: #{free_memory} (#{free_memory/1024 / 1024} gb) / Free Disc: #{free_disc} / % Used Disc: #{used_disc}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is what I call hobbesian coding after the British philosopher Thomas Hobbes who coined the expression &lt;strong&gt;Life is nasty, brutish and short&lt;/strong&gt;.  This is ugly but its quick.  All we need to do is run the command and capture the output.  This is done with output = %x(free) and output = %x(df -h).  We then split it into an array on the space character and then map it to variables.  Finally we have a single puts statement that we displays the result and does some math.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This could have been written in anything.  Bash / awk would have been great for it but I’m a Ruby guy so I use the tool that I know.&lt;/p&gt;

&lt;h1 id=&quot;the-ansible-connection&quot;&gt;The Ansible Connection&lt;/h1&gt;

&lt;p&gt;If you remember, I said &lt;em&gt;Linux has two tools that we can always run when we’re logged into a linux system&lt;/em&gt;, well being logged into a system is what Ansible &lt;strong&gt;does&lt;/strong&gt;.  Ansible is brilliant because it runs via ssh.   SSH means you have a login so  all we need to monitor our box is an ansible ad hoc command to run this and here that is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -i inventories/production2 -u ubuntu -a &quot;/var/www/apps/banks/current/script/free_memory.rb&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That tells Ansible to run on all boxes in the inventories/production2 collection using the username ubuntu and then run whatever code exists at /var/www/apps/banks/current/script/free_memory.rb.&lt;/p&gt;

&lt;p&gt;And here’s an example of the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -i inventories/production2 -u ubuntu -a &quot;/var/www/apps/banks/current/script/free_memory.rb&quot;
ficrawlerbig | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 351564 (0 gb) / Free Memory: 15314576 (14 gb) / Free Disc: 1.2G / % Used Disc: 84%

ficrawler4 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 327688 (0 gb) / Free Memory: 15338452 (14 gb) / Free Disc: 1.5G / % Used Disc: 81%

fiweb1 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 65966140 (62 gb) / Used Memory: 3847964 (3 gb) / Free Memory: 62118176 (59 gb) / Free Disc: 305M / % Used Disc: 96%

ficrawler3 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 8385776 (7 gb) / Free Memory: 7280364 (6 gb) / Free Disc: 1.9G / % Used Disc: 75%

ficrawler5 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 9511684 (9 gb) / Free Memory: 6154456 (5 gb) / Free Disc: 1.2G / % Used Disc: 85%

ficrawler6 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 946336 (0 gb) / Free Memory: 14719804 (14 gb) / Free Disc: 1.4G / % Used Disc: 83%

ficrawler10 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 351416 (0 gb) / Free Memory: 15314724 (14 gb) / Free Disc: 1.2G / % Used Disc: 84%

ficrawler7 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 12421004 (11 gb) / Free Memory: 3245136 (3 gb) / Free Disc: 2.0G / % Used Disc: 74%

ficrawler8 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 4821588 (4 gb) / Free Memory: 10844552 (10 gb) / Free Disc: 1.4G / % Used Disc: 82%

ficrawler9 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve now been running this repeatedly for several days.  And I’ve learned that I can now pretty well predict when failures are going to occur.  I can also use this to diagnose problems on the boxes.  What we know is that if we’re running a heavy weight process like Sidekiq that is literally chewing through memory, the used memory column should actually show something.  If you look above you can see that ficrawler4 has (0 gb) in use.  That means that something has gone wrong.  So if we log into the box and change to the tmux session where this is executing, here’s what we find:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;after get_mechanize_links_on_a_pageKilled                                                                                                                                                           │·····························
__AWS_PRODUCTION__ ubuntu@ip-172-31-32-54:/var/www/apps/banks/current$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s interesting, isn’t it?  This is actually what’s supposed to happen.  When you see Killed on a Linux machine it means that the OOM actually worked for a change.  Praise Be!  And if we log into the box ficrawler10 we will actually find the same thing.  But when we log into ficrawler6, here’s what we find:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh ficrawler6
ssh_exchange_identification: read: Connection reset by peer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sigh.  Now that’s the whole problem we’re suffering from.  Now here’s what that means – this crash of ssh – just happened!  I’ve been writing this post in real time and running this ad hoc ansible command so about 5 minutes ago ansible could ssh in and run the command.  Now it can’t.  So what that means is that there is a time period where we have 0 gb free and the system is still responsive.  That’s &lt;strong&gt;really&lt;/strong&gt; interesting.  What that means is that we could manually ssh into the box, if we caught it soon enough, and restart the sidekiq process and NOT have to restart the whole box.&lt;/p&gt;

&lt;p&gt;Hm… I need to think about that and I’m pretty sure that it is &lt;strong&gt;important&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what happens on ficrawler6 when we run our ansible routine again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ficrawler6 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve learned some valuable things from gathering metrics and being able to run them easily.  Lots of people would have taken the approach of using an off the shelf tool for this and while tools are great, they’re big.  And they can be intrusive.  Breaking things down to first principles helps you understand.  And sure our ruby script for this is absolute crap.  Move it to a different distro and formatting will likely be off and it will break.  Who cares?  We spent 10 minutes writing it.&lt;/p&gt;

&lt;h1 id=&quot;credit&quot;&gt;Credit&lt;/h1&gt;

&lt;p&gt;A Shout Out to &lt;a href=&quot;http://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; who was a consultant on &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/06/aws-tutorial-14-diagnosing-ssh-failures-take-2.html&quot;&gt;Take 2&lt;/a&gt; of this series of posts.  The first thing Nick said was disc space and I probably wouldn’t have thought to include disc space monitoring in my Ruby script if he hadn’t done that.  Thanks man!&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 01:57:25 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/11/aws-tutorial-15-using-ansible-to-diagnose-my-ssh-troubles.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/11/aws-tutorial-15-using-ansible-to-diagnose-my-ssh-troubles.html</guid>
        
        
      </item>
    
      <item>
        <title>Rates</title>
        <description>&lt;p&gt;Picture of me on the side&lt;/p&gt;

&lt;p&gt;Resume link&lt;/p&gt;

&lt;p&gt;On a short term basis my rate is $200 per hour.  If you’d like to negotiate an ongoing arrangement that can be done and that can pretty dramatically affect the rate.&lt;/p&gt;

&lt;p&gt;Here’s what I bring to the table&lt;/p&gt;

&lt;p&gt;What can I do for you?&lt;/p&gt;

&lt;p&gt;Who the Heck Are You?&lt;/p&gt;

&lt;p&gt;At heart I’m a software engineer.  Nothing makes me happier than solving complex problems with code.  But I can also qualify as senior technical staff for an organization.&lt;/p&gt;

&lt;p&gt;What Have You Built&lt;/p&gt;

&lt;p&gt;Over the years I’ve built a lot of shipping products including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The HyperWriter family of authoring tools - HyperWriter, HyperWriter for Training, HyperWriter Professional, HyperAwk&lt;/li&gt;
  &lt;li&gt;The Doctor Dobbs Journal on CD-ROM&lt;/li&gt;
  &lt;li&gt;eduFire - An online marketplace for freelance educators and students to discover each other and run for pay video learning sessions using the Adobe Connect platform (Rails)&lt;/li&gt;
  &lt;li&gt;The Feedster blog search platform&lt;/li&gt;
  &lt;li&gt;AppData -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that doesn’t count the different products I’ve consulted on from time to time.  That’s just the full stack systems I’ve been primarily responsible for developing.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Oct 2016 06:30:52 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/10/rates.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/10/rates.html</guid>
        
        
      </item>
    
      <item>
        <title>What Nick Taught Me About Udemy, eBooks and More</title>
        <description>
</description>
        <pubDate>Mon, 10 Oct 2016 05:56:22 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/udemy/2016/10/10/what-nick-taught-me-about-udemy-ebooks-and-more.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/udemy/2016/10/10/what-nick-taught-me-about-udemy-ebooks-and-more.html</guid>
        
        <category>udemy</category>
        
        <category>ebooks</category>
        
        
        <category>udemy</category>
        
      </item>
    
      <item>
        <title>A Conversation with Mike Perham</title>
        <description>&lt;p&gt;One of the most gratifying aspects of working in the Open Source world is the ability to get to know the people who build the tools you rely on.  I’ve been in the Open Source world since ‘99 and I’ve been to a lot of conferences.  Not to humble brag but here are some of the people who’ve I’ve gotten to know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Greg Stein / Apache&lt;/li&gt;
  &lt;li&gt;Monte / MySQL&lt;/li&gt;
  &lt;li&gt;George and Theo Schlossnagle / PHP&lt;/li&gt;
  &lt;li&gt;Matt Mullenweg / WordPress and so much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This isn’t a humble brag because probably only one of these people &lt;em&gt;might&lt;/em&gt; recognize me on the street – maybe.  I’m a user of their stuff and I promote it as much as I can.  I’ve been using Apache and promoting it, honestly, because it is what I know.  But also because I know Greg and once upon a time he was chair of the Apache foundation.  And also because Apache has been good to me; it just works.  And I use MySQL / MariaDB not only because its fast and stable but also because I’ve seen my wife go shot for shot with Monty (picture a tiny red head drinking shots with a Finn; priceless).  I bailed out of the PHP world years and years ago but I still love the &lt;a href=&quot;https://www.sparkpost.com&quot;&gt;work&lt;/a&gt; that the Schlossnagle brothers do; I learned more solid computer science from &lt;a href=&quot;https://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616&quot;&gt;George’s book&lt;/a&gt; than I ever learned in college and I still read it from time to time when there’s a problem I know he would have a perspective on.  And I’m a fan of &lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html&quot;&gt;Matt&lt;/a&gt; even though I moved to the dark side and use Jekyll.&lt;/p&gt;

&lt;p&gt;Today I got the chance to know &lt;a href=&quot;http://www.mikeperham.com/&quot;&gt;Mike Perham&lt;/a&gt;, the author of &lt;a href=&quot;http://www.sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt;, just a little bit.  I sat in on his weekly &lt;a href=&quot;http://sidekiq.org/support&quot;&gt;Happy Hour&lt;/a&gt;.  This is where he offers a video chat about Sidekiq and answers questions / gives suggestions.  Mike Perham is someone who’s intellectual work product is very familiar to me.  And I’ve long lauded his work as “the best guy in Ruby threading in known space”.  When people ask me about Ruby threading, I tend to just point them toward’s &lt;a href=&quot;http://www.mikeperham.com/&quot;&gt;Mike’s blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, despite my positive opinions about Mike, I’ve actually used Sidekiq only sporadically.  I had a bad experience with asynchronous job processors years ago and ever since I’ve been gun shy.  I’ve always taken the perspective that when you’re doing big back end systems, your data processing is core to your application and you should own the IP.  So I wrote my own threaded code, years ago, and I’ve been using it ever since.  But when my code gave up the ghost with an MTBF of 30 minutes, Sidekiq leapt to my rescue and has given me a 38x improvement.  Machine’s still crash but I can now go to bed and sleep thru the night.  Given my recent trials and travails with SSH problems and machines crashing due to out of memory issues, I thought that talking to the literal source might at least give insight.  &lt;strong&gt;And it did&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what I learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mike is a very professional, very nice guy&lt;/li&gt;
  &lt;li&gt;Shared tenancy on AWS really is an issue; nearest neighbors can actually hurt your performance pretty dramatically&lt;/li&gt;
  &lt;li&gt;Redis really wants high performance box; not necessarily a ton of cores&lt;/li&gt;
  &lt;li&gt;Memory leaks are always an issue; sometimes its your code; sometimes its a gem that you use or an update to a gem that you use (so it can be fixed and then a gem update causes it to happen again)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;THE ANSWER TO MY PROBLEM&lt;/strong&gt;: The best approach is belt and suspenders.  Memory leaks are as much a state of being in a dynamic, garbage collected language.  Even if it gets fixed, a gem update could break everything once again.  The best approach is to use process monitoring and simply kill the process and restart it if the memory use is too great.  Either use &lt;a href=&quot;https://mmonit.com/monit/&quot;&gt;Monit&lt;/a&gt; or &lt;a href=&quot;http://contribsys.com/inspeqtor/&quot;&gt;Inspeqtor&lt;/a&gt;.  Mike has a &lt;a href=&quot;http://contribsys.com/inspeqtor/&quot;&gt;great video&lt;/a&gt; on this page and I’d recommend watching it; having setup monit in the past, Inspeqtor looks awesome.&lt;/li&gt;
  &lt;li&gt;Tracking down memory leaks in Ruby is hard and just may not be worth it.&lt;/li&gt;
  &lt;li&gt;Process monitoring would also fix my ruby segfault issues&lt;/li&gt;
  &lt;li&gt;I need to look into the commercial offerings for Sidekiq and Inspeqtor.  We’re already a commercial support customer for Sphinx; we might be able to be a commercial customer for Sidekiq.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you very, very much Mike.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ruby/2016/10/10/a-conversation-with-mike-perham.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ruby/2016/10/10/a-conversation-with-mike-perham.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>sidekiq</category>
        
        <category>open_source</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Managing a Large Scale Sidekiq Installation</title>
        <description>&lt;p&gt;http://stackoverflow.com/questions/12143350/gracefully-shutting-down-sidekiq-processes&lt;/p&gt;

&lt;p&gt;fiweb1 | SUCCESS | rc=0 »
Total Memory: 65966140 (62 gb) / Used Memory: 14217064 (13 gb) / Free Memory: 51749076 (49 gb)&lt;/p&gt;

&lt;p&gt;ficrawlerbig | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 12453420 (11 gb) / Free Memory: 3212720 (3 gb)&lt;/p&gt;

&lt;p&gt;ficrawler3 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 7130500 (6 gb) / Free Memory: 8535640 (8 gb)&lt;/p&gt;

&lt;p&gt;ficrawler4 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 545296 (0 gb) / Free Memory: 15120844 (14 gb)&lt;/p&gt;

&lt;p&gt;ficrawler5 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 8835068 (8 gb) / Free Memory: 6831072 (6 gb)&lt;/p&gt;

&lt;p&gt;ficrawler6 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 14846820 (14 gb) / Free Memory: 819320 (0 gb)&lt;/p&gt;

&lt;p&gt;ficrawler7 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 11149072 (10 gb) / Free Memory: 4517068 (4 gb)&lt;/p&gt;

&lt;p&gt;ficrawler8 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 3378360 (3 gb) / Free Memory: 12287780 (11 gb)&lt;/p&gt;

&lt;p&gt;ficrawler9 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 2316296 (2 gb) / Free Memory: 13349844 (12 gb)&lt;/p&gt;

&lt;p&gt;ficrawler10 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 12465468 (11 gb) / Free Memory: 3200672 (3 gb)&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 12:21:09 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/managing-a-large-scale-sidekiq-installation.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/managing-a-large-scale-sidekiq-installation.html</guid>
        
        
      </item>
    
      <item>
        <title>Startup Learnings - What Mike Perham Taught Me</title>
        <description>
</description>
        <pubDate>Sun, 09 Oct 2016 10:45:15 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/startup-learnings-what-mike-perham-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/startup-learnings-what-mike-perham-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Living The Tmux Life</title>
        <description>
</description>
        <pubDate>Sun, 09 Oct 2016 10:42:35 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/living-the-tmux-life.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/living-the-tmux-life.html</guid>
        
        
      </item>
    
      <item>
        <title>If I Was a College Freshman and Wanted to Make Spending Money</title>
        <description>&lt;p&gt;Hackintosh&lt;/p&gt;

&lt;p&gt;Never sell the unit; charge an assembly fee&lt;/p&gt;

&lt;p&gt;Put up fliers; don’t put up a web site&lt;/p&gt;

&lt;p&gt;University commmunties are word of mouth recommendations&lt;/p&gt;

&lt;p&gt;Money in support&lt;/p&gt;

&lt;p&gt;Hey Elon Musk made money in college assembling PCs for people.  If it was good enough for the founder of Tesla, SpaceX and SolarCity, well, what are you waiting for?&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 09:57:22 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/if-i-was-a-college-freshman-and-wanted-to-make-spending-money.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/if-i-was-a-college-freshman-and-wanted-to-make-spending-money.html</guid>
        
        
      </item>
    
      <item>
        <title>Chapstick, Consumer Marketing and Me</title>
        <description>&lt;p&gt;I am a 48 year old male.  Today, for the first time, I used a lip balm other than Chapstick.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 09:53:38 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/chapstick-consumer-marketing-and-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/chapstick-consumer-marketing-and-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Ansible Quickie Fixing a Poorly Designed Galaxy Role</title>
        <description>&lt;p&gt;Earlier today I used an Ansible Galaxy role to set &lt;a href=&quot;https://github.com/crushlovely/ansible-sidekiq-upstart/&quot;&gt;Sidekiq as a background process started with an Ubuntu Upstart service&lt;/a&gt;.  Unfortunately when I went to run the service, I found that it would not start at all.  While I like the concept of Ansible Galaxy, I have described it as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Galaxy is DockerHub without the stars for ratings
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was on the phone with &lt;a href=&quot;http://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; yesterday, shooting the breeze as it were and he agreed but offered a slightly different perspective:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Galaxy is DockerHub without the approved packages
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Either one is true.  There are lots of great options on Galaxy but it is a bit of a crap shoot.  Let’s diagnose the problem and see how it can be fixed.  Here’s what the install looked like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-galaxy install crushlovely.sidekiq-upstart,v1.0.0
- downloading role 'sidekiq-upstart', owned by crushlovely
- downloading role from https://github.com/crushlovely/sidekiq-upstart/archive/master.tar.gz
- extracting crushlovely.sidekiq-upstart to /usr/local/etc/ansible/roles/crushlovely.sidekiq-upstart
- crushlovely.sidekiq-upstart was installed successfully
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s how to use this in your playbook:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: crushlovely.sidekiq-upstart, app_path: &quot;/var/www/apps/banks&quot;, server_env: &quot;production&quot;, tags: sidekiq}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That can go anywhere in your playbook after Sidekiq is installed.&lt;/p&gt;

&lt;p&gt;There are two problems with this role.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first is a syntactic bug identified &lt;a href=&quot;https://github.com/crushlovely/ansible-sidekiq-upstart/issues/7&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The second is that while there are several variables for this, there isn’t a variable for the username the rails process runs as.  This causes the upstart job to die before it starts because there is a hard coded deploy username.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are the workarounds:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the meta directory below were the role was installed, modify the file main.yml and comment out the version.&lt;/li&gt;
  &lt;li&gt;In your group_vars directory, modify the file all to include a user_name variable set to whoever you want the rails process to run as.&lt;/li&gt;
  &lt;li&gt;In the install directory for the role, find the sidekiq_init.j2 template (in the templates directory) and modify &lt;strong&gt;setuid deploy&lt;/strong&gt; to be **setuid **.  After that do the same thing for the setgid bit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That was sufficient to get this running for me.  Perhaps next time we’ll fork this role into our github and fix the bug properly with Ansible variables.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ansible/2016/10/09/ansible-quickie-fixing-a-poorly-designed-galaxy-role.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ansible/2016/10/09/ansible-quickie-fixing-a-poorly-designed-galaxy-role.html</guid>
        
        <category>ansible</category>
        
        <category>galaxy</category>
        
        <category>sidekiq</category>
        
        
        <category>ansible</category>
        
      </item>
    
  </channel>
</rss>
