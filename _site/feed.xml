<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 09 Aug 2017 09:58:44 -0400</pubDate>
    <lastBuildDate>Wed, 09 Aug 2017 09:58:44 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Evolution of a Tagline</title>
        <description>
</description>
        <pubDate>Wed, 09 Aug 2017 08:40:37 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/08/09/evolution-of-a-tagline.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/08/09/evolution-of-a-tagline.html</guid>
        
        
      </item>
    
      <item>
        <title>The Problem with Medium</title>
        <description>&lt;p&gt;Yesterday I was at the movies with my son and during the endless\&lt;/p&gt;

&lt;p&gt;Here’s what I remembered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;james altschuler&lt;/li&gt;
  &lt;li&gt;keywords: hedgefund marriage thestreet.com&lt;/li&gt;
  &lt;li&gt;I had hearted it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here are the problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I couldn’t find&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 09 Aug 2017 08:29:08 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/08/09/the-problem-with-medium.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/08/09/the-problem-with-medium.html</guid>
        
        
      </item>
    
      <item>
        <title>Expanding an AWS Instance Volume</title>
        <description>&lt;p&gt;One of the true promises of cloud computing is freeing you from resource limits.  In an ideal world you’d be able to easily example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ram&lt;/li&gt;
  &lt;li&gt;storage&lt;/li&gt;
  &lt;li&gt;networking&lt;/li&gt;
  &lt;li&gt;cpu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And while this is somewhat true, the reality is always a bit trickier.  I’ve had a new project underway for a while and I’ve been plagued by constant disc space issues.  And while this is a multi container project, my core /var/lib/docker/containers directory is only 1.1 gigs according to a du -sh /var/lib/docker/containers and /var/lib/docker/volumes is only 288K but my /var/lib/docker/aufs directory is 14 + gigs.  Despite diving deeply into the &lt;a href=&quot;https://github.com/spotify/docker-gc&quot;&gt;spotify-gc project&lt;/a&gt; and the &lt;a href=&quot;https://github.com/moby/issues/22207&quot;&gt;open issue on Moby&lt;/a&gt;, none of these actually solved the issue.&lt;/p&gt;

&lt;p&gt;So it was time to just suck it up and add more disc space – even though I am an admitted cheap bastard and this bothers the hell out of me.  I’ve done this in the past and while it wasn’t &lt;a href=&quot;http://fuzzyblog.io/blog/aws/2016/11/26/fear-and-loathing-in-awsville-or-adventures-in-partition-resizing.html&quot;&gt;as bad as the last time&lt;/a&gt;, it still wasn’t obvious.&lt;/p&gt;

&lt;h1 id=&quot;how-to-expand-your-aws-volume-on-a-running-instance&quot;&gt;How to Expand Your AWS Volume on a Running Instance&lt;/h1&gt;

&lt;p&gt;I’ve broken this into two stages.  Here is stage 1 - using the web UI.  &lt;strong&gt;Keep in mind that you are going to need to do a reboot at the end and that means some level of downtime so plan this out accordingly.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start at your dashboard on &lt;a href=&quot;http://console.aws.amazon.com&quot;&gt;console.aws.amazon.com&lt;/a&gt; or however you log in and go into the EC2 section.&lt;/li&gt;
  &lt;li&gt;Select volumes on the left hand sidebar.&lt;/li&gt;
  &lt;li&gt;Select the instance.&lt;/li&gt;
  &lt;li&gt;From the actions drop down select Modify Volume.&lt;/li&gt;
  &lt;li&gt;Change the disc space to whatever you want and click ok.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This starts the process of AWS reallocating your disc.  If you’re on Linux you now need to proceed to stage two:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log into your box.&lt;/li&gt;
  &lt;li&gt;Run a df -h and see if the new space shows up.  It almost certainly won’t but you can always try.&lt;/li&gt;
  &lt;li&gt;Run a lsblk to list your blog devices and you need to note the one that your system is using.  The default is /dev/xvda1&lt;/li&gt;
  &lt;li&gt;Run a sudo resize2fs /dev/xvda1&lt;/li&gt;
  &lt;li&gt;Reboot the box with /sbin/reboot&lt;/li&gt;
  &lt;li&gt;Wait the appropriate amount of time and ssh in again.  Re-run df -h and you should see the new space.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;commentary&quot;&gt;Commentary&lt;/h1&gt;

&lt;p&gt;As a computer scientist I entirely understand why you have to reboot.  But as a consumer of cloud services it feels to me like we should be past this at this stage of the using cloud services.  All of my AWS experience is generally using Ubuntu and if Amazon was to tell me that this wasn’t necessary on the AWS Linux, well, that alone would be enough to make me switch distros.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p&gt;Here are two useful links that dig into this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html?icmpid=docs_ec2_console&quot;&gt;EC2 Console Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux&quot;&gt;Linux Recognizing the Resized Space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/08/09/expanding-an-aws-instance-volume.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/08/09/expanding-an-aws-instance-volume.html</guid>
        
        <category>aws</category>
        
        <category>docker</category>
        
        <category>aufs</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Creating a Hackintosh from an Intel NUC</title>
        <description>&lt;p&gt;A few weeks ago I converted my Desktop Linux box from Ubuntu to an OSX (Sierra) based Hackintosh using the brilliant documentation and technology found on the &lt;a href=&quot;https://www.tonymacx86.com/&quot;&gt;TonyMacX86 site&lt;/a&gt;.  However I did it in a spur of inspiration and never bothered to document the process – yes, I am an idiot.  And then, today, in an inspiring display of additional idiocy, I accepted an Apple System Update – and broke everything.  And, naturally, since it was a brand new box, I hadn’t gotten around to setting up Time Machine or Carbon Copy so, well, this is pretty much toast.  So while this is a complete disaster, I use &lt;a href=&quot;http://fuzzyblog.io/blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html&quot;&gt;Ansible to configure all my application software&lt;/a&gt; and DropBox to sync my development environment so if I can just get the machine to boot again, well, I should be good to go.  The rest of this blog post writes out all the steps I found to make an OSX based Hackintosh from an Intel NUC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This is lower level with hardware than I generally care to go so I’m unlikely to be willing or even able to answer questions.  You too can have the joyful experience of groveling thru driver documentation and figuring it out on your own – I did.&lt;/p&gt;

&lt;h1 id=&quot;step-1-understand-that-a-hackintosh-isnt-a-mac&quot;&gt;Step 1: Understand that a Hackintosh Isn’t a Mac&lt;/h1&gt;

&lt;p&gt;The first step in all this is that you need to understand that a Hackintosh isn’t a Mac – it is a Hackintosh and that has limitations.  Here are some of the ones that I found:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I never got audio to work&lt;/li&gt;
  &lt;li&gt;The first system update I put on it blew up the disc rendering it unbootable&lt;/li&gt;
  &lt;li&gt;I never got Messages to work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, for what I wanted, a development box, here’s what I got:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;32 gigs of RAM&lt;/li&gt;
  &lt;li&gt;Tiny form factor&lt;/li&gt;
  &lt;li&gt;Whisper quiet&lt;/li&gt;
  &lt;li&gt;More reliable than my Macbook Retina Pro 13” (2015)&lt;/li&gt;
  &lt;li&gt;Cheaper and used hardware I already had&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this really can work but don’t kid yourself into thinking that what you have is a Mac, it really isn’t.  You need to keep it regularly backed up and take system updates with a high degree of care.&lt;/p&gt;

&lt;h1 id=&quot;step-2-understanding-the-tools&quot;&gt;Step 2: Understanding the Tools&lt;/h1&gt;

&lt;p&gt;There are two tools you need to download from TonyMacX86:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UniBeast&lt;/li&gt;
  &lt;li&gt;MultiBeast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unibeast creates a bootable USB stick for you to create OSX onto a standard PC.  MultiBeast allows you to configure your machine so that the correct drivers are in place.  MultiBeast also handles the task of making your machine actually bootable once the drivers have been installed.  Please note that after your first pass with MultiBeast, your machine will NOT be bootable (but have patience; it will get there).&lt;/p&gt;

&lt;h1 id=&quot;step-2-making-a-bootable-usb-stick&quot;&gt;Step 2: Making a Bootable USB Stick&lt;/h1&gt;

&lt;p&gt;The first step you want to follow is to make a bootable USB Stick (think of this as equivalent to a Unix LiveCD and you’ll be ok).  The directions to follow are &lt;a href=&quot;https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/#create_unibeast&quot;&gt;here&lt;/a&gt; and I’ve put any specific notes below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You may not have an option in Disk Utility to create a GUID Partition Map scheme but if they aren’t there then it seems to default to them.  If you have problems using Disk Utility then here’s a &lt;a href=&quot;http://www.macworld.com/article/2990837/storage/how-to-format-a-startup-drive-in-el-capitan.html&quot;&gt;good reference&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;OSX Sierra can be downloaded from the Apple Store and it needs to be put in your /Applications folder for this to work.&lt;/li&gt;
  &lt;li&gt;Creating the USB Stick with Unibeast generally runs perfectly.  It isn’t fast but it does the job.  Keep in mind that it can take long enough that you think it has crashed – but it always seems to finish.  I used UEFI boot mode for an Intel NUC and did not select any of the optional graphics configuration settings.&lt;/li&gt;
  &lt;li&gt;Once you’re done with creating a USB stick then you want to copy MultiBeast onto the USB stick.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-3-for-me-only&quot;&gt;Step 3: For Me Only&lt;/h1&gt;

&lt;p&gt;After my OSX System Update nuked my installation even rebooting with my original USB stick would not get OSX to come up – even off the USB stick.  The workaround was to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install Ubuntu from a USB stick thus entirely blowing away the HFS+ partition&lt;/li&gt;
  &lt;li&gt;Reboot from the USB stick&lt;/li&gt;
  &lt;li&gt;Use Disk Utility to reformat the drive and then start the installation&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-4-getting-the-disc-setup-correctly&quot;&gt;Step 4: Getting the Disc Setup Correctly&lt;/h1&gt;

&lt;p&gt;When you start going thru the installation process, you’ll need to create your OSX hard disc and it is vital that you follow these steps exactly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;For a new installation of macOS, you MUST erase and format the destination drive according to the following steps before continuing.

a. In the top menu bar choose Utilities, and open Disk Utility
b. Highlight your target drive for the Sierra installation in left column.
c. Click Erase button
d. For Name: type Sierra (You can rename it later)
e. For Format: choose OS X Extended (Journaled)
f. For Scheme: choose GUID Partition Map
g. Click Erase
h. Close Disk Utility
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your disc absolutely needs to be named Sierra.  Mine wasn’t and it bunged up the whole process.&lt;/p&gt;

&lt;h1 id=&quot;step-5-follow-the-instructions-exactly&quot;&gt;Step 5: Follow the Instructions Exactly&lt;/h1&gt;

&lt;p&gt;The most useful thing to note is that the instructions are precise and need to be followed to the letter.&lt;/p&gt;

&lt;h1 id=&quot;useful-hackintosh-links&quot;&gt;Useful Hackintosh Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/&quot;&gt;The Best Sierra INnstructions I Found&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/B018Q0GN60/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;My NUC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/#download&quot;&gt;Sierra On Any Intel PC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/threads/guide-el-capitan-on-the-intel-skylake-nuc.183839/&quot;&gt;El Capitan NUC Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/resources/el-capitan-post-install-tools.294/&quot;&gt;El Capitan Post Install Tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/hackintosh/comments/3c2wgy/guide_how_you_should_be_managing_your_hackintosh/&quot;&gt;Reddit Thread on Managing Your Hackintosh without Multibeast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/hackintosh/comments/5jl4u7/psa_dont_use_multibeast_and_dont_edit_your_clover/&quot;&gt;Don’t Use Multibeast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/threads/sierra-installation-works-but-wont-boot-once-multibeast-installed.204644/&quot;&gt;Sierra Problems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://www.tonymacx86.com/threads/guide-el-capitan-on-the-gigabyte-ga-z170n-gaming-5-mini-itx.199805/&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/search/25328190/?q=intel+nuc&amp;amp;o=date&quot;&gt;NUC Search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/threads/unibeast-5-0-1-cant-select-yosemite-installation-type.144159/&quot;&gt;Unibeast Yosemite Problems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://www.tonymacx86.com/resources/multibeast-el-capitan-8-2-3.319/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 11:49:44 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/mac/2017/08/08/creating-a-hackintosh-from-an-intel-nuc.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/mac/2017/08/08/creating-a-hackintosh-from-an-intel-nuc.html</guid>
        
        <category>mac</category>
        
        <category>osx</category>
        
        <category>hackintosh</category>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Utter and Complete Heroku Fail</title>
        <description>&lt;p&gt;So this morning I wanted to get a self hosted version of the &lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;Errbit&lt;/a&gt; project running.  This is an equivalent to BugSnag, Airbrake, HoneyBadger – a tool for tracking errors in live apps.  The inspiration for this was &lt;a href=&quot;http://developeronfire.com/podcast/episode-258-jeff-atwood-sharing-the-house&quot;&gt;Jeff Atwood’s Developer on Fire interview&lt;/a&gt; where he advised three things:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Jeff's top 3 tips for delivering more value:

1. Measure performance all the time - Know how long every unit of work in your app is taking
2. Have user friendly error handling for both the end user and the developer built into your application
2. Have a place where people can go to discuss your software
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m close to releasing something and #2 has been on my list for sometime so I was pretty damn motivated to finally address this. And I’ve wanted to try Errbit for literally years and years so I turned to their &lt;a href=&quot;https://github.com/errbit/errbit/blob/master/docs/deployment/heroku.md&quot;&gt;deployment&lt;/a&gt; page where they, quote clearly, offered Heroku as an option and recommended it as the easiest way to start.  Awesome – right?  Unfortunately I found nothing but complete and total fail.  Here’s what happened:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I created an account.  This is normal and worked well.&lt;/li&gt;
  &lt;li&gt;I had to verify my password via email.  Again normal and worked well.&lt;/li&gt;
  &lt;li&gt;I returned to the &lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/errbit/errbit/tree/master&quot;&gt;automatic app creation&lt;/a&gt; where it now told me I had to enter a credit card.  I did.&lt;/li&gt;
  &lt;li&gt;Installation failed and wouldn’t tell me why “App creation failed.  Please ensure you have valid values in the above form field” – they were all there.&lt;/li&gt;
  &lt;li&gt;Installation failed and it told me to that I needed to enter a credit card – which I did.  But I can do that dance again.&lt;/li&gt;
  &lt;li&gt;I then get “the account foo@bar.com is not permitted to install the sendgrid add-on at this time.  If you believe this is an error please contact support and reference ID 56fda43c-8abb-4378-a320-079bec73f142” (note I did give heroku my correct email).&lt;/li&gt;
  &lt;li&gt;I attempted to put in my own SMTP server but I’m told the same thing about sendgrid even though I put in a &lt;a href=&quot;http://www.sparkpost.com&quot;&gt;sparkpost&lt;/a&gt; domain.&lt;/li&gt;
  &lt;li&gt;There is no link to support in this context.  Shouldn’t this have been automatically linked in place?&lt;/li&gt;
  &lt;li&gt;I find the support button at the bottom of the page (disclaimer - it wasn’t all that far away) which takes me to help.heroku.com.&lt;/li&gt;
  &lt;li&gt;On help.heroku.com I can find no way to actually create a ticket to enter the ID they gave me.  See Screenshot 1 below.&lt;/li&gt;
  &lt;li&gt;There is a &lt;a href=&quot;https://help.heroku.com/tickets&quot;&gt;Ticket history&lt;/a&gt; button which also doesn’t give me a way to create a ticket.  See Screenshot 2 below.&lt;/li&gt;
  &lt;li&gt;At this point I’ve given up in disgust and I’ll figure out how to do this on Docker and my own AWS instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This is a failure on so many damn levels that it is absurd:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Having to enter my credit card twice.&lt;/li&gt;
  &lt;li&gt;Not allowing an authenticated, validated, paying user to use a baseline feature.&lt;/li&gt;
  &lt;li&gt;Not allowing a way around the failure (use of another smtp resource).&lt;/li&gt;
  &lt;li&gt;Not making support easy.&lt;/li&gt;
  &lt;li&gt;Not even allowing me to create a ticket AS THEY TOLD ME TO.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The utter and complete pity of this is that Heroku allowing me to easily run a github repo would have been beautiful.  Here is the beautiful simplicity of the Errbit deploy to Heroku url:&lt;/p&gt;

&lt;p&gt;https://heroku.com/deploy?template=https://github.com/errbit/errbit/tree/master&lt;/p&gt;

&lt;p&gt;That is fantastic – I do not think it could be any simpler than that.  And, if it had worked, I can easily see myself doing this fairly often.  Now?  I suspect I’ll be deleting my Heroku account shortly and walking away forever.  And that’s a crying shame.&lt;/p&gt;

&lt;h1 id=&quot;screenshot-1&quot;&gt;Screenshot 1&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/herokufail1.png&quot; alt=&quot;herokufail1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where would I even create a ticket?&lt;/p&gt;

&lt;h1 id=&quot;screenshot-2&quot;&gt;Screenshot 2&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/herokufail2.png&quot; alt=&quot;herokufail2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where would I even create a ticket?&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/fail/2017/08/08/utter-and-complete-heroku-fail.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/fail/2017/08/08/utter-and-complete-heroku-fail.html</guid>
        
        <category>heroku</category>
        
        <category>fail</category>
        
        <category>rails</category>
        
        
        <category>fail</category>
        
      </item>
    
      <item>
        <title>Creating a Searchable Application with Rails, Mongo, Elastic Search and SearchKick</title>
        <description>
</description>
        <pubDate>Mon, 07 Aug 2017 19:08:39 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/08/07/creating-a-searchable-application-with-rails-mongo-elastic-search-and-searchkick.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/08/07/creating-a-searchable-application-with-rails-mongo-elastic-search-and-searchkick.html</guid>
        
        <category>rails</category>
        
        <category>searchkick</category>
        
        <category>mongo</category>
        
        <category>elastic_search</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>The Best Way to Add Favicons to Your Rails Project</title>
        <description>
</description>
        <pubDate>Mon, 07 Aug 2017 08:39:14 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/08/07/the-best-way-to-add-favicons-to-your-rails-project.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/08/07/the-best-way-to-add-favicons-to-your-rails-project.html</guid>
        
        
      </item>
    
      <item>
        <title>Adding AutoSave on Focus Lost to TextMate 2</title>
        <description>&lt;p&gt;I’ve looked this up and set this on every single mac I’ve used since I switched to &lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate 2&lt;/a&gt; so I guess it is time to finally write it down for myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a command prompt.&lt;/li&gt;
  &lt;li&gt;Edit the file ~/Library/Application Support/TextMate/Global.tmProperties&lt;/li&gt;
  &lt;li&gt;Add the line saveOnBlur = true in the top region before the square bracket sections.&lt;/li&gt;
  &lt;li&gt;Save and Exit&lt;/li&gt;
  &lt;li&gt;Relaunch and it should be there.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</guid>
        
        <category>textmate</category>
        
        
        <category>textmate</category>
        
      </item>
    
      <item>
        <title>Software Development Philosophy - Features and Bugs Versus Flow</title>
        <description>
</description>
        <pubDate>Sun, 06 Aug 2017 08:55:53 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/08/06/software-development-philosophy-features-and-bugs-versus-flow.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/08/06/software-development-philosophy-features-and-bugs-versus-flow.html</guid>
        
        
      </item>
    
      <item>
        <title>A Bash Function for the 2 AM Blind Deploy</title>
        <description>&lt;p&gt;I’m doing a lot more bash scripting these days – ever since I opted to write my new deployer, dockerano, in Bash.  Tackling something significant in Bash has absolutely forced me, 20 years plus after I started using it, to finally start to understand it.  By no means do I feel that I have a good handle on Bash – I’m still heavily reliant on &lt;a href=&quot;http://fuzzyblog.io/blog/bash/2017/07/17/improving-your-bash-scripting-with-shellcheck.html&quot;&gt;ShellCheck&lt;/a&gt; but I can actually do things with Bash that I feel somewhat confident about.&lt;/p&gt;

&lt;p&gt;Here’s a bash function that I extended this morning to add OSX specific audio output after a deploy.  The problem at hand is what I call the “2 AM sleep blind deploy”.  We all know what this is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You get a downtime alert on a service&lt;/li&gt;
  &lt;li&gt;You blearily struggle out of bed at 2 am and fix the code&lt;/li&gt;
  &lt;li&gt;You deploy it and you want to get back to bed as soon as possible&lt;/li&gt;
  &lt;li&gt;Something goes wrong with the deploy and you get alerted again just &lt;strong&gt;after&lt;/strong&gt; you get back in bed&lt;/li&gt;
  &lt;li&gt;Lather, rinse, repeat until it is either fixed or morning comes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting close to release on my much obliquely referenced new product and so deploy issues are now first and foremost in my mind. My task for this morning was to add audio output to my deployer &lt;strong&gt;when&lt;/strong&gt; there is a failure.  Here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first task was to recognize that this only ever had to run on OSX as I develop and deploy from OSX.&lt;/li&gt;
  &lt;li&gt;There were two options - afplay and say.  The &lt;strong&gt;afplay&lt;/strong&gt; utility plays any media file from the command line and that’s good but a loud noise alone won’t tell me &lt;em&gt;what&lt;/em&gt; is down just that &lt;em&gt;something&lt;/em&gt; is down.  And while this works well – once upon a time, I used to trigger Billy Idol’s White Wedding whenever something was down – this time I wanted something a bit more nuanced and information rich.  I could also use the osx command &lt;strong&gt;say&lt;/strong&gt; to speak anything including the url which is failing.  Here is a &lt;a href=&quot;https://superuser.com/questions/298201/how-can-i-play-a-sound-from-the-command-line-in-mac-os-x&quot;&gt;Stack Overflow&lt;/a&gt; on the options.&lt;/li&gt;
  &lt;li&gt;An sample of this is “say http://foo.com/ is down” which will be played thru the speaker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My new tech stack is 7 different services each of which provides a simple health check api but since the obviously differ for each service, I needed a way to store this on a per service basis which I opted to do with a .dockerano_post_deploy_check_urls file in the root directory of each project.  This file can store as many urls as are needed and it will be looped over by the bash script.  Given that most of the site needs to work in both http and https and with www and non www variants, I didn’t want a single check url.  If you allow for both https and http and non www and www variants, that amounts to 4 urls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://foo.com/health&lt;/li&gt;
  &lt;li&gt;http://www.foo.com/health&lt;/li&gt;
  &lt;li&gt;https://foo.com/health&lt;/li&gt;
  &lt;li&gt;https://www.foo.com/health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, yes, this may be overkill but it is all too easy for almost anything to break so I would argue that the right thing to do is be aggressive in your testing.&lt;/p&gt;

&lt;p&gt;Here’s the bash function I wrote for this with the addition of say:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function verify_site_is_up_after_post_deploy() {
  sleep 5
  IFS=$'\n' read -d '' -r -a site_urls &amp;lt; .dockerano_post_deploy_check_urls  
  
  for site_url in &quot;${site_urls[@]}&quot;; do
    echo &quot;  Processing url: $site_url&quot;
    if curl --output /dev/null --silent --head --fail &quot;$site_url&quot;; then
      status_message_good &quot;$url exists; deploy worked&quot;
    else
      status_message_bad &quot;$url DOES NOT EXIST; DEPLOY FAILURE!!!!&quot;
      say &quot;$url is DOWN!&quot;
    fi

  done
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I adapted the code above based on this  &lt;a href=&quot;https://unix.stackexchange.com/questions/148985/how-to-get-a-response-from-any-url&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</guid>
        
        <category>devops</category>
        
        <category>deploy</category>
        
        <category>bash</category>
        
        
        <category>bash</category>
        
      </item>
    
  </channel>
</rss>
