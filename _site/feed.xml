<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Nov 2016 05:35:54 -0500</pubDate>
    <lastBuildDate>Thu, 17 Nov 2016 05:35:54 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Efficiently Producing Iced Coffee</title>
        <description>
</description>
        <pubDate>Thu, 17 Nov 2016 04:37:31 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/17/efficiently-producing-iced-coffee.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/17/efficiently-producing-iced-coffee.html</guid>
        
        
      </item>
    
      <item>
        <title>Startup Learnings - Something My Dad Taught Me</title>
        <description>&lt;p&gt;My father has been an independent business man my entire life and he’s really operated in the same industry – the marine industry on the east coast of the U.S. He’s worked on the commercial side and the recreational side and he’s been both very successful and less successful depending on the venture.  One of the things he has always maintained is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All industries are small and your reputation really matters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first got into computing I disregarded this more than a bit.  I was in the &lt;em&gt;computer business&lt;/em&gt; after all it was a massive, globe spanning industry.  That old saw that my Dad emphasized so strongly couldn’t possibly be true, could it?  Interestingly enough it actually is true and here are some examples:&lt;/p&gt;

&lt;h1 id=&quot;the-smallness-of-an-industry-the-first---discovering-blogging&quot;&gt;The Smallness of an Industry the First - Discovering Blogging&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Back in 2002 I discovered blogging and that was a wonderful, transformative experience for me that ripples through my life to this day.  The tool I initially used was UserLand Radio from &lt;a href=&quot;http://www.scripting.com/&quot;&gt;Dave Winer&lt;/a&gt;.  There’s a whole tale and learning with respect to that experience, including how I came to be an &lt;a href=&quot;https://www.amazon.com/Essential-Blogging-Selecting-Using-Weblog/dp/0596003889/ref=sr_1_10?ie=UTF8&amp;amp;qid=1479377306&amp;amp;sr=8-10&amp;amp;keywords=o%27reilly+blogging+book&quot;&gt;O’Reilly author&lt;/a&gt;, that I’ll tell one of these days.  In the course of learning the product I got to know Dave Winer.  UserLand was Dave’s second venture.  His first was a company called &lt;a href=&quot;https://en.wikipedia.org/wiki/Living_Videotext&quot;&gt;Living VideoText&lt;/a&gt; which made outlining software.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://images-na.ssl-images-amazon.com/images/I/51MGqGUE96L._SX374_BO1,204,203,200_.jpg&quot; alt=&quot;oreilly_blogging_book&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;One of those software products was a tool called Ready! which was a Terminate and Stay Resident (TSR) program.  TSRs, now long forgotten, were an attempt to get around the single tasking nature of MS-DOS.  They were loaded into a chunk of memory and then assigned a hot key.  This let you trigger them quickly without unloading your current software.  The curious thing here is the software engineer who wrote the TSR kernel for Ready! was named &lt;em&gt;Bobby Bierman&lt;/em&gt;.  Bobby was brilliant and into computing way before anyone else I ever knew – I remember him back from the pre Apple days when I wasn’t even a teenager yet.  Now here’s the weird part.  Bobby belonged to my father’s scout troop when he was in high school and then later worked for one of our &lt;a href=&quot;http://www.rgbrewer.com/&quot;&gt;family businesses&lt;/a&gt; before he went off to MIT.&lt;/p&gt;

&lt;p&gt;Bobby was more than a few years older than me and I had always known he went west to Silicon Valley but I never associated him with myself even after I got into computing until 15 years later when I realized that I was directly interacting with Bobby’s former boss.  This was my first &lt;strong&gt;smack in the face&lt;/strong&gt; clue that industries really are small.&lt;/p&gt;

&lt;h1 id=&quot;the-smallness-of-an-industry-the-second---mark-fletcher--marc-hedlund&quot;&gt;The Smallness of an Industry the Second - Mark Fletcher / Marc Hedlund&lt;/h1&gt;

&lt;p&gt;There have been lots and lots of “wow this industry really is small” experiences over the years but another that sticks out happened on September 7 of this year.  I noticed some chatter on Twitter about AWS deployment by Marc Hedlund and I shot him an email.  He very, very graciously granted me access to the Skyliner slack team and responded with this comment:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thanks! I’m looking forward to chatting with you more. By the way, I enjoyed your post on my friend Mark Fletcher (https://fuzzygroup.github.io/blog/startup/2016/08/31/what-mark-fletcher-taught-me.html) — I’ve taken similar lessons from him and have long admired how he ran Bloglines. He also consistently has the best industry gossip. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go figure – a founder of a product that I’m interested in using happens to know someone that I haven’t spoken to since 2006.  I mean sheesh.&lt;/p&gt;

&lt;p&gt;Oh and &lt;a href=&quot;http://www.skyliner.io&quot;&gt;Skyliner.io&lt;/a&gt; just launched.  Congrats to them.&lt;/p&gt;

&lt;h1 id=&quot;the-smallness-of-an-industry-the-third---shimon-rura&quot;&gt;The Smallness of an Industry the Third - Shimon Rura&lt;/h1&gt;

&lt;p&gt;So I’ve mulled over what my Dad taught me for years but I never felt compelled to write it down until today.  What led directly to this post was I noticed that Dropbox was syncing log files between boxes on my new UbuntuMate desktop and I thought to myself &lt;em&gt;well that sucks&lt;/em&gt;.  A quick google led me to this &lt;a href=&quot;http://superuser.com/questions/469776/how-to-exclude-files-not-folders-from-dropbox-sync&quot;&gt;SuperUser&lt;/a&gt; post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/shimon_superuser.png&quot; alt=&quot;shimon_superuser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that was a lightning bolt of inspiration.  Damn.  I &lt;strong&gt;know&lt;/strong&gt; him.  And I don’t mean that in the “oh I’ve read his blog”.  Once upon a time I used to know him in meat space aka the real world.  &lt;a href=&quot;http://rura.org/shimon/&quot;&gt;Shimon&lt;/a&gt; is an absolutely standup guy who used to be part of the Boston Blogging crowd out of the Berkman center at Harvard.  He and I used to share nerd issues in the blogging world and then eat indian food.  Curiously there’s another level of intersection with blogging in that Dave Winer actually organized those meetings when he lived in Boston.&lt;/p&gt;

&lt;p&gt;I haven’t spoken to Shimon in more than a decade since I moved to Indiana but I still notice him from time to time on Facebook; he just had a child so Mazeltov!  And thanks for the excellent answer on SuperUser.  Appreciated!&lt;/p&gt;

&lt;h1 id=&quot;review-and-conclusion&quot;&gt;Review and Conclusion&lt;/h1&gt;

&lt;p&gt;My Dad has operated his whole business career in a small geographic region really from New York to Connecticut and in an industry with tiny gross revenues with comparison to the industry in which I make my career but his point &lt;em&gt;All industries really are small; reputation matters&lt;/em&gt; is still absolutely true.  Thanks Dad!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/11/17/startup-learnings-something-my-dad-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/11/17/startup-learnings-something-my-dad-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>A Tricky Bit of Rails ActiveRecord Optimization</title>
        <description>&lt;p&gt;Yesterday I discovered that queries on a table of N rows were sometimes taking in excess of a few minutes to execute.  N was fairly large – my guestimate would be about 70 or 80 million rows (a count(*) is still running; update it was 73,381,312).  This is a table that is large enough that the last time I tried to do an ALTER TABLE on it, well, it took the better part of 24 hours and it was still on the copy to tmp table stage when I finally threw my hands up and implemented a shadow table structure to represent the changes.&lt;/p&gt;

&lt;p&gt;This table has a number of indices on it although none of them were exactly what I needed.  Now in the &lt;strong&gt;real&lt;/strong&gt; world of very large databases where things are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;implemented incrementally&lt;/li&gt;
  &lt;li&gt;rarely refactored&lt;/li&gt;
  &lt;li&gt;never re-thought as business needs change&lt;/li&gt;
  &lt;li&gt;are too large to go back and change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this is actually common.  It is often what I think of as The Forrest Gump school of working with indices:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Indices are like a box of chocolate; you never know what you’re going to get.
&lt;a href=&quot;https://en.wiktionary.org/wiki/life_is_like_a_box_of_chocolates&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The ActiveRecord operation in question was a check to see if a row already existed in the table.  Here’s the SQL that the ORM was generating:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT  `link2016_q1s`.* FROM `link2016_q1s` WHERE `link2016_q1s`.`site_id` = 215345 AND `link2016_q1s`.`page_id` = 2401963 AND `link2016_q1s`.`url_no_www_sha1` = 'fe9f2487051ac4ab2a86bdf5c501336c2bda315b'  ORDER BY `link2016_q1s`.`id` ASC LIMIT 1\G
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here’s the explain showing the query plan:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;explain SELECT  `link2016_q1s`.* FROM `link2016_q1s` WHERE `link2016_q1s`.`site_id` = 215345 AND `link2016_q1s`.`page_id` = 2401963 AND `link2016_q1s`.`url_no_www_sha1` = 'fe9f2487051ac4ab2a86bdf5c501336c2bda315b'  ORDER BY `link2016_q1s`.`id` ASC LIMIT 1\G *************************** 1. row ***************************
       id: 1   select_type: SIMPLE
    table: link2016_q1s
     type: index possible_keys: s_c_p_u,s_c_d_p,index_links_on_site_id_and_crawl_id_and_page_id,site_id_url,site_id_url_no_www
      key: PRIMARY
  key_len: 4
      ref: NULL
     rows: 4306
    Extra: Using where
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see this is damn near a worst case as the only index being used is the PRIMARY meaning that none of our indices are being used.  &lt;em&gt;Grumble&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As with any optimization problem in computing – any – you have to understand what your tool does in order to solve it.  You may not like the constraints placed on you but you have to live with them because you rarely solve optimization problems in production by changing stack components.  In this case we’re using MariaDB which is a mysql variant.  Here are some quick basics on MySQL index usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there is one and only one index per query&lt;/li&gt;
  &lt;li&gt;the query order in the where clause generally matters&lt;/li&gt;
  &lt;li&gt;the same index is used to order results as the query&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first thing that I noticed here was that ActiveRecord was appending an order construct to the query, the “order by id asc” crap – I didn’t put that into ActiveRecord where statement.  &lt;em&gt;more grumbling&lt;/em&gt;.  So what happens to our query plan if we remove that?  Here you go:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;explain SELECT  `link2016_q1s`.* FROM `link2016_q1s` WHERE `link2016_q1s`.`site_id` = 215345 AND `link2016_q1s`.`page_id` = 2401963 AND `link2016_q1s`.`url_no_www_sha1` = 'fe9f2487051ac4ab2a86bdf5c501336c2bda315b'  LIMIT 1\G   *************************** 1. row ***************************
         id: 1
select_type: SIMPLE
      table: link2016_q1s
       type: ref   possible_keys: s_c_p_u,s_c_d_p,index_links_on_site_id_and_crawl_id_and_page_id,site_id_url,site_id_url_no_www
        key: s_c_d_p
    key_len: 5
        ref: const
       rows: 16206
      Extra: Using index condition; Using where
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hm… We’re now at least using an index.  Even if it isn’t the right index, I’d regard that as progress towards a positive direction.  There are times when the mysql query planner is damn hard to convince of changes so this is good.&lt;/p&gt;

&lt;p&gt;Fixing this default ordering is actually fairly easy, just add &lt;em&gt;.order(“”)&lt;/em&gt; to the where statement.  If this code base wasn’t so large then I’d dig into how to prevent this on an ongoing basis but, as always, this is hurry up and rush style work so there’s no time for that.  Yes there will be a cost for that later – there always is.&lt;/p&gt;

&lt;p&gt;Looking at the explain statement above still bothers me as we’re dealing with 16K rows.  There has to be something better than that.  So digging into the possible indices shows this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UNIQUE KEY `s_c_p_u` (`site_id`,`crawl_id`,`page_id`,`crawler_id`,`url_no_www_sha1`) USING BTREE,
KEY `s_c_d_p` (`site_id`,`crawl_id`,`domain_id`,`page_id`) USING BTREE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at these two indices, knowing that one of them is a UNIQUE key means that there will be less data in it – and it is &lt;em&gt;always&lt;/em&gt; faster, even with indices, to deal with less data.  I remember debating this point at length with my Feedster cofounder back in the day when we were building our 64 bit XML search engine.  He took the position that the indices would be efficient enough that the amount of data wouldn’t matter.  I took the position that it is always faster, even with an index, to have less data to sift through.&lt;/p&gt;

&lt;p&gt;So, ideally, it would be great to use the s_c_p_u index if at all possible.  This should dramatically reduce the amount of data in the index and thus lower the ROWS.  The problem here is that I don’t know what’s in the crawl_id column and I don’t care about it at all.  The crawl_id column was originally used to disambiguate between different crawl runs when we stored all page data, irrespective of crawl run, in a single table.  We’ve since moved to a per table sharded architecture but that never got removed (note to self – deal with that for our upcoming crawl).&lt;/p&gt;

&lt;p&gt;Thinking about this for a few minutes made realize that we can leverage both indices to support the underlying goal of quickly checking if this row already existed.  Why not leverage the s_c_d_p index to get the list of crawl_ids and then push that into the next query.  This fulfills the constraint of MySQL wanting the parameters in the index to all be fulfilled.  And after a few minutes of tinkering led to this method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def exists?(site_id, page_id, no_www_sha1)
  crawls = self.where(:site_id =&amp;gt; site_id).select(&quot;distinct crawl_id&quot;).map(&amp;amp;:crawl_id)
  
  result = self.where(:site_id =&amp;gt; site_id, :crawl_id =&amp;gt; crawls, :page_id =&amp;gt; page_id, :url_no_www_sha1 =&amp;gt; no_www_sha1).order(&quot;&quot;).limit(1).first

  return true if result
  return false 
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This gave a nice rails style syntax method that I can use to abort the operation if the data already exists i.e.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return if exists?(site_id, page_id, no_www_sha1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The only reason that I’m not having this method compute the no_www_sha1 value is that if we continue we’re going to use it anyway so its better to pass it in directly.  I could have computed it in the method and then returned it back as a second parameter but then it should really be exists not exists? since my preference is that a ? postfixed method should really only return a single value either true or false.&lt;/p&gt;

&lt;p&gt;Not bad for a bit of late Wednesday night hacking.  And, yes, I did just now fix the schema for our next crawl.  Ah the wonderful fast bliss of ALTER TABLE on tables without any data in them.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/11/17/a-tricky-bit-of-rails-activerecord-optimization.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/11/17/a-tricky-bit-of-rails-activerecord-optimization.html</guid>
        
        <category>rails</category>
        
        <category>active_record</category>
        
        <category>sql</category>
        
        <category>optimization</category>
        
        <category>mysql</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Understanding MySQL's Alter Table</title>
        <description>&lt;p&gt;all mysql alter tables are the same:&lt;/p&gt;

&lt;p&gt;-a) lock table against writes
a) copy to tmp table
b) modify
c) copy back
d) unlock&lt;/p&gt;

&lt;p&gt;so this means that at a minimum its another almost 24 hours because the copy back is as long as the copy to.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                                |    0.000 | | 2163 | appdata | ip-172-31-47-83.us-west-2.compute.internal:55637  | banks_production                  | Sleep   |    8497 |                   | NULL                                                           |    0.000 | | 2166 | appdata | ip-172-31-45-225.us-west-2.compute.internal:39423 | banks_production                  | Query   |   75956 | copy to tmp table | ALTER TABLE `link2016_q1s` ADD `data_source` int(11) DEFAULT 1 |   16.747 | | 2173 | appdata | localhost                                         | banks_production                  | Query   |       0 | NULL              | show full proce
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 15 Nov 2016 07:59:18 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/15/understanding-mysql-s-alter-table.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/15/understanding-mysql-s-alter-table.html</guid>
        
        
      </item>
    
      <item>
        <title>Non Standard Numerical Metrics for Valuing Acquisitions</title>
        <description>&lt;p&gt;As you’re aware my knowledge of the marina business is very limited these days – I live in Indiana.  The one thing that I was concerned with is that Safe Harbor doesn’t have enough open positions:&lt;/p&gt;

&lt;p&gt;https://safeharbormarinas.companycareersite.com/&lt;/p&gt;

&lt;p&gt;BYY has I think actually more:&lt;/p&gt;

&lt;p&gt;https://www.byy.com/about-employment/&lt;/p&gt;

&lt;p&gt;Over the years I’ve done a fair bit of work with venture capitalists helping them with due diligence and one of the ways I learned to look at companies was by their non obvious numerical metrics.  Example - if you look at the number of parking spaces a company has and then multiply by an average salary it gives you their staffing costs.  Similarly if you look at parking lots in silicon valley and you see that no one is working late / after hours, it says something about their drive to succeed (this is mostly true in pre publicly held companies).&lt;/p&gt;

&lt;p&gt;Anyway I would tend to take the position that any company of a sufficient size has some level of structural turn over – if you have 1,000 people on staff, not all of them, by definition, can be happy.  So some measurably percentage should be in flux at any time and I would think that the number of open positions should reflect that.&lt;/p&gt;

&lt;p&gt;Anyway you know your business and you know how many staff they should have and the seasonality.  I don’t know if the number of open positions they have is right or wrong but from an external perspective it feels low to me.&lt;/p&gt;

&lt;p&gt;Much love and congratulations again.  My very, very best to everyone.&lt;/p&gt;

&lt;p&gt;Scott&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Nov 2016 07:32:29 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/15/non-standard-numerical-metrics-for-valuing-acquisitions.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/15/non-standard-numerical-metrics-for-valuing-acquisitions.html</guid>
        
        
      </item>
    
      <item>
        <title>CS Tutorial 016 SQL Injection</title>
        <description>&lt;h1 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h1&gt;

&lt;p&gt;Hey Student,&lt;/p&gt;

&lt;p&gt;SQL Injection can be confusing to understand but it is actually very, very simple.  Let’s think about a simple web page which lets you search for something.  At the html level, this web page is going to look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Search&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/search.php&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;What do you want to search for?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;q&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, what we’ve got here is a form with one input element called q and a submit button.  When the submit button is pressed, an HTTP get request is sent back to the server and given the back end url /search.php.&lt;/p&gt;

&lt;p&gt;Let’s consider this in the context of a PHP application.  If you were going to process this server side then you will have a variable called $_REQUEST[“q”].  Now you might&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Nov 2016 07:28:26 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/15/cs-tutorial-016-sql-injection.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/15/cs-tutorial-016-sql-injection.html</guid>
        
        
      </item>
    
      <item>
        <title>CS Tutorial 015 Storage Is Hard or Good Old dtResource Files</title>
        <description>&lt;p&gt;(good old DtResource files),&lt;/p&gt;

&lt;p&gt;Why I use sql and mysql specifically&lt;/p&gt;

&lt;p&gt;Engineering practices are that diret code submissions normally not accepted&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Nov 2016 07:25:45 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/15/cs-tutorial-015-storage-is-hard-or-good-old-dtresource-files.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/15/cs-tutorial-015-storage-is-hard-or-good-old-dtresource-files.html</guid>
        
        
      </item>
    
      <item>
        <title>Making Money with a Pressure Washer</title>
        <description>&lt;p&gt;Ride your bike around the neighborhood looking for ugly sidewalks and take a picutre and make a flier and tell your story&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Nov 2016 07:23:26 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/15/making-money-with-a-pressure-washer.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/15/making-money-with-a-pressure-washer.html</guid>
        
        
      </item>
    
      <item>
        <title>CS Tutorial 002 - Applying O(N) to Arrays vs Regex for Name Splitting</title>
        <description>&lt;p&gt;def self.split_full_name_iterative(full_name)
    parts = full_name.split(“ “)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;first_name_bits = []
last_name_bits = []

parts.each_with_index do |part, ctr|
  if ctr == parts.size - 1
    last_name_bits &amp;lt;&amp;lt; part
  else
    first_name_bits &amp;lt;&amp;lt; part
  end
end

return first_name_bits.join(&quot; &quot;), last_name_bits.join(&quot; &quot;)   end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;def self.split_full_name_regex(full_name)
    first_name = ‘’
    last_name = ‘’
    full_name.scan(/(.+) ([^ ]+)$/){ first_name = $1; last_name = $2;}
    return first_name, last_name
  end&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Nov 2016 07:17:02 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/15/cs-tutorial-002-applying-o-n-to-arrays-vs-regex-for-name-splitting.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/15/cs-tutorial-002-applying-o-n-to-arrays-vs-regex-for-name-splitting.html</guid>
        
        
      </item>
    
      <item>
        <title>Start Learnings - Two Thinks that Betsy Devine Taught Me</title>
        <description>&lt;p&gt;Two levels - 7 degrees of separation to a Nobel Prize Winner&lt;/p&gt;

&lt;p&gt;But that’s the surface and when confronted with celebrity, well, its easy to only see the surface.  There’s a deeper lesson here – WMBHD - What Might Betsy Have Done?&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 07:17:46 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/14/start-learnings-two-thinks-that-betsy-devine-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/14/start-learnings-two-thinks-that-betsy-devine-taught-me.html</guid>
        
        
      </item>
    
  </channel>
</rss>
