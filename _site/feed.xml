<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>https://fuzzyblog.io//blog/</link>
    <atom:link href="https://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 Jan 2017 04:17:48 -0500</pubDate>
    <lastBuildDate>Tue, 17 Jan 2017 04:17:48 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Rails Tutorial - Making Awesome Print Work Everywhere</title>
        <description>&lt;p&gt;I know that Pry is the new hotness for command line Ruby work in a repl – but I’ve never felt comfortable with it.  I stick with the tried and true AwesomePrint.  I recently bootstrapped up two new boxes and I found that I’ve been using AwesomePrint so long that I don’t actually remember how to make it work.  And that, dear reader, is how I write a post – if I can’t rememeber it then I need to write it down.  Here are the steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need awesome_print in your Gemfile so add **gem ‘awesome_print’ **.  I put it into development and test groups only generally but it is awful convenient in production (but you need to follow step 3 server side on ALL servers which sucks).&lt;/li&gt;
  &lt;li&gt;Do the bundle install dance&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a file ~/.irbrc and add the following two lines:&lt;/p&gt;

    &lt;p&gt;require “awesome_print”
AwesomePrint.irb!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information of AwesomePrint, I’ve been going to &lt;a href=&quot;http://www.rubyinside.com/awesome_print-a-new-pretty-printer-for-your-ruby-objects-3208.html&quot;&gt;this web page&lt;/a&gt; for years now.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/rails/2017/01/17/rails-tutorial-making-awesome-print-work-everywhere.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/rails/2017/01/17/rails-tutorial-making-awesome-print-work-everywhere.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>awesome_print</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Blog Standards - It Is the Big Boy's World - We Just Play In It</title>
        <description>
</description>
        <pubDate>Mon, 16 Jan 2017 12:37:43 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/2017/01/16/blog-standards-it-is-the-big-boy-s-world-we-just-play-in-it.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/2017/01/16/blog-standards-it-is-the-big-boy-s-world-we-just-play-in-it.html</guid>
        
        
      </item>
    
      <item>
        <title>Work Life Balance - When Did This Become Acceptable?</title>
        <description>&lt;p&gt;Once upon a time, not so long ago, I had to say to someone who reports to me this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey.  Bob (my manager) asked me to tell you that you should start reading up on Ansible in your off hours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What.  The.  Hell.  When did our work life balance get so out of whack that our managers now don’t see anything wrong with telling us WHAT TO READ WHEN WE AREN’T AT WORK???&lt;/p&gt;

&lt;p&gt;I cannot remember the last time I’ve felt as morally dirty and compromised as I did in that moment.  As a full time employee, which this person was, he is expected to work 40 hours per week.  If a new skill is &lt;strong&gt;required&lt;/strong&gt; for his job then shouldn’t he get to pick it up on the job?  Sheesh.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jan 2017 10:40:14 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/work/2017/01/16/work-life-balance-when-did-this-become-acceptable.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/work/2017/01/16/work-life-balance-when-did-this-become-acceptable.html</guid>
        
        <category>feels_slimy</category>
        
        <category>work_life_balance</category>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Rails Tutorial - Making Font Awesome Work with Rails 5</title>
        <description>&lt;p&gt;Like a lot of back end folks I suspect I’m not alone when I look at a project like Font Awesome and go “Great Work; damn if I know how to actually use that.”  I’d normally toss it over the wall to a front end guy like my buddy &lt;a href=&quot;http://dv2.dasari.me&quot;&gt;Dv&lt;/a&gt; but this is for my side project so I’m all alone on this one.  Since I really, really don’t feel that I understand the world of front end work and CSS / SCSS very well I thought I’d write it all down for you (and myself).&lt;/p&gt;

&lt;h1 id=&quot;heres-what-not-to-do&quot;&gt;Here’s what not to do&lt;/h1&gt;

&lt;p&gt;I took a number of wrong steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I watched this &lt;a href=&quot;https://www.youtube.com/watch?v=RC_jIGABW-E&quot;&gt;video&lt;/a&gt; and it is really good – except for the specific steps he gave me didn’t work.  I really don’t understand why and it might have been me.&lt;/li&gt;
  &lt;li&gt;I used the &lt;a href=&quot;https://github.com/FortAwesome/font-awesome-sass&quot;&gt;font-awesome-sass gem&lt;/a&gt; and it too failed me hard.&lt;/li&gt;
  &lt;li&gt;Don’t follow the Stack Overflow post &lt;a href=&quot;http://stackoverflow.com/questions/37581599/rails-assets-is-having-issues-with-my-fonts&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all of the above cases I got the error &lt;strong&gt;No route matches [GET] “/assets/fontawesome-webfont.ttf”&lt;/strong&gt; and I just couldn’t get past it.  The Stack Overflow post might have ultimately gotten me there but it did take me to a different gem – font-awesome-rails discussed in the next section.&lt;/p&gt;

&lt;p&gt;You should note that I don’t meant to malign any fo the urls in above – I’m not a css / front end guy by any means.  All I did was some simple googles and the processes I was taken through ultimately didn’t work and I blew over an hour of development time to find that out.&lt;/p&gt;

&lt;h1 id=&quot;heres-what-to-do&quot;&gt;Here’s What To Do&lt;/h1&gt;

&lt;p&gt;What you actually need is to do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install the &lt;a href=&quot;https://github.com/bokmann/font-awesome-rails&quot;&gt;font-awesome-rails&lt;/a&gt; gem.  Just add &lt;strong&gt;gem “font-awesome-rails”&lt;/strong&gt; to your Gemfile and then do the bundle install dance.&lt;/li&gt;
  &lt;li&gt;In your application.css.scss file add the line: &lt;strong&gt;@import “font-awesome”;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Stop and start your rails server.&lt;/li&gt;
  &lt;li&gt;Add to a test .html.erb view file this line**: fa_icon “camera-retro” ** (you’ll probably need to enclose that in output tags using %= and angle braces)&lt;/li&gt;
  &lt;li&gt;Render that test .html.erb view file in your browser and you should see a camera icon.  What this is doing behind the scenes is outputting this html: &lt;i class=&quot;fa fa-camera-retro&quot;&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful Resources&lt;/h1&gt;

&lt;p&gt;Here are some important urls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome Home Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bokmann/font-awesome-rails&quot;&gt;Font Awesome Rails Gem&lt;/a&gt; -&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FortAwesome/Font-Awesome&quot;&gt;The Font Awesome Github Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fontawesome.io/icons/&quot;&gt;The Icon Search Page for Font Awesome&lt;/a&gt; - Use this to search for the icon you need&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fontawesome.io/cheatsheet/&quot;&gt;The Cheat Sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12468359/using-font-awesome-icon-for-bullet-points-with-a-single-list-item-element&quot;&gt;Useful Example of Font Awesome at the HTML Level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Jan 2017 01:49:19 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/rails/2017/01/16/rails-tutorial-making-font-awesome-work-with-rails-5.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/rails/2017/01/16/rails-tutorial-making-font-awesome-work-with-rails-5.html</guid>
        
        <category>tutorial</category>
        
        <category>font_awesome</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Ruby - How to Sort an Open Struct</title>
        <description>&lt;p&gt;I am a huge, huge fan of the OpenStruct class in Ruby.  OpenStruct lets you build data structures that act like classes complete with dot notation.  Underlying OpenStruct is really a hash like structure with some semantic niceties that enable the dot methods.&lt;/p&gt;

&lt;p&gt;I recently started building a fairly complex structure that represents a blog’s metadata and I wanted my keys to be sorted not structured willy nilly.  A little bit of thought and looking at the methods that an OpenStruct instance responds to gave me this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;b = OpenStruct.new
# complicated routine here that builds the metadata
b.to_h.sort.to_h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All this is doing is taking the OpenStruct, converting it to a hash and sorting it and converting it back to a hash – easy peasy!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/ruby/2017/01/16/ruby-how-to-sort-an-open-struct.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/ruby/2017/01/16/ruby-how-to-sort-an-open-struct.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>hyde</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>One Week of Kevin Rose's Zero App</title>
        <description>
</description>
        <pubDate>Sun, 15 Jan 2017 07:38:49 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/weight_loss/2017/01/15/one-week-of-kevin-rose-s-zero-app.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/weight_loss/2017/01/15/one-week-of-kevin-rose-s-zero-app.html</guid>
        
        <category>personal</category>
        
        <category>weight_loss</category>
        
        <category>app</category>
        
        <category>zero</category>
        
        <category>startup</category>
        
        
        <category>weight_loss</category>
        
      </item>
    
      <item>
        <title>An AWS SAAS Architecture to Minimize Hosting Costs</title>
        <description>&lt;p&gt;My last AWS bill was well over $6,000 – per &lt;strong&gt;month&lt;/strong&gt;.  I’ve managed to cut it down pretty dramatically by being, well, &lt;strong&gt;less stupid&lt;/strong&gt; and in the process I’ve learned quite a bit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even a t2.micro is actually expensive when its a full time dynamic instance – $105.12 / year roughly (0.012 per hour)&lt;/li&gt;
  &lt;li&gt;The bigger the instance the more you are charged&lt;/li&gt;
  &lt;li&gt;The more storage volumes you happen to have lying around the more you are charged&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these are rocket science observations – as I said I mostly reduced my costs by being less stupid.&lt;/p&gt;

&lt;p&gt;Now that bill mentioned above is for a large legacy app which was originally built for a classical data center and then was brute force pushed onto AWS – no rethink, no rewrite, etc.&lt;/p&gt;

&lt;p&gt;I’m in the conceptual design stage of a side project – it might not amount to anything or it might be mildly successful (I was going to type &lt;em&gt;wildly&lt;/em&gt; but I think that’s unlikely).  But it occurs to me that since I have a clean slate structure in front of me, I can actually &lt;em&gt;design&lt;/em&gt; to minimize costs.  So here are my constraints for building a SAAS app in 2017 based on what I care about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AWS&lt;/strong&gt;.  I remain firmly committed to AWS as a platform.  At this point in my life AWS is approaching the status of a constant.  I know there are cheaper solutions but there aren’t better solutions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimal Hosting Costs&lt;/strong&gt;.  I don’t ever – in my life – want to see a hosting bill that approaches a more than comfortable living wage in America.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Instance Isolation&lt;/strong&gt;.  I’m so damn sick of security issues that it makes me want to llama.  I’d really like very customer running in an isolated stack / server / container / whatever.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Isolation&lt;/strong&gt;.  Same.  I don’t ever want to have to bother with “this migration will take 24 hours to run so I’m not going to bother with it”; I want the ability to have each customer’s data separate from every other customer’s data.  I learned this lesson from &lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html&quot;&gt;Matt&lt;/a&gt;.  I learned this less from Chris O’Meara at &lt;a href=&quot;http://www.streamsend.com/&quot;&gt;StreamSend&lt;/a&gt; where I worked on large scale email marketing tools.  Time to apply it here.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Database Backups&lt;/strong&gt;.  I have systems that I have run for years that I haven’t backed up – ever.  I know that’s heretical but it can be done.  Still it makes me feel &lt;em&gt;dirty&lt;/em&gt;.  I should probably avoid that this time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Idling Boxes&lt;/strong&gt;.  The history of Internet development has generally been one of idled resources - you can’t anticipate load well so you over build.  Not only is that dumb but it is both costly and energy inefficient.  Not doing it this time around.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debuggability&lt;/strong&gt;.  I am so, so, so tired of debugging problems where the log data for user 1 is interleaved with the log data for users 2 thru 1000.  Wouldn’t it be absolutely delightful to have all of a user’s data in one damn place?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know some people out there are thinking: &lt;strong&gt;Lambda&lt;/strong&gt;.  Not a chance – I’m a full stack Ruby / Rails / Elixir / Phoenix guy and that isn’t going to change.  I suspect I’d leave the industry before I tried a significant server side development project with JavaScript in an asynchronous fashion.&lt;/p&gt;

&lt;h1 id=&quot;saas-economics-101-when-you-are-a-solo-entrepreneur&quot;&gt;SAAS Economics 101 When You are a Solo Entrepreneur&lt;/h1&gt;

&lt;p&gt;I am, once again, a solo entrepreneur – I don’t have any intentions of taking funding, seeking funding, walking the alleys of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sand_Hill_Road&quot;&gt;Sand Hill Road&lt;/a&gt;, darkening the halls of silicon valley’s various and sundry funding sources.  Now don’t get me wrong, I was treated very well by capital sources the last time I did this but times are different now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infrastructure costs are markedly less than they used to be.  Even AWS which is the most expensive of the cloud hosting options is still incredibly affordable.&lt;/li&gt;
  &lt;li&gt;My technical skills are much, much better.  I don’t or hopefully don’t need technical assistance; time will tell.  My big weakness has always been devops and clearly my &lt;a href=&quot;https://fuzzygroup.github.io/blog/category.html#ansible&quot;&gt;Ansible&lt;/a&gt; / &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws.html&quot;&gt;AWS&lt;/a&gt; work has addressed that.  I’ve been very deliberately addressing this technical deficiency for some time now.&lt;/li&gt;
  &lt;li&gt;This is a paid service from day 1.  Even my personal account will be paid to force development of the recurring billing front end.  It will almost certainly be &lt;a href=&quot;https://stripe.com/&quot;&gt;Stripe&lt;/a&gt; rather than &lt;a href=&quot;https://www.braintreepayments.com/&quot;&gt;BrainTree&lt;/a&gt; this time around but that’s ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I understand that one of the very real reasons for taking on capital is marketing / business building.  This time around I am building a service that I personally want.  Hopefully people other than myself feel the same way; I think they will.&lt;/p&gt;

&lt;p&gt;So what is the very essence of SAAS Economics when you are a solo entrepreneur?  Well, in my mind, it is very, very simple:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Everything you spend comes out of &lt;strong&gt;your own pocket&lt;/strong&gt;.  An inefficient architecture? Well that is $$$ out of your kids college fund (remember them?).  Watch every dime, every nickel, every penny.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time around I intend to be so damn cheap that I bloody well squeak.  In particular I want to make a profit on &lt;strong&gt;every single account&lt;/strong&gt; from &lt;strong&gt;Day 1&lt;/strong&gt;.  Here’s what that means:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If a t2.micro is the minimum instance I want to use (and, yes, I’m aware of the CPU issues on the whole t2 class of instances) then that means that if the instance is &lt;em&gt;continually running&lt;/em&gt; I need to charge more than 105.12 per year for an account.&lt;/li&gt;
  &lt;li&gt;There will be overhead that needs to get allocated across all accounts so that $105.12 isn’t actually the minimum.&lt;/li&gt;
  &lt;li&gt;Use of the standard set of services that startups use like MailChimp, New Relic, Exception Monitoring, etc all raise the cost I’d need to charge particularly when there are only a few signups as things always are at the beginning.  If I need a particular service then I’m going to have to build it myself or find it from the Open Source world and run it myself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll notice that I emphasized &lt;em&gt;continually running&lt;/em&gt; in point #1 above and that’s at the heart of the internal infrastructure I’m building.  I’m looking at SAAS apps and a dynamically provisioned architecture where a node that a paying user needs is built &lt;strong&gt;on demand&lt;/strong&gt; from an image.  Deploy will basically consist of creating an instance, deploying code onto it, imaging it and then shutting it down.  The next user in will get a new instance created from that image.  As long as the user’s persistent data is stored separately from this and their database connection is generated dynamically then that 0.012 / hour cost metric above should apply.  So if a user uses the service for 10 hours per month then the cost is 10 * 0.012 + the fixed overhead.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-fixed-overhead&quot;&gt;What is the Fixed Overhead?&lt;/h2&gt;

&lt;p&gt;So the fixed overhead essentially boils down to three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A persistent web presence aka a web site.  This is going to be written in Rails; actually it is a key part of the architecture so it is already written.  Initially this can be a t2.micro instance.&lt;/li&gt;
  &lt;li&gt;Data storage.  This is going to be a MySQL / MariaDB server.  If I properly define the storage as an external volume in AWS I could run the db server on the same instance as the web site.  This box isn’t ever going down anyway.&lt;/li&gt;
  &lt;li&gt;A worker box.  For this product there will be a need for on going job execution.  I suspect I’ll be using &lt;a href=&quot;http://www.sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt; at least initially&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m a very, very, very strong believer that you run one and only one Ruby code base per instance.  &lt;a href=&quot;http://www.railsmachine.com&quot;&gt;Rails Machine&lt;/a&gt; taught me this back in the day and I detoured for a long time into the dreadful world of server side RVM.  I’ve thankfully recovered from that and now I’ll never, ever do it again.  Without server side RVM then I’m limited to one Ruby code base per server so we now have fixed overhead costs of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Presence - 105.12&lt;/li&gt;
  &lt;li&gt;Worker - 105.12&lt;/li&gt;
  &lt;li&gt;Storage Volume; Hard to compute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now let’s call the fixed overhead cost of the business say $250 per year.  That should likely cover storage, Route 53 DNS and some level of traffic.&lt;/p&gt;

&lt;h2 id=&quot;but-ruby-is-slow&quot;&gt;But Ruby is Slow&lt;/h2&gt;

&lt;p&gt;You are so, so damn right about this.  In nearly 30 years of computing Ruby is the first &lt;em&gt;language&lt;/em&gt; that I actually fell in love with; I am now going into my second decade in this long term relationship and I still love it.  And that’s why I’m prototyping this in Ruby / Rails.  But I have a pretty clearly defined api that I can substitute Elixir in for when the intersection between gems I need (&lt;a href=&quot;http://rmagick.rubyforge.org/&quot;&gt;RMagick&lt;/a&gt;) and &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; and my personal Elixir skills intersect.  I hope to be attending the Elixir conference circuit this year to help address my skills.&lt;/p&gt;

&lt;h1 id=&quot;a-challenge-for-those-reading&quot;&gt;A Challenge for Those Reading&lt;/h1&gt;

&lt;p&gt;So let me place a challenge out there – if you’re planning a 2016 side project then have you thought and thought hard about how &lt;strong&gt;cheaply&lt;/strong&gt; you can run it?  If you are cutting an all new code base in 2017 then you are likely in a position to not make your traditional assumptions about cost and heavy weight architecture.  Once I posed the question in my head: &lt;em&gt;How cheaply can I do this?&lt;/em&gt; then it absolutely crystalized my thinking along the right lines.&lt;/p&gt;

&lt;p&gt;For me I think the right cost assumptions are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eliminate expensive instance costs&lt;/li&gt;
  &lt;li&gt;Eliminate continuously running instances&lt;/li&gt;
  &lt;li&gt;Minimize overhead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For whatever you are planning to build in 2017 then I suspect these will be different for you but there is likely a sweet spot for cost reduction.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 07:29:04 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/aws/2017/01/15/a-saas-architecture-to-minimize-hosting-costs.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/aws/2017/01/15/a-saas-architecture-to-minimize-hosting-costs.html</guid>
        
        <category>hyde</category>
        
        <category>saas</category>
        
        <category>rails</category>
        
        <category>software_engineering</category>
        
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>Heinlein's Rules for Solo Entrepreneurs</title>
        <description>&lt;p&gt;We all have influences in our lives – books, movies, music.  For me the seminal influence was the writings of Robert A. Heinlein (RAH).  I’ve read I think every word he ever commercially produced and while I can cite chapter and verse on his fiction, his rules for writing are absolutely brilliant.  Here’s a quick summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rule One: You Must Write&lt;/li&gt;
  &lt;li&gt;Rule Two: Finish What You Start&lt;/li&gt;
  &lt;li&gt;Rule Three: You Must Refrain From Rewriting, Except to Editorial Order&lt;/li&gt;
  &lt;li&gt;Rule Four: You Must Put Your Story on the Market&lt;/li&gt;
  &lt;li&gt;Rule Five: You Must Keep it on the Market until it has Sold&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Robert Sawyer, a fantastic Canadian Science Fiction writer has a great commentary on this on his &lt;a href=&quot;http://www.sfwriter.com/ow05.htm&quot;&gt;Heinlein’s Rules&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;Right now I am faced with a number of startup opportunities in front of me and trying to shuffle the deck so to speak to choose the right one is damn hard.  It seems like all of them are good ideas but they&lt;/p&gt;

&lt;p&gt;So here goes: my attempt to make Heinlein’s rules for startups:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rule One: You Must Create Every Single Day.  &lt;br /&gt;Comment: Even an hour per day adds up quickly.&lt;/li&gt;
  &lt;li&gt;Rule Two: Take it to the MVP Stage.&lt;/li&gt;
  &lt;li&gt;Rule Three: You Must Refrain From Making Needless Changes Except Due to Customer Input.&lt;/li&gt;
  &lt;li&gt;Rule Four: You Must Put It Out There.&lt;/li&gt;
  &lt;li&gt;Rule Five: You Must Keep it Running Until It Makes Revenues; Not Profits; Revenues.&lt;/li&gt;
  &lt;li&gt;Rule Six: You must keep spending to an absolute minimum.&lt;br /&gt; Any smart engineer should now be able to make an MVP without spending a dime.&lt;/li&gt;
  &lt;li&gt;Rule Seven: You must design to keep hosting costs to an absolute minimum.&lt;br /&gt;  As I look at technologies like AWS, ansible, ec2, etc, I see that how you choose to structure your architecture can dramatically impact your costs.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 13 Jan 2017 08:24:25 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/startup/2017/01/13/heinlein-s-rules-for-startups.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/startup/2017/01/13/heinlein-s-rules-for-startups.html</guid>
        
        <category>startup</category>
        
        <category>heinlein</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>So you think AWS volumes are expensive or hard to use...</title>
        <description>&lt;p&gt;This is one of those stories that revolves around my walking uphill in the snow to school both ways …&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 14:33:12 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/2017/01/12/so-you-think-aws-volumes-are-expensive-or-hard-to-use.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/2017/01/12/so-you-think-aws-volumes-are-expensive-or-hard-to-use.html</guid>
        
        
      </item>
    
      <item>
        <title>When rails g won't generate a Model</title>
        <description>&lt;p&gt;I just saw about an hour of precious, early morning development time disappear because this failed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rails g model TextCommon    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All that would happen was I’d get a cryptic:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running via Spring preloader in process 19539&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then nothing.  No model file was generated, no spec file was generated.&lt;/p&gt;

&lt;p&gt;This was a newly created Rails 5 api application and I had already used rails g to create my first controller.   So I knew it was working – I knew it.  Here was my trouble shooting process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I started my troubleshooting by stopping my Tmux session and trying without it – &lt;strong&gt;NOPE&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Being a cranky programmer who is often distrustful of newer things, I figured that spring might be the problem so I did a ps auwwx&lt;/td&gt;
          &lt;td&gt;grep hyde_api_ruby and found a truly disturbing number of processes.  I went through a number of p*kill -f hyde_api_ruby * gyrations (more on &lt;a href=&quot;https://fuzzygroup.github.io/blog/unix/2016/11/23/pkill-rocks.html&quot;&gt;pkill&lt;/a&gt;) and still no luck.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Next up was to try this on an El Capitan machine because I’ve had enough issues with Sierra to, well, think it sucks monkey chunks.  Nope.  Same issues.&lt;/li&gt;
  &lt;li&gt;My next thought was to revert to my spring theory and disable spring and listen at the Gemfile level.  Apparently you can’t do that because if you don’t have listen then the rails command dies with an exception.&lt;/li&gt;
  &lt;li&gt;So I added back listen but not spring and got another version of the same error.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point I thought to myself – &lt;strong&gt;wait&lt;/strong&gt; – you generated this app with &lt;strong&gt;–skip-active-record.&lt;/strong&gt;  Is that why model generation is failing?  So I tried rails g controller Foo as a test and that worked just fine.&lt;/p&gt;

&lt;p&gt;The bottom line is that if you don’t have persistent storage configured at the Rails level, rails g model just won’t work.  That’s a pity because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PORO (plain old ruby objects) are really, really nice&lt;/li&gt;
  &lt;li&gt;Storing them in app/models gives you the benefits of reload!&lt;/li&gt;
  &lt;li&gt;The rails g process ensures that a spec file is generated correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added this to the Spring issues tracker &lt;a href=&quot;https://github.com/rails/spring/issues/486&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://fuzzyblog.io//blog/rails/2017/01/12/when-rails-g-won-t-generate-a-model.html</link>
        <guid isPermaLink="true">https://fuzzyblog.io//blog/rails/2017/01/12/when-rails-g-won-t-generate-a-model.html</guid>
        
        <category>rails</category>
        
        <category>model</category>
        
        <category>spring</category>
        
        <category>listen</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
