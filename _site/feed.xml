<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Aug 2017 07:34:56 -0400</pubDate>
    <lastBuildDate>Thu, 17 Aug 2017 07:34:56 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Marketing 101 - Ride the Wave If You Can</title>
        <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I haven’t written a Marketing 101 piece since 2003 but a friend recently pointed out that even &lt;a href=&quot;http://fuzzyblog.io/blog/tag.html#marketing101&quot;&gt;my old ones&lt;/a&gt; were pretty good so I’m giving it a shot.&lt;/p&gt;

&lt;p&gt;One of the more difficult things in marketing to grasp is the idea of a &lt;em&gt;wave&lt;/em&gt;.  I don’t know if there’s a better term for this but wave is how I’ve been thinking of this for the better part of two decades now.  A wave is an underlying meme or movement that resonates at the industry or even society level and I think the best way to illustrate this is with an example.  My first company, founded in 1987, was a hypertext authoring system (think FrontPage with an integrated browser but back in the DOS days).  There was a small burst of interest in all things hyper* due to Apple’s HyperCard but that pretty much subsided by late 1988 / early 1999.  And then, over the next few years the industry shifted, in a huge way, to &lt;strong&gt;multimedia&lt;/strong&gt;.  Multimedia became a huge wave – and we shifted our product features slightly and our marketing dramatically to ride the multimedia wave:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We added a small handful of features for controlling digital video discs&lt;/li&gt;
  &lt;li&gt;We went to multimedia centric trade shows&lt;/li&gt;
  &lt;li&gt;We adopted the multimedia term and related iconography to all our product literature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We saw our fortunes increase in parallel with multimedia – there is truth in the old aphorism, &lt;em&gt;a rising tide lifts all boats&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When you are a teeny, tiny startup, one of the best things that you can do is to &lt;em&gt;ride the wave&lt;/em&gt; when there is a wave.  I’ve been consulting recently with an up and coming online education product and my strongest advice to them has been to position their product as a &lt;em&gt;STEM learning tool&lt;/em&gt;. STEM is the current term in vogue for &lt;em&gt;science, technology, engineering and mathematics&lt;/em&gt; education.&lt;/p&gt;

&lt;p&gt;When you’re a pure technical person, the idea of riding a wave can at times be disturbing.  Technical founders tend to think of their product solely in the context where the original idea.  And, when that wasn’t the wave, repositioning the product in terms of a wave can feel a bit like being a &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=carpet%20bagger&quot;&gt;carpet bagger&lt;/a&gt;.  I’m here to tell you, both as a technical person and a marketer, that this just is &lt;strong&gt;not&lt;/strong&gt; the case.  Waves are often large in nature – what was multimedia after all – and as long as the product is credible in terms of the wave, repositioning can actually benefit both you and the product’s customers:&lt;/p&gt;

&lt;p&gt;For you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You get to tap into a market that is growing faster that normal&lt;/li&gt;
  &lt;li&gt;You get access to a set of focused marketing events such as trade shows that are wave focused&lt;/li&gt;
  &lt;li&gt;You get access to a smaller but more focused group of customers&lt;/li&gt;
  &lt;li&gt;Customers are often willing to spend more due to funding specific to the wave (new budgets, grants, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the customer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The customer gets a more specific product&lt;/li&gt;
  &lt;li&gt;The customer gets the benefit of at least some wave specific features&lt;/li&gt;
  &lt;li&gt;The customer gets the benefit of a company focusing very specifically on their needs&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 17 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/marketing/2017/08/17/marketing-101-ride-the-wave-if-you-can.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/marketing/2017/08/17/marketing-101-ride-the-wave-if-you-can.html</guid>
        
        <category>marketing101</category>
        
        
        <category>marketing</category>
        
      </item>
    
      <item>
        <title>10 Steps to Debugging Containerized Applications</title>
        <description>&lt;p&gt;I’ve recently been building a new product using Rails based on an approach that I call &lt;em&gt;Breaking the Monolith&lt;/em&gt;.  Rather than build a traditional Rails monolith, I use multiple microservices / small Rails applications and deploy them all with Docker into a distributed system.  The hardest part about distributed systems is always &lt;strong&gt;debugging&lt;/strong&gt; and I’ve written this guide as a step by step approach for how to go from a misbehaving application right down to a malfunctioning container – this is the actual process that I follow.&lt;/p&gt;

&lt;p&gt;All of this is being done on Ubuntu under AWS but the debugging process applies to any *nix type environment or Platform as a Service (PAAS).&lt;/p&gt;

&lt;h1 id=&quot;disclaimer-but-you-dont-ssh-into-containers&quot;&gt;Disclaimer: But You Don’t SSH into Containers…&lt;/h1&gt;

&lt;p&gt;A lot of the examples below are based around SSH’ing into a server and diagnosing the error in context.  I’ve seen a lot of things since the advent of containers that seemingly want you to believe, that in this brave new world, you just don’t SSH in anymore.  Now, perhaps I am doing things wrong, but I have not found that to be the case at all.  It may be that once I am out of active development that I will no longer be SSH’ing into servers but, for now, SSH is still a dear old friend.&lt;/p&gt;

&lt;h1 id=&quot;failure-context---504-gateway-error&quot;&gt;01: Failure Context - 504 Gateway Error&lt;/h1&gt;

&lt;p&gt;The general system for a failure on this application seems to be a 504 Gateway Error which basically means that the application load balancer (ALB) isn’t receiving output back from one of the HTTP subsystems.&lt;/p&gt;

&lt;h1 id=&quot;check-the-url-in-development-after-a-server-restart&quot;&gt;02.  Check the Url in Development after a Server Restart&lt;/h1&gt;

&lt;p&gt;Every single time you do a deploy with Docker, your entire Gem stack along with any initializers is rebuilt and that means that a stack level change that you made in development but failed to catch can break everything.  So the first diagnosis step is to stop the development server and make sure that things come back up correctly.  Each of my applications runs on a different port so I can’t give a single example here – do the ctrl+c on Puma and then restart it and check the status.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you don’t have a simple health check for your application then I would strongly recommend it.  Here’s a &lt;a href=&quot;https://gist.github.com/fuzzygroup/7dec79f94deac117ce591598243f596a&quot;&gt;simple gist showing a /health url&lt;/a&gt; for a Rails application.&lt;/p&gt;

&lt;p&gt;If your Rails app is running on say port 3200 then you can just do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://localhost:3200/health
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and you should see:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ok
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;test-the-health-check-logged-into-the-server&quot;&gt;03: Test the Health Check Logged into the Server&lt;/h1&gt;

&lt;p&gt;Once you’ve verified that things are correct in development, the next step is to log into the server and run the same curl test on the server where the failure is occurring.  In order to make this type of debugging extremely simple for me, I run all my applications server side on exactly the same port structure that I do in development.  Even http services like the main web site run on their development port since I can let the load balancer handle translation back to 80.  Having a deployment environment that mirrors development is a huge conceptual boon. Assuming our same 3200 port example, we would:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://localhost:3200/health
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and you should see:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ok
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the failure is happening solely within the same subsystem then this usually is sufficient to reveal the problem.&lt;/p&gt;

&lt;h1 id=&quot;check-the-application-docker-logs&quot;&gt;04: Check the Application Docker Logs&lt;/h1&gt;

&lt;p&gt;The next step is the application level Docker logs.  My deployer engine, Dockerano, generates a per application shell script which generates logs for the “main” container called dshell so I see something like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./dlogs

web_1        | 2017-08-11T21:51:59.474344180Z /app/config/initializers/constants_global.rb:6: warning: previous definition of REAL_SKYPE was here
web_1        | 2017-08-11T21:51:59.474348492Z /app/config/initializers/constants_system.rb:6: warning: already initialized constant STATUS_OK
web_1        | 2017-08-11T21:51:59.474352887Z /app/config/initializers/constants_global.rb:7: warning: previous definition of STATUS_OK was here
web_1        | 2017-08-11T21:51:59.474356555Z /app/config/initializers/constants_system.rb:7: warning: already initialized constant HYDE_API_KEY
web_1        | 2017-08-11T21:51:59.474360577Z /app/config/initializers/constants_global.rb:8: warning: previous definition of HYDE_API_KEY was here
web_1        | 2017-08-11T21:51:59.783745567Z /app/config/initializers/seira_servers.rb:1: warning: already initialized constant HYDE_API_KEY
web_1        | 2017-08-11T21:51:59.783780705Z /app/config/initializers/constants_system.rb:7: warning: previous definition of HYDE_API_KEY was here
web_1        | 2017-08-11T21:52:00.421398929Z /app/app/controllers/home_controller.rb:124: warning: key :course is duplicated and overwritten on line 129
web_1        | 2017-08-11T21:52:00.421438372Z /app/app/controllers/home_controller.rb:147: warning: key :course is duplicated and overwritten on line 153
web_1        | 2017-08-11T21:52:01.118340090Z * Listening on tcp://0.0.0.0:3210
web_1        | 2017-08-11T21:52:01.118720653Z Use Ctrl-C to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What this is doing under the hood is a simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
docker-compose -f docker-compose.production.yml logs -f -t web
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;check-the-free-disc-space&quot;&gt;05: Check the Free Disc Space&lt;/h1&gt;

&lt;p&gt;As with anything, ever, resource consumption can always be an issue and our normal OS tools include df:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            3.9G     0  3.9G 0% /dev
tmpfs           799M   83M  716M11% /run
/dev/xvda1       16G  7.0G  8.5G46% /
tmpfs           3.9G  7.0M  3.9G 1% /dev/shm
tmpfs           5.0M     0  5.0M 0% /run/lock
tmpfs           3.9G     0  3.9G 0% /sys/fs/cgroup
tmpfs           799M     0  799M 0% /run/user/1000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I spent a lot of time on this project trying desperately to use T2.micro instances because, well, they’re cheap and, at best, it was a false economy.  Severe bloat within the Docker AUFS filesystem found me continually running out of disc space after multiple deploys even though my containers were actually tiny.  This is a &lt;a href=&quot;https://github.com/moby/moby/issues/22207&quot;&gt;known Docker Moby issue&lt;/a&gt; that has been open for over a year and a half now and is still &lt;strong&gt;unassigned&lt;/strong&gt; to anyone.&lt;/p&gt;

&lt;p&gt;In order to avoid this bug, I ended up moving from multiple T2.micro instances to a single m4.large instance and then doubling the underlying storage from 8 gigs to 16.  And, when I did that, a lot of my issues just magically disappeared.  Being cheap truly was a false economy here because I ended up with fewer instances and not only did my reliability go up but my bill went down.&lt;/p&gt;

&lt;h1 id=&quot;check-the-cpu-usage-and-ram-usage&quot;&gt;06: Check the CPU Usage and Ram Usage&lt;/h1&gt;

&lt;p&gt;If you don’t have htop installed on all your instances then you really, really should.  htop kicks the absolute snot out of classic top.  Install it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install htop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then invoke it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;htop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point you can easily see the underlying machine load, etc.&lt;/p&gt;

&lt;h1 id=&quot;look-at-individual-container-status&quot;&gt;07: Look at Individual Container Status&lt;/h1&gt;

&lt;p&gt;If you’re having an issue with a given application then you want to look at all the containers for that application.  The easiest way is to grep by name.  Let’s say that your underlying application is called seirawatchwebapp:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps | grep seirawatchwebapp
23c1b98a2add        fuzzygroup/seirawatchwebapp_web   &quot;bundle exec clock...&quot;   11 hours ago        Restarting (10) 9 seconds ago                              seirawatchwebapp_clockwork_1
6eb89122ee73        fuzzygroup/seirawatchwebapp_web   &quot;bundle exec sidek...&quot;   11 hours ago        Up 11 hours                                                seirawatchwebapp_sidekiq_1
36f49f07273f        fuzzygroup/seirawatchwebapp_web   &quot;/bin/sh -c 'puma ...&quot;   11 hours ago        Up 11 hours                     0.0.0.0:3210-&amp;gt;3210/tcp     seirawatchwebapp_web_1
49d72363de84        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   11 hours ago        Up 11 hours                     0.0.0.0:32820-&amp;gt;6379/tcp    seirawatchwebapp_redis_1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The thing to be concerned about here is 23c1b98a2add and the reason is that it generally shouldn’t be continuously restarting which is what this view shows.&lt;/p&gt;

&lt;h1 id=&quot;application-level-logs---timberio&quot;&gt;08: Application Level logs - Timber.io&lt;/h1&gt;

&lt;p&gt;I’ve recently started using &lt;a href=&quot;https://www.timber.io&quot;&gt;Timber.io&lt;/a&gt; which is a cross application logging environment and I’ve been very, very happy with it.  If you haven’t looked at Timber.io for your Rails development, I’d recommend it.  Even the free tier is actually quite useful.&lt;/p&gt;

&lt;p&gt;Timber.io is a full web app rather than a command line tool so you need to log into the Timber service and then select your application where you want to view the logs.&lt;/p&gt;

&lt;h1 id=&quot;check-your-error-logger&quot;&gt;09: Check Your Error Logger&lt;/h1&gt;

&lt;p&gt;If you aren’t running a dedicated error tracker, whether HoneyBadger, BugSnag or Errbit, you really, really should.&lt;/p&gt;

&lt;h1 id=&quot;the-answer-check-all-your-containers&quot;&gt;10: The Answer: Check All Your Containers&lt;/h1&gt;

&lt;p&gt;What I’m building is a multi-container system, a distributed system in truth, with formal APIs between each of the components and what this means is that a container failure in subsystem X can affect subsystem Y or subsystem Z without it being clear as to why.  The trouble with this type of debugging is getting a high enough level view to understand it as a whole.&lt;/p&gt;

&lt;p&gt;The easiest way to do this on a single machine is to use the &lt;strong&gt;docker stats&lt;/strong&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stats

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
b17d34bf7268        0.01%               207.6MiB / 7.795GiB   2.60%               1.1MB / 1.53MB      20.5kB / 7.68MB     23
5c5460a763b1        0.00%               210.4MiB / 7.795GiB   2.64%               3.62MB / 900kB      1.18MB / 0B         4
ec28ede65792        0.06%               133.4MiB / 7.795GiB   1.67%               12.9MB / 16.9MB     0B / 0B             9
bb5839c2a6a7        0.00%               130.9MiB / 7.795GiB   1.64%               1.13MB / 1.61MB     86kB / 16.6MB       13
5e78dbc9489e        0.09%               6.215MiB / 7.795GiB   0.08%               16.9MB / 12.9MB     69.6kB / 434kB      3
2d5b14feb009        0.03%               119.3MiB / 7.795GiB   1.49%               8.48MB / 15.4MB     0B / 0B             7
13d42ed0ba35        0.01%               120.7MiB / 7.795GiB   1.51%               2.51MB / 3.88MB     401kB / 37.7MB      12
3fbd80153022        0.08%               6.219MiB / 7.795GiB   0.08%               15.4MB / 8.46MB     24.6kB / 434kB      3
c520fc5504f1        --                  -- / --               --                  --                  --                  --
26ee413fab7f        0.01%               116.2MiB / 7.795GiB   1.46%               1.23MB / 1.62MB     77.8kB / 16.7MB     11
1ab35bf6514c        0.07%               6.219MiB / 7.795GiB   0.08%               85.3kB / 0B         127kB / 0B          3
ac1462fccc60        0.00%               106.1MiB / 7.795GiB   1.33%               1.14MB / 1.37MB     172kB / 7.92MB      10
422787e2d5ab        0.12%               16.15MiB / 7.795GiB   0.20%               75.9MB / 52MB       754kB / 425MB       3
b19bb9629925        0.00%               235.6MiB / 7.795GiB   2.95%               93.4MB / 116MB      508kB / 8.19kB      3
79f484ac7c89        0.18%               388MiB / 7.795GiB     4.86%               6.35GB / 25.4GB     5.24MB / 12.3kB     15
e34789eed4cc        0.00%               108.5MiB / 7.795GiB   1.36%               22.2kB / 17.7kB     0B / 0B             4
6f0cd03996a3        0.12%               116.4MiB / 7.795GiB   1.46%               6.33MB / 13MB       45.1kB / 0B         6
4d8486ff6046        0.23%               344.9MiB / 7.795GiB   4.32%               1.17MB / 1.69MB     1.16MB / 16.7MB     28
4d978af45ff2        0.16%               6.219MiB / 7.795GiB   0.08%               13MB / 6.34MB       102kB / 442kB       3
533d96fc2ce1        0.24%               120.7MiB / 7.795GiB   1.51%               9.18MB / 16.7MB     258kB / 0B          6
6b60a945bff7        0.01%               188.3MiB / 7.795GiB   2.36%               14.5MB / 4.69MB     2.03MB / 0B         10
9c2e8ec55a06        0.10%               6.215MiB / 7.795GiB   0.08%               16.7MB / 9.17MB     369kB / 475kB       3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The curious thing here is that one container, c520fc5504f1, is showing – for CPU % and all other metrics.  Let’s zoom in on that one.  Personally I find the view above to be more granular than needed and missing the application specific details that I need so my deployer generates a dstats shell script which does this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./dstats 
CONTAINER                      CPU %               MEM USAGE / LIMIT     CONTAINER ID
seirawatchshop_sidekiq_1       --                  -- / --               c520fc5504f1321d44078ea3df8a2f1ffc9147d0cb117564e913596eda76db32
seirawatchshop_web_1           0.01%               91.61MiB / 7.795GiB   cc24d6bcc576cc1ce0c7d04ba8af6b51a1b7599fbbfdcf0c1cb98bd1553e1224
seirawatchshop_redis_1         0.09%               6.215MiB / 7.795GiB   796829845da6dd5f5f63b7449ce3c95581e386e691626344b5b59010b088311d
seirasearch_web_1              0.47%               207.6MiB / 7.795GiB   b17d34bf72689e75f6332f387f964e1e3f2803c3cf544d3bb7de6d7b501c2a38
seirawatchwebapp_clockwork_1   0.01%               210.4MiB / 7.795GiB   5c5460a763b11f4347a0dc806cc7ff5b1314220a9d93ed55f729d4853c1d094f
seirawatchwebapp_sidekiq_1     0.32%               133.4MiB / 7.795GiB   ec28ede65792d435c7b3042909925a17c79182e820dfa16964be151b07241c07
seirawatchwebapp_web_1         0.00%               131MiB / 7.795GiB     bb5839c2a6a7e87e694baa84d1f7b102c54aebde6991203da14836fa60006742
seirawatchwebapp_redis_1       0.14%               6.215MiB / 7.795GiB   5e78dbc9489ecd3b050715b0aa1fe002cebb4636a858e17f93da56f5736aae2d
seirawatchsite_sidekiq_1       0.10%               119.3MiB / 7.795GiB   2d5b14feb009aa4eaf72cde6969bb271a6c81d6cd196a9648a5c64184ffab242
seirawatchsite_web_1           0.02%               121.1MiB / 7.795GiB   13d42ed0ba35bd56ffa0977fde429759f4713ec8e58ae0715e273d040a7a276c
seirawatchsite_redis_1         0.10%               6.219MiB / 7.795GiB   3fbd801530227940730abe8197b24d3e24d52edf9bdfb4145d30e3ae40399418
seirawebappapi_web_1           0.00%               106.1MiB / 7.795GiB   ac1462fccc60a569d86ce0a0b7939a66af42ae07328a261265d90bcc6928c372
seiracrawler_redis_1           0.15%               16.15MiB / 7.795GiB   422787e2d5ab64647fd67a0c9c25af2a8ecdbb7ce3ab0a6bc7ca16ededb5a93b
seiracrawler_rake_1            0.01%               236.5MiB / 7.795GiB   b19bb96299253434c9ea94f4e1c9640b255e5f359c3af7060acd49a6070ffc01
seiracrawler_sidekiq_1         0.14%               400MiB / 7.795GiB     79f484ac7c8958742dc744da0404652ff100a9e299080014a4d64b5b78ea000c
seiraadmin_clockwork_1         0.01%               108.5MiB / 7.795GiB   e34789eed4cc4a6bf7173ef3f278033799272e116f3f670ceb0754b521065b0d
seiraadmin_sidekiq_1           0.08%               116.4MiB / 7.795GiB   6f0cd03996a3414ee7bc0c3fb76adb542d06e3c1c0f7fa1fe108f156a9d9ac0f
seiraadmin_web_1               0.25%               121.3MiB / 7.795GiB   4d8486ff604656515f0e0e433b99486cf91131ce4a93b82701aa42ef77015155
seiraadmin_redis_1             0.11%               6.219MiB / 7.795GiB   4d978af45ff2db55c08212e404264422a39f4ee4fa4b6656b149a37df65bf147
shouldigem_sidekiq_1           0.06%               120.7MiB / 7.795GiB   533d96fc2ce1fb492faa477dfd171e370a30c107becce00e5a52d56bfe3b2622
shouldigem_web_1               0.10%               187.1MiB / 7.795GiB   6b60a945bff74748f3c447ff7b57f75ef12518758c79e75bd587d59531771f3e
shouldigem_redis_1             0.09%               6.215MiB / 7.795GiB   9c2e8ec55a066d382d0ee0ceadfb3e061196127f6b334e16b73e43551ee4f435
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note 1: Source for dstats is &lt;a href=&quot;https://gist.github.com/fuzzygroup/b4293b4a7d15a9d8ea88a50ddb2ab3f0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note 2: If you’re curious about how to configure the output of docker stats then see &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/stats/#formatting&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I then docker ps and grep either with the name or the process id, I will see the same container:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps | grep seirawatchshop_sidekiq_1
631359e0cec8        fuzzygroup/seirawatchshop_web     &quot;bundle exec sidek...&quot;   10 hours ago        Restarting (1) 46 seconds ago                             seirawatchshop_sidekiq_1

docker ps | grep 631359e0cec8
631359e0cec8        fuzzygroup/seirawatchshop_web     &quot;bundle exec sidek...&quot;   9 hours ago         Restarting (1) 26 seconds ago                             seirawatchshop_sidekiq_1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once we have this then we can get just the logs on this one container:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs 631359e0cec8

Error connecting to Redis on 127.0.0.1:6379 (Errno::ECONNREFUSED)
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:345:in `rescue in establish_connection'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:331:in `establish_connection'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:101:in `block in connect'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:293:in `with_reconnect'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:100:in `connect'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:364:in `ensure_connected'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:221:in `block in process'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:306:in `logging'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:220:in `process'
/usr/local/bundle/gems/redis-3.3.3/lib/redis/client.rb:120:in `call'
/usr/local/bundle/gems/redis-3.3.3/lib/redis.rb:251:in `block in info'
/usr/local/bundle/gems/redis-3.3.3/lib/redis.rb:58:in `block in synchronize'
/usr/local/lib/ruby/2.3.0/monitor.rb:214:in `mon_synchronize'
/usr/local/bundle/gems/redis-3.3.3/lib/redis.rb:58:in `synchronize'
/usr/local/bundle/gems/redis-3.3.3/lib/redis.rb:250:in `info'
/usr/local/bundle/gems/sidekiq-4.2.7/lib/sidekiq.rb:113:in `block in redis_info'
/usr/local/bundle/gems/sidekiq-4.2.7/lib/sidekiq.rb:95:in `block in redis'
/usr/local/bundle/gems/connection_pool-2.2.1/lib/connection_pool.rb:64:in `block (2 levels) in with'
/usr/local/bundle/gems/connection_pool-2.2.1/lib/connection_pool.rb:63:in `handle_interrupt'
/usr/local/bundle/gems/connection_pool-2.2.1/lib/connection_pool.rb:63:in `block in with'
/usr/local/bundle/gems/connection_pool-2.2.1/lib/connection_pool.rb:60:in `handle_interrupt'
/usr/local/bundle/gems/connection_pool-2.2.1/lib/connection_pool.rb:60:in `with'
/usr/local/bundle/gems/sidekiq-4.2.7/lib/sidekiq.rb:92:in `redis'
/usr/local/bundle/gems/sidekiq-4.2.7/lib/sidekiq.rb:106:in `redis_info'
/usr/local/bundle/gems/sidekiq-4.2.7/lib/sidekiq/cli.rb:71:in `run'
/usr/local/bundle/gems/sidekiq-4.2.7/bin/sidekiq:12:in `&amp;lt;top (required)&amp;gt;'
/usr/local/bundle/bin/sidekiq:22:in `load'
/usr/local/bundle/bin/sidekiq:22:in `&amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what’s going on here is clearly at the Sidekiq stack layer and it is some type of connection to the underlying containerized Redis instance.  Once we know that, troubleshooting this should actually be pretty simple; it eventually turned out to be a missing pair of files - config/sidekiq.yml.erb and config/initializers/sidekiq.rb that had been overlooked in my initial configuration.&lt;/p&gt;

&lt;p&gt;Just as a sidebar, a docker ps -a is also sometimes useful:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps -a
CONTAINER ID        IMAGE                             COMMAND                  CREATED             STATUS                          PORTS       NAMES
b17d34bf7268        fuzzygroup/seirasearch_web        &quot;/bin/sh -c 'puma ...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:3230-&amp;gt;3230/tcp    seirasearch_web_1
5c5460a763b1        fuzzygroup/seirawatchwebapp_web   &quot;bundle exec clock...&quot;   9 hours ago         Up 9 hours       seirawatchwebapp_clockwork_1
ec28ede65792        fuzzygroup/seirawatchwebapp_web   &quot;bundle exec sidek...&quot;   9 hours ago         Up 9 hours       seirawatchwebapp_sidekiq_1
bb5839c2a6a7        fuzzygroup/seirawatchwebapp_web   &quot;/bin/sh -c 'puma ...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:3210-&amp;gt;3210/tcp    seirawatchwebapp_web_1
5e78dbc9489e        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:32779-&amp;gt;6379/tcp   seirawatchwebapp_redis_1
2d5b14feb009        fuzzygroup/seirawatchsite_web     &quot;bundle exec sidek...&quot;   9 hours ago         Up 9 hours       seirawatchsite_sidekiq_1
13d42ed0ba35        fuzzygroup/seirawatchsite_web     &quot;/bin/sh -c 'puma ...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:3200-&amp;gt;3200/tcp    seirawatchsite_web_1
3fbd80153022        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:32777-&amp;gt;6379/tcp   seirawatchsite_redis_1
631359e0cec8        fuzzygroup/seirawatchshop_web     &quot;bundle exec sidek...&quot;   9 hours ago         Restarting (1) 58 seconds ago       seirawatchshop_sidekiq_1
26ee413fab7f        fuzzygroup/seirawatchshop_web     &quot;/bin/sh -c 'puma ...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:3205-&amp;gt;3205/tcp    seirawatchshop_web_1
1ab35bf6514c        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:32775-&amp;gt;6379/tcp   seirawatchshop_redis_1
ac1462fccc60        fuzzygroup/seirawebappapi_web     &quot;/bin/sh -c 'puma ...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:3220-&amp;gt;3220/tcp    seirawebappapi_web_1
422787e2d5ab        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:32774-&amp;gt;6379/tcp   seiracrawler_redis_1
b19bb9629925        fuzzygroup/seiracrawler_rake      &quot;bundle exec clock...&quot;   9 hours ago         Up 9 hours       seiracrawler_rake_1
79f484ac7c89        fuzzygroup/seiracrawler_rake      &quot;bundle exec sidek...&quot;   9 hours ago         Up 9 hours       seiracrawler_sidekiq_1
e34789eed4cc        fuzzygroup/seiraadmin_web         &quot;bundle exec clock...&quot;   9 hours ago         Up 9 hours       seiraadmin_clockwork_1
6f0cd03996a3        fuzzygroup/seiraadmin_web         &quot;bundle exec sidek...&quot;   9 hours ago         Up 9 hours       seiraadmin_sidekiq_1
4d8486ff6046        fuzzygroup/seiraadmin_web         &quot;/bin/sh -c 'puma ...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:3203-&amp;gt;3203/tcp    seiraadmin_web_1
4d978af45ff2        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   9 hours ago         Up 9 hours                      0.0.0.0:32773-&amp;gt;6379/tcp   seiraadmin_redis_1
533d96fc2ce1        fuzzygroup/shouldigem_web         &quot;bundle exec sidek...&quot;   10 hours ago        Up 10 hours       shouldigem_sidekiq_1
6b60a945bff7        fuzzygroup/shouldigem_web         &quot;/bin/sh -c 'puma ...&quot;   10 hours ago        Up 10 hours                     0.0.0.0:3500-&amp;gt;3500/tcp    shouldigem_web_1
9c2e8ec55a06        redis:3.2-alpine                  &quot;docker-entrypoint...&quot;   10 hours ago        Up 10 hours                     0.0.0.0:32770-&amp;gt;6379/tcp   shouldigem_redis_1
6c2b013947d1        google/cadvisor:latest            &quot;/usr/bin/cadvisor...&quot;   11 hours ago        Exited (137) 11 hours ago       cadvisor2
34e1edbad906        google/cadvisor:latest            &quot;/usr/bin/cadvisor...&quot;   11 hours ago        Created       cadvisor1
8478172d0f2b        google/cadvisor:latest            &quot;/usr/bin/cadvisor...&quot;   11 hours ago        Exited (137) 11 hours ago       cadvisor
5b5c1709c1af        errbit/errbit:latest              &quot;bundle exec puma ...&quot;   3 days ago          Exited (0) 10 hours ago       errbit_errbit_1
ac91a943e789        mongo:3.2                         &quot;docker-entrypoint...&quot;   3 days ago          Exited (0) 10 hours ago       errbit_mongo_1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;go-nuclear---restart-the-docker-daemon&quot;&gt;11: Go Nuclear - Restart the Docker Daemon&lt;/h1&gt;

&lt;p&gt;The absolute nuclear approach here is to simply restart the &lt;a href=&quot;https://docs.docker.com/engine/admin/&quot;&gt;docker daemon&lt;/a&gt; itself.  On Ubuntu, this is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m not going to go so far as to say that you don’t have to, rarely, restart the docker daemon but it is just that – &lt;strong&gt;rare&lt;/strong&gt;.  Your problems are far, far, far more likely to be application side errors, even when it looks like Docker is at fault.  I’ve mistakenly pointed the finger at Docker too many times – and I was &lt;strong&gt;wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;pitch-for-a-friend-learn-from-nick&quot;&gt;Pitch for a Friend: Learn from Nick&lt;/h1&gt;

&lt;p&gt;All my Docker knowledge came from Nick Janetakis’ &lt;a href=&quot;https://diveintodocker.com/&quot;&gt;Dive into Docker&lt;/a&gt; course and he does a great job teaching about Docker. He also kibitzed with me on this debugging process although he never saw the final draft before it went live.  Any errors are mine not his.  Strongly recommended.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/docker/2017/08/15/10-steps-to-debugging-containerized-rails-applications.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/docker/2017/08/15/10-steps-to-debugging-containerized-rails-applications.html</guid>
        
        <category>docker</category>
        
        <category>debugging</category>
        
        <category>rails</category>
        
        <category>monolith</category>
        
        <category>aws</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Fundamental Usability Problems with Medium</title>
        <description>&lt;p&gt;Yesterday I was at the movies with my son and during the endless roll of trailers, promos and advertisements, I was terribly, terribly bored so I dropped into the Medium app and saw something that I &lt;strong&gt;knew&lt;/strong&gt; I wanted to read in more depth so I hearted it (by hearted I mean I clicked on the heart icon on the toolbar and watched it change color).  I figured that would be enough to find it later.  I also remembered a little bit about it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;author: james altschuler&lt;/li&gt;
  &lt;li&gt;keywords: hedge fund marriage thestreet.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to cut to the chase, here’s the &lt;a href=&quot;https://medium.com/the-mission/step-by-step-guide-to-make-10-million-and-then-totally-blow-it-a9283b6de90c&quot;&gt;exact article&lt;/a&gt; but the process by which I found something that I had:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;already read&lt;/li&gt;
  &lt;li&gt;that I had hearted as a favorite&lt;/li&gt;
  &lt;li&gt;that I knew had certain keywords&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;was an absolute usability failure and one that I just don’t understand.&lt;/p&gt;

&lt;h1 id=&quot;usability-failure-1---where-are-my-hearted-things&quot;&gt;Usability Failure #1 - Where Are My Hearted Things?&lt;/h1&gt;

&lt;p&gt;The next day I went to Medium in my laptop’s browser and signed in and I &lt;strong&gt;could not&lt;/strong&gt; find the things I liked.  So I looked again, nope.  My next thought was ok maybe these are just stored in the Medium app on my phone – nope I couldn’t find anything there either.  This led me back to my laptop’s browser where I finally googled it and found a &lt;a href=&quot;https://www.quora.com/How-do-I-find-a-list-of-all-the-articles-I-recommended-on-Medium&quot;&gt;Quora post&lt;/a&gt; that talked about it but their solution was no longer part of the Medium user interface.  They also pointed out that you could goto http://medium.com/@user/has-recommended and find your posts.  I typed in the correct url for me: &lt;a href=&quot;http://medium.com/@fuzzygroup/has-recommended&quot;&gt;http://medium.com/@fuzzygroup/has-recommended&lt;/a&gt; and that actually did work but the question remains:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Medium has serious founders, serious money, serious talent – how can this be a problem?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I never did find a way to get back to my hearted items on my phone.&lt;/p&gt;

&lt;h1 id=&quot;usability-failure-2---search&quot;&gt;Usability Failure #2 - Search&lt;/h1&gt;

&lt;p&gt;When I couldn’t find the article I &lt;strong&gt;knew&lt;/strong&gt; was there, I turned to search as the next obvious way to find it.  Here was my process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;So I started with a search for &lt;a href=&quot;https://medium.com/search?q=james%20altschuler&quot;&gt;james altschuler&lt;/a&gt; and that gave zero hits.&lt;/li&gt;
  &lt;li&gt;Then I continued with a search for &lt;a href=&quot;https://medium.com/search?q=thestreet.com&quot;&gt;thestreet.com&lt;/a&gt; and that gave me hits but not the article I knew I had read.  Now I have no problem with a spelling error on altschuler but “thestreet.com” – &lt;strong&gt;nope&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;I then proceeded to search for &lt;a href=&quot;https://medium.com/search?q=hedge%20fund&quot;&gt;hedge fund&lt;/a&gt; and again the article that I wanted wasn’t there.&lt;/li&gt;
  &lt;li&gt;Ok I’ll accept that there are lots and lots of articles about hedge funds but how many &lt;a href=&quot;https://medium.com/search?q=hedge%20fund%20marriage&quot;&gt;hedge fund articles talk about the collapse of his marriage&lt;/a&gt; - that must work, right?  Nope.  That three word query brings back just a &lt;a href=&quot;https://medium.com/thinkprogress/hedge-fund-manager-runs-anti-gay-attack-ad-against-liz-cheney-2e851c82b758&quot;&gt;single article&lt;/a&gt;.  Interestingly Google finds &lt;a href=&quot;https://www.google.com/search?biw=1313&amp;amp;bih=646&amp;amp;q=site%3Amedium.com+%22hedge+fund%22+%22marriage%22&amp;amp;oq=site%3Amedium.com+%22hedge+fund%22+%22marriage%22&amp;amp;gs_l=psy-ab.3...34964.39387.0.39831.4.4.0.0.0.0.62.207.4.4.0....0...1.1.64.psy-ab..0.0.0.FNpHjvAPKsM&quot;&gt;360 things&lt;/a&gt; on medium that contain hedge fund and marriage and the post I was looking for was on the second page.  I ran the google search with “hedge fund” and “marriage” to force all the terms to be in there as well as to treat “hedge fund” as a string.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-did-i-finally-find-it&quot;&gt;How Did I Finally Find It?&lt;/h1&gt;

&lt;p&gt;I finally ended up giving up on Medium’s user interface and its search engine and using my incorrect version of the author’s name and &lt;a href=&quot;https://www.google.com/search?q=site%3Amedium.com%20james%20altschuler&quot;&gt;Google found the right author as the very first result&lt;/a&gt;.  I then scrolled down and found &lt;a href=&quot;https://medium.com/the-mission/step-by-step-guide-to-make-10-million-and-then-totally-blow-it-a9283b6de90c&quot;&gt;the article&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;By any Silicon Valley standards, Medium is a real thing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Medium_(website)&quot;&gt;5 years old&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Incredible Founder - Blogger and Twitter were Ev’s prior companies&lt;/li&gt;
  &lt;li&gt;Huge $$$ - More than &lt;a href=&quot;https://techcrunch.com/2016/04/21/medium-series-c/&quot;&gt;$107 Million&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Has north of &lt;a href=&quot;https://www.quora.com/How-many-employees-does-Medium-have-What-do-they-do&quot;&gt;167 employees&lt;/a&gt; as of November 2015&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is very, very hard for me to understand this level of usability failure at a company with these type of metrics.  I can, perhaps, excuse the user interface to hearted items as being a redesign where something got lost in the shuffle.  But the search failure is deeply, deeply troubling.  If you’re in the content business then search is a &lt;strong&gt;requirement&lt;/strong&gt; not an option and a search algorithm that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;deals with misspellings&lt;/li&gt;
  &lt;li&gt;takes into account user input such as hearts / likes&lt;/li&gt;
  &lt;li&gt;actually finds the damn keywords the user puts in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;should not be a problem in 2017.  I’m spent my career in search in retrieval and we were solving these types of issue back in the early 90s if not sooner.  I just can’t fathom exactly what Medium is doing but they would likely be better served at this point by just embedding google instead of whatever search tool they’ve&lt;/p&gt;

&lt;h1 id=&quot;obligatory-advertisement-for-myself&quot;&gt;Obligatory Advertisement for Myself&lt;/h1&gt;

&lt;p&gt;If you have search and retrieval needs, I’ve spent a long time working on these kinds of issues and I’m always happy to talk to potential clients.  My contact details are on &lt;a href=&quot;http://fuzzyblog.io/blog/resume.html&quot;&gt;my resume&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/medium/2017/08/14/the-problem-with-medium.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/medium/2017/08/14/the-problem-with-medium.html</guid>
        
        <category>medium</category>
        
        <category>blogging</category>
        
        
        <category>medium</category>
        
      </item>
    
      <item>
        <title>When Font Awesome Won't Render in Production on Rails 5.x</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt; is one of those staggeringly good open source projects that you don’t realize just how good it is until you use it – and then it goes away.  The degree of &lt;em&gt;polish&lt;/em&gt; and &lt;em&gt;finish&lt;/em&gt; that an easy to use, inline icon adds to a project honestly just astounds me.  That’s why, when I moved some code to production recently, and Font Awesome failed to render, well, I was &lt;strong&gt;beyond frustrated&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My current production platform is Rails 5.x and this is how I got past that particular hellish little bit of the Rails asset pipeline.  The context is that I’ve been developing with Font Awesome for over 8 months now and I even spent the $$$ to back their &lt;a href=&quot;https://www.kickstarter.com/projects/232193852/font-awesome-5/comments&quot;&gt;KickStarter&lt;/a&gt; since Font Awesome is just that, well, &lt;strong&gt;awesome&lt;/strong&gt; and I’ve been viewing their icons daily for 8 months – until I deployed at which point they vanished.&lt;/p&gt;

&lt;p&gt;On digging into this problem, I found a lot of discussion and suggestions in the &lt;a href=&quot;https://stackoverflow.com/questions/17904949/rails-app-not-serving-assets-in-production-environment&quot;&gt;normal &lt;/a&gt; &lt;a href=&quot;https://github.com/FortAwesome/Font-Awesome/issues/5559&quot;&gt;places&lt;/a&gt; but I never found this solution.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Diagnose the problem by looking at the Chrome JavaScript console and seeing if you get a 404 error related to missing font files such as &lt;em&gt;fontawesome-webfont.woff2&lt;/em&gt;.  That’s the issue that this solution tackles.&lt;/li&gt;
  &lt;li&gt;Use the font-awesome-rails gem in Gemfile: &lt;strong&gt;gem “font-awesome-rails”&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;In your application.css.scss file you should have an import directive at or near the top like @import “font-awesome”;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In config/environments/production.rb, you need a series of asset compilation directives like these:&lt;/p&gt;

    &lt;p&gt;# Do not fallback to assets pipeline if a precompiled asset is missed.
 config.assets.compile = false
 # font_awesome additions
 config.serve_static_assets = true
 config.assets.compress = true
 config.assets.compile = true
 config.assets.digest = true&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;before-and-after&quot;&gt;Before and After&lt;/h1&gt;

&lt;p&gt;Here’s the obligatory before and after screenshots:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/font_awesome_broken.png&quot; alt=&quot;font_awesome_broken.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/font_awesome_working.png&quot; alt=&quot;font_awesome_broken.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The working screenshot has slightly different data in it since this was written over a series of days while this issue was researched.&lt;/p&gt;

&lt;h1 id=&quot;honest-disclaimer&quot;&gt;Honest Disclaimer&lt;/h1&gt;

&lt;p&gt;I’ve now been using Rails since 2007 and Ruby since 2006 (and HTML since 93) which means that I so thoroughly precede the asset pipeline that it honestly makes me laugh.  In all honesty, I really don’t understand the asset pipeline particularly well so if this advice is technically wrong, I &lt;strong&gt;apologize&lt;/strong&gt;.  What I can tell you is that this advice took a Rails 5 system where Font Awesome worked in development but failed in production and made it work in production – but when you don’t understand the low level details, well, it makes you &lt;em&gt;uncomfortable&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/08/12/when-font-awesome-won-t-render-in-production-on-rails-5-x.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/08/12/when-font-awesome-won-t-render-in-production-on-rails-5-x.html</guid>
        
        <category>rails</category>
        
        <category>font_awesome</category>
        
        <category>asset_pipeline</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Using Errbit To Host Your own Error Tracker on AWS for Rails Apps</title>
        <description>&lt;p&gt;In this tutorial, I walk you through using &lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;the Errbit project&lt;/a&gt;, an open source error tracker to host your own error tracker.  Errbit is a competitor to &lt;a href=&quot;http://www.honeybadger.io&quot;&gt;HoneyBadger&lt;/a&gt;, &lt;a href=&quot;http://www.bugsnagcom/&quot;&gt;BugSnag&lt;/a&gt;, &lt;a href=&quot;http://www.airbrake.io&quot;&gt;AirBrake&lt;/a&gt; and other similar hosted error tracking tools that generally cost $29 to $49 / month or more.  Using Errbit means you only pay for infrastructure capacity and end up with a solution you can maintain yourself.&lt;/p&gt;

&lt;p&gt;I’ve written about HoneyBadger &lt;a href=&quot;http://fuzzyblog.io/blog/containers/2016/08/26/in-the-world-of-containers-honeybadger-will-reign-supreme-bye-bye-airbrake.html&quot;&gt;previously&lt;/a&gt; and it really is an excellent, excellent tool but I’m cheap and I wanted to experiment with an open source project that I’ve known about for years and never had the opportunity.  Although Errbit really is excellent, I found the getting started documentation lacking hence this post.&lt;/p&gt;

&lt;p&gt;I initially tried to get this running on Heroku but that resulted in what I termed &lt;a href=&quot;http://fuzzyblog.io/blog/fail/2017/08/08/utter-and-complete-heroku-fail.html&quot;&gt;Heroku Fail&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-1-getting-it-running-locally-using-docker&quot;&gt;Step 1: Getting it Running Locally Using Docker&lt;/h1&gt;

&lt;p&gt;Errbit is a modern Rails app and it requires:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails&lt;/li&gt;
  &lt;li&gt;Mongo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The easiest way to get this running locally is to just pull down the docker-compose.yml file from the github repo and use docker-compose to run it.  If you don’t have Docker installed then you need to &lt;a href=&quot;http://www.docker.com/&quot;&gt;install it now&lt;/a&gt; for development and on your server for production use.  After that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir errbit
cd errbit
wget https://github.com/errbit/errbit/blob/master/docker-compose.yml
docker-compose up 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once that is running, in a separate terminal window you need to bootstrap the installation and generate an admin user.  Do that with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker-compose exec errbit bundle exec rake errbit:bootstrap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The default errbit port is 8080 and you can access it by going to http://localhost:8080 where you can use the credentials you generated by bootstrapping it to log in.&lt;/p&gt;

&lt;p&gt;Once you’ve logged in, you need to add your app by clicking on the Add a new App button and then setting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app name&lt;/li&gt;
  &lt;li&gt;github repo&lt;/li&gt;
  &lt;li&gt;issue tracker&lt;/li&gt;
  &lt;li&gt;notification service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this is done, Errbit will generate you instructions for what to add to your Gemfile and what to configure in the errbit.rb initializer.  Generally this looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Require the airbrake gem in your App.
# ---------------------------------------------
#
# Ruby - In your Gemfile
# gem 'airbrake', '~&amp;gt; 5.0'
#
# Then add the following to config/initializers/errbit.rb
# -------------------------------------------------------

Airbrake.configure do |config|
  config.host = 'http://localhost:8080'
  config.project_id = 1 # required, but any positive integer works
  config.project_key = '2020e526a09c78462f0f9d45010efc6c'

  # Uncomment for Rails apps
  # config.environment = Rails.env
  # config.ignore_environments = %w(development test)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to test Errbit’s integration then you can use this rake task:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake airbrake:test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you’ve confirmed that this works, you can proceed to Step 2 and move it a server.&lt;/p&gt;

&lt;h1 id=&quot;step-2-moving-it-to-a-server&quot;&gt;Step 2: Moving it to a Server&lt;/h1&gt;

&lt;p&gt;Installing Errbit on a docker enabled server really is exactly the same as you did above.  Here’s the quick recap:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log into your server.&lt;/li&gt;
  &lt;li&gt;Make an errbit directory where you want it.&lt;/li&gt;
  &lt;li&gt;wget https://raw.githubusercontent.com/errbit/errbit/master/docker-compose.yml&lt;/li&gt;
  &lt;li&gt;Run &lt;strong&gt;docker-compose up&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;In another terminal window, run &lt;strong&gt;docker-compose exec errbit bundle exec rake errbit:bootstrap&lt;/strong&gt; and make note of the credentials.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point you have an http service running errbit on port 8080 which your AWS security group likely isn’t configured for and that brings us to step 3.&lt;/p&gt;

&lt;h1 id=&quot;step-3-aws-configuration&quot;&gt;Step 3: AWS Configuration&lt;/h1&gt;

&lt;p&gt;Our goal in this step is to configure a domain name like errbit.foo.com where foo.com is your base domain name.  I’m assuming that you are using the standard AWS tools including Route 53 for DNS and an ALB for load balancing.  Here are the things we need to do to make this work on AWS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a dns name for it.&lt;/li&gt;
  &lt;li&gt;Open a security group port for it.&lt;/li&gt;
  &lt;li&gt;Add it to our load balancer.&lt;/li&gt;
  &lt;li&gt;Add it to our monitoring tool&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;creating-a-dns-name-for-it&quot;&gt;Creating a DNS Name for It&lt;/h2&gt;

&lt;p&gt;Here are the steps to follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go into AWS console for Route 53.&lt;/li&gt;
  &lt;li&gt;Select your main domain name, the “foo.com” from above.&lt;/li&gt;
  &lt;li&gt;Select Create Record Set.&lt;/li&gt;
  &lt;li&gt;In the name field enter errbit and then choose that it is type A and that it is an alias.&lt;/li&gt;
  &lt;li&gt;In the alias target select your load balancer.&lt;/li&gt;
  &lt;li&gt;Click the Create button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This has created the domain name errbit.foo.com and assigned it to your load balanced AWS stack.&lt;/p&gt;

&lt;h2 id=&quot;opening-a-security-group-port&quot;&gt;Opening a Security Group Port&lt;/h2&gt;

&lt;p&gt;Your AWS security group is really nothing more than a firewall and to let traffic through you need to expose a hole for the port 8080.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go into the AWS console for EC2 instances.&lt;/li&gt;
  &lt;li&gt;Select Security Groups from the left hand pane.&lt;/li&gt;
  &lt;li&gt;Click the Inbound tab and then click the Edit button.&lt;/li&gt;
  &lt;li&gt;Scroll all the way down to the bottom and click Add Rule.&lt;/li&gt;
  &lt;li&gt;Enter 8080 into the Port Range field as a custom TCP rule accessible to everywhere and then click the Save button.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;adding-errbit-to-your-aws-alb-load-balancer&quot;&gt;Adding Errbit to Your AWS ALB Load Balancer&lt;/h2&gt;

&lt;p&gt;At this point we just need to add Errbit to our AWS load balancer.  Please note that if you aren’t using a load balancer then at this point you would actually be done but since I have one, I should go through all the way to the end.&lt;/p&gt;

&lt;p&gt;The first step is to define a Target Group for your load balancer.  This allows you to map a service on a given port to an AWS instance.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go into the AWS console for EC2 instances.&lt;/li&gt;
  &lt;li&gt;Select Target Groups from the left hand pane.&lt;/li&gt;
  &lt;li&gt;Click the Create Target Group button.&lt;/li&gt;
  &lt;li&gt;Enter errbit as the Target group name and specify /robots.txt as the health check path and then click Create.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have a Target Group then you need to add an actual Target for the group to serve traffic to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the errbit Target Group in the list of target groups on the top.&lt;/li&gt;
  &lt;li&gt;Select the Targets tab on the bottom.&lt;/li&gt;
  &lt;li&gt;Click the Edit button.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: This next step is confusing so please pay attention.  You are now adding from a list on the bottom of the screen to a list on the top and then saving your work with a button on the bottom.  Honestly this is kind of a &lt;em&gt;shite show&lt;/em&gt; as far as UI design goes but it does work; it is just tricky and unintuitive.&lt;/li&gt;
  &lt;li&gt;Select your instance where errbit is installed from the list of instances on the bottom and then check its box on the far left.  Enter 8080 in the port field and then click the Add to registered button.&lt;/li&gt;
  &lt;li&gt;Now click the Save button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You now have both a target group and a target which means you can now create a load balancer rule to process the traffic.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go into the AWS console for EC2 instances.&lt;/li&gt;
  &lt;li&gt;Select Load Balancers from the left hand pane&lt;/li&gt;
  &lt;li&gt;Select your load balancer from the list of load balancers at the top.&lt;/li&gt;
  &lt;li&gt;Select Listeners from the bottom grouping of tabs.&lt;/li&gt;
  &lt;li&gt;Out of the box, Errbit only supports http not https so on the http listener select View/edit rules.&lt;/li&gt;
  &lt;li&gt;Select the + icon to add a rule.&lt;/li&gt;
  &lt;li&gt;At the top of the load balancer select the Insert Rule link.&lt;/li&gt;
  &lt;li&gt;Add errbit.foo.com (make sure you specify your correct base domain) to the Host field in the &lt;strong&gt;IF&lt;/strong&gt; section of the rule.&lt;/li&gt;
  &lt;li&gt;Select your target group from the Forward to section of the &lt;strong&gt;THEN&lt;/strong&gt; section of the rule.&lt;/li&gt;
  &lt;li&gt;Click the Save button.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;At this point you should goto your url, something like http://errbit.foo.com/ and you should get a login screen where you can use the credentials you generated earlier.&lt;/p&gt;

&lt;p&gt;Your first tasks now need to be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add yourself as a user so your email address is supported for notifications (note I still need to configure email sending and that will happen but likely in a later blog post).&lt;/li&gt;
  &lt;li&gt;Add any other team members.&lt;/li&gt;
  &lt;li&gt;You need to add all of your applications to Errbit and then configure your applications accordingly.&lt;/li&gt;
  &lt;li&gt;Use the Rake task above to test each of your applications and verify that they are connected to errbit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;if-you-need-to-learn-docker&quot;&gt;If You Need to Learn Docker&lt;/h1&gt;

&lt;p&gt;All my Docker knowledge came from &lt;a href=&quot;https://diveintodocker.com/&quot;&gt;Nick Janetakis’ Dive into Docker course&lt;/a&gt; and he does a great job teaching about Docker.  Strongly recommended.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/08/11/using-errbit-to-host-your-own-error-tracker-on-aws-for-rails-apps.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/08/11/using-errbit-to-host-your-own-error-tracker-on-aws-for-rails-apps.html</guid>
        
        <category>rails</category>
        
        <category>aws</category>
        
        <category>errbit</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Referencing Images in Rails 5 CSS Stylesheets</title>
        <description>&lt;p&gt;I recently had the issue where I switched the images in my stylesheet from an absolute url on someone else’s domain to a relative path indicating a file in my /app/assets/images directory and that worked fine – until I deployed and then my image disappeared.  It took a few iterations to figure it out and here’s the trick:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you are using the sass-rails gem which provides the necessary helpers.&lt;/li&gt;
  &lt;li&gt;For an image located in /app/assets/images/intro-bg.jpg, assuming that it is a CSS background image, you want to reference it as background: url(asset_path(“intro-bg.jpg”)).&lt;/li&gt;
  &lt;li&gt;You need to rename your stylesheet with a .scss extension so it is fed through the preprocessor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;https://stackoverflow.com/questions/15257555/how-to-reference-images-in-css-within-rails-4&quot;&gt;Stack Overflow&lt;/a&gt; on this but please note that the highest answer was actually wrong (at least for me).&lt;/p&gt;

&lt;p&gt;You should also note that, in my opinion, the asset pipeline is tricky and I no longer trust anything in it until I’ve deployed to production and tested it myself.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/08/09/referencing-images-in-rails-5-stylesheets.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/08/09/referencing-images-in-rails-5-stylesheets.html</guid>
        
        <category>rails</category>
        
        <category>CSS</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Expanding an AWS Instance Volume</title>
        <description>&lt;p&gt;One of the true promises of cloud computing is freeing you from resource limits.  In an ideal world you’d be able to easily example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ram&lt;/li&gt;
  &lt;li&gt;storage&lt;/li&gt;
  &lt;li&gt;networking&lt;/li&gt;
  &lt;li&gt;cpu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And while this is somewhat true, the reality is always a bit trickier.  I’ve had a new project underway for a while and I’ve been plagued by constant disc space issues.  And while this is a multi container project, my core /var/lib/docker/containers directory is only 1.1 gigs according to a du -sh /var/lib/docker/containers and /var/lib/docker/volumes is only 288K but my /var/lib/docker/aufs directory is 14 + gigs.  Despite diving deeply into the &lt;a href=&quot;https://github.com/spotify/docker-gc&quot;&gt;spotify-gc project&lt;/a&gt; and the &lt;a href=&quot;https://github.com/moby/issues/22207&quot;&gt;open issue on Moby&lt;/a&gt;, none of these actually solved the issue.&lt;/p&gt;

&lt;p&gt;So it was time to just suck it up and add more disc space – even though I am an admitted cheap bastard and this bothers the hell out of me.  I’ve done this in the past and while it wasn’t &lt;a href=&quot;http://fuzzyblog.io/blog/aws/2016/11/26/fear-and-loathing-in-awsville-or-adventures-in-partition-resizing.html&quot;&gt;as bad as the last time&lt;/a&gt;, it still wasn’t obvious.&lt;/p&gt;

&lt;h1 id=&quot;how-to-expand-your-aws-volume-on-a-running-instance&quot;&gt;How to Expand Your AWS Volume on a Running Instance&lt;/h1&gt;

&lt;p&gt;I’ve broken this into two stages.  Here is stage 1 - using the web UI.  &lt;strong&gt;Keep in mind that you are going to need to do a reboot at the end and that means some level of downtime so plan this out accordingly.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start at your dashboard on &lt;a href=&quot;http://console.aws.amazon.com&quot;&gt;console.aws.amazon.com&lt;/a&gt; or however you log in and go into the EC2 section.&lt;/li&gt;
  &lt;li&gt;Select volumes on the left hand sidebar.&lt;/li&gt;
  &lt;li&gt;Select the instance.&lt;/li&gt;
  &lt;li&gt;From the actions drop down select Modify Volume.&lt;/li&gt;
  &lt;li&gt;Change the disc space to whatever you want and click ok.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This starts the process of AWS reallocating your disc.  If you’re on Linux you now need to proceed to stage two:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log into your box.&lt;/li&gt;
  &lt;li&gt;Run a df -h and see if the new space shows up.  It almost certainly won’t but you can always try.&lt;/li&gt;
  &lt;li&gt;Run a lsblk to list your blog devices and you need to note the one that your system is using.  The default is /dev/xvda1&lt;/li&gt;
  &lt;li&gt;Run a sudo resize2fs /dev/xvda1&lt;/li&gt;
  &lt;li&gt;Reboot the box with /sbin/reboot&lt;/li&gt;
  &lt;li&gt;Wait the appropriate amount of time and ssh in again.  Re-run df -h and you should see the new space.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;commentary&quot;&gt;Commentary&lt;/h1&gt;

&lt;p&gt;As a computer scientist I entirely understand why you have to reboot.  But as a consumer of cloud services it feels to me like we should be past this at this stage of the using cloud services.  All of my AWS experience is generally using Ubuntu and if Amazon was to tell me that this wasn’t necessary on the AWS Linux, well, that alone would be enough to make me switch distros.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p&gt;Here are two useful links that dig into this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html?icmpid=docs_ec2_console&quot;&gt;EC2 Console Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux&quot;&gt;Linux Recognizing the Resized Space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/08/09/expanding-an-aws-instance-volume.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/08/09/expanding-an-aws-instance-volume.html</guid>
        
        <category>aws</category>
        
        <category>docker</category>
        
        <category>aufs</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Utter and Complete Heroku Fail</title>
        <description>&lt;p&gt;So this morning I wanted to get a self hosted version of the &lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;Errbit&lt;/a&gt; project running.  This is an equivalent to BugSnag, Airbrake, HoneyBadger – a tool for tracking errors in live apps.  The inspiration for this was &lt;a href=&quot;http://developeronfire.com/podcast/episode-258-jeff-atwood-sharing-the-house&quot;&gt;Jeff Atwood’s Developer on Fire interview&lt;/a&gt; where he advised three things:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Jeff's top 3 tips for delivering more value:

1. Measure performance all the time - Know how long every unit of work in your app is taking
2. Have user friendly error handling for both the end user and the developer built into your application
2. Have a place where people can go to discuss your software
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m close to releasing something and #2 has been on my list for sometime so I was pretty damn motivated to finally address this. And I’ve wanted to try Errbit for literally years and years so I turned to their &lt;a href=&quot;https://github.com/errbit/errbit/blob/master/docs/deployment/heroku.md&quot;&gt;deployment&lt;/a&gt; page where they, quote clearly, offered Heroku as an option and recommended it as the easiest way to start.  Awesome – right?  Unfortunately I found nothing but complete and total fail.  Here’s what happened:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I created an account.  This is normal and worked well.&lt;/li&gt;
  &lt;li&gt;I had to verify my password via email.  Again normal and worked well.&lt;/li&gt;
  &lt;li&gt;I returned to the &lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/errbit/errbit/tree/master&quot;&gt;automatic app creation&lt;/a&gt; where it now told me I had to enter a credit card.  I did.&lt;/li&gt;
  &lt;li&gt;Installation failed and wouldn’t tell me why “App creation failed.  Please ensure you have valid values in the above form field” – they were all there.&lt;/li&gt;
  &lt;li&gt;Installation failed and it told me to that I needed to enter a credit card – which I did.  But I can do that dance again.&lt;/li&gt;
  &lt;li&gt;I then get “the account foo@bar.com is not permitted to install the sendgrid add-on at this time.  If you believe this is an error please contact support and reference ID 56fda43c-8abb-4378-a320-079bec73f142” (note I did give heroku my correct email).&lt;/li&gt;
  &lt;li&gt;I attempted to put in my own SMTP server but I’m told the same thing about sendgrid even though I put in a &lt;a href=&quot;http://www.sparkpost.com&quot;&gt;sparkpost&lt;/a&gt; domain.&lt;/li&gt;
  &lt;li&gt;There is no link to support in this context.  Shouldn’t this have been automatically linked in place?&lt;/li&gt;
  &lt;li&gt;I find the support button at the bottom of the page (disclaimer - it wasn’t all that far away) which takes me to help.heroku.com.&lt;/li&gt;
  &lt;li&gt;On help.heroku.com I can find no way to actually create a ticket to enter the ID they gave me.  See Screenshot 1 below.&lt;/li&gt;
  &lt;li&gt;There is a &lt;a href=&quot;https://help.heroku.com/tickets&quot;&gt;Ticket history&lt;/a&gt; button which also doesn’t give me a way to create a ticket.  See Screenshot 2 below.&lt;/li&gt;
  &lt;li&gt;At this point I’ve given up in disgust and I’ll figure out how to do this on Docker and my own AWS instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This is a failure on so many damn levels that it is absurd:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Having to enter my credit card twice.&lt;/li&gt;
  &lt;li&gt;Not allowing an authenticated, validated, paying user to use a baseline feature.&lt;/li&gt;
  &lt;li&gt;Not allowing a way around the failure (use of another smtp resource).&lt;/li&gt;
  &lt;li&gt;Not making support easy.&lt;/li&gt;
  &lt;li&gt;Not even allowing me to create a ticket AS THEY TOLD ME TO.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The utter and complete pity of this is that Heroku allowing me to easily run a github repo would have been beautiful.  Here is the beautiful simplicity of the Errbit deploy to Heroku url:&lt;/p&gt;

&lt;p&gt;https://heroku.com/deploy?template=https://github.com/errbit/errbit/tree/master&lt;/p&gt;

&lt;p&gt;That is fantastic – I do not think it could be any simpler than that.  And, if it had worked, I can easily see myself doing this fairly often.  Now?  I suspect I’ll be deleting my Heroku account shortly and walking away forever.  And that’s a crying shame.&lt;/p&gt;

&lt;h1 id=&quot;screenshot-1&quot;&gt;Screenshot 1&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/herokufail1.png&quot; alt=&quot;herokufail1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where would I even create a ticket?&lt;/p&gt;

&lt;h1 id=&quot;screenshot-2&quot;&gt;Screenshot 2&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/herokufail2.png&quot; alt=&quot;herokufail2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where would I even create a ticket?&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/fail/2017/08/08/utter-and-complete-heroku-fail.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/fail/2017/08/08/utter-and-complete-heroku-fail.html</guid>
        
        <category>heroku</category>
        
        <category>fail</category>
        
        <category>rails</category>
        
        
        <category>fail</category>
        
      </item>
    
      <item>
        <title>Adding AutoSave on Focus Lost to TextMate 2</title>
        <description>&lt;p&gt;I’ve looked this up and set this on every single mac I’ve used since I switched to &lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate 2&lt;/a&gt; so I guess it is time to finally write it down for myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a command prompt.&lt;/li&gt;
  &lt;li&gt;Edit the file ~/Library/Application Support/TextMate/Global.tmProperties&lt;/li&gt;
  &lt;li&gt;Add the line saveOnBlur = true in the top region before the square bracket sections.&lt;/li&gt;
  &lt;li&gt;Save and Exit&lt;/li&gt;
  &lt;li&gt;Relaunch and it should be there.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</guid>
        
        <category>textmate</category>
        
        
        <category>textmate</category>
        
      </item>
    
      <item>
        <title>A Bash Function for the 2 AM Blind Deploy</title>
        <description>&lt;p&gt;I’m doing a lot more bash scripting these days – ever since I opted to write my new deployer, dockerano, in Bash.  Tackling something significant in Bash has absolutely forced me, 20 years plus after I started using it, to finally start to understand it.  By no means do I feel that I have a good handle on Bash – I’m still heavily reliant on &lt;a href=&quot;http://fuzzyblog.io/blog/bash/2017/07/17/improving-your-bash-scripting-with-shellcheck.html&quot;&gt;ShellCheck&lt;/a&gt; but I can actually do things with Bash that I feel somewhat confident about.&lt;/p&gt;

&lt;p&gt;Here’s a bash function that I extended this morning to add OSX specific audio output after a deploy.  The problem at hand is what I call the “2 AM sleep blind deploy”.  We all know what this is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You get a downtime alert on a service&lt;/li&gt;
  &lt;li&gt;You blearily struggle out of bed at 2 am and fix the code&lt;/li&gt;
  &lt;li&gt;You deploy it and you want to get back to bed as soon as possible&lt;/li&gt;
  &lt;li&gt;Something goes wrong with the deploy and you get alerted again just &lt;strong&gt;after&lt;/strong&gt; you get back in bed&lt;/li&gt;
  &lt;li&gt;Lather, rinse, repeat until it is either fixed or morning comes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting close to release on my much obliquely referenced new product and so deploy issues are now first and foremost in my mind. My task for this morning was to add audio output to my deployer &lt;strong&gt;when&lt;/strong&gt; there is a failure.  Here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first task was to recognize that this only ever had to run on OSX as I develop and deploy from OSX.&lt;/li&gt;
  &lt;li&gt;There were two options - afplay and say.  The &lt;strong&gt;afplay&lt;/strong&gt; utility plays any media file from the command line and that’s good but a loud noise alone won’t tell me &lt;em&gt;what&lt;/em&gt; is down just that &lt;em&gt;something&lt;/em&gt; is down.  And while this works well – once upon a time, I used to trigger Billy Idol’s White Wedding whenever something was down – this time I wanted something a bit more nuanced and information rich.  I could also use the osx command &lt;strong&gt;say&lt;/strong&gt; to speak anything including the url which is failing.  Here is a &lt;a href=&quot;https://superuser.com/questions/298201/how-can-i-play-a-sound-from-the-command-line-in-mac-os-x&quot;&gt;Stack Overflow&lt;/a&gt; on the options.&lt;/li&gt;
  &lt;li&gt;An sample of this is “say http://foo.com/ is down” which will be played thru the speaker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My new tech stack is 7 different services each of which provides a simple health check api but since the obviously differ for each service, I needed a way to store this on a per service basis which I opted to do with a .dockerano_post_deploy_check_urls file in the root directory of each project.  This file can store as many urls as are needed and it will be looped over by the bash script.  Given that most of the site needs to work in both http and https and with www and non www variants, I didn’t want a single check url.  If you allow for both https and http and non www and www variants, that amounts to 4 urls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://foo.com/health&lt;/li&gt;
  &lt;li&gt;http://www.foo.com/health&lt;/li&gt;
  &lt;li&gt;https://foo.com/health&lt;/li&gt;
  &lt;li&gt;https://www.foo.com/health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, yes, this may be overkill but it is all too easy for almost anything to break so I would argue that the right thing to do is be aggressive in your testing.&lt;/p&gt;

&lt;p&gt;Here’s the bash function I wrote for this with the addition of say:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function verify_site_is_up_after_post_deploy() {
  sleep 5
  IFS=$'\n' read -d '' -r -a site_urls &amp;lt; .dockerano_post_deploy_check_urls  
  
  for site_url in &quot;${site_urls[@]}&quot;; do
    echo &quot;  Processing url: $site_url&quot;
    if curl --output /dev/null --silent --head --fail &quot;$site_url&quot;; then
      status_message_good &quot;$url exists; deploy worked&quot;
    else
      status_message_bad &quot;$url DOES NOT EXIST; DEPLOY FAILURE!!!!&quot;
      say &quot;$url is DOWN!&quot;
    fi

  done
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I adapted the code above based on this  &lt;a href=&quot;https://unix.stackexchange.com/questions/148985/how-to-get-a-response-from-any-url&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</guid>
        
        <category>devops</category>
        
        <category>deploy</category>
        
        <category>bash</category>
        
        
        <category>bash</category>
        
      </item>
    
  </channel>
</rss>
