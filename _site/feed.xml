<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 29 Dec 2016 21:08:49 -0500</pubDate>
    <lastBuildDate>Thu, 29 Dec 2016 21:08:49 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Invalid route name, already in use 'page'</title>
        <description>&lt;p&gt;It seems that whenever you start a new Rails project you hit some kind of wackiness with respect to an error message that you’ve never seen before.  Yesterday I started a new project and I wanted to use Bootstrap for my layout.  Well I couldn’t make it work and then &lt;a href=&quot;http://dv.dasari.me&quot;&gt;Dv&lt;/a&gt; couldn’t make it work so I finally turned to the &lt;a href=&quot;https://github.com/RailsApps/&quot;&gt;RailsApps&lt;/a&gt; project and used their &lt;a href=&quot;https://github.com/RailsApps/rails-bootstrap/blob/master/config/routes.rb&quot;&gt;bootstrap template app&lt;/a&gt;.  And that worked so Huzzah! both for them and me.  Thanks Guys!&lt;/p&gt;

&lt;p&gt;Note: Dv and I have both used bootstrap on I can’t tell you how many different sites and its always a pain in the neck to initially get going.  We were using the bootstrap gem and we had the scss stuff configured correctly at least by comparing to a reference site.&lt;/p&gt;

&lt;p&gt;Today I integrated &lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt; for authentication based on a &lt;a href=&quot;https://www.sitepoint.com/rails-authentication-with-authlogic/&quot;&gt;SitePoint AuthLogic tutorial&lt;/a&gt;.  When I generated a Pages Controller and dropped a resources :pages into my routes file I got this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Invalid route name, already in use: 'page' 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My routes file right now is like 5 lines so I was actually certain that I didn’t have pages in there already (embarrassingly though I did do a command+F anyway).  A bunch of googling turned up this &lt;a href=&quot;https://github.com/thoughtbot/high_voltage/issues/109&quot;&gt;answer&lt;/a&gt;.  Apparently the &lt;a href=&quot;https://github.com/thoughtbot/high_voltage&quot;&gt;High Voltage gem&lt;/a&gt; from &lt;a href=&quot;https://github.com/thoughtbot&quot;&gt;Thoughtbot&lt;/a&gt; automagically inserts its pages route into the routes file.  And I get the desire for simplicity but when it doesn’t even require a declaration in the Gemfile it makes tracking this kind of stuff down annoying.  Sigh.&lt;/p&gt;

&lt;p&gt;Once that was removed then I was able to get my static pages working again so that’s nice.  And I like what the High Voltage gem is actually doing.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/12/29/invalid-route-name-already-in-use-page.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/12/29/invalid-route-name-already-in-use-page.html</guid>
        
        <category>rails</category>
        
        <category>pages</category>
        
        <category>authlogic</category>
        
        <category>bootstrap</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Getting Past SSH Errors in OSX Sierra</title>
        <description>&lt;p&gt;If you are having problems with OSX Sierra and authenticating with github, the issue is that OSX Sierra doesn’t automatically add ssh keys by default.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/osx/comments/52zn5r/difficulties_with_sshagent_in_macos_sierra/&quot;&gt;Reddit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jirsbek/SSH-keys-in-macOS-Sierra-keychain&quot;&gt;SSH Keys in MacOS Sierra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://askubuntu.com/questions/363404/ssh-add-command-does-not-add-my-identity-to-ssh-agent&quot;&gt;Adding SSH Identities via Terminal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/error-permission-denied-publickey/&quot;&gt;Github SSH Add&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One solution is to add the below lines to your .ssh/config file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host *
  IdentityFile ~/.ssh/id_rsa
  AddKeysToAgent yes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/osx/2016/12/29/getting-past-ssh-errors-in-osx-sierra.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/osx/2016/12/29/getting-past-ssh-errors-in-osx-sierra.html</guid>
        
        <category>osx</category>
        
        <category>ssh</category>
        
        <category>sierra</category>
        
        <category>sshagent</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Fixing Sudo on OSX Sierra</title>
        <description>&lt;p&gt;OSX Sierra makes a number of low level changes in how things operate.  Earlier I wrote about OSX and SSH errors.  If you’re having issues with sudo then you may want to add this to the sudoers file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo visudo (this command gets)

Defaults !tty_tickets
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/39474047/sudo-command-on-macos-sierra-does-not-respect-timestamp-timeout&quot;&gt;Stack Overflow Reference&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/osx/2016/12/29/fixing-sudo-on-osx-sierra.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/osx/2016/12/29/fixing-sudo-on-osx-sierra.html</guid>
        
        <category>osx</category>
        
        <category>sierra</category>
        
        <category>sudo</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Ansible Error Fixing ControlPath Too Long Error</title>
        <description>&lt;p&gt;If you get the ansible error &lt;em&gt;ControlPath Too Long Error&lt;/em&gt; then all you need to do is create an ansible.cfg file in the directory where you run your playbook.  Please note that this is generally an OSX only error related to the length of the .  Then you need to add this line to it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ssh_connection]
control_path = %(directory)s/%%h-%%r
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are other options that can go here as well.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/ansible/2016/12/29/ansible-error-fixing-controlpath-too-long-error.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ansible/2016/12/29/ansible-error-fixing-controlpath-too-long-error.html</guid>
        
        <category>ansible</category>
        
        <category>osx</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>How to Build Rails views with Markdown</title>
        <description>&lt;p&gt;So I’m starting prototyping on an all new thing and I it want to be commercially successful out of the gate.  That’s a bit different for me where I usually focus initially on the code.  This means thinking, from not just &lt;em&gt;day 1&lt;/em&gt; but &lt;strong&gt;hour 1&lt;/strong&gt;, about how the customer sees things and for me that starts with two pages on the site:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;about&lt;/li&gt;
  &lt;li&gt;faq&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would argue that for any web thing, an about page and a faq are at the core of your marketing.  And since both of these are content, I can’t see the point of using straight erb or haml views when MarkDown is so damn easy.  I wouldn’t use markdown for a page where there were forms or UI elements but for content?  Hell yes!&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-markdown-for-rails-views&quot;&gt;How to Use Markdown for Rails Views&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;In your Gemfile you need to call the &lt;a href=&quot;https://github.com/chrisroberts/kramdown-rails&quot;&gt;kramdown-rails gem&lt;/a&gt;: gem ‘kramdown-rails’&lt;/li&gt;
  &lt;li&gt;Do the bundle install happy dance&lt;/li&gt;
  &lt;li&gt;In your app/views/controller_name directory create your views with a .md extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The kramdown-rails gem is a light wrapper around the core &lt;a href=&quot;https://github.com/gettalong/kramdown&quot;&gt;kramdown gem&lt;/a&gt; which does the markdown to html translation and supports using it in an Rails view context.&lt;/p&gt;

&lt;p&gt;Just to be a good internet citizen I added the content of this answer to &lt;a href=&quot;http://stackoverflow.com/questions/36957097/rails-4-how-i-use-the-contents-of-a-markdown-file-in-a-view/41362259#41362259&quot;&gt;StackOverflow on Rails Markdown&lt;/a&gt;.  If you have the time and like this then I’d appreciate an upvote.  Thanks!&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/12/28/how-to-build-rails-views-with-markdown.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/12/28/how-to-build-rails-views-with-markdown.html</guid>
        
        <category>rails</category>
        
        <category>markdown</category>
        
        <category>kramdown</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Product Review Amazon Echo is Excellent</title>
        <description>&lt;p&gt;So my wife got me an Amazon Echo for Christmas and I powered it up today.  Overall I was absolutely delighted with it – Amazon has a hell of a product here.  The ease of use that a conversational user interface brings is staggering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alexa play happy holiday music&lt;/li&gt;
  &lt;li&gt;Alexa may the force be with you&lt;/li&gt;
  &lt;li&gt;Alexa play pink&lt;/li&gt;
  &lt;li&gt;Alexa what is the weather&lt;/li&gt;
  &lt;li&gt;Alexa what is the temperature&lt;/li&gt;
  &lt;li&gt;Alexa what is the news&lt;/li&gt;
  &lt;li&gt;Alexa 5 minute timer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those were a few of the commands that we came up with right away.  My wife gets the serious nerd fu credit for the force one; bless her.&lt;/p&gt;

&lt;h1 id=&quot;amazon-echo-out-of-the-box-experience&quot;&gt;Amazon Echo Out of the Box Experience&lt;/h1&gt;

&lt;p&gt;A few thoughts on the out of the box experience:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The out of the box experience is far, far rougher than I had expected.  You certainly get thru it but I didn’t find it clear.&lt;/li&gt;
  &lt;li&gt;You do need to install the Amazon Echo app on your phone&lt;/li&gt;
  &lt;li&gt;There’s a weird config step where the Echo presents a wifi network that you connect to so it can find the actual network that in your house; at the end of it your phone is left connected to the echo and its unclear if you change that or not (I would think so but who knows)&lt;/li&gt;
  &lt;li&gt;The trend towards “no one reads the manual so let’s not even have one” is a suck ass trend.  There are those of us who do read the manual and we get very annoyed by the fact that there isn’t even comprehensive online documentation.  I can rationalize the lack of a printed manual due to rapid updates but sheesh.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;when-it-doesnt-play-music&quot;&gt;When It Doesn’t Play Music&lt;/h1&gt;

&lt;p&gt;My biggest problem was that it wouldn’t play music initially.  Googling was relatively fruitless but it did reveal that lots of other people have this problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/search?q=amazon+echo+won%27t+play+music&amp;amp;oq=amazon+echo+won%27t+&amp;amp;aqs=chrome.3.0j69i57j0l4.5987j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot;&gt;Google Search - 3.42 million results&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.echotalk.org/index.php?topic=322.0&quot;&gt;NTP Related&lt;/a&gt;; best theory I saw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The answer, at least for me, turned out to be turn it off and then on and then wait.  And that did it. Sigh.  Given how important digital technology is to all of our lives the answer of power on / power off or as I refer to it “get out of the car and get back into the car” is a crappy answer at best.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Well I’ve already tried to order the &lt;a href=&quot;https://www.amazon.com/dp/B01DFKC2SO/ref=ods_gw_b_h1_ha_justask_black?pf_rd_r=QMHK561Z7EWPEZQJ1BFX&amp;amp;pf_rd_p=68d26f18-1cf3-45a4-870c-87bf6bd9cee6&quot;&gt;hockey puck extension&lt;/a&gt; for the echo so I guess that says all you need to know about how much I like it. This is a fantastic product.  Here’s a &lt;a href=&quot;http://www.pocket-lint.com/news/136952-amazon-echo-vs-amazon-tap-vs-echo-dot-what-s-the-difference&quot;&gt;good article that clarifies the difference between the Echo and Echo Dot&lt;/a&gt;; much to my surprise the hockey puck isn’t an extension - its a standalone version of the echo with a smaller speaker so it can be cheaper but it doesn’t require the echo at all.  You can plug it into your own speakers for better output.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/amazon_echo/2016/12/26/product-review-amazon-echo-is-excellent.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/amazon_echo/2016/12/26/product-review-amazon-echo-is-excellent.html</guid>
        
        <category>alexa</category>
        
        <category>echo</category>
        
        <category>music</category>
        
        <category>echo_dot</category>
        
        <category>review</category>
        
        
        <category>amazon_echo</category>
        
      </item>
    
      <item>
        <title>My Worst Git Commit Message Ever</title>
        <description>&lt;p&gt;I was in the car with my wife talking to her as I worked and this was the bmessage:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git commit -m &quot;misc:
→ '''''''''''''''''''vvvvvvvvvvvvvvvvvvvvvvV 
VVVVVVVVVVVVVV                                                               
                          ///////// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                          vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                          vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                          vvvvvvvvvvvvvvvvvvvvvvvvvvv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I feel asleep while talking to her and coding.  I suspect drooling was also involved.  Too many late nights…&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/git/2016/12/23/my-worst-git-commit-message-ever.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/git/2016/12/23/my-worst-git-commit-message-ever.html</guid>
        
        <category>git</category>
        
        <category>humor</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>On Merging Files - Diff Alternatives on the Mac</title>
        <description>&lt;p&gt;There are certain skills as a software developer that take, in my experience, a lifetime to master.  I have now been using version control since the mid 1990s and I still don’t consider myself, by any means, a master.  I’m good, don’t get me wrong, but I don’t feel that I have yet fully internalized all the benefits that version control offers.  So, when I have a chance to really take advantage of version control, I truly relish the opportunity.&lt;/p&gt;

&lt;p&gt;I recently had a refactoring situtation where I was, shall we say, overly ambitious.  And, yes, that’s the positive version of what I’d refer to as “Humpty Dumpty” code syndrome where you have so thoroughly broken a critical bit of code that you just can’t put it back together.  Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I refactored a truly alway bit of two critical routines, one with 8 input variables that returned 6 variables&lt;/li&gt;
  &lt;li&gt;No test coverage&lt;/li&gt;
  &lt;li&gt;It would not, no matter what I did, do what it did before; specifically it would do the first pass of an N pass algorithm but I could never make it go beyond stage 1&lt;/li&gt;
  &lt;li&gt;In the process of doing this I added new and highly desirable functionality everywhere and fixed about 30 critical code mistakes along the way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, well, &lt;strong&gt;crap&lt;/strong&gt;.  The fix was, in the immortal words of Doctor Who, to get all timey-whimey!  Specifically I needed to time travel back to &lt;em&gt;before&lt;/em&gt; I started and then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;confirm that this code actually worked in the first place – maybe this problem existed before I &lt;em&gt;fixed&lt;/em&gt; it&lt;/li&gt;
  &lt;li&gt;figure out how to travel back from the past while bringing with me a working version&lt;/li&gt;
  &lt;li&gt;NOT lose any of the cool new features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the development practices I am absolutely adamant about is only ever having 1 checkout of the code based at a time.  I’m hardcore on this because I’ve seen what happens when you have multiple versions floating about – its very, very convenient but you tend to get confused and then you lose track of what’s the master and things get screwball.  But, in desparate times, you do what you must and so I went over to github and:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I found a commit from roughly before I started; I wasn’t real specific about this, I just remember “this debacle started last Thursday so goto Wednesday”&lt;/li&gt;
  &lt;li&gt;I browsed the code base at that point&lt;/li&gt;
  &lt;li&gt;I created a new directory where I wanted this&lt;/li&gt;
  &lt;li&gt;I checked out the code; that put a fresh copy of master in place&lt;/li&gt;
  &lt;li&gt;I did a git co HASH where HASH represented the commit hash for Wednesday&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This put me what’s called &lt;a href=&quot;http://stackoverflow.com/questions/3965676/why-did-my-git-repo-enter-a-detached-head-state&quot;&gt;&lt;em&gt;detached head&lt;/em&gt;&lt;/a&gt; mode and I was able to modify /run / test, etc.  I then had to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;port over my rake task which was doing my tests&lt;/li&gt;
  &lt;li&gt;port over the individual changes, one by one, &lt;em&gt;carefully&lt;/em&gt; to let the old code run correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I found was that the old code did, in fact, run better than the new code.  Sigh.  And after 2 days of fixing things all over the place I had the system back to running order with the exception that I now had 2 code bases that needed to be merged.  &lt;em&gt;Bigger Sigh&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;time-for-some-diff-magic&quot;&gt;Time for some Diff Magic&lt;/h1&gt;

&lt;p&gt;So I now had two git checkouts with differences between them.  One of them was master, and did I mention that while this was all going on I got pulled off the project to fix something else and add yet more functionality to the code base for a day and half, and the other was my time travel branch.  When I did a git status in the time travel branch I got this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
HEAD detached at 93bf221
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

	modified:   app/models/form.rb
	modified:   app/models/form2016_q4.rb
	modified:   app/models/iframe2016_q4.rb
	modified:   app/models/link.rb
	modified:   app/models/link2016_q4.rb
	modified:   app/models/page.rb
	modified:   app/models/page2016_q4.rb
	modified:   app/models/page_body.rb
	modified:   app/models/page_body2016_q4.rb
	modified:   app/models/site.rb
	modified:   app/models/unique_url.rb
	modified:   app/models/unique_url2016_q4.rb
	modified:   app/models/url_resolver.rb
	modified:   app/models/url_tool.rb
	modified:   config/initializers/constants.rb
	modified:   lib/common_link.rb
	modified:   lib/common_page.rb

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

	docs/snippets/create_mechanize_page_without_fetch.rb
	lib/tasks/crawl2016_q4.rake

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s a whole lot of changes.  The easiest approach was to start with the entirely new files and just copy them over to the original.&lt;/p&gt;

&lt;p&gt;Now this is where I’m going to make a highly personal engineering choice here – I’m going to avoid an automated merge process of any type.  When it comes to complex code changes in an automated fashion I honestly don’t have a lot of faith.  I’ve seen automated merges go wrong time after time so I was looking for a tool to make this easier.  A quick bit of googling turned up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenDiff / FileMerge (part of X-Code)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meldmerge.org/&quot;&gt;meld&lt;/a&gt; - a python tool with an unofficial brew install via &lt;em&gt;brew install homebrew/gui/meld&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;[Beyond Compare]http://www.scootersoftware.com/download.php from &lt;a href=&quot;http://www.scootersoftware.com/&quot;&gt;Scooter Software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sourcegear.com/diffmerge/&quot;&gt;Diff Merge&lt;/a&gt; from &lt;a href=&quot;http://www.sourcegear.com/&quot;&gt;SourceGear&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kaleidoscopeapp.com/&quot;&gt;Kaleidoscope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I ended up using Open Diff for my merge issues:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/open_diff.png&quot; alt=&quot;opendiff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;diff_merge.png
beyond_compare.png
kaleidoscope.png&lt;/p&gt;

&lt;p&gt;Good articles on merge tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.git-tower.com/blog/diff-tools-mac&quot;&gt;GitTower&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.outcoldman.com/en/archive/2014/05/12/git-dirdiff/&quot;&gt;outcoldman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 22 Dec 2016 11:26:49 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/12/22/on-merging-files-diff-alternatives-on-the-mac.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/12/22/on-merging-files-diff-alternatives-on-the-mac.html</guid>
        
        <category>software_engineering</category>
        
        <category>version_control</category>
        
        <category>merge</category>
        
        <category>git</category>
        
        <category>diff</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>PostMac Roundup</title>
        <description>&lt;p&gt;Here are a few more things in the ongoing PostMac roundup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href=&quot;https://techcrunch.com/2016/12/19/apples-tim-cook-assures-employees-that-it-is-committed-to-the-mac-and-that-great-desktops-are-coming/&quot;&gt;Apple’s Tim Cook assures employees that it is committed to the Mac and that ‘great desktops’ are coming&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=13217008&quot;&gt;HN Discussion&lt;/a&gt;  Given that Tim Cook is the one who said publicly that people should use iPads and not laptops I’d have to wonder about this.  &lt;a href=&quot;http://daringfireball.net/linked/2016/10/31/cook-why-would-you-buy-a-pc-anymore&quot;&gt;Gruber on This Comment&lt;/a&gt;.  Lots of good comments on people using Linux in place of OSX here.  &lt;a href=&quot;https://news.ycombinator.com/item?id=13217412&quot;&gt;A brilliant comment&lt;/a&gt;.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href=&quot;https://www.bloomberg.com/news/articles/2016-12-20/how-apple-alienated-mac-loyalists&quot;&gt;How Apple Alienated Mac Loyalists&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=13220623&quot;&gt;HN Discussion&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/postmac/2016/12/21/postmac-roundup.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/postmac/2016/12/21/postmac-roundup.html</guid>
        
        <category>postmac</category>
        
        <category>mac</category>
        
        
        <category>postmac</category>
        
      </item>
    
      <item>
        <title>Using Gems to Slay the Monolith Part 1 - Validations</title>
        <description>&lt;p&gt;We all talk quite a bit about the monolithic Ruby application but the simple truth of it is that your rails application really, really wants to be monolithic.  Let’s explore the concept of an email sending application that wants to offer an API for contact import.  If you think about this you’re basically saying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s externalize the process of importing user data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ideally we’d like to build this with the new Rails 5 api mode that speaks JSON as its lingua franca.  Rails 5 api mode is small, fast and like Rails was before the asset pipeline – easy.  And, personally, I love API mode.  But since API mode does not ANY view handling this means that you are inherently building two rails applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the user facing portion&lt;/li&gt;
  &lt;li&gt;the API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since user data inevitably needs to be displayed and generally created in the user facing application as well as in the api, you’re talking about a user model that exists in two places.  And that means that all the support cruft like validations needs to exist in both places.  That’s not DRY at all – it is verbose beyond belief.&lt;/p&gt;

&lt;h1 id=&quot;cross-project-code-sharing-1---git&quot;&gt;Cross Project Code Sharing 1 - Git&lt;/h1&gt;

&lt;p&gt;In an idealized world you would think that git would race to our rescue and be the hero here but I’ve looked into git for cross project model re-use and my response was “icky poo”.  Another developer I know, Winston, looked into it and wrote up the options but had a similar feel.&lt;/p&gt;

&lt;h1 id=&quot;cross-project-code-sharing-2---a-gem-based-approach&quot;&gt;Cross Project Code Sharing 2 - A Gem Based Approach&lt;/h1&gt;

&lt;p&gt;When you come right down to it we actually have a model for code sharing in the Rails world and it is the Ruby Gem.  I was in Rails prior to gems and still remember, fondly, the days of plugins.&lt;/p&gt;

&lt;p&gt;What if there was a website to support it??? validationhub.com&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 12:11:05 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/12/20/using-gems-to-slay-the-monolith-part-1-validations.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/12/20/using-gems-to-slay-the-monolith-part-1-validations.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>monolith</category>
        
        <category>validations</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
