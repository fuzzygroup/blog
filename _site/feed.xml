<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Sep 2016 05:10:22 -0400</pubDate>
    <lastBuildDate>Thu, 08 Sep 2016 05:10:22 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Startup Learnings - What Dave McClure Taught Me</title>
        <description>&lt;p&gt;Feedster was not the first company I raised money for but it was the first time I raised money from true silicon valley investors.  I vividly remember &lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/09/02/what-scott-rafer-taught-me.html&quot;&gt;Scott Rafer&lt;/a&gt; taking me around all the different angel groups, individual investors and Sand Hill Road.  One of those investors was &lt;a href=&quot;https://twitter.com/davemcclure&quot;&gt;Dave McClure&lt;/a&gt; of &lt;a href=&quot;http://500.co&quot;&gt;500 Startups&lt;/a&gt; fame.&lt;/p&gt;

&lt;p&gt;Dave was one of our angel investors the the one that I felt personally responsible for.  So, after the awful day that I was let go from Feedster, I remember sitting in my apartment in Indianapolis and having to call Dave around 6 pm on a cold fall night and telling him that I was gone and I couldn’t look out for his investment any longer.  He took the news far better than I expected and wasn’t even angry or disappointed with me much to my surprise.  His actual concern was how I was taking everything.  Looking back at this, I can now see it a little differently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We were just one of many investments that he had&lt;/li&gt;
  &lt;li&gt;The amount wasn’t all that large&lt;/li&gt;
  &lt;li&gt;Preserving the relationship with the entrepreneur is more important; they’ll do something else&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here’s what Dave McClure taught me:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Not everything works out.  And that’s ok.&lt;/strong&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Relationships matter.  Keep relationships strong no matter what.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now I don’t think I’ve talked to Dave in years at this point but the truth of it is that I’m still impressed by how well he handled this and I still remember it vividly.  And If anyone ever asked me if they should take Dave on as an investor, I’d answer “Yes; a thousand times yes.”&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/07/what-dave-mcclure-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/07/what-dave-mcclure-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        <category>feedster</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Dear Apple Please Make iTunes Sync Suck Less</title>
        <description>&lt;p&gt;Dear Apple,&lt;/p&gt;

&lt;p&gt;I love you dearly – you know that.  I’ve been running a Mac since the Mac Plus days and while my attentions have strayed from time to time, in my house there are more boxes running some kind of Apple OS than any other.  And while I’d love to see a better phone, longer battery life, etc, there’s just one thing I really want:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Make iPhone Syncing Less of an Absolute Suck Fest!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is 5:30 am as I write this and I’ve been sitting at my wife’s computer for the past hour trying to get her iPhone to sync properly so that if she can buy a new phone there will be no data loss.  This is exactly how I spent the day of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iPhone 4 launch&lt;/li&gt;
  &lt;li&gt;iPhone 5 launch&lt;/li&gt;
  &lt;li&gt;iPhone 6 launch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, while I’m used to this, it doesn’t make it suck any less.  It is also how I spent yesterday morning when all my attempts to sync her phone came to naught.  And while you know these, &lt;em&gt;why, oh dear lord, why&lt;/em&gt; does synching an iPhone in 2016 suck so much more than synching my PalmPilot III in 1998?&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/200px-Palm_III_24.jpg&quot; alt=&quot;Synch Used to Work Well!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s how things use to work back in the day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;put palm pilot in cradle&lt;/li&gt;
  &lt;li&gt;press button&lt;/li&gt;
  &lt;li&gt;done!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And while I remember an occasional conflict, mostly due to editing contact info on desktop and palm pilot concurrently, it wasn’t the unending suck fest that iPhone synch has become.&lt;/p&gt;

&lt;p&gt;Here, for example, was yesterday:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;issues with some photo / video that wouldn’t move over so I had to synch the pictures by batches until the offending bit of data was skipped over&lt;/li&gt;
  &lt;li&gt;some apps weren’t synched because of computer authorization&lt;/li&gt;
  &lt;li&gt;2 songs were lost because she had exceeded her 5 computer authorization limit&lt;/li&gt;
  &lt;li&gt;the synch never finished because the machine ran out of space partway through&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last one, running out of space, is particularly egregious – you know how big the damn device is, its size.  If there isn’t a multiple of that size in free disc space then simply don’t start the synch!  Don’t let it fail part of the way through!&lt;/p&gt;

&lt;p&gt;Mobile devices are no longer a new concept.  Synch should be painless.  It should be plug in a cable, leave the device alone and its done.  Instead synching an iPhone is always &lt;strong&gt;connect and pray&lt;/strong&gt;.  And while I have nothing against prayer, it shouldn’t be a requirement to use a mobile device.  Honestly, after yesterday and today, I sort of feel that this should be my new iPhone synch process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kneel&lt;/li&gt;
  &lt;li&gt;Pray&lt;/li&gt;
  &lt;li&gt;Go in backyard&lt;/li&gt;
  &lt;li&gt;Sacrifice goat in dead of night while changing&lt;/li&gt;
  &lt;li&gt;Connect lightning cable&lt;/li&gt;
  &lt;li&gt;Chant&lt;/li&gt;
  &lt;li&gt;Hope for the best&lt;/li&gt;
  &lt;li&gt;Repeat until synched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So while I’d love to see a waterproof iPhone or wireless charging or something else, I’d settle for the product that I paid good money for just working a little better.&lt;/p&gt;

&lt;p&gt;– Scott&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/iphone/2016/09/07/dear-apple-please-make-itunes-sync-suck-less.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/iphone/2016/09/07/dear-apple-please-make-itunes-sync-suck-less.html</guid>
        
        <category>iphone</category>
        
        <category>osx</category>
        
        
        <category>iphone</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial - Getting Your Instance ID and Why It Matters</title>
        <description>&lt;p&gt;In the world of AWS, your server is referred to as an EC2 instance and it is uniquely identified by a “instance-id”, a unique alpha numeric identifier that you can use to reference your server.  Your instance id can be used in all kinds of ways including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;log files&lt;/li&gt;
  &lt;li&gt;database records&lt;/li&gt;
  &lt;li&gt;security analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case I’m using AWS to crawl different websites and one of the things I’m encountering is that it is very, very hard to know what AWS instance ty;e is the best value.  Specifically do I optimize for more memory, more CPU, more disk and so on.  One thing you can do is push your instance id right down to the unit of work.  In my case that’s a database transaction so I can do things like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select instance_id, count(*) from page2016_q3s where instance_id is not null group by instance_id;
+---------------------+----------+
| instance_id         | count(*) |
+---------------------+----------+
| i-03ce34f1b92a3c72b |     1514 |
| i-045b17850658399ae |     1698 |
| i-0715d32f41c06b98f |     1731 |
+---------------------+----------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So if these 3 different instance types, and they were all started at the same time, I can see that, well, they’re all doing roughly the same amount of work so maybe the instance type doesn’t matter all that much and I should just buy the cheapest.&lt;/p&gt;

&lt;p&gt;Here’s how you fetch the instance id – and its brilliantly simple – you can just use wget or curl.  Here’s an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://169.254.169.254/latest/meta-data/instance-id
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that will return back a chunk of information which is just the instance id.  Want your region instead then just use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://169.254.169.254/latest/meta-data/placement/availability-zone
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if you’re looking to understand what’s available then just call:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://169.254.169.254/latest/meta-data/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And  you can walk down each of the options one by one looking at what’s available.&lt;/p&gt;

&lt;p&gt;Here’s a ruby implementation of how to get this info and cache it for faster retrieval.  This is in our common module which is a generic set of class methods we use all over the place.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.instance_id
  #
  # abend unless we&#39;re in production mode
  #
  return &quot;&quot; unless Rails.env.production?

  #
  # pull from cache
  #
  cache_key = &quot;#{Common.ip_address}|instance_id&quot;
  cache = Common.get_mem_cache
  instance_id = cache.read(cache_key)
  return instance_id unless instance_id.nil?
  
  #
  # fetch from metadata service, cache and return
  #
  begin
    agent = Mechanize.new
    url = &quot;http://169.254.169.254/latest/meta-data/instance-id&quot;
    page = agent.get(url)
    instance_id = page.body

    #
    # Now cache it
    #
    cache.write(cache_key, instance_id)

    return instance_id
  rescue StandardError =&amp;gt; e
    puts &quot;Hit error: #{e}&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Common.ip_address technique can be found on &lt;a href=&quot;https://stackoverflow.com/questions/14112955/how-to-get-my-machines-ip-address-from-ruby-without-leveraging-from-other-ip-ad/39367219#39367219&quot;&gt;stack overflow&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/09/07/aws-tutorial-getting-your-instance-id.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/09/07/aws-tutorial-getting-your-instance-id.html</guid>
        
        <category>aws</category>
        
        <category>instance-id</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>AWS - An Example of Development Speed with AWS</title>
        <description>&lt;p&gt;Just as an example of how fast things can happen in the AWS world, I skyped over to a colleague “I think we need another crawling box” at 3:48 am this morning.  Then I took care of it and got that box up and running.  My response back to him was at 4:09 am.  So 12 + 9 or 21 minutes total to go from a 5 node installation to a 6 node installation.  Coming from the world of traditional hosting where the flow is more like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;email hosting company&lt;/li&gt;
  &lt;li&gt;explain what is needed&lt;/li&gt;
  &lt;li&gt;go back and forth a few times&lt;/li&gt;
  &lt;li&gt;wait a day or two&lt;/li&gt;
  &lt;li&gt;run chef on the box to configure everything and have it half broken at the end because, well, chef&lt;/li&gt;
  &lt;li&gt;fix it manually&lt;/li&gt;
  &lt;li&gt;get code deployed&lt;/li&gt;
  &lt;li&gt;deal with randomness&lt;/li&gt;
  &lt;li&gt;get it running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My usual turn around time on getting a new box is close to a week when all is said and done so 21 minutes feels like, well, &lt;strong&gt;magic&lt;/strong&gt;.  And, honestly, I could have done it faster.  I muddled about a bit, checked mail, read a tweet or two, etc.  Now if I had properly scripted everything, this could have been probably less than 5 minutes end to end.  I’m not yet at that point in my AWS journey (still using the AWS web tools step by step).&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/09/07/aws-an-example-of-development-speed.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/09/07/aws-an-example-of-development-speed.html</guid>
        
        <category>aws</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rake spec</title>
        <description>&lt;p&gt;The command &lt;strong&gt;rake spec&lt;/strong&gt; runs your rspec test suite.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-spec.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-spec.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rake db:migrate</title>
        <description>&lt;p&gt;In the Rails world, rake db:migrate stands for “migrate the database and execute the latest migrations”.  In the Elixir world the &lt;strong&gt;mix&lt;/strong&gt; command fills the role that the rake and rails executables used to.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-db-migrate.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-db-migrate.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails new</title>
        <description>&lt;p&gt;Rails new is the command which generates a new Rails project.  The equivalent would be the phoenix new command.  Here is the equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other things to know:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new --help

mix phoenix.new project_name --database mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org/docs/up-and-running&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails g migration something_to_change</title>
        <description>&lt;p&gt;In the Rails world, rails g migration something_to_change means  db:migrate stands for “migrate the database and execute the latest migrations”.  In the Elixir world the &lt;strong&gt;mix&lt;/strong&gt; command fills the role that the rake and rails executables used to.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.gen.migration something_to_change
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-g-migration-something-to-change.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-g-migration-something-to-change.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails c</title>
        <description>&lt;p&gt;rails c, the Rails Console, is one of those canonical things in the rails world - it launches the rails console with all your objects loaded.&lt;/p&gt;

&lt;p&gt;The elixir equivalent to this is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This compiles your project and is a great way to quickly test your code.  If the console comes up then you don’t have any syntactic errors&lt;/p&gt;

&lt;p&gt;Just as, in the Rails world, you can run irb, you can also just run iex:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This won’t compile anything and its a fast way to test basic elixir snippets.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - bundle install</title>
        <description>&lt;p&gt;The command bundle install tells your ruby / rails application to read the Gemfile and install or update the components in Gemfile.  The elixir equivalent to Gemfile is mix.exs and the command to update it is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A sample mix.exs file looks quite different from Gemfile.  Here’s an example of just the &lt;strong&gt;defp deps&lt;/strong&gt; method where the equivalent to gems are listed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defp deps do
  [{:mariaex, &quot;&amp;gt;= 0.0.0&quot;},
   {:ecto, &quot;~&amp;gt; 2.0&quot;},
   {:aws, &quot;~&amp;gt; 0.2.0&quot;}]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-bundle-install.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-bundle-install.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
  </channel>
</rss>
