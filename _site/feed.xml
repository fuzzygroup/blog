<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 Mar 2017 08:42:11 -0500</pubDate>
    <lastBuildDate>Fri, 03 Mar 2017 08:42:11 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Things Winston Taught Me - Better Git Shortcuts</title>
        <description>&lt;p&gt;As I discussed in my article on what &lt;a href=&quot;http://fuzzyblog.io/blog/learning/2017/03/02/things-ganesh-taught-me.html&quot;&gt;Ganesh taught me&lt;/a&gt;, working with another engineer is a great way to learn new things.  Last week I also worked with &lt;a href=&quot;http://winstonkotzan.com/&quot;&gt;Winston&lt;/a&gt; and he showed me some git short cuts you can add to your bash profile.&lt;/p&gt;

&lt;h1 id=&quot;how-i-use-git&quot;&gt;How I Use Git&lt;/h1&gt;

&lt;p&gt;I’ve tried a number of git UI tools over the years but I keep coming back to the command line.  Here’s my work flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git status&lt;/li&gt;
  &lt;li&gt;git add some_file&lt;/li&gt;
  &lt;li&gt;git commit -m “a commit message”&lt;/li&gt;
  &lt;li&gt;git push origin master&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m pretty much a straight command line guy.  And because I try very hard to avoid rollup commits, this can make the commit process tedious.&lt;/p&gt;

&lt;h1 id=&quot;how-winston-uses-git&quot;&gt;How Winston Uses Git&lt;/h1&gt;

&lt;p&gt;Winston showed me his process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gs&lt;/li&gt;
  &lt;li&gt;ga&lt;/li&gt;
  &lt;li&gt;gc “a commit message”&lt;/li&gt;
  &lt;li&gt;gpc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These abbreviations are a heck of a lot shorter than what I’ve been typing so that’s clearly a win.  My one objection to his approach is that ga adds EVERYTHING.  My preference is atomic commit messages so I really would prefer to have two aliases for add:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ga some_file&lt;/li&gt;
  &lt;li&gt;gaa (adds everything)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how Winston originally implemented this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias gundo='git reset --soft HEAD~1'
function gc() {
  git commit -m &quot;$*&quot;
}
alias gcurrentbranch='git rev-parse --abbrev-ref HEAD'
alias ga='git add .'
alias gs='git status'
alias gl='git log --oneline'
alias gpc='git push origin $(gcurrentbranch)'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is my version:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias gundo='git reset --soft HEAD~1'
function gc() {
  git commit -m &quot;$*&quot;
}
function ga() {
  git add &quot;$*&quot;
}
alias gcurrentbranch='git rev-parse --abbrev-ref HEAD'
alias gaa='git add .'
alias gs='git status'
alias gl='git log --oneline'
alias gpc='git push origin $(gcurrentbranch)'
function ghelp() {
  echo &quot;ga (add one) gc (commit) gpc (push) gaa (add all) gs (status) gl (log) gcurrentbranch (show branch) gundo (be careful!)&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The only changes I made were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add a ga function which does a single file add&lt;/li&gt;
  &lt;li&gt;change the name of the previous ga, which added everything, to gaa (git add all)&lt;/li&gt;
  &lt;li&gt;add a ghelp function to tell me what’s available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just using this for a few days has really streamlined my workflow.  Thanks Winston!&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/git/2017/03/03/things-winston-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/git/2017/03/03/things-winston-taught-me.html</guid>
        
        <category>git</category>
        
        <category>terminal</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Things Ganesh Taught Me</title>
        <description>&lt;p&gt;I am an engineer and I’ve worked with other engineers from all over the world.  People can talk about cultural differences all they want but the bottom line is that software engineering is a very binary profession – either the code compiles or it doesn’t.  And this simple truism generally tends to make engineers far more similar than they are different.  One of my favorite things about working with a new engineer is watching their tooling and then saying “Hey - what’s that you just did / please show me how”.  And if its any good, I try hard to incorporate it into my daily workflow.&lt;/p&gt;

&lt;p&gt;Last week I had the privilege of pairing with &lt;a href=&quot;https://www.linkedin.com/in/itsgg/&quot;&gt;Ganesh from Imaginea&lt;/a&gt; all week long and I picked up some good tricks documented below.  Tomorrow or early next week, I’ll document what I picked up from &lt;a href=&quot;http://winstonkotzan.com/&quot;&gt;Winston&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;keep&quot;&gt;Keep&lt;/h1&gt;

&lt;p&gt;This is an interesting command line tool which lets you designate particular command line strings as things to be “kept”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/OrkoHunter/keep/master/data/keep.gif&quot; alt=&quot;keep&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Install it with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;pip install keep&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Save a command with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;keep YOUR_COMMAND&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;List your saved commands with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;keep list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/orkohunter/keep&quot;&gt;More on Keep&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;screenflick&quot;&gt;ScreenFlick&lt;/h1&gt;

&lt;p&gt;I was meeting with Ganesh as part of a transition plan so there was a lot of screen recording to capture knowledge.  While I have traditionally used ScreenFlow, he was using &lt;a href=&quot;http://www.araelium.com/screenflick&quot;&gt;ScreenFlick&lt;/a&gt; which:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is only $29&lt;/li&gt;
  &lt;li&gt;Works natively in MP4&lt;/li&gt;
  &lt;li&gt;Has a cool remote feature so you can use your phone to pause a recording, make some changes and then get back to the recording&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t tried this yet so no clue about noise reduction or other key issues but this is &lt;em&gt;interesting&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://d2l5v8ibvnnoh9.cloudfront.net/assets/screenflick/darken-4a4f14e94a7bba4d3a51486e8bed54cb4b48ed56513ee89089cd41de29a3b4d4.png&quot; alt=&quot;ScreenFlick&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.araelium.com/&quot;&gt;Araelium&lt;/a&gt; the company offering ScreenFlick has a number of cool apps.  Definitely worth checking out.  Even I find their &lt;a href=&quot;http://www.araelium.com/querious&quot;&gt;MySQL Query tool&lt;/a&gt; interesting.&lt;/p&gt;

&lt;p&gt;https://github.com/orkohunter/ping-me&lt;/p&gt;

&lt;h1 id=&quot;filmora&quot;&gt;Filmora&lt;/h1&gt;

&lt;p&gt;I can’t fully remember if I found &lt;a href=&quot;https://filmora.wondershare.com/mac-os-x-el-capitan/&quot;&gt;Filmora&lt;/a&gt; through Ganesh but it showed up on my box at that time so I think so.  I’m still digging into this one.&lt;/p&gt;

&lt;h1 id=&quot;prompt-envy&quot;&gt;Prompt Envy&lt;/h1&gt;

&lt;p&gt;I didn’t get this from Ganesh but looking at his bash prompt and seeing it show git commit status gave me a case of &lt;em&gt;prompt envy&lt;/em&gt;.  I’ve had this in and out over the years like 20 different times but it always breaks.  This time around I looked for someone else’s version and found it as a brew package:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;brew install bash-git-prompt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/trey/2722934&quot;&gt;Source&lt;/a&gt;.  And it is awesome!  I now have a prompt which shows me branch, status and number of files waiting to be committed.&lt;/p&gt;

&lt;h1 id=&quot;color-coded-terminal-login&quot;&gt;Color Coded Terminal Login&lt;/h1&gt;

&lt;p&gt;The best trick that Ganesh showed me was that his ssh logins to remote boxes actually change the background color of the terminal.  He’s doing it using AppleScript with the standard OSX Terminal.  Unfortunately I wasn’t able to pull off making that work with my preferred terminal client – iTerm.  But I’ve wanted this for so many years now that I’m going to keep at it until it works.&lt;/p&gt;

&lt;h1 id=&quot;thanks&quot;&gt;Thanks!&lt;/h1&gt;

&lt;p&gt;Thank you Ganesh!  Hugely appreciated.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/learning/2017/03/02/things-ganesh-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/learning/2017/03/02/things-ganesh-taught-me.html</guid>
        
        <category>terminal</category>
        
        <category>podcasting</category>
        
        <category>screen_recording</category>
        
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Increasing Linux Open File Limits</title>
        <description>&lt;p&gt;So &lt;a href=&quot;http://winstonkotzan.com/&quot;&gt;Winston&lt;/a&gt; found this log message in our logs today:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-03-02T18:18:31.561Z 32313 TID-osjfdq3bg ERROR: !!! ERROR HANDLER THREW AN ERROR !!!
2017-03-02T18:18:34.696Z 32313 TID-osjfdq3bg ERROR: Too many open files @ rb_sysopen - /proc/meminfo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We were running a large data processing job using sidekiq for running our queue and this was causing the queue to stop being processed.  As the resident *nix nerd, this one was on me.  A quick google on increasing open file limits gave me a tutorial from &lt;a href=&quot;https://easyengine.io/tutorials/linux/increase-open-files-limit/&quot;&gt;Easy Engine&lt;/a&gt; and the information was good but I think it could be documented better so here is the process I used.&lt;/p&gt;

&lt;h1 id=&quot;step-1-diagnosis&quot;&gt;Step 1: Diagnosis&lt;/h1&gt;

&lt;p&gt;Figure out what your limits actually are.  Given that these can be set on a per user basis you want to first diagnose them.  I’m using the user ubuntu so here’s the command line you need:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo su - ubuntu -c ‘ulimit -aHS’ -s ‘/bin/bash’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo su - ubuntu -c 'ulimit -aHS' -s '/bin/bash'
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 122314
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 122314
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clearly a limit of 1024 sounds low.&lt;/p&gt;

&lt;h1 id=&quot;step-2-fixing&quot;&gt;Step 2: Fixing&lt;/h1&gt;

&lt;p&gt;The configuration file that you need to edit is: /etc/security/limits.conf.  Edit this with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo vi /etc/security/limits.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add to the end of this file the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*         hard    nofile      999999
*         soft    nofile      999999
root      hard    nofile      999999
root      soft    nofile      999999
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Save the file and exit.&lt;/p&gt;

&lt;h1 id=&quot;step-3-log-out&quot;&gt;Step 3: Log Out&lt;/h1&gt;

&lt;p&gt;For these changes to take effect you need to log out.  Do that now with &lt;strong&gt;exit&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-4-login-and-re-diagnose&quot;&gt;Step 4: Login and Re-Diagnose&lt;/h1&gt;

&lt;p&gt;Log back into the server and run the diagnosis step again:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo su - ubuntu -c ‘ulimit -aHS’ -s ‘/bin/bash’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time you should see something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 122314
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 999999
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 122314
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;step-5-ansible&quot;&gt;Step 5: Ansible&lt;/h1&gt;

&lt;p&gt;Ideally this should be implemented using Ansible level so that any new boxes have these settings.  Unfortunately that is left as an exercise for the reader.&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/linux/2017/03/02/increasing-linux-open-file-limits.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/linux/2017/03/02/increasing-linux-open-file-limits.html</guid>
        
        <category>linux</category>
        
        <category>sys_admin</category>
        
        <category>sidekiq</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>An Engineer's Guide To Having Your Credit Card Stolen</title>
        <description>&lt;p&gt;So the one credit card that my wife and I rely on was recently stolen.  Personally I put the blame on &lt;a href=&quot;https://www.google.com/search?q=cloudbleed&amp;amp;ie=utf-8&amp;amp;oe=utf-8&quot;&gt;CloudFlare / CloudBleed&lt;/a&gt; since it occurred just after I purchased the HumbleBundle for Arduino (Feb 22nd) and that’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the only different credit card transaction done in the past few weeks&lt;/li&gt;
  &lt;li&gt;HumbleBundle was affected by CloudBleed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, that said, I don’t know to 100% certainty and this wasn’t Humble’s fault so I’ll still keep purchasing from them.  But I do feel pretty good in thinking that this was due to CloudFlare and I certain, after having reviewed more technical details, that CloudBleed is a lot worse than the &lt;a href=&quot;http://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; company is admitting.  If you haven’t yet started the login change process you might want to think about it.  Even I am gearing up to change all my damn passwords.  Sigh.&lt;/p&gt;

&lt;p&gt;Now that we just received new credit cards, I thought outlining the process of what to do when you’re a developer might be interesting for someone out there.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you’re not using a digital wallet to manage your secure crap (passwords / credit card data / pins) then I’d highly recommend it.  I’ve tried a bunch but the one I like best is &lt;a href=&quot;https://www.enpass.io/&quot;&gt;EnPass&lt;/a&gt; which runs on iOS, OSX, Windows and Unix, uses DropBox for sync from a small company in India.  &lt;strong&gt;Recommended&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.github.com/settings/billing&quot;&gt;Github&lt;/a&gt;.  Github is keys to the kingdom so it is always my first stop.  Drop down the menu next to your profile picture and choose settings and then billing.  Then do the credit card credentials three step jig.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gorails.com/users/edit&quot;&gt;GoRails&lt;/a&gt;.  &lt;a href=&quot;http://gorails.com/&quot;&gt;GoRails&lt;/a&gt; is a screencast service about Rails.  I have a legacy account grandfathered in at $9 / month and I don’t want to lose it so it was my #2 stop.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.elixirsips.com&quot;&gt;Elixir Sips&lt;/a&gt;. ElixirSips is a screen cast service for Elixir and Josh Adams does a great job on it as it was my #3 stop.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/&quot;&gt;Amazon&lt;/a&gt;.  How can you not change the big A?  I suspect we all know how to do this by now.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://console.aws.amazon.com/billing/home/#paymentmethods&quot;&gt;AWS&lt;/a&gt;.  Your AWS card can be different from your Amazon card and mine had contact details that were 3 years out of date so make sure to check them.  This is also a great opportunity to shut down any AMIs, instances or snapshots you’re not actually using.  You should also check your Cost Explorer while you’re at it. I’m finding Route 53 Hosted Zones to be oddly pricey but more on that later…&lt;/li&gt;
  &lt;li&gt;VPN.  We don’t all use VPNs but if you are trying to crawl geographically different information like the Google Play store world wide, a VPN is an awesome testing tool.  Everyone’s usage here is different so YMMV.&lt;/li&gt;
  &lt;li&gt;Apple.  This can easily be done under iOS via Settings / Wallet &amp;amp; Apple Pay.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/account/profile&quot;&gt;DropBox&lt;/a&gt;.  I hate DropBox’s performance.  I despise how it runs my CPU at 99% constantly and turns my bloody MacBook Pro fan on but other than my code editor it is probably the one app I just can’t live without at this stage.  DropBox keeps all my files up to date across three MacBooks, a Linux desktop, an iPad and an iPhone.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.backblaze.com/&quot;&gt;BackBlaze&lt;/a&gt;.  I actually am no longer a current BackBlaze subscriber but I know lots and lots of us are so if you use BackBlaze or another cloud backup tool I’d update that.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.meh.com/account&quot;&gt;Meh&lt;/a&gt;.  If you’re reading this and you haven’t ever used Meh then you really, really should.  Its an outstanding Nerd resource.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.freshbooks.com/#/profile&quot;&gt;Freshbooks&lt;/a&gt;.  Since I’m going back to full time freelancing shortly, decent accounting software is called for an Freshbooks is pretty great.&lt;/li&gt;
  &lt;li&gt;Search your email for the word receipt and look at anything in the last 60 days and you’ll likely be ok.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, print this out for your wife / significant other so they know where your card has been updated.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/misc/2017/03/02/an-engineer-s-guide-to-having-your-credit-card-stolen.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/misc/2017/03/02/an-engineer-s-guide-to-having-your-credit-card-stolen.html</guid>
        
        <category>misc</category>
        
        <category>credit_card</category>
        
        <category>cloudflare</category>
        
        <category>cloudbleed</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Using Pattern Generator to Make Custom Rails Generators</title>
        <description>&lt;p&gt;Welcome to the pattern_generator wiki!&lt;/p&gt;

&lt;p&gt;I’m a user of pattern_generator, not the author, so any mistakes here are mine and mine alone.  I’ve been very impressed by this gem so I thought I’d write some documentation as a thank you.  Here’s how to use this for your own project and write your own generators.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork It.  Start by forking this to your own repo on github.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone It.  Clone your fork down to your local dev system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change It.  Follow the directions on this repo’s home page to create a custom generator.  Basically you’re going to write a template for a class and a template for a spec / test file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add It.  Add pattern_generator to your Gemfile in one of your development groups.  You need to call out the master branch specifically.  Here’s an example:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem ‘pattern_generator’, :git =&amp;gt; ‘https://github.com/fuzzygroup/pattern_generator.git’, :branch =&amp;gt; “master”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add / Commit / Push.  Get your changes into github.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change Dir.  Change your working directory to the repo where you want to use your new generator and do a bundle update pattern_generator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use It.  Run your new generator with bundle exec rails g WHATEVER&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 16:58:57 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/03/01/using-pattern-generator-to-make-custom-rails-generators.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/03/01/using-pattern-generator-to-make-custom-rails-generators.html</guid>
        
        
      </item>
    
      <item>
        <title>Podcasting in 2017 under OSX Tips and Tricks</title>
        <description>&lt;p&gt;Improving Your audio 1:  turkish towel under your mic
Towel under your laptop&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Feb 2017 22:05:04 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/28/podcasting-in-2017-under-osx-tips-and-tricks.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/28/podcasting-in-2017-under-osx-tips-and-tricks.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Do DevOps</title>
        <description>&lt;p&gt;Devops&lt;/p&gt;

&lt;p&gt;no shortcuts&lt;/p&gt;

&lt;p&gt;start with documentation&lt;/p&gt;

&lt;p&gt;continue with the single simplest action&lt;/p&gt;

&lt;p&gt;continue with small working bits&lt;/p&gt;

&lt;p&gt;weave it together into a whole&lt;/p&gt;

&lt;p&gt;DevOps with Ansible - Parenting a Teenager - trust but verify&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Feb 2017 17:00:34 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/28/how-to-do-devops.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/28/how-to-do-devops.html</guid>
        
        
      </item>
    
      <item>
        <title>Working with the Gem Ecosystem Part 2 - Updating Gems and Writing Generators</title>
        <description>&lt;p&gt;In case you haven’t figured out yet that I write stuff here as much for myself as for anyone else, well, its true.  Almost every single day I find myself going back to my own blog as a reference tool.  Today I’m writing a part two to my &lt;a href=&quot;http://fuzzyblog.io/blog/ruby/2016/08/17/working-with-the-gem-ecosystem.html&quot;&gt;Working with the Gem Ecosystem&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;My thanks are extended to &lt;a href=&quot;http://www.nickjanetakis.com/blog/&quot;&gt;Nick&lt;/a&gt; who helped clarify the Gem update process and pointed out the need to embed the branch name in the Gemfile.  He picked this up from his work on the &lt;a href=&quot;https://github.com/nickjj/orats&quot;&gt;Orats gem&lt;/a&gt; which is very useful if you’re into Rails and Docker.&lt;/p&gt;

&lt;h1 id=&quot;generators&quot;&gt;Generators&lt;/h1&gt;

&lt;p&gt;I’m a big believer in custom generators and I’ve always found the process of writing them to be convoluted at best.  I recently found &lt;a href=&quot;https://github.com/sungwoncho/pattern_generator&quot;&gt;pattern_generator&lt;/a&gt; which makes writing generators drop dead easy.  I’m writing a project now where a major part of the process is writing custom data parsers for all kinds of web sites – udemy, leanpub, pluralsight, instagram, etc.  These are all PORO (plain old ruby objects) i.e. no ActiveRecord backed and I wanted a custom generator which:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;created my class&lt;/li&gt;
  &lt;li&gt;created my template&lt;/li&gt;
  &lt;li&gt;filled out the boilerplate structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happily pattern_generator is just plain perfect. Here’s all I did&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fork the gem&lt;/li&gt;
  &lt;li&gt;clone it to my computer&lt;/li&gt;
  &lt;li&gt;open it in an editor&lt;/li&gt;
  &lt;li&gt;create a directory&lt;/li&gt;
  &lt;li&gt;add my template class&lt;/li&gt;
  &lt;li&gt;add my template spec&lt;/li&gt;
  &lt;li&gt;replace the class name with erb style output tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And while this worked great, I ran into issues when I started making changes …&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The issues I had here are mine and mine alone.  &lt;a href=&quot;https://github.com/sungwoncho&quot;&gt;Sung Won Cho&lt;/a&gt; did a great job on pattern_generator and I thank him for it.&lt;/p&gt;

&lt;h1 id=&quot;and-now-back-to-gems&quot;&gt;And Now Back to Gems&lt;/h1&gt;

&lt;p&gt;My problem came when I added my fork of pattern_generator to my project’s Gemfile and did a bundle install.  At first the gem came down perfectly but I noticed a few bugs.  I then updated my code and re-bundled and &lt;em&gt;nothing&lt;/em&gt;.  I didn’t get any of my changes.  Here’s how I had it in my Gemfile initially:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pattern_generator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/fuzzygroup/pattern_generator.git'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Naturally this was located in a development only section of the Gemfile since we don’t want the memory overhead of this in production.&lt;/p&gt;

&lt;p&gt;My first thought was that this was tied to a bundle update versus bundle instlal so I did:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, again, nothing.  Next I tried:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle update –source=https://github.com/fuzzygroup/pattern_generator.git&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would have expected a bundle update pattern_generator to work but I did not find that to be the case.  But even with specifying the source explicitly I still did not get the right version of my code.  Happily Nick and I were about to pair anyway so I asked him and he honed right in on the branch i.e. specify the branch in the Gemfile.  Here’s how that looks:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pattern_generator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/fuzzygroup/pattern_generator.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that worked perfectly.  I wrote several new parsers today and then used my &lt;a href=&quot;https://github.com/fuzzygroup/sync-dot-rake&quot;&gt;SyncDotRake&lt;/a&gt; toolkit to merge the parsing code into a new Service Oriented API.  Overall it was a damn good day.  Thanks Nick!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I next updated the gem on the following day and &lt;strong&gt;could not get&lt;/strong&gt; it to update at all.  I finally tried:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle update pattern_generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and that actually seemed to work consistently and reliably.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2017/02/27/working-with-the-gem-ecosystem-part-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2017/02/27/working-with-the-gem-ecosystem-part-2.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>generators</category>
        
        <category>pattern_generator</category>
        
        <category>hyde</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Headphones for Programmers - Bose QC-35 Blue Tooth Over Ear Noise Cancelling Headphones</title>
        <description>&lt;p&gt;Anyone who has ever worked with me since 2007 or so knows that I’m an unabashed fan of pair programming.  While the quantity of pairing I do varies from project to project, I’ve had 12 hour pairing days from time to time and one job that was almost &lt;strong&gt;exclusively pairing&lt;/strong&gt; over a 2 year period.&lt;/p&gt;

&lt;p&gt;There are four types of gear that matter for pairing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Screen Sharing Software w/ Voice Communications&lt;/li&gt;
  &lt;li&gt;Similar or Matched Screen Resolutions&lt;/li&gt;
  &lt;li&gt;Decent Connectivity&lt;/li&gt;
  &lt;li&gt;Headphones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today I’m going to talk about headphones and specifically about Bose Quiet Comfort Headphones.  My wife, after an awful week, surprised me with a pair of Bose QC-35s.  She knew I wanted them and it had been an absolute shite show of a week so this was a wonderful surprise.&lt;/p&gt;

&lt;p&gt;I’ve been wearing wired Bose Quiet Comfort headphones now for almost a decade and I &lt;strong&gt;adore&lt;/strong&gt; them.  I don’t use the word adore oftem with respect to hardware / software.  Yes I adore my wife and, generally, my kids – but headphones?  Well Bose headphones are just that good.  I can wear my wired Bose head phones for 12 hours at a stretch without pain and that’s astonishing.&lt;/p&gt;

&lt;p&gt;I’m not at all an audiophile&lt;/p&gt;

&lt;p&gt;Now while I have long resisted blue tooth for serious audio, I&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Feb 2017 02:09:15 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/gear/2017/02/26/headphones-for-programmers-bose-qc-35-blue-tooth-over-ear-noise-cancelling-headphones.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/gear/2017/02/26/headphones-for-programmers-bose-qc-35-blue-tooth-over-ear-noise-cancelling-headphones.html</guid>
        
        <category>gear</category>
        
        <category>headphones</category>
        
        <category>pair_programming</category>
        
        
        <category>gear</category>
        
      </item>
    
      <item>
        <title>Setting Up Rails with Rspec From the Start</title>
        <description>&lt;p&gt;So this morning I was working on my side project and I realized that one aspect of it alone is now 26 plus PORO (plain old ruby objects) models and growing rapidly.  Given that I’m building this along the lines of a service oriented architeture where I want to be able to replace components prototyped in Ruby down the road with Elixir this would make sense so it was time to isolate it into a standalone http service as a separate Rails API stack.&lt;/p&gt;

&lt;p&gt;And this brings up the need to generate a stack with RSpec from the start.  Here’s how to do this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rails new hyde_page_parser -T –skip-active-record –skip-action-cable –skip-spring –api&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want this to &lt;strong&gt;NOT&lt;/strong&gt; include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test_unit so -T gets rid of that&lt;/li&gt;
  &lt;li&gt;ActiveRecord so –skip-active-refactor&lt;/li&gt;
  &lt;li&gt;ActionCable so –skip-action-cable&lt;/li&gt;
  &lt;li&gt;Spring so –skip-spring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That gets me a baseline project to which I can add RSpec.  Using &lt;a href=&quot;http://nrakochy.github.io/rspec/rails/2015/05/27/How-To-Setup-Rspec-Instead-Of-Test-Unit-Rails/&quot;&gt;Nrakochy’s&lt;/a&gt; instructions, all you need to do is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add gem ‘rspec-rails’ to a development, test group in Gemfile&lt;/li&gt;
  &lt;li&gt;Run bundle install&lt;/li&gt;
  &lt;li&gt;Run bundle exec rails g rspec:install&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/02/26/setting-up-rails-with-rspec-from-the-start.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/02/26/setting-up-rails-with-rspec-from-the-start.html</guid>
        
        <category>rails</category>
        
        <category>rspec</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
