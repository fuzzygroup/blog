<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 11 Oct 2016 16:15:25 -0400</pubDate>
    <lastBuildDate>Tue, 11 Oct 2016 16:15:25 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Hacking Bundler For Fun, Profit and Less Anger at the World</title>
        <description>&lt;p&gt;I recently wrote a blog post about my rage at Bundler and the fact that I have to manually remember than when the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install json -v1.8.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;blows up, I have to remember to instead use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install json -v1.8.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As someone who has consulted on a LOT of different ruby code bases, I see this constantly.  At times it feels that every time I start a project I have to face some kind of gem / bundler issue.  Now my friend Nick would argue that this is really something best solved by Docker and he does have a point.&lt;/p&gt;

&lt;p&gt;But me?  I’m stubborn.  I want this fixed and I’m finally willing to stop bitching and write some code to do so.  I mean that’s what open source is about.&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;People are universally bad at remembering complex things.  And when complex things have negative contexts, they are even worse at remembering them.  I &lt;strong&gt;hate&lt;/strong&gt; gem failures.  And I don’t mean I hate them a little - gem install failures send me into a rage.  And every time I fix it, I promptly forget about it.  What I want to do is tell bundler about the solution I found to the problem.  I want bundler to &lt;strong&gt;learn&lt;/strong&gt;.  Here’s my proposed syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle learn bad=&quot;&quot; good=&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here’s an actual example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle learn bad=&quot;gem install json -v1.8.1&quot; good=&quot;gem install json -v1.8.3&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So what do we need to make a learn option work?  Here’s my initial thoughts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need to add learn as an option with two parameters, good and bad.&lt;/li&gt;
  &lt;li&gt;We need a method which takes the two parameters and saves them to disc&lt;/li&gt;
  &lt;li&gt;We need test coverage&lt;/li&gt;
  &lt;li&gt;We need to hook into the overall failure mode and display any things that we learned that have a close match to the actual failure.&lt;/li&gt;
  &lt;li&gt;Long term: Allow these learnings to be shared over the Internet so that other people can benefit from the issues that you solved.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-context---in-the-minivan&quot;&gt;The Context - In the Minivan&lt;/h1&gt;

&lt;p&gt;When I thought of this I was out and about with my wife and teenage son on &lt;em&gt;The Great Home Schooling Lobster Misadventure&lt;/em&gt;.  While they were shopping before we picked up the lobster that we needed, I thought of this sitting in a minivan in the parking lot.  I don’t have a lot of time and I don’t have much in the way of connectivity so here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Found the &lt;a href=&quot;https://github.com/bundler/bundler&quot;&gt;bundler source&lt;/a&gt; on github.&lt;/li&gt;
  &lt;li&gt;Forked it to my &lt;a href=&quot;https://github.com/fuzzygroup/bundler&quot;&gt;github account&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Cloned it to my local box.&lt;/li&gt;
  &lt;li&gt;Changed to the right directory.&lt;/li&gt;
  &lt;li&gt;Set the ruby version with RVM.&lt;/li&gt;
  &lt;li&gt;Opened the directory in TextMate with mate .&lt;/li&gt;
  &lt;li&gt;Read DEVELOPMENT.md and do step 1&lt;/li&gt;
  &lt;li&gt;Try and figure out where this might go.  And fail &lt;strong&gt;miserably&lt;/strong&gt; – bundler is big!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you think about the code that I want to write, I actually don’t need to understand very much about bundler.  All I need to do, at least to start, is add a command line option that writes some data to a file.  Making this get looked up by a bundler failure obviously will be harder.&lt;/p&gt;

&lt;h1 id=&quot;search-to-the-rescue&quot;&gt;Search to the Rescue!&lt;/h1&gt;

&lt;p&gt;Whenever I’m faced with a complex code base and the need to find an integration point, I always, always do the same thing – I &lt;strong&gt;search&lt;/strong&gt;.  My rationale was this:&lt;/p&gt;

&lt;p&gt;There must be a relatively unused command line option in bundler.  If its relatively unused there won’t be a lot of calls to it so finding it should be simple.&lt;/p&gt;

&lt;p&gt;Running bundle –help and paging thru the results showed me the viz option which I had never heard of.  Here’s a screen shot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/bundler_viz.png&quot; alt=&quot;bundler_viz.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hacking-cli&quot;&gt;Hacking cli/&lt;/h1&gt;

&lt;h1 id=&quot;so-now-we-need-a-method&quot;&gt;So Now We Need a Method&lt;/h1&gt;

&lt;h1 id=&quot;so-how-do-you-profit-from-this&quot;&gt;So How Do You Profit from this?&lt;/h1&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 11:32:04 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/bundler/2016/10/11/hacking-bundler-for-fun-profit-and-less-anger-at-the-world.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/bundler/2016/10/11/hacking-bundler-for-fun-profit-and-less-anger-at-the-world.html</guid>
        
        <category>bundler</category>
        
        <category>ruby</category>
        
        <category>open_source</category>
        
        <category>github</category>
        
        
        <category>bundler</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 17 - When You've Lost You Web Server, How to Find an AWS Resource</title>
        <description>&lt;p&gt;I find myself, at the time of this writing, in the middle of an embarrassing situtation for a web professional.  You see, the situation is this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I wrote a new feature&lt;/li&gt;
  &lt;li&gt;I deployed my new feature&lt;/li&gt;
  &lt;li&gt;I refreshed my page&lt;/li&gt;
  &lt;li&gt;My feature isn’t there&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great Googly Moogly!  I’ve lost my web server!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me explain one of the things about cloud hosting that’s disconcerting.  When you first move to the cloud, your impulse is to organize your computing resources the way you used to.  So if you used to have say 3 clusters of powerful machines, that’s what you do.  Then you realize just how mind blowingly powerful a platform like AWS actually is and you start to think about &lt;strong&gt;Single Purpose Servers&lt;/strong&gt;.  A single purpose server is just what it sounds like – it does one thing.  And that’s fantastic because it makes trouble shooting so much easier.  When a server does only one thing, well, its easy to know if its broken.  And that’s great but do you know what the side effect of that is?  You don’t have a handful of servers anymore, you have a lot.  Me?  I’ve got over &lt;strong&gt;20&lt;/strong&gt; right now.  And somewhere in there is my web server.  But I can’t find it.  In this tutorial we’re going to quickly and easily figure this out.&lt;/p&gt;

&lt;h1 id=&quot;start-with-a-hypothesis&quot;&gt;Start with a Hypothesis&lt;/h1&gt;

&lt;p&gt;As normal we’re going to start with a theory - that is one of these three boxes:  fimariadb, ficrawler1, ficrawler2.  So our diagnostic dance, crude tho it may be, is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ssh into one of the boxes&lt;/li&gt;
  &lt;li&gt;sudo su -&lt;/li&gt;
  &lt;li&gt;apache2ctl stop&lt;/li&gt;
  &lt;li&gt;reload the page&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the page comes up, well, we know it wasn’t that one box.  So you then lather, rinse, repeat for each of the other 2 boxes.  And, at the end, we’re going to find out that it was none of these.&lt;/p&gt;

&lt;p&gt;You might be saying “Hey wait a minute – why would a web front end be on a box that does crawling?”  Well I’m still feeling all this out and I initially went for the old model where every box could do everything.  And that was a bad decision but I still have to live it for at least a little while longer.&lt;/p&gt;

&lt;h1 id=&quot;formulate-a-new-hypothesis---lets-use-ping&quot;&gt;Formulate a New Hypothesis - Let’s Use Ping!&lt;/h1&gt;

&lt;p&gt;Since our first plan failed, we need a new plan.  The program ping is a basic IP networking tool which lets us send a packet to a destination and if it answers, well, that means its alive.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping banks.finavd.com
PING web-1166333941.us-west-2.elb.amazonaws.com (52.41.182.115): 56 data bytes
64 bytes from 52.41.182.115: icmp_seq=0 ttl=47 time=67.589 ms
64 bytes from 52.41.182.115: icmp_seq=1 ttl=47 time=67.301 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ah ha!  We have an ip address of 52.41.182.115.  I know! I know!  I know!  I’ll just search for that ip address on EC2 dashboard.  And it will fail.  Now the smart kids in the back are already chuckling to themselves and they know the answer.&lt;/p&gt;

&lt;h1 id=&quot;hypothesis-3-elb-is-being-used&quot;&gt;Hypothesis 3: ELB Is Being Used&lt;/h1&gt;

&lt;p&gt;If you look at the url that responded, NOT the ip address, the answer is revealed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;web-1166333941.us-west-2.elb.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You see the text string “.elb.”?  That means that a piece of software called an Elastic Load Balancer is sitting in front of the http request and distributing the load out to one or more EC2 instances.  If you’ve ever used HAProxy, well, ELB is that only far, far better.  Let’s goto the AWS Console and select the Load Balancers option from the choices on the left:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/aws/aws_elb_01_overview.png&quot; alt=&quot;aws_elb_01_overview.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we’ll see an overview of all of our load balancers and their basic settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/aws/aws_elb_02_instances.png&quot; alt=&quot;aws_elb_02_instances.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the instances tab shows us where the HTTP request is being sent.  We can now goto the ec2 console and figure out what we need.  If you put the machine names into your &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/09/20/aws-tutorial-08-using-ssh-s-config-file-with-your-aws-boxes.html&quot;&gt;SSH Config as I recommended&lt;/a&gt; then you might not even need to goto the console.  In my case I just needed to know the names worker2 and worker2a and I know that they’re in my ssh config file and I can just add those boxes to my Capistrano deploy process.  And the “bug” is fixed!&lt;/p&gt;

&lt;h1 id=&quot;conclusion-and-suggestion&quot;&gt;Conclusion and Suggestion&lt;/h1&gt;

&lt;p&gt;I know that it must seem like I’m a bit of a buffoon – how can you lost a web server after all?  Well, things do happen when you move fast.  You start with one plan and then it doesn’t work and before you know it you have something working but its not where you originally planned.  And you mean to fix it but you get busy and then the next &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/01/aws-tutorial-10-diagnosing-ssh-failures-or-when-ping-works-but-ssh-fails.html&quot;&gt;crisis&lt;/a&gt; happens and you’re not even in the same head space any more.  And by the time you return to it over 10 days have passed.&lt;/p&gt;

&lt;p&gt;Here are some suggestions for setting up your AWS architecture to avoid this kind of silliness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name things well.&lt;/li&gt;
  &lt;li&gt;Name things logically.&lt;/li&gt;
  &lt;li&gt;Use the key value options when you set up your EC2 servers.  For example, having keys for both name and role might have helped.&lt;/li&gt;
  &lt;li&gt;Remember that there are often abstractions around everything.&lt;/li&gt;
  &lt;li&gt;Try and use single purpose servers from the start.  Yes the number of discrete servers increases complexity but their very single purpose nature makes debugging vastly easier.  And keep in mind that Amazon offers free servers.  Even a t2.micro free instance has 1 gig of ram and 8 gigs of storage.  I know that sounds funny but travel back in your head 5 years and that’s a beefy server and its &lt;strong&gt;FREE&lt;/strong&gt;.  If you’re just running something small, say Redis, Memcached, sendmail, etc that might be enough for a lot of applications.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 11:26:16 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-17-when-you-ve-lost-you-web-server-how-to-find-an-aws-resource.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-17-when-you-ve-lost-you-web-server-how-to-find-an-aws-resource.html</guid>
        
        <category>aws</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>What to Do When Bundle Install Fails with JSON 1.8.1</title>
        <description>&lt;p&gt;I cannot express my abject frustration at times with the Ruby ecosystem in general and bundler in particular.  When you hit this bug:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

    current directory: /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1/ext/json/ext/generator
/usr/local/rvm/rubies/ruby-2.3.1/bin/ruby -r ./siteconf20161011-22175-140avvd.rb extconf.rb
creating Makefile

current directory: /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1/ext/json/ext/generator
make &quot;DESTDIR=&quot; clean

current directory: /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1/ext/json/ext/generator
make &quot;DESTDIR=&quot;
compiling generator.c
In file included from generator.c:1:0:
../fbuffer/fbuffer.h: In function ‘fbuffer_to_s’:
../fbuffer/fbuffer.h:175:47: error: macro &quot;rb_str_new&quot; requires 2 arguments, but only 1 given
     VALUE result = rb_str_new(FBUFFER_PAIR(fb));
                                               ^
../fbuffer/fbuffer.h:175:20: warning: initialization makes integer from pointer without a cast [enabled by default]
     VALUE result = rb_str_new(FBUFFER_PAIR(fb));
                    ^
make: *** [generator.o] Error 1

make failed, exit code 2

Gem files will remain installed in /usr/local/rvm/gems/ruby-2.3.1/gems/json-1.8.1 for inspection.
Results logged to /usr/local/rvm/gems/ruby-2.3.1/extensions/x86_64-linux/2.3.0/json-1.8.1/gem_make.out

An error occurred while installing json (1.8.1), and Bundler cannot continue.
Make sure that `gem install json -v '1.8.1'` succeeds before bundling.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve hit this error, I suspect, a few hundred times and I always forget the solution.  And I’m not the only one.  &lt;a href=&quot;http://dasari.me&quot;&gt;Dv&lt;/a&gt; and I hit this together today and we shot about 20 minutes today to need this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install json -v1.8.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thank you &lt;a href=&quot;http://stackoverflow.com/questions/21095098/why-wont-bundler-install-json-gem&quot;&gt;Stack Overflow&lt;/a&gt; for this answer.  Even if it was buried so deep in the thread that I almost missed it.&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ruby/2016/10/11/what-to-do-when-bundle-install-fails-with-json-1-8-1.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ruby/2016/10/11/what-to-do-when-bundle-install-fails-with-json-1-8-1.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>json</category>
        
        <category>gem</category>
        
        <category>bundle</category>
        
        <category>things_that_make_me_postal</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 15 - SSH Take 3 - Using Ansible To Diagnose my SSH Troubles</title>
        <description>&lt;p&gt;Everyone wants to think that that complex computing problems are solved with a single flash of blinding insight.  And sometimes you do have that one epiphany that brings everything home.  But, more often than not, computing problems are solved by dogged persistence, by being more stubborn than the problem itself and by careful, diligent incremental progress where you observe the problem in question, altering one variable at a time until you understand what’s happening.&lt;/p&gt;

&lt;p&gt;In this step of our ongoing SSH disaster, we’re going to use Ansible to gather metrics on our running system and give ourselves a command line tool we can execute regularly.  By building this into a single command line tool, we can run it quickly and easily.  When we can do things quickly and easily we will do them more frequently and more frequency means more data.  And, I tend to believe that more data gives us the opportunity for more insights.&lt;/p&gt;

&lt;h1 id=&quot;a-hypothesis&quot;&gt;A Hypothesis&lt;/h1&gt;

&lt;p&gt;We’ve been working on the hypothesis that what’s going on is a problem of memory leaks causing an out of memory (OOM) condition on our Linux EC2 instance.  And even though Linux is supposed to kill a run away process that uses too much memory that doesn’t seem to be happening.  And, no, I don’t understand why.&lt;/p&gt;

&lt;p&gt;There are two basic compute resources that cause any Linux or Unix systems to have problems when they run low:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;memory&lt;/li&gt;
  &lt;li&gt;disc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux has two tools that we can always run when we’re logged into a linux system to monitor these resources:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df -h

df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            7.5G   12K  7.5G   1% /dev
tmpfs           1.5G  376K  1.5G   1% /run
/dev/xvda1      7.8G  5.5G  1.9G  75% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            7.5G     0  7.5G   0% /run/shm
none            100M     0  100M   0% /run/user

free -m

free -m
             total       used       free     shared    buffers     cached
Mem:         15298       8184       7114          0        201       1250
-/+ buffers/cache:       6732       8566
Swap:            0          0          0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;a-script&quot;&gt;A Script&lt;/h1&gt;

&lt;p&gt;What we’re going to do is write a tiny script, in Ruby, that we can use to monitor these resources.  And while there are literally hundreds of different monitoring tools that could do this for us, we’re going to do it ourselves so we introduce the smallest possible changes to our environments.  I call this type of approach reducing things to &lt;strong&gt;first principles&lt;/strong&gt;.  Yes a real monitoring tool would be far more powerful but setting it up would take a bunch of time, introduce multiple changes and then we’d have to learn how to use it.  We’re going to write our Ruby script in about 10 minutes and we’re done.&lt;/p&gt;

&lt;p&gt;Here’s all you need:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;script/free_memory.rb

#!/usr/local/rvm/rubies/ruby-2.3.1/bin/ruby
output = %x(free)
parts = output.split(&quot; &quot;)
total_memory = parts[7].to_i
used_memory = parts[8].to_i
free_memory = parts[9].to_i
output = %x(df -h)
parts = output.split(&quot; &quot;)
free_disc = parts[22]
used_disc = parts[23]
puts  &quot;Total Memory: #{total_memory} (#{total_memory/1024 / 1024} gb) / Used Memory: #{used_memory} (#{used_memory/1024 / 1024} gb) / Free Memory: #{free_memory} (#{free_memory/1024 / 1024} gb) / Free Disc: #{free_disc} / % Used Disc: #{used_disc}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is what I call hobbesian coding after the British philosopher Thomas Hobbes who coined the expression &lt;strong&gt;Life is nasty, brutish and short&lt;/strong&gt;.  This is ugly but its quick.  All we need to do is run the command and capture the output.  This is done with output = %x(free) and output = %x(df -h).  We then split it into an array on the space character and then map it to variables.  Finally we have a single puts statement that we displays the result and does some math.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This could have been written in anything.  Bash / awk would have been great for it but I’m a Ruby guy so I use the tool that I know.&lt;/p&gt;

&lt;h1 id=&quot;the-ansible-connection&quot;&gt;The Ansible Connection&lt;/h1&gt;

&lt;p&gt;If you remember, I said &lt;em&gt;Linux has two tools that we can always run when we’re logged into a linux system&lt;/em&gt;, well being logged into a system is what Ansible &lt;strong&gt;does&lt;/strong&gt;.  Ansible is brilliant because it runs via ssh.   SSH means you have a login so  all we need to monitor our box is an ansible ad hoc command to run this and here that is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -i inventories/production2 -u ubuntu -a &quot;/var/www/apps/banks/current/script/free_memory.rb&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That tells Ansible to run on all boxes in the inventories/production2 collection using the username ubuntu and then run whatever code exists at /var/www/apps/banks/current/script/free_memory.rb.&lt;/p&gt;

&lt;p&gt;And here’s an example of the result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -i inventories/production2 -u ubuntu -a &quot;/var/www/apps/banks/current/script/free_memory.rb&quot;
ficrawlerbig | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 351564 (0 gb) / Free Memory: 15314576 (14 gb) / Free Disc: 1.2G / % Used Disc: 84%

ficrawler4 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 327688 (0 gb) / Free Memory: 15338452 (14 gb) / Free Disc: 1.5G / % Used Disc: 81%

fiweb1 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 65966140 (62 gb) / Used Memory: 3847964 (3 gb) / Free Memory: 62118176 (59 gb) / Free Disc: 305M / % Used Disc: 96%

ficrawler3 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 8385776 (7 gb) / Free Memory: 7280364 (6 gb) / Free Disc: 1.9G / % Used Disc: 75%

ficrawler5 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 9511684 (9 gb) / Free Memory: 6154456 (5 gb) / Free Disc: 1.2G / % Used Disc: 85%

ficrawler6 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 946336 (0 gb) / Free Memory: 14719804 (14 gb) / Free Disc: 1.4G / % Used Disc: 83%

ficrawler10 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 351416 (0 gb) / Free Memory: 15314724 (14 gb) / Free Disc: 1.2G / % Used Disc: 84%

ficrawler7 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 12421004 (11 gb) / Free Memory: 3245136 (3 gb) / Free Disc: 2.0G / % Used Disc: 74%

ficrawler8 | SUCCESS | rc=0 &amp;gt;&amp;gt;
Total Memory: 15666140 (14 gb) / Used Memory: 4821588 (4 gb) / Free Memory: 10844552 (10 gb) / Free Disc: 1.4G / % Used Disc: 82%

ficrawler9 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve now been running this repeatedly for several days.  And I’ve learned that I can now pretty well predict when failures are going to occur.  I can also use this to diagnose problems on the boxes.  What we know is that if we’re running a heavy weight process like Sidekiq that is literally chewing through memory, the used memory column should actually show something.  If you look above you can see that ficrawler4 has (0 gb) in use.  That means that something has gone wrong.  So if we log into the box and change to the tmux session where this is executing, here’s what we find:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;after get_mechanize_links_on_a_pageKilled                                                                                                                                                           │·····························
__AWS_PRODUCTION__ ubuntu@ip-172-31-32-54:/var/www/apps/banks/current$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s interesting, isn’t it?  This is actually what’s supposed to happen.  When you see Killed on a Linux machine it means that the OOM actually worked for a change.  Praise Be!  And if we log into the box ficrawler10 we will actually find the same thing.  But when we log into ficrawler6, here’s what we find:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh ficrawler6
ssh_exchange_identification: read: Connection reset by peer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sigh.  Now that’s the whole problem we’re suffering from.  Now here’s what that means – this crash of ssh – just happened!  I’ve been writing this post in real time and running this ad hoc ansible command so about 5 minutes ago ansible could ssh in and run the command.  Now it can’t.  So what that means is that there is a time period where we have 0 gb free and the system is still responsive.  That’s &lt;strong&gt;really&lt;/strong&gt; interesting.  What that means is that we could manually ssh into the box, if we caught it soon enough, and restart the sidekiq process and NOT have to restart the whole box.&lt;/p&gt;

&lt;p&gt;Hm… I need to think about that and I’m pretty sure that it is &lt;strong&gt;important&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what happens on ficrawler6 when we run our ansible routine again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ficrawler6 | UNREACHABLE! =&amp;gt; {
    &quot;changed&quot;: false,
    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;,
    &quot;unreachable&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve learned some valuable things from gathering metrics and being able to run them easily.  Lots of people would have taken the approach of using an off the shelf tool for this and while tools are great, they’re big.  And they can be intrusive.  Breaking things down to first principles helps you understand.  And sure our ruby script for this is absolute crap.  Move it to a different distro and formatting will likely be off and it will break.  Who cares?  We spent 10 minutes writing it.&lt;/p&gt;

&lt;h1 id=&quot;credit&quot;&gt;Credit&lt;/h1&gt;

&lt;p&gt;A Shout Out to &lt;a href=&quot;http://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt; who was a consultant on &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/10/06/aws-tutorial-14-diagnosing-ssh-failures-take-2.html&quot;&gt;Take 2&lt;/a&gt; of this series of posts.  The first thing Nick said was disc space and I probably wouldn’t have thought to include disc space monitoring in my Ruby script if he hadn’t done that.  Thanks man!&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-15-using-ansible-to-diagnose-my-ssh-troubles.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/11/aws-tutorial-15-using-ansible-to-diagnose-my-ssh-troubles.html</guid>
        
        <category>aws</category>
        
        <category>ansible</category>
        
        <category>ssh</category>
        
        <category>ruby</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Rates</title>
        <description>&lt;p&gt;Picture of me on the side&lt;/p&gt;

&lt;p&gt;Resume link&lt;/p&gt;

&lt;p&gt;On a short term basis my rate is $200 per hour.  If you’d like to negotiate an ongoing arrangement that can be done and that can pretty dramatically affect the rate.&lt;/p&gt;

&lt;p&gt;Here’s what I bring to the table&lt;/p&gt;

&lt;p&gt;What can I do for you?&lt;/p&gt;

&lt;p&gt;Who the Heck Are You?&lt;/p&gt;

&lt;p&gt;At heart I’m a software engineer.  Nothing makes me happier than solving complex problems with code.  But I can also qualify as senior technical staff for an organization.&lt;/p&gt;

&lt;p&gt;What Have You Built&lt;/p&gt;

&lt;p&gt;Over the years I’ve built a lot of shipping products including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The HyperWriter family of authoring tools - HyperWriter, HyperWriter for Training, HyperWriter Professional, HyperAwk&lt;/li&gt;
  &lt;li&gt;The Doctor Dobbs Journal on CD-ROM&lt;/li&gt;
  &lt;li&gt;eduFire - An online marketplace for freelance educators and students to discover each other and run for pay video learning sessions using the Adobe Connect platform (Rails)&lt;/li&gt;
  &lt;li&gt;The Feedster blog search platform&lt;/li&gt;
  &lt;li&gt;AppData -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that doesn’t count the different products I’ve consulted on from time to time.  That’s just the full stack systems I’ve been primarily responsible for developing.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Oct 2016 06:30:52 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/10/rates.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/10/rates.html</guid>
        
        
      </item>
    
      <item>
        <title>What Nick Taught Me About Udemy, eBooks and More</title>
        <description>
</description>
        <pubDate>Mon, 10 Oct 2016 05:56:22 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/udemy/2016/10/10/what-nick-taught-me-about-udemy-ebooks-and-more.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/udemy/2016/10/10/what-nick-taught-me-about-udemy-ebooks-and-more.html</guid>
        
        <category>udemy</category>
        
        <category>ebooks</category>
        
        
        <category>udemy</category>
        
      </item>
    
      <item>
        <title>A Conversation with Mike Perham</title>
        <description>&lt;p&gt;One of the most gratifying aspects of working in the Open Source world is the ability to get to know the people who build the tools you rely on.  I’ve been in the Open Source world since ‘99 and I’ve been to a lot of conferences.  Not to humble brag but here are some of the people who’ve I’ve gotten to know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Greg Stein / Apache&lt;/li&gt;
  &lt;li&gt;Monte / MySQL&lt;/li&gt;
  &lt;li&gt;George and Theo Schlossnagle / PHP&lt;/li&gt;
  &lt;li&gt;Matt Mullenweg / WordPress and so much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This isn’t a humble brag because probably only one of these people &lt;em&gt;might&lt;/em&gt; recognize me on the street – maybe.  I’m a user of their stuff and I promote it as much as I can.  I’ve been using Apache and promoting it, honestly, because it is what I know.  But also because I know Greg and once upon a time he was chair of the Apache foundation.  And also because Apache has been good to me; it just works.  And I use MySQL / MariaDB not only because its fast and stable but also because I’ve seen my wife go shot for shot with Monty (picture a tiny red head drinking shots with a Finn; priceless).  I bailed out of the PHP world years and years ago but I still love the &lt;a href=&quot;https://www.sparkpost.com&quot;&gt;work&lt;/a&gt; that the Schlossnagle brothers do; I learned more solid computer science from &lt;a href=&quot;https://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616&quot;&gt;George’s book&lt;/a&gt; than I ever learned in college and I still read it from time to time when there’s a problem I know he would have a perspective on.  And I’m a fan of &lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html&quot;&gt;Matt&lt;/a&gt; even though I moved to the dark side and use Jekyll.&lt;/p&gt;

&lt;p&gt;Today I got the chance to know &lt;a href=&quot;http://www.mikeperham.com/&quot;&gt;Mike Perham&lt;/a&gt;, the author of &lt;a href=&quot;http://www.sidekiq.org&quot;&gt;Sidekiq&lt;/a&gt;, just a little bit.  I sat in on his weekly &lt;a href=&quot;http://sidekiq.org/support&quot;&gt;Happy Hour&lt;/a&gt;.  This is where he offers a video chat about Sidekiq and answers questions / gives suggestions.  Mike Perham is someone who’s intellectual work product is very familiar to me.  And I’ve long lauded his work as “the best guy in Ruby threading in known space”.  When people ask me about Ruby threading, I tend to just point them toward’s &lt;a href=&quot;http://www.mikeperham.com/&quot;&gt;Mike’s blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, despite my positive opinions about Mike, I’ve actually used Sidekiq only sporadically.  I had a bad experience with asynchronous job processors years ago and ever since I’ve been gun shy.  I’ve always taken the perspective that when you’re doing big back end systems, your data processing is core to your application and you should own the IP.  So I wrote my own threaded code, years ago, and I’ve been using it ever since.  But when my code gave up the ghost with an MTBF of 30 minutes, Sidekiq leapt to my rescue and has given me a 38x improvement.  Machine’s still crash but I can now go to bed and sleep thru the night.  Given my recent trials and travails with SSH problems and machines crashing due to out of memory issues, I thought that talking to the literal source might at least give insight.  &lt;strong&gt;And it did&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what I learned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mike is a very professional, very nice guy&lt;/li&gt;
  &lt;li&gt;Shared tenancy on AWS really is an issue; nearest neighbors can actually hurt your performance pretty dramatically&lt;/li&gt;
  &lt;li&gt;Redis really wants high performance box; not necessarily a ton of cores&lt;/li&gt;
  &lt;li&gt;Memory leaks are always an issue; sometimes its your code; sometimes its a gem that you use or an update to a gem that you use (so it can be fixed and then a gem update causes it to happen again)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;THE ANSWER TO MY PROBLEM&lt;/strong&gt;: The best approach is belt and suspenders.  Memory leaks are as much a state of being in a dynamic, garbage collected language.  Even if it gets fixed, a gem update could break everything once again.  The best approach is to use process monitoring and simply kill the process and restart it if the memory use is too great.  Either use &lt;a href=&quot;https://mmonit.com/monit/&quot;&gt;Monit&lt;/a&gt; or &lt;a href=&quot;http://contribsys.com/inspeqtor/&quot;&gt;Inspeqtor&lt;/a&gt;.  Mike has a &lt;a href=&quot;http://contribsys.com/inspeqtor/&quot;&gt;great video&lt;/a&gt; on this page and I’d recommend watching it; having setup monit in the past, Inspeqtor looks awesome.&lt;/li&gt;
  &lt;li&gt;Tracking down memory leaks in Ruby is hard and just may not be worth it.&lt;/li&gt;
  &lt;li&gt;Process monitoring would also fix my ruby segfault issues&lt;/li&gt;
  &lt;li&gt;I need to look into the commercial offerings for Sidekiq and Inspeqtor.  We’re already a commercial support customer for Sphinx; we might be able to be a commercial customer for Sidekiq.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you very, very much Mike.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ruby/2016/10/10/a-conversation-with-mike-perham.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ruby/2016/10/10/a-conversation-with-mike-perham.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>sidekiq</category>
        
        <category>open_source</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Managing a Large Scale Sidekiq Installation</title>
        <description>&lt;p&gt;http://stackoverflow.com/questions/12143350/gracefully-shutting-down-sidekiq-processes&lt;/p&gt;

&lt;p&gt;fiweb1 | SUCCESS | rc=0 »
Total Memory: 65966140 (62 gb) / Used Memory: 14217064 (13 gb) / Free Memory: 51749076 (49 gb)&lt;/p&gt;

&lt;p&gt;ficrawlerbig | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 12453420 (11 gb) / Free Memory: 3212720 (3 gb)&lt;/p&gt;

&lt;p&gt;ficrawler3 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 7130500 (6 gb) / Free Memory: 8535640 (8 gb)&lt;/p&gt;

&lt;p&gt;ficrawler4 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 545296 (0 gb) / Free Memory: 15120844 (14 gb)&lt;/p&gt;

&lt;p&gt;ficrawler5 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 8835068 (8 gb) / Free Memory: 6831072 (6 gb)&lt;/p&gt;

&lt;p&gt;ficrawler6 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 14846820 (14 gb) / Free Memory: 819320 (0 gb)&lt;/p&gt;

&lt;p&gt;ficrawler7 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 11149072 (10 gb) / Free Memory: 4517068 (4 gb)&lt;/p&gt;

&lt;p&gt;ficrawler8 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 3378360 (3 gb) / Free Memory: 12287780 (11 gb)&lt;/p&gt;

&lt;p&gt;ficrawler9 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 2316296 (2 gb) / Free Memory: 13349844 (12 gb)&lt;/p&gt;

&lt;p&gt;ficrawler10 | SUCCESS | rc=0 »
Total Memory: 15666140 (14 gb) / Used Memory: 12465468 (11 gb) / Free Memory: 3200672 (3 gb)&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 12:21:09 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/managing-a-large-scale-sidekiq-installation.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/managing-a-large-scale-sidekiq-installation.html</guid>
        
        
      </item>
    
      <item>
        <title>Startup Learnings - What Mike Perham Taught Me</title>
        <description>
</description>
        <pubDate>Sun, 09 Oct 2016 10:45:15 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/startup-learnings-what-mike-perham-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/startup-learnings-what-mike-perham-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Living The Tmux Life</title>
        <description>
</description>
        <pubDate>Sun, 09 Oct 2016 10:42:35 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/09/living-the-tmux-life.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/09/living-the-tmux-life.html</guid>
        
        
      </item>
    
  </channel>
</rss>
