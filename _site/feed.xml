<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Sep 2016 23:55:22 -0400</pubDate>
    <lastBuildDate>Thu, 01 Sep 2016 23:55:22 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Startup Learnings - What Matt Mullenweg Taught Me</title>
        <description>&lt;p&gt;WordPress, today, is an unquestioned king of the Internet.  I just checked the stats and WP 4.6 has been downloaded over &lt;a href=&quot;https://wordpress.org/download/counter/&quot;&gt;7 million times&lt;/a&gt; (and you can watch the number increase).  I remember, however, a time when its dominance wasn’t so clear – I remember being at the launch party for either &lt;a href=&quot;https://codex.wordpress.org/WordPress_Versions&quot;&gt;.72 or 1.0&lt;/a&gt; when things weren’t so clear.  But I suspect that I’m rambling now – long day.  Anyway, even when WP’s ascendancy wasn’t so clear, I always thought that &lt;a href=&quot;https://ma.tt/&quot;&gt;Matt Mullenweg&lt;/a&gt; himself was the real deal. He clearly knew what he was doing and &lt;a href=&quot;https://en.wikipedia.org/wiki/Matt_Mullenweg&quot;&gt;his history since 2004&lt;/a&gt; certainly bears that out.&lt;/p&gt;

&lt;p&gt;In the very early days of WordPress.com I remember talking to Matt about how they were handling the database implementation and he told me that WordPress.com was just architected just like WordPress itself – a single database per user.  I looked at that decision, to myself, a bit aghast.  After all, I was a &lt;em&gt;software developer&lt;/em&gt;, so I knew that you had only a single database per application.  Boy was I wrong.  At the time I had a traditional software guy’s perspective on the database – big, expensive, resource intensive – so you limited the database’s use.  However, I suspect, Matt looked at the database from the perspective of shared hosting.  Hosting companies routinely run thousands, if not tens of thousands of databases, on boxes to support customers on cheap hosting.  And, if they could do it, why couldn’t he?  And what a damn brilliant decision that was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By logically isolating each customer’s data from the other, he utterly avoided a whole class of scaling problem – data gets too big – move the whole account to a better server.&lt;/li&gt;
  &lt;li&gt;Ever notice that while there are security holes in WordPress itself, they never seem to be a big deal for WordPress.com?  Well this is why.  Breaches are contained.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d argue that this single design decision dramatically affected WordPress’s success.  People don’t often thing about software architecture decisions making the difference between commercial success and failure but I was there and I’m pretty damn certain of this.  Now Matt would have been fine no matter what but this one decision, I’ve always thought, helped ensure the success of the overall WordPress enterprise.&lt;/p&gt;

&lt;p&gt;Now Matt certainly isn’t the only one who has done this.  Down the road I’d see the same issue at &lt;a href=&quot;https://en.wikipedia.org/wiki/Brad_Fitzpatrick&quot;&gt;Brad Fitzpatrick’s&lt;/a&gt; LiveJournal.  And it wouldn’t surprise me if Brad actually did it first since Brad usually has done everything first.  I’d also consult on a similar architecture when I worked at StreamSend where I saw the harder side of managing such an architecture – rolling deploys and database migrations.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Please note that I have no idea if WordPress.com still uses this same structure today.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Tools for Elixir Development</title>
        <description>&lt;p&gt;One of the first things you do as a developer when tackling a new platform is suss out tools.  Here’s what I’ve found so far for Elixir:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-elixir&quot;&gt;Autocomplete for Elixir&lt;/a&gt;  I’m still sticking to my beloved TextMate for Elixir development but this is tempting.  Better autocomplete may be the killer app for Elixir development.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash for Documentation&lt;/a&gt; (obligatory shout out to &lt;a href=&quot;https://github.com/scrogson/&quot;&gt;Sonny Scrogson&lt;/a&gt; for teaching a great course and showing me Dash)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com&quot;&gt;Postman&lt;/a&gt; (for testing JSON apis you build with Elixir)  Courtesy of &lt;a href=&quot;http://dasari.me&quot;&gt;Dv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.erlang-solutions.com/products/wombat-oam.html&quot;&gt;Wombat&lt;/a&gt; for Elixir / Erlang Monitoring&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.honeybadger.io/for/elixir/&quot;&gt;HoneyBadger&lt;/a&gt; for managing Elixir errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other great Elixir resources include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phoenixframework.org&quot;&gt;Phoenix Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/phoenix/programming-phoenix&quot;&gt;The Phoenix Book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/elixir13/programming-elixir-1-3&quot;&gt;The Elixir Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/01/tools-for-elixir-development.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/01/tools-for-elixir-development.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        <category>tools</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Random Thoughts on Elixir</title>
        <description>&lt;h1 id=&quot;things-overheard-in-conversations&quot;&gt;Things overheard in conversations:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;datetime support is still a mess; the erlang libs are just as bad; Just rely on a unix timestamp on the box and manipulate it yourself (Pete)&lt;/li&gt;
  &lt;li&gt;deal with deployment at the container level; don’t do native deployment (Ben)&lt;/li&gt;
  &lt;li&gt;whenever possible pick a stable Erlang library over an immature hex project (Ian)  &lt;a href=&quot;https://github.com/gamache?tab=repositories&quot;&gt;Pete’s libraries&lt;/a&gt; are an exception; he’s using them in production.&lt;/li&gt;
  &lt;li&gt;tests run so fast (and concurrently) that you’ve lost your “Go get a coffee” excuse while the test runs break.  Damn.  (Ian)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I misquoted anyone I apologize; errors are mine not theirs.&lt;/p&gt;

&lt;h1 id=&quot;official-things---phoenix-13-changes&quot;&gt;Official Things - Phoenix 1.3 Changes:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Directory structure changes:
    &lt;ul&gt;
      &lt;li&gt;/web&lt;/li&gt;
      &lt;li&gt;/model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;/lib/my_app/&lt;/li&gt;
  &lt;li&gt;MyApp.Web.PageController &amp;lt;== new web namespace&lt;/li&gt;
  &lt;li&gt;Generators are changing greatly  - creating a module and functions&lt;/li&gt;
  &lt;li&gt;Umbrella generator for microservices within a phoenix “umbrella”&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;things-i-came-up-with&quot;&gt;Things I came up with:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;One thing that concerns me is the ability to parachute into an Elixir project and work on it.  Say what you want about Rails but its standard nature has made it very easy for a consultant to drop in on a project and fix it.  I’m less sure about that with Elixir.&lt;/li&gt;
  &lt;li&gt;When you don’t fully understand the syntax yet (and you won’t if you’re like most of us) then you can ctrl+c ctrl+c in and out of console to test that your code is right (&lt;strong&gt;iex -S mix)&lt;/strong&gt;.  Since Elixir is compiled, just bringing up the repl means it works&lt;/li&gt;
  &lt;li&gt;Elixir is all over the place.  I’ve met more people from, well, &lt;strong&gt;insert generic middle of the country location&lt;/strong&gt; than I have from San Francisco.  That’s damn odd for a cutting edge technology.  I don’t know what it says about San Francisco.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because the elixir language is implemented as macros instead of as language constructs, there are some syntactical oddities that mess you up.  Here’s an example:&lt;/p&gt;

    &lt;p&gt;&amp;lt;%= if @current_user do %&amp;gt;
    # do something
  &amp;lt;% else %&amp;gt;
    # do something ese
  &amp;lt;% end %&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Coming from a rails perspective you’d expect that to be &amp;lt;% if %&amp;gt;    not &amp;lt;%= %&amp;gt;&lt;/li&gt;
  &lt;li&gt;Immutable, Immutable, Immutable (just to remind myself)&lt;/li&gt;
  &lt;li&gt;Pattern matching over conditionals.  Ok this one was from Sonny as part of the Phoenix class.  Yesterday in that class we build a login system with only 1 if / else block.  Astonishing.&lt;/li&gt;
  &lt;li&gt;The lack of a prebuilt login system is astonishing.  Yes we built one ourselves and did it pretty easily but that’s not the same as “we should have done it”.  There are so many edge cases in authentication that I tend to shy away from it.  Wolfram Arnold taught me this on my very first Rails gig and it remains as good advice now as it was then.&lt;/li&gt;
  &lt;li&gt;The generators in Phoenix are astonishingly good.  Wow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll update this as the conference runs.&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/01/random-thoughts-on-elixir.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/01/random-thoughts-on-elixir.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>How to Turn Off Rails 5 Default Foreign Key Migrations</title>
        <description>&lt;p&gt;I could swear that I’ve written this down before but I can’t find it now and, as usual, I blog as much for myself as I do for anyone else.  When Rails 5 came out it made foreign key migrations standard and that, as any major change, bites lots of existing users.  It certainly has me.  Here’s how to turn it off:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Turn off your server.&lt;/li&gt;
  &lt;li&gt;Create an initializer in config/initializers named active_record_belongs_to_required_by_default.rb  You could also name it “you_suck_rails.rb” (yeah I’m at ElixirCon so hitting this, today, is beyond bitter).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add this content:&lt;/p&gt;

    &lt;p&gt;#Be sure to restart your server when you modify this file.&lt;/p&gt;

    &lt;p&gt;#Require &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt; associations by default. This is a new Rails 5.0&lt;/p&gt;

    &lt;p&gt;#default, so it is introduced as a configuration option to ensure that apps&lt;/p&gt;

    &lt;p&gt;#made on earlier versions of Rails are not affected when upgrading.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails.application.config.active_record.belongs_to_required_by_default = false
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/09/01/how-to-turn-off-rails-5-default-foreign-key-migrations.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/09/01/how-to-turn-off-rails-5-default-foreign-key-migrations.html</guid>
        
        <category>rails</category>
        
        <category>mysql</category>
        
        <category>migration</category>
        
        <category>foreign key</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>How to Be a Professional Freelancer</title>
        <description>&lt;p&gt;From the end of 2009 to 2015 I’ve supported myself and my family as a professional freelancer – I’ve been a work for hire software engineer.  And in that time I’ve never in my life made more money or done such varied and interesting work.  A friend asked me recently how I did it and while that’s a bit hard to answer, I was able to write down a bunch of rules that worked for me.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Insurance.&lt;/strong&gt;  Accept that health care is a disaster and you’re going to get hosed.  ‘Nuff said.  ObamaCare did not make this better.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Taxes.&lt;/strong&gt;  Put away 1/3 for taxes every month.  That money goes in a separate bank account and is never touched.  Or pay in advance every quarter which is what the IRS really wants.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Two Gigs.&lt;/strong&gt;  Always, always, always have 2 gigs at the same time.  I’ve always striven for a full time (40 hour) and a half time (20 hour).  That way when one goes south – and it will – you have a fall back.  Accept that you’re going to work at least 60 hours per week.  Sometimes the amount will be more and sometimes less but, at least for me, that was the average.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rates.&lt;/strong&gt;  Keep raising your hourly rate.  I’ve been guilty of not raising it often enough but if your skills keep increasing (and they will) then the marketplace needs to reflect that.  To some extent your rate, if its not unreasonable, is a reflection of your skills.  You want to be a mercedes not a yugo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Time Logging.&lt;/strong&gt;  Bill for everything.  If you call an attorney about an issue, well, the clock starts ticking right away.  If you’re doing hard core software development then I’d argue that you’re not different in skill levels.  Keep track of your time and understand your minimum billing increment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technical Excellence.&lt;/strong&gt;  As a freelancer all you are selling is yourself.  Mediocrity isn’t an option – that’s for people with comfortable jobs.  You need to be hungry.  Hell I even have a full time job now and I’m at ElixirCon on my &lt;strong&gt;own dime&lt;/strong&gt; because I’m committed to improving my skills.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Personal Integrity.&lt;/strong&gt;  Never be afraid to walk away from a gig if you find it unethical or it puts you in legal jeopardy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“How High?”&lt;/strong&gt;  If the client says jump then your only answer is “How High?”.  I remember once getting a skype message at 10:30 at night before I was about to leave for a conference and the request was “Can I get a report of xyz”.  And, you guessed it, 3 am rolled around and the report was written, run and checked into subversion.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Take Everything.&lt;/strong&gt;  I once took on some WordPress sysadmin work - 10 hours per month.  That directly led to over $500,000 plus of on going Ruby / Rails work that continues to this day.  Never, ever walk away from work.  If someone is will to pay then you do the work.  You say yes even if you don’t know how you’ll get it done – farm it out to another if you have to.  Hell call me if you have to. ;-)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Give Back.&lt;/strong&gt;  That WordPress work came out of a presentation I gave at ApacheCon in 2006.  That’s right I’m still making $$$ from a silly presentation that I gave once.  Now I’ll freely admit that I was lucky on this one.  That was (and is) an absolute goldmine.  Make presentations, write blog posts, tweet, write open source.  Giving back always pays back.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The biggest question everyone has is “how do you get gigs?”  This is the freelancer equivalent of asking a writer “where they get their story ideas”.  And the answer is pretty much the same.  Just as ideas are all around writers, gigs are all around you.  Technology is ubiquitous these days and that means that there is interesting technical work literally everywhere:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You know Sherwin Williams Paint?  They’re doing iPhone apps with computer vision to match paint samples.  That means iOS development, android development, backends, etc.&lt;/li&gt;
  &lt;li&gt;In Noblesville, Indiana there is an ecommerce company doing tens of millions of dollars of industrial sales.  You can’t move that many units of anything without technology.  How do I know?  I gave some money to a &lt;a href=&quot;http://www.outreachindiana.org&quot;&gt;fantastic charity&lt;/a&gt; and their founder introduced me to the president of that company and three weeks later I was helping writing code for them.  Gigs are literally everywhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s just 2 examples.  There are dozens of examples if not hundreds.  Finally you want to network &lt;strong&gt;fiercely&lt;/strong&gt;.  That doesn’t just mean LinkedIn and Twitter.  Go out and talk to people.  Do meetups if you have to but its always best to talk to non digital folk.  Just as an example, I recently found out that my next door neighbor is a Vice President at Sales Force.  I know it sounds a bit scummy but I have to think that knowing him, in addition to being a good neighbor, is worthwhile.  Heck my kids play with his kids; if I didn’t get to know him I’d be an ass.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;Gigs are all around you!&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/freelance/2016/09/01/how-to-be-a-professional-freelancer.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/freelance/2016/09/01/how-to-be-a-professional-freelancer.html</guid>
        
        <category>freelance</category>
        
        <category>business</category>
        
        
        <category>freelance</category>
        
      </item>
    
      <item>
        <title>Top 10 things Likely to be Overheard if a Klingon was Running Your Engineering Department</title>
        <description>&lt;p&gt;This humor is company specific - I wrote it when I was at an Internet startup ages and ages ago.  It used to be better when I had actual customer names here but you get the gist.  The people at that company can probably understand best.  Its not bad as a piece of internal satire if you add your customer names into it.&lt;/p&gt;

&lt;ol reversed=&quot;reversed&quot;&gt;
  &lt;li&gt;“&lt;em&gt;Insert Customer Name Here&lt;/em&gt; is a piece of crap! They have no honor!”&lt;/li&gt;
  &lt;li&gt;“Puny Terran, We will never fix that bug”&lt;/li&gt;
  &lt;li&gt;“By nagging me with the launch date, you have questioned my family honor.  Prepare to die!”&lt;/li&gt;
  &lt;li&gt;“You question the worthiness of my engineers.  Draw your batleft, I should kill you where you stand!”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;Insert Customer Name Here&lt;/em&gt; is without honor!”&lt;/li&gt;
  &lt;li&gt;“Answering your email is for the weak and timid!”&lt;/li&gt;
  &lt;li&gt;“Your &lt;em&gt;Insert Customer Name Here&lt;/em&gt; data is a piece of GAGH!”&lt;/li&gt;
  &lt;li&gt;“Perhaps it &lt;strong&gt;IS&lt;/strong&gt; a good day to Die!  I say we ship!”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;Insert Customer Name Here&lt;/em&gt; has just dumped Stova Core!”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;Insert Obnoxious, Over Promising Salesperson Name Here&lt;/em&gt; must die”&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/08/31/when-a-klingon-runs-your-engineering-department.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/08/31/when-a-klingon-runs-your-engineering-department.html</guid>
        
        
      </item>
    
      <item>
        <title>Startup Learnings - What Mark Fletcher Taught Me</title>
        <description>&lt;p&gt;When I started Feedster back in 2003, I ended up taking a very, very traditional startup route:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fschiettecatte.wordpress.com&quot;&gt;Found a technical co-founder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.venturevoice.com/2005/08/vv_show_11_scott_rafer_of_feed.html&quot;&gt;Found a CEO - Rafer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://redeye.firstround.com/2006/03/le_magic.html&quot;&gt;Raised Money&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along the way I also was lucky enough to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Meet Great People&lt;/li&gt;
  &lt;li&gt;Learn from those people&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t talked about Feedster and any of those learnings, well, ever.  They have been rattling around my brain over the past ten years while I focused on my technical skills but now some of them are starting to come out.&lt;/p&gt;

&lt;p&gt;Among those people were the circa 2003 to 2006 web 2.0 people like &lt;a href=&quot;http://www.scripting.com/&quot;&gt;Dave&lt;/a&gt;, Dave, &lt;a href=&quot;http://ma.tt&quot;&gt;Matt&lt;/a&gt;, Brad and others.  Today I want to talk about &lt;a href=&quot;http://www.wingedpig.com&quot;&gt;Mark Fletcher&lt;/a&gt;.  Mark was the founder of BlogLines and what he did was &lt;strong&gt;smart&lt;/strong&gt;.  He didn’t raise money at all.  He self funded and kept control.  That let him, when the time was right, take whatever acquisition deal was right for himself and see close to 100% of it accrue to his personal bottom line.  Me?  I was on a constant fund raising cycle.  And that &lt;strong&gt;sucked&lt;/strong&gt;.  Now Rafer took care of most of it but it was a constant distraction.&lt;/p&gt;

&lt;p&gt;I don’t care what anyone says, success in silicon valley is measured in financial terms.  And the bigger the deal, the greater your success is perceived.  Unfortunately that’s often an incorrect assumption.  With a co-founder, a hired CEO and after dilution from multiple fund raising rounds, unless you sell for an enormous amount of money, often even a “huge” deal can net the founders very, very little on a personal basis. &lt;a href=&quot;https://medium.com/@kareem.m/how-to-avoid-building-a-company-that-youll-hate-d1eb76eb9a9d#.90ggozsst&quot;&gt;Kareem Mayan&lt;/a&gt; talks about this better than I can with some eye opening examples of how big a deal can be and how little you can personally see as the entrepreneur.  Search for the Heidi Roizen quote.&lt;/p&gt;

&lt;p&gt;Me?  I ended up walking away from Feedster as the only person who actually made any money from it (to the best of my knowledge).  It wasn’t much but cash positive is always good.&lt;/p&gt;

&lt;p&gt;Mark?  He’s back at it again with the very, very cool email service &lt;a href=&quot;https://groups.io&quot;&gt;Groups.io&lt;/a&gt;.  He also has some wonderfully true observations about &lt;a href=&quot;https://wingedpig.com/2016/02/05/slack-is-wonderful-and-awesome-and-horrible-and-bad-a-rant/&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My take away from Mark: Fund it yourself; keep control.  There’s a balance here obviously.  Not everything can be self funded but given the changes in the industry -  &lt;a href=&quot;http://aws.amazon.com&quot;&gt;AWS&lt;/a&gt; - far more can be done by yourself than was even dreamt of 10 years ago.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/08/31/what-mark-fletcher-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/08/31/what-mark-fletcher-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>feedster</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Learning Phoenix from Sonny</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Below are my roughly stream of consciousness notes from &lt;a href=&quot;https://github.com/scrogson/taking-off-with-phoenix/&quot;&gt;Sonny Scrogson’s Taking off With Phoenix&lt;/a&gt; class.  Sonny did a fantastic job on this class and he is to be absolutely commended for it.  Any errors below, and I know they exist, are mine not his.  He earned every bit of the applause he got.  Thanks to &lt;a href=&quot;https://co.linkedin.com/in/esbanarango/en&quot;&gt;Esteban&lt;/a&gt; for pushing me to post this publicly.  Some notes were omitted due to markdown conflicts; I’ll get them up when I can.&lt;/p&gt;

&lt;h1 id=&quot;update&quot;&gt;Update&lt;/h1&gt;

&lt;p&gt;My version of the class repo is here: &lt;a href=&quot;https://github.com/fuzzygroup/taking-off-with-phoenix&quot;&gt;https://github.com/fuzzygroup/taking-off-with-phoenix&lt;/a&gt;  I put JSJ in the code where there was something I thought important enough to remember.  Bear in mind that I’m still new to Elixir.&lt;/p&gt;

&lt;p&gt;I added screenshots at the bottom for all of the screen shots showing errors / surprising things.  When you see big blanks that means that nothing was output.&lt;/p&gt;

&lt;h1 id=&quot;quick-links&quot;&gt;Quick Links:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phoenixframework.org&quot;&gt;Phoenix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/phoenix/programming-phoenix&quot;&gt;Phoenix Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;examples-of-mix-commands&quot;&gt;Examples of Mix Commands&lt;/h1&gt;

&lt;p&gt;Mix is the equvalent of bundler, the rails executable and rake:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mix help | grep phoenix.gen&lt;/li&gt;
  &lt;li&gt;mix phoenix.gen.html User users name email inserted_at –no-model&lt;/li&gt;
  &lt;li&gt;mix phoenix.gen.html Post posts title body:text user_id:references:users&lt;/li&gt;
  &lt;li&gt;mix ecto.migrate&lt;/li&gt;
  &lt;li&gt;mix phoenix.gen.json Post posts title body:text user_id:references:users&lt;/li&gt;
  &lt;li&gt;iex -S mix&lt;/li&gt;
  &lt;li&gt;mix help | grep ecto&lt;/li&gt;
  &lt;li&gt;mix ecto                 # Prints Ecto help information&lt;/li&gt;
  &lt;li&gt;mix ecto.create          # Creates the repository storage&lt;/li&gt;
  &lt;li&gt;mix ecto.drop            # Drops the repository storage&lt;/li&gt;
  &lt;li&gt;mix ecto.dump            # Dumps the repository database structure&lt;/li&gt;
  &lt;li&gt;mix ecto.gen.migration   # Generates a new migration for the repo&lt;/li&gt;
  &lt;li&gt;mix ecto.gen.repo        # Generates a new repository&lt;/li&gt;
  &lt;li&gt;mix ecto.load            # Loads previously dumped database structure&lt;/li&gt;
  &lt;li&gt;mix ecto.migrate         # Runs the repository migrations&lt;/li&gt;
  &lt;li&gt;mix ecto.migrations      # Displays the repository migration status&lt;/li&gt;
  &lt;li&gt;mix ecto.rollback        # Rolls back the repository migrations&lt;/li&gt;
  &lt;li&gt;mix ecto.gen.migration create_users&lt;/li&gt;
  &lt;li&gt;iex -S mix Phoenix.server &amp;lt;== runs your application in console which gives you access to the running application&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;things-i-learned&quot;&gt;Things I Learned&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;where do migrations live: priv/repo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;equivalencies-to-the-rails--ruby-world&quot;&gt;Equivalencies to the Rails / Ruby World&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;plug = rack (ruby) = ring (clojure) = adapter for web servers ; currently supported is Cowboy&lt;/li&gt;
  &lt;li&gt;iex -S Mix &amp;lt;=== Rails Console&lt;/li&gt;
  &lt;li&gt;Mix.env &amp;lt;== Rails.env&lt;/li&gt;
  &lt;li&gt;config/config.exs = master config file&lt;/li&gt;
  &lt;li&gt;dev.exs &amp;lt;== environment files like in config/deploy&lt;/li&gt;
  &lt;li&gt;prod.exs &amp;lt;== environment files like in config/deploy&lt;/li&gt;
  &lt;li&gt;deps - where your components; think vendor/gems&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;layers&quot;&gt;Layers:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;your code&lt;/li&gt;
  &lt;li&gt;erlang / elixir&lt;/li&gt;
  &lt;li&gt;OTP&lt;/li&gt;
  &lt;li&gt;Kernel &amp;amp; STDLIB&lt;/li&gt;
  &lt;li&gt;ERTS&lt;/li&gt;
  &lt;li&gt;Operating System&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;surprising&quot;&gt;Surprising&lt;/h2&gt;

&lt;p&gt;There are other flavors of languages on top of erlang:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lua&lt;/li&gt;
  &lt;li&gt;lisp&lt;/li&gt;
  &lt;li&gt;prolog&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;erlang-vm&quot;&gt;Erlang VM&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;scheduler #1 - run queue&lt;/li&gt;
  &lt;li&gt;scheduler #2 - run queue&lt;/li&gt;
  &lt;li&gt;scheduler #3 - run queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1 thread is run for every core on the machine (each scheduler above has a thread assigned to it)&lt;/p&gt;

&lt;h2 id=&quot;processes&quot;&gt;Processes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;lightweight units of concurrency&lt;/li&gt;
  &lt;li&gt;maintain state via recursion&lt;/li&gt;
  &lt;li&gt;communication via message passing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Stack   Heap&lt;/li&gt;
  &lt;li&gt;Mailbox&lt;/li&gt;
  &lt;li&gt;Links &amp;amp; Monitors (when you link to a process of the process dies then you die too) (and alert me when a process dies)&lt;/li&gt;
  &lt;li&gt;Garbage Collector&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;isolated--concurrent&quot;&gt;Isolated &amp;amp; Concurrent&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Crashes are isolated&lt;/li&gt;
  &lt;li&gt;Data is isolated (GC per process)&lt;/li&gt;
  &lt;li&gt;Load balances on IO and CPU (efficient on multicore)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;otp&quot;&gt;OTP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;framework that makes it easy to deal with faults, concurrency and distribution&lt;/li&gt;
  &lt;li&gt;Where I want to build crawlers likely&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;genservers-supervisors-processes-oh-my&quot;&gt;GenServers, Supervisors, Processes, Oh My!&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GenServers are generic servers&lt;/li&gt;
  &lt;li&gt;supervisor - a process like any other that runs code specific to watching other processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;phoenix&quot;&gt;Phoenix&lt;/h2&gt;

&lt;p&gt;Phoenix is a framework for building modern web apps, API backends and distributed systems.  Written in Elixir, you get beautiful syntax, productive tooling and a fast and efficient runtime (thanks to the BEAM)&lt;/p&gt;

&lt;p&gt;Phoenix is an OTP application that provides functionality to your OTP application&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mvc framework&lt;/li&gt;
  &lt;li&gt;familiar to those with experience in other web frames - rails, django&lt;/li&gt;
  &lt;li&gt;channels for implementing soft real time features&lt;/li&gt;
  &lt;li&gt;easy to test&lt;/li&gt;
  &lt;li&gt;not a lot of mocks in elixir&lt;/li&gt;
  &lt;li&gt;not objects with data; just data structures you feed into functions&lt;/li&gt;
  &lt;li&gt;no compromise - high productivity and high performance&lt;/li&gt;
  &lt;li&gt;Don’t just port ruby to Elixir; Think Different&lt;/li&gt;
  &lt;li&gt;Performance - at times 17x faster than rails&lt;/li&gt;
  &lt;li&gt;no stop the world garbage collection&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-stuff-built-from-scratch&quot;&gt;Getting Stuff Built from Scratch&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Install the archive https://github.com/phoenixframework/archives : goto bottom and click on it and get the url from the raw (actually get the url from the download button )&lt;/li&gt;
  &lt;li&gt;mix archive.install https://github.com/phoenixframework/archives/blob/master/phoenix_new.ez?raw=true&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;mix help&lt;/td&gt;
          &lt;td&gt;grep phoenix&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;github.com/phoenixframework/phoenix/installer&lt;/li&gt;
  &lt;li&gt;mix help phoenix.new&lt;/li&gt;
  &lt;li&gt;mix phoenix.server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;

&lt;p&gt;Processing by Workshop.PageController.index/2&lt;/p&gt;

&lt;p&gt;/2 is the “ARITY OF THE FUNCTION” arity = number of arguments that the function accepts&lt;/p&gt;

&lt;p&gt;2 top level directories - lib, web  The web directory is likely to go to lib down the road&lt;/p&gt;

&lt;p&gt;This is a list of two tuples:&lt;/p&gt;

&lt;p&gt;[“ecto.setup”: [“ecto.create”, “ecto.migrate”, “run priv/repo/seeds.exs”],
   “ecto.reset”: [“ecto.drop”, “ecto.setup”],
   “test”: [“ecto.create –quiet”, “ecto.migrate”, “test”]]&lt;/p&gt;

&lt;p&gt;toople  &amp;lt;== correct pronunciation is toople (according to Sonny at least)&lt;/p&gt;

&lt;p&gt;tuple&lt;/p&gt;

&lt;p&gt;elem {:key, “value”}, 0
   :key&lt;/p&gt;

&lt;p&gt;elem {:key, “value”}, 1
   “value”&lt;/p&gt;

&lt;p&gt;[{:key, “value”}] &amp;lt;== keyword list&lt;/p&gt;

&lt;p&gt;[{:key, “value”}]&lt;/p&gt;

&lt;p&gt;[“key”:, “value”]  &amp;lt;== the : makes it an atom.  THE : MUST GO AT THE END&lt;/p&gt;

&lt;p&gt;[“key.value”:, “value”] &amp;lt;== the . would change things to a method send so you have to&lt;/p&gt;

&lt;p&gt;keyword lists are preferred over maps because you can omit the braces for the last argument&lt;/p&gt;

&lt;p&gt;keyword lists can have the same key multiple times ; maps you cannot&lt;/p&gt;

&lt;p&gt;maps are easier to pattern match on so used more&lt;/p&gt;

&lt;p&gt;(A few examples omitted here due to escaping issues; there’s irony in that due to Tom Preston Warner’s ruby orientation)
   &lt;strong&gt;COFFEE BREAK&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;building-blocks&quot;&gt;Building blocks&lt;/h1&gt;

&lt;p&gt;(get from photo)&lt;/p&gt;

&lt;h2 id=&quot;plug&quot;&gt;Plug&lt;/h2&gt;

&lt;p&gt;https://github.com/elixir-lang/plug&lt;/p&gt;

&lt;p&gt;At the core of phoenix&lt;/p&gt;

&lt;p&gt;a specification for constructing composable modules to build web applications.  Plugs are reusable modules or functions built to this specification&lt;/p&gt;

&lt;p&gt;Plugs can be written to handle almost anything form authentication to paramenter preprocessing and rendering&lt;/p&gt;

&lt;p&gt;Provides adapters to http servers which will ultimately deliver content to users&lt;/p&gt;

&lt;h2 id=&quot;plug-specification&quot;&gt;Plug Specification&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;function plugs  - just a function&lt;/li&gt;
  &lt;li&gt;modules plugs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function-plugs&quot;&gt;Function Plugs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A function plug is any function that recieves a connection and a set of options and returns a connection.  Its type signatiure must be:&lt;/li&gt;
  &lt;li&gt;(Plug.Conn.t, Plug.opts) :: Plug.conn.t&lt;/li&gt;
  &lt;li&gt;Gets an empty list by default if no options]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function-plug-example&quot;&gt;Function Plug Example&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def json_header_plug(conn, opts) do
  conn 
  |&amp;gt; put_resp_content_type(&quot;application/json&quot;)
end

Most of the applications I build now are like this - functions which transform state bit by bit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;module-plugs&quot;&gt;Module Plugs&lt;/h3&gt;

&lt;p&gt;A module plug is an extension of the function plug.  It is a module that must export:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;init/1 - takes a set of options and initializes it&lt;/li&gt;
  &lt;li&gt;call/2 - takes the connection and options, returns the connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result report by init/1 is passed as a second argument to call/2&lt;/p&gt;

&lt;h4 id=&quot;module-plug-example&quot;&gt;Module Plug Example&lt;/h4&gt;

&lt;p&gt;defmodule JSONHeaderPlug do 
    import Plug.Conn&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def init(opts), do: opts
  
def call(conn, _opts) do
  conn
  |&amp;gt; put_resp_content_type(&quot;application/json&quot;)
end   end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;plugconn-is-huge-look-it-up&quot;&gt;plug.conn is huge (look it up)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;missed it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;request-fields&quot;&gt;Request Fields&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;missed it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fetchable-fields&quot;&gt;Fetchable Fields&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;missed it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;response-fields&quot;&gt;Response Fields&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;missed it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;connection-fields&quot;&gt;Connection Fields&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;missed it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugs-in-phoenix&quot;&gt;Plugs in Phoenix&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Endpoint&lt;/li&gt;
  &lt;li&gt;Router&lt;/li&gt;
  &lt;li&gt;Controllers&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;endpoint&quot;&gt;Endpoint&lt;/h4&gt;

&lt;p&gt;Endpoint is boundary of the app.  Where all requests flow (slide transition too fast)&lt;/p&gt;

&lt;h4 id=&quot;endpoint-1&quot;&gt;Endpoint&lt;/h4&gt;

&lt;p&gt;plug Plug.Parsers, 
  parsers: [:urlencoded, :multipart, :json],
  pass: [“&lt;em&gt;/&lt;/em&gt;”],
  json_decoder: Poison&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h4 id=&quot;router&quot;&gt;Router&lt;/h4&gt;

&lt;p&gt;Provides a bunch of macors for generating routes that dispatch to specific controllers and actions.  Those macros are named after HTTP verbs.&lt;/p&gt;

&lt;p&gt;defmodule Myapp.Router do 
  use Myapp.Web, :router&lt;/p&gt;

&lt;p&gt;scope “/”, Myapp do
    get “/”, PageController, :index
    resources “/rooms”, RoomController do
    resources “/users”, UserController
    end
  end
end&lt;/p&gt;

&lt;p&gt;####Router&lt;/p&gt;

&lt;p&gt;this&lt;/p&gt;

&lt;p&gt;get “/”, PageController, :index&lt;/p&gt;

&lt;p&gt;compiles to this (showing full function definition)&lt;/p&gt;

&lt;p&gt;defp match(conn, “GET”, [], _) do
  conn
  |&amp;gt; Plug.conn.put_private(:phoenix_pipelines, [:browser])
  |&amp;gt; Plug.conn
  …(omitted)&lt;/p&gt;

&lt;p&gt;end&lt;/p&gt;

&lt;h4 id=&quot;router-1&quot;&gt;Router&lt;/h4&gt;

&lt;p&gt;mix task&lt;/p&gt;

&lt;p&gt;mix phoenix.routes&lt;/p&gt;

&lt;p&gt;page_path get /&lt;/p&gt;

&lt;h3 id=&quot;pipelines&quot;&gt;Pipelines&lt;/h3&gt;

&lt;p&gt;connection
|&amp;gt; endpoint
|&amp;gt; router
|&amp;gt; controller
|&amp;gt; send_resp&lt;/p&gt;

&lt;p&gt;Router Pipelines&lt;/p&gt;

&lt;p&gt;pipeline :browser do
  plug :accepts, [“html”]
  plug :fetch_session
  plug :fetch_flash
  plg
end&lt;/p&gt;

&lt;p&gt;Now into the workshop!&lt;/p&gt;

&lt;h1 id=&quot;ecto&quot;&gt;Ecto&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mix help&lt;/td&gt;
      &lt;td&gt;grep ecto&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;mix ecto                 # Prints Ecto help information&lt;/li&gt;
  &lt;li&gt;mix ecto.create          # Creates the repository storage&lt;/li&gt;
  &lt;li&gt;mix ecto.drop            # Drops the repository storage&lt;/li&gt;
  &lt;li&gt;mix ecto.dump            # Dumps the repository database structure&lt;/li&gt;
  &lt;li&gt;mix ecto.gen.migration   # Generates a new migration for the repo&lt;/li&gt;
  &lt;li&gt;mix ecto.gen.repo        # Generates a new repository&lt;/li&gt;
  &lt;li&gt;mix ecto.load            # Loads previously dumped database structure&lt;/li&gt;
  &lt;li&gt;mix ecto.migrate         # Runs the repository migrations&lt;/li&gt;
  &lt;li&gt;mix ecto.migrations      # Displays the repository migration status&lt;/li&gt;
  &lt;li&gt;mix ecto.rollback        # Rolls back the repository migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mix ecto.gen.migration create_users&lt;/p&gt;

&lt;p&gt;priv is an ERLANG thing and represents “files private to the application”&lt;/p&gt;

&lt;p&gt;mix ecto.migrate&lt;/p&gt;

&lt;p&gt;Repo is the ecto repository&lt;/p&gt;

&lt;p&gt;Repo is in charge of sending the queries to the db&lt;/p&gt;

&lt;p&gt;There could be a 1 week course on using ecto&lt;/p&gt;

&lt;p&gt;Web is where all our phoenix specific stuff goes&lt;/p&gt;

&lt;p&gt;model right now are business logic and WILL BE MOVING but for now are in web&lt;/p&gt;

&lt;p&gt;In the future will be more small apps that are composed up to bigger apps&lt;/p&gt;

&lt;p&gt;“dunder” means “__” (its short for double underscore)&lt;/p&gt;

&lt;p&gt;in mix.exs you define the name Workshop (initial name to the directory structure)&lt;/p&gt;

&lt;p&gt;Ecto does not have call backs&lt;/p&gt;

&lt;h1 id=&quot;immutable-immutable-immutable-&quot;&gt;Immutable Immutable Immutable !!!&lt;/h1&gt;

&lt;p&gt;Remember everything is immutable&lt;/p&gt;

&lt;p&gt;%Ecto.Changeset{}
    #Ecto.Changeset&amp;lt;action: nil, changes: %{}, errors: [], data: nil, valid?: false&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Workshop.User.changeset(%Workshop.User{})
#Ecto.Changeset&amp;lt;action: nil, changes: %{},
 errors: [name: {&quot;can&#39;t be blank&quot;, []}, email: {&quot;can&#39;t be blank&quot;, []},
  password: {&quot;can&#39;t be blank&quot;, []},
  password_confirmation: {&quot;can&#39;t be blank&quot;, []}], data: #Workshop.User&amp;lt;&amp;gt;,
 valid?: false&amp;gt;
 
  Workshop.User.changeset(%Workshop.User{email: &quot;foo@bar.com&quot;})
 #Ecto.Changeset&amp;lt;action: nil, changes: %{},
  errors: [name: {&quot;can&#39;t be blank&quot;, []}, password: {&quot;can&#39;t be blank&quot;, []},
   password_confirmation: {&quot;can&#39;t be blank&quot;, []}], data: #Workshop.User&amp;lt;&amp;gt;,
  valid?: false&amp;gt;
  
  h v (help on v)
  
  c = v(2)  (get the 2nd previous thing out of the history)
  
  
  if true, do: 1, else: 2
  
  if true do 
    1
  else
    2
  end
  
  quote do: 1 + 1
  {:+, [context: Elixir, import: Kernel], [1, 1]}   &amp;lt;== this is the AST internal to elixir (3 element tuple)
  
  quote do: if true, do: 1, else: 2
  
  {:if, [context: Elixir, import: Kernel], [true, [do: 1, else: 2]]}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;https://hexdocs.pm/ecto/Ecto.html&lt;/p&gt;

&lt;p&gt;Goal is that your web interface is separate from your domain logic&lt;/p&gt;

&lt;h2 id=&quot;storage--database&quot;&gt;Storage != Database&lt;/h2&gt;

&lt;p&gt;ETS = Erlang Table System&lt;/p&gt;

&lt;p&gt;http://erlang.org/doc/man/ets.html&lt;/p&gt;

&lt;p&gt;You can use ecto to handle data validations that ARE NOT a db&lt;/p&gt;

&lt;p&gt;Wrap the form in an ecto changeset to allow signup for an ejabberd system&lt;/p&gt;

&lt;h2 id=&quot;view&quot;&gt;View&lt;/h2&gt;

&lt;p&gt;view is a module that renders the template&lt;/p&gt;

&lt;p&gt;~E is equivalent to .html_safe but it goes before not after&lt;/p&gt;

&lt;p&gt;IT IS ALL ABOUT DATA STRUCTURES NOT GETTERS / SETTERS !!!!&lt;/p&gt;

&lt;h2 id=&quot;changeset&quot;&gt;Changeset&lt;/h2&gt;

&lt;p&gt;Workshop.User.changeset&lt;/p&gt;

&lt;p&gt;Workshop.Repo.get_by([email: “fuzzygroup@gmail.com”])&lt;/p&gt;

&lt;h1 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h1&gt;

&lt;p&gt;This was the progress of error messages we all saw as we went thru the training.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_01.png&quot; alt=&quot;taking_on_phoenix_screen_01.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_02.png&quot; alt=&quot;taking_on_phoenix_screen_02.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_03.png&quot; alt=&quot;taking_on_phoenix_screen_03.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_04.png&quot; alt=&quot;taking_on_phoenix_screen_04.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_05.png&quot; alt=&quot;taking_on_phoenix_screen_05.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_06.png&quot; alt=&quot;taking_on_phoenix_screen_06.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_07.png&quot; alt=&quot;taking_on_phoenix_screen_07.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_08.png&quot; alt=&quot;taking_on_phoenix_screen_08.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_09.png&quot; alt=&quot;taking_on_phoenix_screen_09.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_10.png&quot; alt=&quot;taking_on_phoenix_screen_10.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_11.png&quot; alt=&quot;taking_on_phoenix_screen_11.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_12.png&quot; alt=&quot;taking_on_phoenix_screen_12.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_13.png&quot; alt=&quot;taking_on_phoenix_screen_13.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_14.png&quot; alt=&quot;taking_on_phoenix_screen_14.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_15.png&quot; alt=&quot;taking_on_phoenix_screen_15.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_16.png&quot; alt=&quot;taking_on_phoenix_screen_16.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_17.png&quot; alt=&quot;taking_on_phoenix_screen_17.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_18.png&quot; alt=&quot;taking_on_phoenix_screen_18.png&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/taking_on_phoenix_screen_19.png&quot; alt=&quot;taking_on_phoenix_screen_19.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/08/31/learning-phoenix-from-sonny.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/08/31/learning-phoenix-from-sonny.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Klingon Open Source</title>
        <description>
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/humor/2016/08/31/klingon-open-source.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/humor/2016/08/31/klingon-open-source.html</guid>
        
        <category>humor</category>
        
        <category>klingon</category>
        
        <category>open source</category>
        
        
        <category>humor</category>
        
      </item>
    
      <item>
        <title>Hiring and Firing - What If It Doesn&#39;t Work Out?</title>
        <description>&lt;p&gt;So, as I’ve written recently, we’re about to add a 4th employee at my day job, “new guy”.  We have three current employees - 2 founders and myself.  For a variety of reasons you might consider me a lifer i.e. I’m not going anywhere as I have a huge vested interest in the company’s technology stack.&lt;/p&gt;

&lt;p&gt;Whenever you hire someone you have to accept that you might need to fire them or that they might leave.  And in tiny companies there rarely is a process for this so it is always, always a damned &lt;strong&gt;fire drill&lt;/strong&gt;.  Since this guy was my pick and I lobbied hard for him internally, it should also be my responsibility to document the process by which a valued technical employee has moved on for one reason or another.  So here are the steps in today’s technology world that you need to follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Disable access to communications - email, slack.  This is always, always first as departing employees are distracting.&lt;/li&gt;
  &lt;li&gt;Remove from github teams.&lt;/li&gt;
  &lt;li&gt;Disable ssh access to any internal servers.&lt;/li&gt;
  &lt;li&gt;Revoke / disable access to any AWS resources including S3 buckets, pem certificates, etc.&lt;/li&gt;
  &lt;li&gt;Ask them to delete any and all source code, docs, etc from any and all laptops they might have.&lt;/li&gt;
  &lt;li&gt;Get back any and all hardware that they have.&lt;/li&gt;
  &lt;li&gt;Delete them from any web based logins including but not limited to:
    &lt;ul&gt;
      &lt;li&gt;jira&lt;/li&gt;
      &lt;li&gt;trello&lt;/li&gt;
      &lt;li&gt;1password&lt;/li&gt;
      &lt;li&gt;twillio&lt;/li&gt;
      &lt;li&gt;zoom.us&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Remove the person from calendar notifications, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m sure there is something else but, honestly, if you cover 1, 2, 3 and 4 that’s 99% of the overall risk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt;: I am deliberately not covering HR issues.  This is purely “disable access since we no longer trust the person; they are no longer one of us”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt;: Yes if I was starting a new job, seeing this post could be terrifying.  But I’m an honest boss and employer and I’ve been up front with new guy that if he doesn’t match up to the technical credentials he presented, he’s out.  I don’t believe in technical testing for new hires.  I don’t do coding exams; I don’t do white board tests; etc.  I just talk to people and try and suss out a) their degree of nerdiness and b) the degree of cultural fit.  If you tell me you can do something then I’m going to believe you.  And if you’ve deceived me, once its verified that it wasn’t a misunderstanding on my part, then you’re out.  I don’t work with &lt;em&gt;lazy&lt;/em&gt;, &lt;em&gt;dishonest&lt;/em&gt; or &lt;em&gt;incompetent&lt;/em&gt;.  Beyond that let your freak flag fly, it is all good …&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/management/2016/08/31/hiring-and-firing-what-if-it-doesn-t-work-out.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/management/2016/08/31/hiring-and-firing-what-if-it-doesn-t-work-out.html</guid>
        
        <category>firing</category>
        
        <category>hiring</category>
        
        <category>hr</category>
        
        
        <category>management</category>
        
      </item>
    
  </channel>
</rss>
