<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 Jan 2017 04:44:49 -0500</pubDate>
    <lastBuildDate>Fri, 20 Jan 2017 04:44:49 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>My Piggy</title>
        <description>&lt;p&gt;https://killerc.com/&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Jan 2017 04:00:32 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/01/20/my-piggy.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/01/20/my-piggy.html</guid>
        
        
      </item>
    
      <item>
        <title>Hyde Tutorial - Adding Twitter Card Support to Your Jekyll Blog</title>
        <description>&lt;p&gt;https://cards-dev.twitter.com/validator&lt;/p&gt;

&lt;p&gt;ngrok&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Jan 2017 03:59:08 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/01/20/hyde-tutorial-adding-twitter-card-support-to-your-jekyll-blog.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/01/20/hyde-tutorial-adding-twitter-card-support-to-your-jekyll-blog.html</guid>
        
        
      </item>
    
      <item>
        <title>Tmux Mouse Mode Problems Under Linux</title>
        <description>&lt;p&gt;I am in the process of decommissioning a data center I set up about 2 years ago.  This was done in my pre-ansible days when I used Chef to bootstrap all the servers and it only functioned about 90% of the way leaving the final configuration of each server entirely manual.  This has meant that rather than each server being identical to every other server, each one is a unique “snowflake”.  And snowflake servers can really be the bane of your existence at times.&lt;/p&gt;

&lt;p&gt;One box, for example, when you run a Tmux session it mysteriously trashes the mouse and you can’t actually copy some bit of text for pasting it later.  This doesn’t sound all that significant until you are trying to remember a mysqldump statement that is, with all options, about 220 characters long, it is 3:07 am and you find yourself saying “Man this is just the #U$I#U$#I balls”.&lt;/p&gt;

&lt;p&gt;And that’s when you realize that even if you are turning these boxes off in the next 15 minutes it would still be worth fixing immediately.&lt;/p&gt;

&lt;p&gt;The problem was in the file ~/.tmux.conf and it was the presence of these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setw -g mode-mouse on
set -g mouse-select-pane off
set -g mouse-resize-pane off
set -g mouse-select-window off
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To be honest this is a problem that I likely introduced myself - I vaguely remember noodling on this configuration file about 18 months ago and then something blew up.  A quick :wq in VIM and I was off to the next disaster.  And since I didn’t restart tmux entirely (configuration is loaded only on startup), it wasn’t until the box was physically rebooted, long after I had forgotten this particular hell, that the mouse died and I was left scratching my head.  Sigh.&lt;/p&gt;

&lt;p&gt;Had I read it at the time, this &lt;a href=&quot;http://tangledhelix.com/blog/2012/07/16/tmux-and-mouse-mode/&quot;&gt;blog post&lt;/a&gt; might have been useful.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/tmux/2017/01/20/tmux-mouse-mode-problems-under-linux.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/tmux/2017/01/20/tmux-mouse-mode-problems-under-linux.html</guid>
        
        <category>tmux</category>
        
        <category>linux</category>
        
        <category>sys_admin</category>
        
        
        <category>tmux</category>
        
      </item>
    
      <item>
        <title>Building a Real Parser in Ruby Using Parslet</title>
        <description>&lt;p&gt;I deal with “parsing” all the time and I generally do it with one or more regular expressions.  And while I know that JWZ is famous for this statement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.  alt.religion.emacs (lost; recovered) &lt;a href=&quot;https://en.wikiquote.org/wiki/Jamie_Zawinski&quot;&gt;JWZ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Regular expressions provide a uniquely powerful way to deal with day.  What the don’t do well though is handle problems when you arbitrary complexity / recursion in your structure.  Let’s say you are trying to parse:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“name like ‘%Warning%’”&lt;/li&gt;
  &lt;li&gt;“name like ‘%Warning%’ AND name not like ‘%noob%’”&lt;/li&gt;
  &lt;li&gt;“name like ‘%Warning%’ AND name not like ‘%blah%’ AND name like ‘%bar%’”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You see where this is going – I have an arbitrary SQL like syntax and while I could craft a specialized regex which tried to deal with the max cases and then back off, at best that would be a hack.  At worst it would be code that I’d be ashamed to show Mother Johnson and that would be sad.  This calls for – wait for it – a real &lt;strong&gt;parser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And, yes, I am talking about the stuff we all learned in compilers class aka &lt;a href=&quot;https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811&quot;&gt;The Dragon Book&lt;/a&gt;.  If, like me, you didn’t actually take a compilers class then let me explain.  The Dragon Book, for as long as &lt;a href=&quot;https://en.wikipedia.org/wiki/Dragon_Book&quot;&gt;I can remember&lt;/a&gt;, has been the source of how you write compilers, parsers, etc.  Wikipedia cites it back to 1977 and that’s what I mean by “as long as I can remember”.  I know my first startup partner, Brian, used it in college circa 1988 and it has been in constant use, well, forever.&lt;/p&gt;

&lt;p&gt;The stuff taught in the Dragon Book are techniques that either you use constantly because they neatly correspond to how you think or they are things you trot out once a decade or so when the problem is that severe.  In my case I last did this stuff in 1996 when I used it to write an HTML parser in Visual Basic.  That time I did it with a Lex / Yacc / Bison grammar using this &lt;a href=&quot;https://www.amazon.com/lex-yacc-Doug-Brown-ebook/dp/B009THDEBC&quot;&gt;O’Reilly book&lt;/a&gt; to assist me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kschiess.github.io/parslet/images/parsley_logo.png&quot; alt=&quot;http://kschiess.github.io/parslet/images/parsley_logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the beautiful things about computers as a profession is that if you’ve ever done something then there’s a near certainty that it will loop back on you.  This time around I am tackling it with Ruby and the &lt;a href=&quot;https://github.com/kschiess/parslet&quot;&gt;Parslet&lt;/a&gt; gem.  I’ve been following Parslet on the mailing list since at least 2014 because I know just how important parsing is and &lt;a href=&quot;https://github.com/kschiess&quot;&gt;Kaspar Schiess&lt;/a&gt; has done fantastic work on it over the years.&lt;/p&gt;

&lt;p&gt;Developing a parser with a tool like Parslet is not something you can just sit down and hack out.  This isn’t that kind of gem – I know, I tried it that way.  This is a:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;roll up your sleeves&lt;/li&gt;
  &lt;li&gt;watch a video&lt;/li&gt;
  &lt;li&gt;work thru an example&lt;/li&gt;
  &lt;li&gt;scratch your head&lt;/li&gt;
  &lt;li&gt;drink coffee&lt;/li&gt;
  &lt;li&gt;re-watch the video&lt;/li&gt;
  &lt;li&gt;finally get it&lt;/li&gt;
  &lt;li&gt;extend the example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;type of thing.  And that honestly is the exact process I used.  &lt;a href=&quot;http://www.dasari.me&quot;&gt;Dv&lt;/a&gt; and I worked thru it together and we couldn’t make any progress until we sat down and did it this way.  Yes we were able to cobble together a simple grammar but we just couldn’t put all the pieces together without this level of understanding.  But, I can promise you this, once you do actually understand how a tool like Parslet works then it is fundamentally transformative for you.&lt;/p&gt;

&lt;p&gt;In our case we started with Calle Erlandson’s Recursive Descent Parsers talk available on &lt;a href=&quot;https://youtu.be/_F-eh66zw90&quot;&gt;YouTube&lt;/a&gt; and &lt;a href=&quot;https://github.com/calleerlandsson/recursive-descent-parsers-talk&quot;&gt;github&lt;/a&gt;.  This is a fantastic video where he walks you through the development of an infix parser for a calculator i.e. “3 + 4 * 2” should be give a result if 11 (8 + 3) because you have to evaluate it mathematically not left to right.  Here is my repository where Dv and I extended Calle’s example to include &lt;a href=&quot;https://github.com/fuzzygroup/recursive-descent-parsers-talk&quot;&gt;division&lt;/a&gt;.  Yes I even sent a pull request over to him to perhaps get division into the master.&lt;/p&gt;

&lt;p&gt;I know I wrote a lot of words and didn’t even talk about parsing SQL like expressions.  That’s because priorities got shifted and, just after getting ourselves ready to tackle the real project, it was a case of “And now please do this instead”.  Sigh.  I’m sure I’ll come back to this topic but really do watch the video – it is fantastic.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/ruby/2017/01/20/building-a-real-parser-in-ruby-using-parslet.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ruby/2017/01/20/building-a-real-parser-in-ruby-using-parslet.html</guid>
        
        <category>ruby</category>
        
        <category>parsing</category>
        
        <category>software_engineering</category>
        
        <category>parslet</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Startup Learnings - What Hong Lai Taught Me</title>
        <description>&lt;p&gt;/blog/assets/hong_lai.png&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 12:04:38 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/01/18/startup-learnings-what-hong-lai-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/01/18/startup-learnings-what-hong-lai-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Building Hyde 01 - Understanding Twitter Tags</title>
        <description>&lt;p&gt;https://alligator.io/jekyll/twitter-cards/&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 11:44:54 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/01/18/building-hyde-01-understanding-twitter-tags.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/01/18/building-hyde-01-understanding-twitter-tags.html</guid>
        
        
      </item>
    
      <item>
        <title>Why I Didn't Look at Phusion's Union Station But You Should</title>
        <description>&lt;p&gt;Of all the companies that populate the Ruby and Rails world, I think my absolute favorite is &lt;a href=&quot;http://www.phusion.nl&quot;&gt;Phusion&lt;/a&gt;.  I was early into the Rails space – 2007 so I date back to the days of Mongrel based rails installations and when &lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Passenger&lt;/a&gt; from Phusion came out, it was a revelation.  Running a rails application went from a “How the F do I do this” to “I’ll use Passenger and it will just work”.  And Hong Lai is to me a stellar example of how to support an Open Source product.  I cannot say how many times I’ve been researching something and, damn, there’s Hong Lai answering stuff.  The man is a damn machine and I mean that in the very best of ways.  Once upon a time I was a Ruby Enterprise Edition customer for Passenger and other times I’ve been a paid support customer.  And it is all because of the quality of Passenger and the tireless work of Hong Lai.  Every single time I go to deploy a Rails app, I reach for Passenger – it is just that good.&lt;/p&gt;

&lt;p&gt;Phusion has a new product, &lt;a href=&quot;https://www.unionstationapp.com/&quot;&gt;Union Station&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.unionstationapp.com/images/dashboard.png&quot; alt=&quot;https://www.unionstationapp.com/images/dashboard.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Stock image; I never got it running for my apps; alas.)&lt;/p&gt;

&lt;p&gt;And it is squarely in my sweet spot of tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For ruby / rails&lt;/li&gt;
  &lt;li&gt;Deals with performance / scalability&lt;/li&gt;
  &lt;li&gt;Is NOT New Relic&lt;/li&gt;
  &lt;li&gt;Is priced reasonably / rationally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately I am unlikely to look at Union Station and there is a lesson here about &lt;strong&gt;software marketing&lt;/strong&gt; that I think is illustrative.  The first thing to understand is that the person handling my account, &lt;strong&gt;Tinco&lt;/strong&gt;, has been absolutely excellent - he has been helpful, timely and I can’t say anything bad about him as a sales person – which rare for me.  The problem here is that Phusion wants me to make a decision with only 1 to 2 weeks of time.  This is a product that I’m going to need to evaluate at a pretty deep level to make a buying decision and I refuse to rush that kind of thing.  Even just understanding performance tools is hard and takes quite a bit of time.  What happened to me is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I requested the evaluation when I had free time to deal with it&lt;/li&gt;
  &lt;li&gt;There was some kind of glitch where my account wouldn’t activate&lt;/li&gt;
  &lt;li&gt;By the time my account was fixed, there was some other higher priority problem that I had to deal with&lt;/li&gt;
  &lt;li&gt;Now that I have the time, my account is expired&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My problem is with time limited evaluations in general – people these days are &lt;strong&gt;busy&lt;/strong&gt;.  And time limited evaluations, particularly for complex products, are hard to get around to.  This is particularly true for a product where real data needs to be gathered and you might not have an immediate use case for it.  In our case we do intensive processing under Passenger only about once per month.  So with a week long evaluation period, the timing just didn’t work out.&lt;/p&gt;

&lt;p&gt;Yes I can ask for more time and I’m sure that Tinco would grant it; that’s not the point.  This is a general problem with selling complex products to busy people with limited time; I don’t think I’m alone in this.&lt;/p&gt;

&lt;p&gt;Now, with all that said, companies do need to close sales leads – I get that.  I don’t know if there is a solution to this problem.  My personal preference would be usage based or capacity based i.e. I’d like to be able to install Union Station and use it for say 100 times in order to make a decision but that, while good for me, is directly against their interests.&lt;/p&gt;

&lt;p&gt;Overall I’m impressed with Union Station and I suspect if you’re in the Rails space you should look at it.  The pricing model looks particularly rational which, having been burned by New Relic in years past, appeals to me.  Personally I’m going to wait until I have a more pressing front end project in mind but that’s coming up soon for me.&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/01/18/why-i-didn-t-look-at-phusion-s-union-station-but-you-should.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/01/18/why-i-didn-t-look-at-phusion-s-union-station-but-you-should.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>startup</category>
        
        <category>marketing</category>
        
        <category>oobe</category>
        
        <category>hyde</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Nylas Mail Review</title>
        <description>&lt;p&gt;Nylas N1 is a new email client that has just been released as free and open source.  And, as a piece of software, it is also actually &lt;strong&gt;good&lt;/strong&gt;.  Among people that know me in the real world, I am notorious for handling personal email poorly if at all and I actually used it for quite a while last night.  Now that’s a great sign for a new app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas.png&quot; alt=&quot;nylas.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;overall&quot;&gt;Overall&lt;/h1&gt;

&lt;p&gt;I actually &lt;strong&gt;really like&lt;/strong&gt; this application and I’m intending to use it to see if perhaps, in 2017, I can put on my big boy pants and deal with email as a professional (i.e. daily). The fact that it works for OSX, Windows and Linux is a huge, huge win.  The UI is impressively good and they’ve open sourced it which means that it has potential to get better – fast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I just tried to install it under Linux and its apparently not fully read yet.  Alas, sigh.&lt;/p&gt;

&lt;p&gt;There is some impressively good thinking here&lt;/p&gt;

&lt;p&gt;Now, that said, I’m still impressed.  I’ll be even more impressed when I can run it on my wide screen Linux desktop with 32 gigs of memory.&lt;/p&gt;

&lt;p&gt;Kudos to the good folks at Nylas and &lt;strong&gt;&lt;em&gt;Thank You&lt;/em&gt;&lt;/strong&gt; – you just made not only the personal computing world a little bit richer but also the open source world.&lt;/p&gt;

&lt;h1 id=&quot;the-bad---memory-usage&quot;&gt;The Bad - Memory Usage&lt;/h1&gt;

&lt;p&gt;Nylas is an Electron app and that means that memory consumption is going to be an issue.  Now I’m old school – &lt;a href=&quot;https://en.wikipedia.org/wiki/TRS-80&quot;&gt;my first computer&lt;/a&gt; had 4K in it and I’ve known people who owned things like the &lt;a href=&quot;https://en.wikipedia.org/wiki/KIM-1&quot;&gt;KIM-1&lt;/a&gt;.  Sure I moved it to 48K as soon as I could but I started small.  That’s why when I see an application like Nylas and how it uses memory it makes me want to &lt;a href=&quot;https://www.youtube.com/watch?v=SZGEiz2cpEw&quot;&gt;weep and then die&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the memory usage after I had used it for about a half hour, 979 megs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_memory_12_hours_earlier.png&quot; alt=&quot;nylas_memory_12_hours_earlier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an additional test I left Nylas running all night long and the next morning it had eaten another 100 megs of RAM:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_memory_12_hours_earlier.png&quot; alt=&quot;nylas_memory_12_hours_earlier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is important to understand that this isn’t all that different from Slack which clocked in at 1.68 gigs.  Here’s my Slack memory usage after multiple days up and running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/slack_after_multiple_days.png&quot; alt=&quot;slack_after_multiple_days.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;

&lt;p&gt;As I write this, I’m seeing very bad performance which is surprising because last night it was actually pretty peppy.  My guess is that with a release yesterday the backend servers which drive Nylas are likely under heavy load right now so even thought my second time experience isn’t all that great, I’m going to give Nylas a pass on performance right now.&lt;/p&gt;

&lt;h1 id=&quot;the-bad---ui-glitches&quot;&gt;The Bad - UI Glitches&lt;/h1&gt;

&lt;p&gt;Note: I mostly reviewed Nylas using the two panel theme.  Some of the problems I experienced you might not see at all if you use the one panel theme.&lt;/p&gt;

&lt;p&gt;I did notice a few screen related UI rendering glitches around selection of non-contiguous mails in a list view.  Here’s an example (5 selected but only 2 shown as selected).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_selection_problems.png&quot; alt=&quot;nylas_selection_problems.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the key Nylas features is the ability to display contextual information related to the emailer and that’s excellent but the app really calls for a very portait style, wide screen monitor.  I’ve seen it get to point where the contextual information was clipping off the right hand side of the message.  Here’s a screenshot that shows this experience but not the clipping:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/nylas_clipping.png&quot; alt=&quot;nylas_clipping.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One very real concern that I have is that the Send button is way at the bottom of the screen so if you have a long email there’s a lot of scrolling just to say “Ok” or “Can we reschedule?”.&lt;/p&gt;

&lt;p&gt;Some smaller things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I have Choosy installed on OSX which is supposed to intercept calls to Safari and let you pick which browser to open links in.  Nylas somehow gets around this and launches Safari even though I have 3 other browsers open.  Sigh.&lt;/li&gt;
  &lt;li&gt;I have scroll bars set to always be displayed and Nylas doesn’t respect that.  So I have to click into a content region just to get a scroll bar to scroll.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/email/2017/01/18/nylas-mail-review.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/email/2017/01/18/nylas-mail-review.html</guid>
        
        <category>email</category>
        
        <category>nylas</category>
        
        <category>slack</category>
        
        
        <category>email</category>
        
      </item>
    
      <item>
        <title>Work Life Balance - When Did This Become Acceptable?</title>
        <description>&lt;p&gt;Once upon a time, not so long ago, I had to say to someone who reports to me this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey.  Bob (my manager) asked me to tell you that you should start reading up on Ansible in your off hours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What.  The.  Hell.  When did our work life balance get so out of whack that our managers now don’t see anything wrong with telling us WHAT TO READ WHEN WE AREN’T AT WORK???&lt;/p&gt;

&lt;p&gt;I cannot remember the last time I’ve felt as morally dirty and compromised as I did in that moment.  As a full time employee, which this person was, he is expected to work 40 hours per week.  If a new skill is &lt;strong&gt;required&lt;/strong&gt; for his job then shouldn’t he get to pick it up on the job?  Sheesh.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 17:04:28 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/work/2017/01/17/work-life-balance-when-did-this-become-acceptable.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/work/2017/01/17/work-life-balance-when-did-this-become-acceptable.html</guid>
        
        <category>feels_slimy</category>
        
        <category>work_life_balance  </category>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>SED Example - The Swiss Army Chainsaw of Text Changes</title>
        <description>&lt;p&gt;The unix command line tool sed is one of those things that you don’t know you need – until you need it worse than anything in the whole damn world and then nothing else does what sed does.  sed which I’m pretty sure is short for streaming editor is a tool which does an edit on a file via regular expressions without actually opening the file in an interactive fashion.  This means that you can edit, oh say a 100 meg file, and do it &lt;strong&gt;fast&lt;/strong&gt;.  In years past I used sed for surgery on large MySQL dump files but I haven’t touched it since 2003 when I lived in Newton, Massachusetts back the old blogging days.&lt;/p&gt;

&lt;p&gt;My buddy &lt;a href=&quot;http://www.nickjanetakis.com/&quot;&gt;Nick&lt;/a&gt; and I were pairing today and we had to update a Sphinx Search config file.  I stumbled over the vim search and replace syntax and he was like here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sed -ie 's/old/new/g' hello.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and with that one example I knocked it out in nothing flat.  What this example does is search for the regex &lt;em&gt;old&lt;/em&gt; and replace it with &lt;em&gt;new&lt;/em&gt; and do it globally in the file hello.txt.&lt;/p&gt;

&lt;p&gt;Here’s a good tutorial on &lt;a href=&quot;http://www.grymoire.com/Unix/Sed.html&quot;&gt;sed&lt;/a&gt;.  Recommended.  Thanks Nick!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 16:24:23 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/text_processing/2017/01/17/sed-example-the-swiss-army-chainsaw-of-text-changes.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/text_processing/2017/01/17/sed-example-the-swiss-army-chainsaw-of-text-changes.html</guid>
        
        <category>sed</category>
        
        
        <category>text_processing</category>
        
      </item>
    
  </channel>
</rss>
