<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 Feb 2017 17:17:12 -0500</pubDate>
    <lastBuildDate>Fri, 03 Feb 2017 17:17:12 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Ten Tips to Surviving the Whole 30</title>
        <description>&lt;ol&gt;
  &lt;li&gt;Cocktail Replacement&lt;/li&gt;
  &lt;li&gt;Better Quality Proteins&lt;/li&gt;
  &lt;li&gt;Be Adventurus&lt;/li&gt;
  &lt;li&gt;Crunch Means Tera Chip Time!&lt;/li&gt;
  &lt;li&gt;Eat Your Own Meal Before the Pizza Arrives&lt;/li&gt;
  &lt;li&gt;Come Up With Sweets That Work for You&lt;/li&gt;
  &lt;li&gt;Consider Pairing it with Zero&lt;/li&gt;
  &lt;li&gt;Their Recipes Don’t Always Work&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;Bear In Mind Its a Diet Not a Religion&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 16:32:36 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/03/surviving-the-whole-30.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/03/surviving-the-whole-30.html</guid>
        
        
      </item>
    
      <item>
        <title>Troubleshooting Rails with Passenger and Apache2</title>
        <description>&lt;p&gt;passenger-status&lt;/p&gt;

&lt;p&gt;passenger-status –show=requests&lt;/p&gt;

&lt;p&gt;passenger-memory-stats&lt;/p&gt;

&lt;p&gt;sudo apt-get update&lt;/p&gt;

&lt;p&gt;sudo apt-get upgrade&lt;/p&gt;

&lt;p&gt;https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/aws/apache/oss/trusty/install_passenger.html&lt;/p&gt;

&lt;p&gt;I’m going to make a pretty strong, very general statement about Passenger based on using it for almost a decade:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you find something wrong, it is generally you, not Passenger.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 14:39:02 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/03/troubleshooting-rails-with-passenger-and-apache2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/03/troubleshooting-rails-with-passenger-and-apache2.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux Tip Of The Day - Using rsync for Backup</title>
        <description>&lt;p&gt;Once upon a time when I had complex file copying to handle, I used xcopy.  It has been a lot of years since DOS and xcopy and as of late, I reach for rsync.  Yesterday I had the situation where I wanted to make a command line which would take the contents of two drives and backup from drive A to drive B – full copy.  It was enough files that, well, I just wouldn’t trust any gui operation with it (hundreds of gigs if not a terabyte).&lt;/p&gt;

&lt;p&gt;This is a problem that I’ve tried before and actually failed at so I grabbed &lt;a href=&quot;http://www.nickjanetakis.com/blog/&quot;&gt;Nick&lt;/a&gt; via &lt;a href=&quot;http://hangouts.google.com/&quot;&gt;Google Hangouts&lt;/a&gt; and he and I whipped it together easily.  We started with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rsync –help&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then we went thru the options one by one.  I’ve given the example with the long form versions of the arguments so it is a little bit more understandable:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rsync –archive –recursive –inplace –progress /Volumes/Plex/ /Volumes/PlexBackup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I normally don’t intersect Ruby and Linux Tip of the Day but I just used this and it is really, really useful. The rvm or Ruby Version Manager tool manages your installed rubies makes ruby development, well, just plain easier.&lt;/p&gt;

&lt;p&gt;To install rvm on Linux, use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
sudo \curl -sSL https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To install on OSX, you can use the commands above but generally omit the sudo (depending on your system).&lt;/p&gt;

&lt;p&gt;A real problem with RVM is you often don’t know what Ruby you’re going to get when you start a new terminal window.  You can solve this with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm --default use 2.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can find your available rubies with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm list rubies
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then use one of the installed rubies as the argument to rvm –default use.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Feb 2017 12:13:17 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/linux/2017/02/03/linux-tip-of-the-day-using-rsync-for-backup.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/linux/2017/02/03/linux-tip-of-the-day-using-rsync-for-backup.html</guid>
        
        <category>linux</category>
        
        <category>sysadmin</category>
        
        <category>devops</category>
        
        <category>backup</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Redirecting HTTP to HTTPS with AWS and ELB</title>
        <description>&lt;p style=&quot;text-align:center&quot;&gt;A Tale of Four Redirects&lt;/p&gt;

&lt;p&gt;Every technologist worth his or her salt has an internal list of “most hated technologies”.  These are the things that no matter what they do always, always give them trouble.  Whether its because the technology in question is actually hard, a mental block or just plain ‘ol bad luck, we all have them.  For me it is always, always &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;mod_rewrite&lt;/a&gt;.  &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache’s&lt;/a&gt; mod_rewrite is just plain magic – when it works (and it can always be made to work), it does in place url transformations that let you change your entire technology stack but let Google keep on serving those old urls.  It really is outstanding.  But Great Ghu does it ever give me trouble at times.&lt;/p&gt;

&lt;p&gt;Note: For a basic tutorial on mod_rewrite, please see this &lt;a href=&quot;apache2-and-mod-rewrite.html&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The situation in question was that I had a client with Rails being served by Apache / &lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Passenger&lt;/a&gt; (my very &lt;strong&gt;favorite&lt;/strong&gt; Rails deployment tool) and the client wanted, correctly, to convert all http based url requests to https.  Here’s the transition of the redirects one by one.&lt;/p&gt;

&lt;h1 id=&quot;important---remove-allowoverride-all-from-your-apache-conf-file&quot;&gt;Important - Remove AllowOverride all from Your Apache Conf File&lt;/h1&gt;

&lt;p&gt;I can’t stress this enough.  The Apache directive &lt;strong&gt;AllowOverride all&lt;/strong&gt; means that redirects will not work.  Honestly I don’t even understand what AllowOverride all even does but I did confirm, experimentally, that if you have this, redirects simply will not work.  So make sure that you’ve got this turned off.&lt;/p&gt;

&lt;h1 id=&quot;redirect-1&quot;&gt;Redirect 1&lt;/h1&gt;

&lt;p&gt;Here was my first attempt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would actually work but our Apache isn’t actually serving https at all.  When you use an AWS ELB (Elastic Load Balancer) in conjunction with the ACM (AWS Certificate Manager) then your web server talks http on port 80 and the ELB acts as an intermediary translating it to and from https.  If you’re lucky with this redirect then your site may, possibly work.  If you’re unlucky then you’ll get stuck in an infinite loop of http to https to http and so on.  &lt;a href=&quot;http://stackoverflow.com/questions/16200501/http-to-https-apache-redirection&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;redirect-2&quot;&gt;Redirect 2&lt;/h1&gt;

&lt;p&gt;My second attempt actually came straight from the &lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/redirect-http-https-elb/&quot;&gt;AWS docs&lt;/a&gt; and it is &lt;strong&gt;flat out wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine On
RewriteCond %{HTTP:X-Forwarded-Proto} =http
RewriteRule . https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem here is that the 301 redirect which this is generating causes the ELB health check to go poorly and your site is declared offline at which point no traffic gets to it.  This can be very annoying to troubleshoot but you should watch for back end not available messages.&lt;/p&gt;

&lt;h1 id=&quot;redirect-3&quot;&gt;Redirect 3&lt;/h1&gt;

&lt;p&gt;On an &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?messageID=745509&quot;&gt;AWS forum thread&lt;/a&gt; I found this redirect which an AWS engineer contributed and claimed would work.  Again it is &lt;strong&gt;flat out wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine on
RewriteCond %{HTTP:X-Forwarded-Proto} !https
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This causes the same health check problem as #2.&lt;/p&gt;

&lt;h1 id=&quot;redirect-4---the-working-one&quot;&gt;Redirect 4 - The Working One&lt;/h1&gt;

&lt;p&gt;If you read support forum threads &lt;em&gt;closely&lt;/em&gt; and &lt;strong&gt;well&lt;/strong&gt; then you often, always near the end, find the right answer.  Here’s the redirect that worked for me:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# the final correct redirect
RewriteEngine on
RewriteCond %{HTTP:X-Forwarded-Proto} ^http$
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is from the same thread above (#3).  You’ll notice that #2, #3 and #4 all rely on the HTTP:X-Forwarded-Proto http header feature - this prevents problems with the ELB.  The description that the author gave is interesting:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Apache block (#2) above caused our ELB health check to fail from the HTTP 301 response. To allow this and other local requests over HTTP while redirecting external requests through the ELB to HTTPS, adjust the rewrite condition to match on http instead of a negative match on https:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This solution was contributed by &lt;a href=&quot;https://forums.aws.amazon.com/profile.jspa?userID=342382&quot;&gt;holeinonenv&lt;/a&gt; and, sir, I owe you a beer.  Thank you for your help. It is the only thing he’s ever posted on the AWS forums and man am I glad he posted it.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/02/03/redirecting-http-to-https-with-aws-and-elb.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/02/03/redirecting-http-to-https-with-aws-and-elb.html</guid>
        
        <category>aws</category>
        
        <category>apache</category>
        
        <category>elb</category>
        
        <category>http</category>
        
        <category>https</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Apache2 and Mod Rewrite and Automatic Redirect to https</title>
        <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you’re using AWS and an Elastic Load Balancer (ELB) this is actually tricky and will not work.  I documented that process in my &lt;a href=&quot;http://fuzzyblog.io/blog/aws/2017/02/03/redirecting-http-to-https-with-aws-and-elb.html&quot;&gt;AWS Redirection&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You’ll need to use sudo for almost all the commands here.  Keep that in mind.&lt;/p&gt;

&lt;p&gt;With Lets Encrypt making https actually free for the first time, there is a greater desire to use SSL than there used to be.  This blog post explains how to enable / disable the mod_rewrite aspect of Apache and also defines a simple rule for transforming all inbound requests to https from http:&lt;/p&gt;

&lt;p&gt;To enable mod_rewrite:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a2enmod rewrite&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;http://stackoverflow.com/questions/869092/how-to-enable-mod-rewrite-for-apache-2-2&quot;&gt;Stack Overflow on enabling mod_rewrite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To disable mod_rewrite:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a2dismod rewrite&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The a2dismod is something I’ve never seen before.  Thanks to &lt;a href=&quot;http://james.lin.net.nz/2010/07/28/ubuntu-apache-enabledisable-modrewrite/&quot;&gt;James Lin&lt;/a&gt; who wrote about it on his blog.&lt;/p&gt;

&lt;p&gt;A simple rule to transform http to https:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;http://stackoverflow.com/questions/16200501/http-to-https-apache-redirection&quot;&gt;Stack Overflow&lt;/a&gt; where I got this redirect from.&lt;/p&gt;

&lt;p&gt;That needs to go into your vhost configuration.  After that you need to restart apache:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;service apache2 restart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I can’t stress this enough. The Apache directive AllowOverride all means that redirects will not work. Honestly I don’t even understand what AllowOverride all even does but I did confirm, experimentally, that if you have this, redirects simply will not work. So make sure that you’ve got this turned off.&lt;/p&gt;

&lt;p&gt;To test your side after, assuming url foo.bar.com:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;wget https://foo.bar.com/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-or-&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;curl -v http://foo.bar.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;http://stackoverflow.com/questions/3252851/how-to-display-request-headers-with-command-line-curl&quot;&gt;Stack Overflow&lt;/a&gt; on curl and request headers that was helpful.&lt;/p&gt;

&lt;p&gt;I always &lt;strong&gt;strongly recommend&lt;/strong&gt; testing this kind of change with wget or curl because then you actually see the http header values.  Here’s an example showing the http to https auto redirect with wget:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://foo.bar.com/
--2017-02-03 15:06:25--  http://foo.bar.com/
Resolving foo.bar.com... 23.23.164.47, 54.225.218.129, 2406:da00:ff00::36e1:da81, ...
Connecting to foo.bar.com|23.23.164.47|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
**Location: https://foo.bar.com/ [following]**
--2017-02-03 15:06:25--  https://foo.bar.com/
Connecting to foo.bar.com|23.23.164.47|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2083 (2.0K) [text/html]
Saving to: 'index.html.12'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 00:00:00 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/apache/2017/02/03/apache2-and-mod-rewrite.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/apache/2017/02/03/apache2-and-mod-rewrite.html</guid>
        
        <category>apache</category>
        
        <category>mod_rewrite</category>
        
        
        <category>apache</category>
        
      </item>
    
      <item>
        <title>Twitter Cards and Images</title>
        <description>&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 02 Feb 2017 06:56:08 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/02/twitter-cards-and-images.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/02/twitter-cards-and-images.html</guid>
        
        
      </item>
    
      <item>
        <title>Software Engineering Guidelines Other People Taught Me</title>
        <description>&lt;p&gt;Engineering Guidelines&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plan units of work that you can accomplish in a given time span&lt;/li&gt;
  &lt;li&gt;End on success&lt;/li&gt;
  &lt;li&gt;Never leave big chunks of work overnight or worse on a weekend&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Feb 2017 06:55:47 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/02/software-engineering-guidelines-other-people-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/02/software-engineering-guidelines-other-people-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Succeeding with a SAAS Product</title>
        <description>&lt;p&gt;Same as always: take a complicated, expensive product, strip it down to an MVP, put it online for free with a SaaS price tag for premium features, and market it like hell.&lt;/p&gt;

&lt;p&gt;(find the source on HN)&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Feb 2017 06:52:05 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/02/succeeding-with-a-saas-product.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/02/succeeding-with-a-saas-product.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Provide Great Technical Support</title>
        <description>&lt;p&gt;Dave Bortone knew this&lt;/p&gt;

&lt;p&gt;Doing technical support is not a complicated thing.  Even doing technical support well is not complicated.  At its core technical support amounts to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Listen to the customer’s needs.&lt;/li&gt;
  &lt;li&gt;Help the customer with their problem.&lt;/li&gt;
  &lt;li&gt;Be accessible.&lt;/li&gt;
  &lt;li&gt;Don’t be a jerk&lt;/li&gt;
  &lt;li&gt;Don’t make the customer feel stupid.&lt;/li&gt;
  &lt;li&gt;Admit when you get it wrong.  When you support a complex product then, inevitably, you will get it wrong at some point.&lt;/li&gt;
  &lt;li&gt;Have examples and things in writing to give to the customer when they really need it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;During the course of the Interania project, Neal and I had the experience of interacting directly with both Lithium and MindTouch support and despite both companies supporting the same thing, SAML access to their product, the experiences could not have been more different:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our experience with MindTouch was so overwhelmingly positive that I emailed our support technician’s boss and the subject line was “You Have an Outstanding Staffer in ScottG”.&lt;/li&gt;
  &lt;li&gt;In all my years in this industry, I have never had a more frustrating experience with support than Lithium.  After about half the interactions with Lithium, I’d get off the phone and curse a blue streak and be angry for about an hour or more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;interacting-with-lithium&quot;&gt;Interacting with Lithium&lt;/h1&gt;

&lt;p&gt;We had two points of contact with Lithium:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Colleen&lt;/li&gt;
  &lt;li&gt;Vicky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Colleen was the overall project manager and I’m going to leave the discussion of Colleen’s issues to Neal.  Suffice it to say that I am not a fan of hers.&lt;/p&gt;

&lt;p&gt;Vicky was our technical contact and I believe his role was as implementation manager or technical expert.  Here are the problems that we experienced with Vicky:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;No Adhoc Accessibility&lt;/strong&gt;.  Every single interaction with Vicky had to be scheduled and planned in advance.  He simply wasn’t someone would could be called for support.  Often times this would mean that we couldn’t interact with him for more than a day which makes debugging a complex system hard.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t be a Jerk&lt;/strong&gt;.  At different points in my career I’ve had direct responsibility for managing customer support including hiring and training support technicians.  One of the thing things I always used to emphasize to them is that this is a customer service position and while you know more than the customer with respect to our product, you don’t actually know more than the customer in general.  In general I used to sum up how to interact with customer as “Don’t be a Jerk”.  This is not a lesson that anyone ever taught Vicky because now, even more than a month after I last interacted with him, I’m still angry at him (and Lithium).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t Make the Customer Feel Stupid&lt;/strong&gt;.  Going right along with don’t be a jerk is don’t make the customer feel stupid and this is one that Vicky violated with in spades.  Given that a support technician always knows more about the product then the customer, it is very easy for a support technician to act superior and Vicky certainly did that.  Having looked up Vicky’s credentials on LinkedIn, I can certainly attest to Vicky being a smart guy but there’s no need to bolster your own ego by making someone else feel like crap when they make a mistake.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;He Never Admitted When He Got It Wrong&lt;/strong&gt;. I am always the first person to admit when I get something wrong and there were times in this project when I did get things wrong.  This was a complex project and we had two vendors with the opposite approach to the same technology which always leads to problems.  Now in the course of interacting with Vicky when I got something wrong I handled it correctly and a) apologies and b) admitted it.  Now, if I had been the only person who got things completely wrong, that would have been fine but Vicky was also absolutely technically wrong on at least 2 if not three occasions.  These were cases where he told me to do X and it was entirely unambiguous.  On these occasions where he got it wrong thus wasting both my time, Neal’s time and the time that we were paying them for support, he failed to ever admit it, take responsibility for it or apologize.  Even when I specifically called him out on this he would just brush it aside and fail to address it.  I understand that no one wants to be wrong but when you are then &lt;em&gt;own it&lt;/em&gt; and &lt;em&gt;learn from it&lt;/em&gt;.  Vicky did not and would not.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nothing in Writing&lt;/strong&gt;.  One of the things that I think affected our entire Lithium SSO implementation was that there wasn’t anything in writing after the initial presentation that Colleen gave us (and she did do a good job on that).  For example once we were ready to go live it was very unclear how that happened so I specifically asked Vicky for something in writing to guide us through the process.  It didn’t have to be much – even an email that enumerated the steps would have been fine.  Nothing was ever forth coming.  I suspect that Lithium themselves actually do not have a lot of SSO experience and this cannot really write this down in a cohesive fashion.  There were a number of very complex aspects to our integration that should have been clearly documented that were not.  Things like how data ownership works when you use SSO had to be figured out by trial and error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Working with Lithium was enormously frustrating and much of the blame goes straight back to Vicky.  He is technically very smart but he lacks the people skills that make working with a customer an experience where the customer doesn’t want to reach through the screen and throttle him. Overall Lithium needs to put a lot of work into the customer service portion of their business.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Feb 2017 06:44:03 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/02/how-to-provide-great-technical-support.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/02/how-to-provide-great-technical-support.html</guid>
        
        
      </item>
    
      <item>
        <title>Thoughts on Using Windows in 2017</title>
        <description>&lt;p&gt;I use Windows daily in my job. It has come a long way from the consumer/business driven PITA it was years ago. The issues are pretty simple: I don’t trust Microsoft to not screw me over a few years down the line, and I don’t like the in your face consumerism of every aspect of the OS.
I literally had to spend an hour removing every POS adware app installed by the OEM, then I still have to put up with notices from M$ asking me to buy their stuff, even though I don’t use their software for anything. And there’s the virus software, which are all installed by two or three different people and all of which are asking me everyday to buy their stuff.
It’s nice that they’ve moved devs out of the ghetto and I admire the work people have put in to make sure we have nice things again. But I still will be at best lukewarm to anything from M$.&lt;/p&gt;

&lt;p&gt;https://news.ycombinator.com/item?id=13517288&lt;/p&gt;

&lt;p&gt;https://news.ycombinator.com/item?id=13515962&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Feb 2017 06:35:05 -0500</pubDate>
        <link>http://fuzzyblog.io//blog/2017/02/02/thoughts-on-using-windows-in-2017.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/02/02/thoughts-on-using-windows-in-2017.html</guid>
        
        
      </item>
    
  </channel>
</rss>
