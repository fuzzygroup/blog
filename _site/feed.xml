<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Dec 2016 09:58:33 -0500</pubDate>
    <lastBuildDate>Thu, 08 Dec 2016 09:58:33 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>AWS Tutorial - Using Squid, EC2 and ELB to Defeat Crawling Blockages</title>
        <description>&lt;p&gt;I write crawlers.  I have crawlers for years.  And I &lt;strong&gt;hate&lt;/strong&gt; beyond &lt;strong&gt;hate&lt;/strong&gt; when companies throw up roadblocks to defeat crawlers.  As a general rule of thumb the big Internet companies tend to be the worst at this – they, who shall be unnamed, love information to be “free” but they hate like hell to themselves be indexed.&lt;/p&gt;

&lt;p&gt;Well, in the age of the cloud, crawling blockages can be really, really easy to defeat.  In this tutorial I’m going to show you how.&lt;/p&gt;

&lt;h1 id=&quot;proxying&quot;&gt;Proxying&lt;/h1&gt;

&lt;p&gt;The core technology to defeat blockages is simple – you use a proxy server.  Let’s say that you have a server on this ip address:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;24.36.48.19
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If someone wants to block your crawler all they need to do is place a block on that ip address by any number of means - code, router level, firewall level, etc and your code can’t actually access the data.  A proxy server sits in between your code and the data you want to access.  Here’s a ruby example using Mechanize:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;agent = Mechanize.new
url = &quot;http://www.google.com/&quot;
proxy_server_url = &quot;proxy.foo.com&quot;
proxy_server_port = 3199    
agent.set_proxy(proxy_server_url, proxy_server_port)
page = agent.get(url)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That will cause the request to be through the proxy server and NOT from your actual server.  Given that a proxy server can be blocked as easily as your actual server this may not seem all that significant – but think of this in terms of a cloud computing environment like AWS:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In aws you can create instances trivially with tools like ansible&lt;/li&gt;
  &lt;li&gt;In aws you can automatically / automagically install a full featured proxy server like squid with one command&lt;/li&gt;
  &lt;li&gt;In aws you can front end a cluster of proxy server instances behind an elastic load balancer allowing your software to simply access the load balancer and then the proxy servers can be dynamically replaced either when they are blocked or perhaps proactively every single day&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;squid&quot;&gt;Squid&lt;/h1&gt;

&lt;p&gt;Squid is the proxy server we’re going to be using.  Squid is an old school Internet tool – I remember experimenting with it back in maybe 2002 although that seems impossible but it actually isn’t since it is cited in papers going back to &lt;a href=&quot;https://en.wikipedia.org/wiki/Squid_(software)&quot;&gt;1995&lt;/a&gt;.  We’re going to need to use the 3.5 or later version of Squid since we need support for what is called ProxyPass which is what lets a proxy transaction travel through a load balancer.&lt;/p&gt;

&lt;p&gt;If you’re uncertain about the installed version of Squid then run this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/sbin/squid -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://mamchenkov.net/wordpress/2004/03/23/how-to-check-squid-proxy-server-version-on-a-linux-system/&quot;&gt;Mamchenkov&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Troubleshooting an ELB in Front of an EC2 Running Squid&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the proxy programmatically using proxy protocoal&lt;/li&gt;
  &lt;li&gt;Squid has to be 3.5 or later&lt;/li&gt;
  &lt;li&gt;Make sure that the ec2 has the proxy port open in its security group&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ec2 has a sec group
lb has a security group&lt;/p&gt;

&lt;p&gt;make sure the ports are sync’d&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;We’re going to need the following architecture bits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an elastic load balancer&lt;/li&gt;
  &lt;li&gt;1 or more EC2 instances that run squid&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ansibling-this-all-together&quot;&gt;Ansibling This All Together&lt;/h1&gt;

&lt;h1 id=&quot;be-careful---bandwidth-bills-are-real&quot;&gt;Be Careful - Bandwidth Bills Are Real&lt;/h1&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 09:58:32 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/12/08/aws-tutorial-using-squid-ec2-and-elb-to-defeat-crawling-blockages.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/12/08/aws-tutorial-using-squid-ec2-and-elb-to-defeat-crawling-blockages.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails Commando - Parachuting into a Rails Code Base and Adding Value from Day 1</title>
        <description>&lt;p&gt;In 2009, 2 weeks before Christmas, with no notice, I and the rest of the eduFire startup were laid off with no notice, no severance and no benefits save, I believe, some small level of legally required COBRA.  My role was VP of Engineering and I held stock options on 10% of the company.  It was a mind-blowing level of &lt;strong&gt;suck&lt;/strong&gt; and one that I doubt I’ll ever forgive the &lt;a href=&quot;https://www.linkedin.com/in/jonbischke&quot;&gt;founder&lt;/a&gt; for – classless in every single way.  I think it was also the last time I’ve trusted an organization.&lt;/p&gt;

&lt;p&gt;Now I’m a firm believer that there are good times and there are bad and while 2009 was the heights of suck, it launched me down the path of “make lots and lots of money from consulting” and that’s been fantastic for me.  In particular I’ve become more than a bit of what I refer to as a &lt;em&gt;rails commando&lt;/em&gt; – I can drop into a Rails code base and add value from Day 1.  This blog post talks about how I go about that.&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Dec 2016 05:55:50 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/12/07/rails-commando-parachuting-into-a-rails-code-base-and-adding-value-from-day-1.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/12/07/rails-commando-parachuting-into-a-rails-code-base-and-adding-value-from-day-1.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>software_engineering</category>
        
        <category>eduFire</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>The Incredible Smartness of Bezos or A New Revenue Stream for Amazon with Amazon Go</title>
        <description>&lt;p&gt;Before I made a full commitment this past summer to AWS, I read &lt;a href=&quot;https://www.amazon.com/Everything-Store-Jeff-Bezos-Amazon/dp/0316219282/ref=sr_1_1?ie=UTF8&amp;amp;qid=1481104973&amp;amp;sr=8-1&amp;amp;keywords=The+Everything+Store&quot;&gt;The Everything Store&lt;/a&gt; which is a detailed analysis of how Amazon operates and Jeff Bezos personally.  As someone who has been an entrepreneur on many different occasions, I find this type of book particularly compelling and this particular book was no exception.  What I walked away from the book were these observations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Jeff Bezos is at the essential core of Amazon’s success; yes there are many other talented executives but at its heart it is Jeff’s place.&lt;/li&gt;
  &lt;li&gt;Jeff Bezos is a once in a century type businessman and if I don’t think of in the same light as Gates, Rockefeller and Carnegie then I’m making a massive mistake.&lt;/li&gt;
  &lt;li&gt;It is far, far smarter for me to commit to AWS than it is for me to fight AWS.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that, dear reader, is why I went full scale with AWS.  Yes there were &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws.html&quot;&gt;technical reasons&lt;/a&gt; as well but at its heart it was a bet on Bezos.&lt;/p&gt;

&lt;h1 id=&quot;what-is-this-categorized-as-startup&quot;&gt;What is this Categorized as Startup&lt;/h1&gt;

&lt;p&gt;Given that Amazon is literally a globe spanning entity with aggregate revenues north of 100 billion, you may find it odd that my primary category for this piece is startup.  Well Amazon, at least to me, just plain acts like a startup.  The level of innovation that the company consistently delivers is breath taking.  I mean what other big company launches new things at the pace that Amazon does?  Honestly Amazon is a startup at least in my mind.&lt;/p&gt;

&lt;h1 id=&quot;amazon-go&quot;&gt;Amazon Go&lt;/h1&gt;

&lt;p&gt;And now I come to yesterday’s announcement of &lt;a href=&quot;https://www.amazon.com/b?node=16008589011#&quot;&gt;Amazon Go&lt;/a&gt; - &lt;a href=&quot;https://news.ycombinator.com/item?id=13105689&quot;&gt;Hacker News Discussion&lt;/a&gt;, a complete re-thinking of grocery stores.  Amazon has announced that they will be building 2,000 local grocery stores which are basically a complete rethinking of the grocery store concept implemented along the lines of a convenience store.  Particularly interesting to me since I grew up working retail were these ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;no cashier&lt;/li&gt;
  &lt;li&gt;wave your phone when you enter to authenticate yourself&lt;/li&gt;
  &lt;li&gt;shop by putting items in your basket; take whatever you want&lt;/li&gt;
  &lt;li&gt;amazon figures out what you bought and automatically charges your credit card&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you think about all the various services that Amazon offers through AWS this is a clear implementation of those services applied to the physical world.  In specific I’d place a good bet that this will be powered by &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2016/09/introducing-amazon-ec2-p2-instances-the-largest-gpu-powered-virtual-machine-in-the-cloud/&quot;&gt;GPU instances&lt;/a&gt; using some kind of machine vision API that you’ll see announced next year at the next Amazon developer conference. And I’d be surprised if we don’t see the store proactively reaching out to people’s phones using the new &lt;a href=&quot;https://aws.amazon.com/lex/&quot;&gt;Amazon Lex&lt;/a&gt; ChatBot tool to say something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I see that you picked up and put down three different types of red meat.  In case it helps make your buying decision we have a 10% instant coupon on any type of red meat you want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this would be dynamically coupled with an &lt;a href=&quot;https://aws.amazon.com/redshift/&quot;&gt;Amazon Redshift&lt;/a&gt; warehouse analysis of inventory trends and if meat is going to spoil or not.  Amazon could entirely automate what a talented meat department manager does for a grocery store only better because the special is dynamically delivered to customers who are much more likely to buy.&lt;/p&gt;

&lt;h1 id=&quot;a-new-revenue-stream-for-amazon&quot;&gt;A New Revenue Stream for Amazon&lt;/h1&gt;

&lt;p&gt;The new revenue stream that I see coming out of this is consumer marketing data.  My strong guess is that Amazon will be able to roll up data from actions like pick up and put down on an individual consumer level and then see that type of analytics back to consumer goods firms.  Now I’m sure that Amazon already licenses some consumer marketing data to companies but I suspect this is going to be fairly unprecedented.  Let’s say that you are a consumer goods company that just rolled out a new label.  Here’s what I can envision happening:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;New label rolls out.&lt;/li&gt;
  &lt;li&gt;Amazon is able to give you time adjusted comparisons of shopping experiences before and after along with being able to watch the consumers interact with the product.&lt;/li&gt;
  &lt;li&gt;Think of this as a/b analytics for the real world.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I doubt there’s a single person reading this who, whether or not they believe in a/b testing, doesn’t understand the power it offers.  Personally I’m not a fan but as a marketer I can see this being truly compelling.&lt;/p&gt;

&lt;h1 id=&quot;my-wifes-reaction&quot;&gt;My Wife’s Reaction&lt;/h1&gt;

&lt;p&gt;My wife isn’t part of the high tech world anymore but she had an interesting reaction:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All restaurants are going to be Taco Bell!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Props to her for an outstanding nerd culture reference, the 1993 &lt;a href=&quot;http://www.imdb.com/title/tt0106697/?ref_=nv_sr_1&quot;&gt;Demolition Man&lt;/a&gt; movie starring Stallone, Bullock and Snipes of a dystopian future where literally all restaurants are Taco Bell.  Perhaps all commerce will be Amazon…&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/12/07/the-incredible-smartness-of-bezos-or-a-new-revenue-stream-for-amazon-with-amazon-go.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/12/07/the-incredible-smartness-of-bezos-or-a-new-revenue-stream-for-amazon-with-amazon-go.html</guid>
        
        <category>amazon</category>
        
        <category>startup</category>
        
        <category>bezos</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>No Rdoc Once and For All</title>
        <description>&lt;p&gt;After watching me swear like a sailor earlier today, &lt;a href=&quot;http://www.dasari.me/&quot;&gt;Dv&lt;/a&gt; provided this snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat ~/.gemrc
install: --no-rdoc --no-ri
update: --no-rdoc --no-ri
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Never again will I have to wait for rdoc to generate (which at times takes longer than the damn gem itself).  Huzzah!&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/ruby/2016/12/06/no-rdoc-once-and-for-all.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ruby/2016/12/06/no-rdoc-once-and-for-all.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>gem</category>
        
        <category>rdoc</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Code Rot is Very, Very Real</title>
        <description>&lt;p&gt;Today has been an unmitigated disaster.  In the process of reviving a &lt;a href=&quot;https://fuzzygroup.github.io/blog/osx/2016/12/06/bringing-an-old-macbook-pro-back-to-life.html&quot;&gt;MacBook Pro that was old&lt;/a&gt; I had to delete and re-install rvm, gemsets, etc and, &lt;strong&gt;damn&lt;/strong&gt;, has it ever sucked.  And I don’t mean “oh it sucked” – I mean this has sucked monkey balls.  I’ve been at it 12 hours and my conclusion is that I’m not sure that it will ever work.  And this brings us to &lt;strong&gt;code rot&lt;/strong&gt;.  Rot is what happens to a physical artifact when you don’t take care of it.  Now if you haven’t been at this for too long you’re thinking something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These are perfect digital assets how can there possibly be rot; Scott is smoking the whacky weed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alas, no and I wish I was.  Even if your digital assets don’t decay, the supporting ecosystem that they are in actually does change.  As an example part of the Gemfile had a nokogiri 1.4.4 hard coded version number in it.  Now I might refer to Nokogiri as NokoVietnameGiri since I’m generally about as successful in installing Nokogiri as the U.S. was in winning Vietnam.  But today was far, far worse.  Finally I discovered that Nokogiri 1.4.x is now considered too old and things have changed too much and their recommendation is simple – &lt;strong&gt;upgrade&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note: No disrespect meant to anyone or their family involved in Vietnam.  Vietnam was a political war and soldiers were not allowed to win it.&lt;/p&gt;

&lt;p&gt;And that’s what I mean by code rot – all executable code these days depends on a precarious web of dependencies.  If you’re not actively maintaining it then you are very, very much hosed should a sufficient amount of time pass and you need to re-install things.&lt;/p&gt;

&lt;p&gt;In this case I have to go into a code base that has laid fallow for well over a year now.  And while it has run like a champ until recently, certain things have changed and I now need to actively make changes to the code, modify vendored gems, etc.  And that means I really, really need a workable code base.  And without the ability to run bundle install, well, I’ve got nothing.&lt;/p&gt;

&lt;p&gt;Since I grew up in a family that made their living from, among other things, real estate, I’m going to make an analogy.  If you owned physical real estate, you wouldn’t dream of not touching it for more than a year – you’d expect to do small maintenance, plumbing,  paint, weatherstrip, whatever.  And if it was a revenue producing property, as this was a revenue producing bit of software, you would really never dream of letting it lie fallow for a year.&lt;/p&gt;

&lt;p&gt;So code rot is real but I don’t think that it really is any different from physical artifacts.  The universe does, after all, trend from order to disorder, towards ever increasing entropy.&lt;/p&gt;

&lt;p&gt;The bottom line here is that the next time someone tells you that its ok to let code just sit around and decay, perhaps you might advocate more strongly for doing at least some maintenance on it.  I strongly wish that I had done a better job of that.  &lt;em&gt;regrets&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/12/06/code-rot-is-very-very-real.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/12/06/code-rot-is-very-very-real.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>software_engineering</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Bringing an Old MacBook Pro Back to Life</title>
        <description>&lt;p&gt;This morning has been more than a tad frustrating – and let’s leave Tad out of this, shall we?  I’ve been engaged in bringing my 2011 MacBook Pro 15 back to life.  After a brief venture into Linux, I found that I really needed the data on this box back and despite my Time Machine woes I was able to restore most everything.  I’m now trying to make it actually a functional development tool since it is the only machine that generally seems to run this particular obsolete gem stack – although &lt;a href=&quot;http://www.dasari.me/&quot;&gt;Dv&lt;/a&gt; would argue I should just kill everything and run Vagrant – something I’m thinking about.&lt;/p&gt;

&lt;p&gt;Here’s the process I’ve been thru:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kill brew and reinstall it: &lt;strong&gt;ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)”&lt;/strong&gt; and then &lt;strong&gt;ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;kill rvm and re-install it: &lt;strong&gt;rvm implode&lt;/strong&gt; and then **\curl -sSL https://get.rvm.io&lt;/td&gt;
          &lt;td&gt;bash** &lt;a href=&quot;https://richonrails.com/articles/uninstalling-rvm&quot;&gt;Docs&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;install cask room: &lt;strong&gt;brew cask install google-chrome&lt;/strong&gt; &lt;a href=&quot;https://caskroom.github.io/&quot;&gt;Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;kill bundler and re-install it:  &lt;strong&gt;gem install bundler&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;kill gem and reinstall it: &lt;strong&gt;gem update –system ‘2.3.0’&lt;/strong&gt; &lt;a href=&quot;http://stackoverflow.com/questions/13626143/how-to-upgrade-rubygems&quot;&gt;SO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I then updated my &lt;a href=&quot;https://github.com/fuzzygroup/ansible-macbook-pro&quot;&gt;Ansible MacBook Pro configuration routine&lt;/a&gt; and ran it against the box.  And then I hit a high degree of &lt;a href=&quot;https://fuzzygroup.github.io/blog/rails/2016/12/06/code-rot-is-very-very-real.html&quot;&gt;code rot&lt;/a&gt; that, well, totally ruined my day.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/osx/2016/12/06/bringing-an-old-macbook-pro-back-to-life.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/osx/2016/12/06/bringing-an-old-macbook-pro-back-to-life.html</guid>
        
        <category>osx</category>
        
        <category>mac</category>
        
        <category>rvm</category>
        
        <category>ruby</category>
        
        <category>bundler</category>
        
        <category>gem</category>
        
        <category>brew</category>
        
        <category>cask</category>
        
        <category>mysql</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>Accessing MariaDB without sudo on Ubuntu</title>
        <description>&lt;p&gt;So I’m finally able to get back to trying Rails development on my Ubuntu box and the first real error I found was when I tried to create a database – I couldn’t get into MariaDB unless I used sudo – very, very odd.  I found the solution on &lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=2275033&quot;&gt;Ubuntu Forums&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mysql -u root
use mysql;
update user set plugin='' where User='root';
flush privileges;
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Honestly I have no idea what this is.  Sigh.  Oh well it works and it is documented at least.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/mariadb/2016/12/06/accessing-mariadb-without-sudo-on-ubuntu.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/mariadb/2016/12/06/accessing-mariadb-without-sudo-on-ubuntu.html</guid>
        
        <category>mariadb</category>
        
        <category>ubuntu</category>
        
        
        <category>mariadb</category>
        
      </item>
    
      <item>
        <title>Interviewing with the Big Tech Firms</title>
        <description>&lt;p&gt;I have never been a big company person.  My ideal company fits into a volkswagen and can generally be well fed with a single pizza.  My one big company experience was 450 people globally, 46 million in annual revenues, 25 locations – and that’s not actually big anymore – when even Twitter employs over 4,000 people.&lt;/p&gt;

&lt;p&gt;Now, all that said, I find the big tech companies absolutely fascinating:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in terms of the scale at which they operate&lt;/li&gt;
  &lt;li&gt;their hardware and data resources&lt;/li&gt;
  &lt;li&gt;their very significant inconsistencies&lt;/li&gt;
  &lt;li&gt;their management structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can’t exist in the high tech world and not find companies like Google, Facebook and Twitter fascinating.  Recently I’ve been doing a deep dive on their HR policies and specifically how they interview and I thought my findings were instructive.&lt;/p&gt;

&lt;h1 id=&quot;tldr-no-need-to-read-further&quot;&gt;TLDR; No Need to Read Further&lt;/h1&gt;

&lt;p&gt;The single most important thing to understand is that the overall interviewing system for all the big technical firms is currently&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-detailed-technical-interview-with-the-low-level-computer-science-questions&quot;&gt;Understanding the Detailed Technical Interview with the Low Level Computer Science Questions&lt;/h1&gt;

&lt;p&gt;To my understanding all the big tech firms currently have problems recruiting senior technical staff.  My suspicion is that their very interview process is what keeps people out, let me explain.&lt;/p&gt;

&lt;h1 id=&quot;google-is-not-harvard&quot;&gt;Google Is Not Harvard&lt;/h1&gt;

&lt;p&gt;Goal is keep the wrong person OUT&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Dec 2016 16:49:20 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/interview/2016/12/05/interviewing-with-the-big-tech-firms.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/interview/2016/12/05/interviewing-with-the-big-tech-firms.html</guid>
        
        <category>interview</category>
        
        <category>startup</category>
        
        <category>hiring</category>
        
        <category>hr</category>
        
        <category>google</category>
        
        <category>facebook</category>
        
        <category>twitter</category>
        
        
        <category>interview</category>
        
      </item>
    
      <item>
        <title>Signs of Systemic Organizational Failure</title>
        <description>&lt;p&gt;[8:26 AM, 12/5/2016] Scott Johnson: rant for later today “We just have to be creative and figure out how to get more done — we’re behind every week”                      &lt;br /&gt;
[8:27 AM, 12/5/2016] Wife: Wow.                      &lt;br /&gt;
[8:28 AM, 12/5/2016] Scott Johnson: Because the way to make someone that regularly works more than 40 hours per week work harder is to diminish their efforts.  How about accepting that — AS YOU’VE BEEN TOLD — that you are under staffed and your problem is bigger than you initially understood.                      &lt;br /&gt;
[8:28 AM, 12/5/2016] Scott Johnson: m o r o n s                      &lt;br /&gt;
[8:28 AM, 12/5/2016] Wife: Seriously!                      &lt;br /&gt;
[8:29 AM, 12/5/2016] Wife: What the hell do they expect from you?! Sheesh.                      &lt;br /&gt;
[8:30 AM, 12/5/2016] Scott Johnson: Honestly they will never, ever be happy.  This is the kind of job where I could work 100 + hours per week and there’s still no way to succeed.  It is why I’m always so frustrated                      &lt;br /&gt;
[8:30 AM, 12/5/2016] Scott Johnson: in reviewing the week’s work I had more than 10 top level “current” projects                      &lt;br /&gt;
[8:30 AM, 12/5/2016] Scott Johnson: and no one other than me sees the flaw in that.                      &lt;br /&gt;
[8:30 AM, 12/5/2016] Wife: They are not very smart                      &lt;br /&gt;
[8:31 AM, 12/5/2016] Scott Johnson: Good at their domain but they know nothing about software engineering and they are too arrogant to ask&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Dec 2016 09:04:48 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/12/05/signs-of-systemic-organizational-failure.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/12/05/signs-of-systemic-organizational-failure.html</guid>
        
        
      </item>
    
      <item>
        <title>Finding Your Rhythm As a Remote Worker</title>
        <description>&lt;p&gt;I have been, with one 9 month exception, a remote worker since 1999.  Heading into 2017 that puts me at almost 20 years of solid, day in and day out remote work and, I’ll admit, that I know a thing or two about remote work.  I’ve both been a remote worker, managed remote workers and I think all possible permutations.  This post attempts to summarize what works for &lt;strong&gt;me&lt;/strong&gt;.  What works for &lt;strong&gt;you&lt;/strong&gt; will almost certainly be different but I suspect the same meta principles will apply.&lt;/p&gt;

&lt;h1 id=&quot;routine-routine-routine&quot;&gt;Routine, Routine, Routine&lt;/h1&gt;

&lt;p&gt;Day in and day out my days look remarkably similar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;roll out of bed around 3 am&lt;/li&gt;
  &lt;li&gt;shower, shave, dress, etc.  Even tho the only people that ever see me are my wife, kids and cat I still dress like I was going into an office every day.&lt;/li&gt;
  &lt;li&gt;hit &lt;a href=&quot;http://www.meh.com/&quot;&gt;meh&lt;/a&gt; while it hasn’t sold out and see if there is something cheap I can treat myself to&lt;/li&gt;
  &lt;li&gt;hit the hardest code immediately and get my momentum going&lt;/li&gt;
  &lt;li&gt;take advantage of the &lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/10/29/startup-learnings-i-do-all-my-coding-before-anyone-gets-to-work-or-what-ed-fisher-taught-me.html&quot;&gt;early morning, blessed quiet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;continue until the end of the day&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know that some remote workers are constantly changing location and fully embrace the digital nomad lifestyle (&lt;a href=&quot;http://wanderling.co/how-i-work-from-anywhere-in-the-world&quot;&gt;example&lt;/a&gt;).  And that is brilliant that they are able to do so but for myself I really appreciate consistency.  And I adore having a solid, fast connection like fiber – you don’t get that when you move regularly.&lt;/p&gt;

&lt;h1 id=&quot;it-is-still-work&quot;&gt;It Is Still Work&lt;/h1&gt;

&lt;p&gt;The single biggest mistake that everyone, and that has included me in the past, makes with remote work is not treating it as work.  Because you are the one at home it is all too easy for your spouse (or yourself) to assume “oh they can also do a load of laundry” or some other house hold task.  No.  You.  Can’t.  Work is work and home is home.  I find that my greatest productivity comes when my door is shut and I can concentrate.  Now your results might vary&lt;/p&gt;

&lt;h1 id=&quot;you-dont-have-colleagues-so-figure-out-how-to-do-everything-alone&quot;&gt;You Don’t Have Colleagues So Figure Out How to Do Everything Alone&lt;/h1&gt;

&lt;p&gt;When you are a remote worker you do have colleagues but when you are the odd man out in the remote wilderness you may find that, ahem, they aren’t always helpful.&lt;/p&gt;

&lt;h1 id=&quot;gear---you-never-know&quot;&gt;Gear - You Never Know&lt;/h1&gt;

&lt;p&gt;I almost never throw any computer gear out.  As a remote engineer there is no one to turn to in the next cubicle and say something like “I need a USB to firewire adapter to get some data off this old drive that might help me with my current code”.  Can I go to the computer store for that?  Sure.  I even have a Fry’s 20 minutes away but that 20 minute drive easily turns into:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;20 minutes there&lt;/li&gt;
  &lt;li&gt;20 minutes back&lt;/li&gt;
  &lt;li&gt;20 minutes shopping&lt;/li&gt;
  &lt;li&gt;an hour plus getting my head back where it was before I left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I stay in my cozy home environment, even if I’m rooting thru a cable bin for something I can keep my current context solid in my head.  But if I have to get into a car and engage the outside world then it is a given that I have lost it and it will usually take a solid hour to get my brain back to where it needs to be (if the problem is complex).&lt;/p&gt;

&lt;p&gt;If you don’t keep a gear box where you toss old hard drives, cables, an odd network hub, etc then I strongly encourage you to do so.  Odds are that this pack rat tendency will drive your spouse mad but the productivity benefits are real.&lt;/p&gt;

&lt;h1 id=&quot;know-when-to-have-distractions-and-not&quot;&gt;Know When to Have Distractions and Not&lt;/h1&gt;

&lt;h1 id=&quot;engineer-invest-in-thyself&quot;&gt;Engineer Invest In Thyself&lt;/h1&gt;

&lt;p&gt;I don’t thinK I’m wrong in saying that engineers are notoriously cheap.  We all look at technology and think to ourselves “I could build that” – even when it is normally untrue.  One of the very best decisions you can make is to invest in yourself.  There are three great purchases that I’ve made over the years that really, truly improved my productivity:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fuzzygroup.github.io/blog/startup/2016/10/21/startup-learnings-what-francois-schiettecatte-taught-me.html&quot;&gt;an Aeron chair&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bose Quiet Comfort Headphones&lt;/li&gt;
  &lt;li&gt;Building My Own Computer Desk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll sit in the same chair for sometimes 14 to 16 hours per day.  I don’t ever have back pain and I never even notice my chair – an Aeron is just that good.  Similarly there are times when I’ve pair programmed for 10 hours straight and my ears don’t hurt.  I can wear Quiet Comfort headphones all damn day.  When I got them they were $350 which I thought at the time was absurd but all other pairs of headphones just didn’t cut it.  And if you buy two or three pairs of $60 headphones then you’re almost half way there anyway.&lt;/p&gt;

&lt;p&gt;I haven’t spoken about my adventures earlier this year in building exactly the computer desk I’ve always wanted but I will someday.  A bad day in the office about a month ago sent me racing to the lumber yard and two days later I had ripped out the absolutely shite working surface I had and replaced it with this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/desk1.jpg&quot; alt=&quot;desk1&quot; /&gt; 
(simple, flat, 8 foot span)
&lt;img src=&quot;/blog/assets/desk2.jpg&quot; alt=&quot;desk2&quot; /&gt;
(most of the computers in place; there are more now)
&lt;img src=&quot;/blog/assets/desk3.jpg&quot; alt=&quot;desk3&quot; /&gt; 
(Nice cut outs for cable transfer)
&lt;img src=&quot;/blog/assets/desk4.jpg&quot; alt=&quot;desk4&quot; /&gt; 
(why you make your own desk - the desire to NOT have a visual rats nest of all the cabling that modern computing &lt;strong&gt;requires&lt;/strong&gt;; there are 6 power strips under my desk and all are full; I’m about to add a seventh)&lt;/p&gt;

&lt;p&gt;All total I spent less than 8 hours in rough carpentry from start to finish on this and I highly recommend it if you are a hands on person.  I’ve wanted to do this for more than a decade now and I’m tremendously happy that I did.&lt;/p&gt;

&lt;p&gt;The only sad thing about making my own desk is that my wife recently got me &lt;a href=&quot;https://www.amazon.com/Good-Clean-Fun-Misadventures-Offerman/dp/1101984651/ref=sr_1_1?ie=UTF8&amp;amp;qid=1480930872&amp;amp;sr=8-1&amp;amp;keywords=nick+offerman&quot;&gt;Nick Offerman’s Good Clean Fun&lt;/a&gt; book and now I really want to make another one this time as a trestle table.  Sigh.  If you are a woodworker and you haven’t read Offerman yet then I highly recommend it.  You would never believe that an actor could teach you wood working but he does a credible job and spins a wonderful tale in the doing.&lt;/p&gt;

&lt;h1 id=&quot;know-when-to-stop-and-move-off-the-keyboard&quot;&gt;Know When to Stop and Move Off the Keyboard&lt;/h1&gt;

&lt;h1 id=&quot;embrace-punctuation&quot;&gt;Embrace Punctuation&lt;/h1&gt;

&lt;p&gt;When you are a remote worker what you will find is that the normal social cues that cause you to &lt;em&gt;stop working&lt;/em&gt; are gone.  Things like going to the fridge for a soda or stopping by a co-worker’s cubicle have just up and disappeared from your life.&lt;/p&gt;

&lt;h1 id=&quot;communicate&quot;&gt;Communicate&lt;/h1&gt;

&lt;h1 id=&quot;backup-and-synchronization&quot;&gt;Backup and Synchronization&lt;/h1&gt;

</description>
        <pubDate>Mon, 05 Dec 2016 04:57:52 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/remote/2016/12/05/finding-your-rhythm-as-a-remote-worker.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/remote/2016/12/05/finding-your-rhythm-as-a-remote-worker.html</guid>
        
        <category>remote</category>
        
        <category>work_from_home</category>
        
        
        <category>remote</category>
        
      </item>
    
  </channel>
</rss>
