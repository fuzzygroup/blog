<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Sep 2016 18:34:24 -0400</pubDate>
    <lastBuildDate>Tue, 06 Sep 2016 18:34:24 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Rails2Elixir - rake db:migrate</title>
        <description>&lt;p&gt;In the Rails world, rake db:migrate stands for “migrate the database and execute the latest migrations”.  In the Elixir world the &lt;strong&gt;mix&lt;/strong&gt; command fills the role that the rake and rails executables used to.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-db-migrate.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rake-db-migrate.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails new</title>
        <description>&lt;p&gt;Rails new is the command which generates a new Rails project.  The equivalent would be the phoenix new command.  Here is the equivalent:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other things to know:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phoenix.new --help

mix phoenix.new project_name --database mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org/docs/up-and-running&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-new.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails g migration something_to_change</title>
        <description>&lt;p&gt;In the Rails world, rails g migration something_to_change means  db:migrate stands for “migrate the database and execute the latest migrations”.  In the Elixir world the &lt;strong&gt;mix&lt;/strong&gt; command fills the role that the rake and rails executables used to.  The equivalent in the Elixir world is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.gen.migration something_to_change
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-g-migration-something-to-change.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-g-migration-something-to-change.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - rails c</title>
        <description>&lt;p&gt;rails c, the Rails Console, is one of those canonical things in the rails world - it launches the rails console with all your objects loaded.&lt;/p&gt;

&lt;p&gt;The elixir equivalent to this is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This compiles your project and is a great way to quickly test your code.  If the console comes up then you don’t have any syntactic errors&lt;/p&gt;

&lt;p&gt;Just as, in the Rails world, you can run irb, you can also just run iex:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This won’t compile anything and its a fast way to test basic elixir snippets.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-rails-c.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Rails2Elixir - bundle install</title>
        <description>&lt;p&gt;The command bundle install tells your ruby / rails application to read the Gemfile and install or update the components in Gemfile.  The elixir equivalent to Gemfile is mix.exs and the command to update it is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A sample mix.exs file looks quite different from Gemfile.  Here’s an example of just the &lt;strong&gt;defp deps&lt;/strong&gt; method where the equivalent to gems are listed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defp deps do
  [{:mariaex, &quot;&amp;gt;= 0.0.0&quot;},
   {:ecto, &quot;~&amp;gt; 2.0&quot;},
   {:aws, &quot;~&amp;gt; 0.2.0&quot;}]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-bundle-install.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails2elixir/2016/09/06/rails2elixir-bundle-install.html</guid>
        
        <category>rails2elixir</category>
        
        <category>elixir</category>
        
        
        <category>rails2elixir</category>
        
      </item>
    
      <item>
        <title>Practical Things Learned at ElixirConf</title>
        <description>&lt;p&gt;Its been a few days since ElixirConf and I was reflecting on the practical stuff I learned.  Yes I saw the grand vision driving things but I’m always more concerned about the little stuff because everything you build is entirely dependent on the little stuff.  Attribution given by name only since I don’t want to call anyone out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It’s real&lt;/strong&gt;.  People are really using this in production which means that I can too.  Just knowing that is huge.  Thanks Ben!&lt;/li&gt;
  &lt;li&gt;Deploy is still kind of a mess.  At least one company I met is handling deploy via building it into containers and then deploying the containers.  Again thanks to Ben!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hex.pm/packages/timex&quot;&gt;Timex&lt;/a&gt; is the rough equivalent to the Rails ActiveSupport Time.now style stuff.  That’s huge since I rely on that constantly.&lt;/li&gt;
  &lt;li&gt;Despite the above comment on Timex, I was advised that datetime stuff is kind of a mess and “just get the unix epoch from the server and do with it what you will”.  I don’t know how to reconcile this yet but I’m sure I will.  Thanks Pete!&lt;/li&gt;
  &lt;li&gt;As with Rails development local development using containers “just doesn’t feel right”.  Not terribly surprising given how many times I’ve tried to get a full rails stack running for local development using Docker and how many times I’ve failed.&lt;/li&gt;
  &lt;li&gt;Ecto is surprisingly robust and I’m looking forward to using&lt;/li&gt;
  &lt;li&gt;There are starting to be lots of good development tools including an &lt;a href=&quot;https://github.com/KronicDeth/intellij-elixir&quot;&gt;IntelliJ plugin for Elixir&lt;/a&gt;.  This is the first time I’ve ever even considered a JetBrains product so that’s surprising.  Hat tip to &lt;a href=&quot;https://github.com/KronicDeth&quot;&gt;KronicDeath&lt;/a&gt; who I’m pretty sure I had dinner with; its all a bit blurry now in retrospect.&lt;/li&gt;
  &lt;li&gt;I purely can’t wait to start using &lt;a href=&quot;https://github.com/gamache/fuzzyurl.ex&quot;&gt;FuzzyUrl&lt;/a&gt;  I’ve written a lot of this kind of code over the years.  Curious to see how it compares (hint - this will be better)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/06/practical-things-learned-at-elixircon.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/06/practical-things-learned-at-elixircon.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Notes from My ElixirConf Trip Report at Indianapolis Meetup</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Background: 10 years doing ruby / 9 years doing rails; I tired of crap performance and unreliability; mostly a consultant&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Six months of mucking with elixir so I sent myself to elixirconf to force myself to get started&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overview: Its real&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People are actually using it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I expected Rails 1 and got Rails 3 (level of finish)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deploy is still hard (expected)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Great training class - sonny scrogson highly recommended&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Big changes coming to phoenix&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Personality - “Get Off My Beam” erlang folks versus “Beam for Millenials”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Talented, smart, helpful, nice community&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Big emphasis on documentation – replaces the rails focus on TDD&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Hex.pm is immature
    &lt;ul&gt;
      &lt;li&gt;Use erlang libraries versus 0.1x elixir&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DRY is no longer the motto&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Surprising thing for me was boyd multerer
    &lt;ul&gt;
      &lt;li&gt;nerves - 16 K for a full fault tolerant embedded stack&lt;/li&gt;
      &lt;li&gt;former architect of xbox live&lt;/li&gt;
      &lt;li&gt;could have chosen anything he wanted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/06/notes-from-my-elixirconf-trip-report-at-indianapolis-meetup.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/06/notes-from-my-elixirconf-trip-report-at-indianapolis-meetup.html</guid>
        
        <category>meetup</category>
        
        <category>elixir</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Startup Learnings - What Eric Howard Taught Me</title>
        <description>&lt;p&gt;Eric Howard, a good friend of mine, is the founder of &lt;a href=&quot;http://www.outreachindiana.org&quot;&gt;Outreach Indiana&lt;/a&gt;, and he is not a part of the high tech world and he is no one that anyone in high tech has likely ever heard of.  But learnings can come from anywhere and Eric taught me a powerful one.&lt;/p&gt;

&lt;p&gt;I spent a big chunk of my yesterday assembling a chandelier:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/chandelier.png&quot; alt=&quot;chandelier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here it is on &lt;a href=&quot;https://www.amazon.com/Whse-Tiffany-RL8049-Edwards-Chandelier/dp/B00MUTIJ84/ref=sr_1_2?ie=UTF8&amp;amp;qid=1473065813&amp;amp;sr=8-2&amp;amp;keywords=chandelier+RL8049&quot;&gt;Amazon&lt;/a&gt; and while it looks amazing, the reviews are consistent: “Looks great; instructions suck bad; &lt;strong&gt;hard&lt;/strong&gt; to assemble.”&lt;/p&gt;

&lt;p&gt;So you start unpacking this chandelier and you end up with what seems to be 1,000 different pieces strewn over your workspace and two sheets of illegible, incorrect, crap ass instructions that make you want to drink heavily.  And I was reminded of Eric Howard.&lt;/p&gt;

&lt;p&gt;Eric is a professional non-profit worker and he’s the founder of a local Indiana charity that helps homeless youth.  In 1996, Eric felt compelled to do something about the homeless problem in Indianapolis.  And, not knowing what exactly to do, he got into his car with &lt;strong&gt;bread&lt;/strong&gt;, &lt;strong&gt;peanut butter&lt;/strong&gt; and a few other supplies and he drove around Indianapolis.  As he found people who were homeless, he &lt;strong&gt;fed them&lt;/strong&gt; and he &lt;strong&gt;helped them&lt;/strong&gt;.  Down the road he found other people to work with and ultimately ended up founding Outreach Indiana which is a very real charity that does fantastic work in our community.&lt;/p&gt;

&lt;p&gt;So here’s what Eric taught me:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;strong&gt;Just Start.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In anything you’re doing, it is always easy to get &lt;em&gt;paralyzed&lt;/em&gt; by the scale of the problem.  Whether its assembling a chandelier, learning a new language or even tackling homelessness, &lt;strong&gt;just starting&lt;/strong&gt; is the most important thing.  There’s even a term for this, &lt;a href=&quot;https://en.wikipedia.org/wiki/Analysis_paralysis&quot;&gt;Analysis Paralysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As far as that chandelier goes?  Once I thought about Eric and &lt;em&gt;just start&lt;/em&gt;, I grabbed the only two pieces that I could see had a logical connection and put them together.  Then the next three and so on.  Four hours later it was hanging in my dining room and my wife was delighted.&lt;/p&gt;

&lt;p&gt;Note: &lt;a href=&quot;https://www.facebook.com/shelley.johnson.luke923?fref=ts&quot;&gt;My wife&lt;/a&gt; helped put it together too; the writings above makes it sound like she wasn’t involved at all and that’s just not true.&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/05/startup-learnings-what-eric-howard-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/05/startup-learnings-what-eric-howard-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>MySQL - How Do You Know Your MySQL Data Load Worked?</title>
        <description>&lt;p&gt;This post outlines my strategy of how to verify a multi terabyte data load across hundreds of different tables from database 1 (source) to database 2 (target).&lt;/p&gt;

&lt;p&gt;There are three metrics that we can track:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dump file size&lt;/li&gt;
  &lt;li&gt;row count&lt;/li&gt;
  &lt;li&gt;sampled row data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these is discussed below.&lt;/p&gt;

&lt;h1 id=&quot;dump-file-size&quot;&gt;Dump File Size&lt;/h1&gt;

&lt;p&gt;Given that all of our databases are simply too large to transfer as a single entity, we’re going to have to go with a table by table dump strategy.  This gives us one basic metric on the load process – the dump file on source needs to be the same size as the dump file on target.&lt;/p&gt;

&lt;h1 id=&quot;row-count&quot;&gt;Row Count&lt;/h1&gt;

&lt;p&gt;After the data is loaded from source to target the row count should be identical and that’s simple to verify with a SELECT COUNT(*) FROM table query.&lt;/p&gt;

&lt;h1 id=&quot;sampled-row-data&quot;&gt;Sampled Row Data&lt;/h1&gt;

&lt;p&gt;If we’ve verified the dump file size and the row count, it would be easy to assume that everything loaded correctly but do we really know?  One way to address this is thru sampling.  What we can do is apply a hash function on the contents of an entire row.  If we’re using the same hash function on both source and target and on the same rows (i.e. row 1315789 on source and row 1315789 on target) then we should get the same result.  And if we did this consistently – say first row, last row and then say 1,000 randomly chosen rows for every table, we should have a fairly high degree of certainty that source and target are in sync.&lt;/p&gt;

&lt;h1 id=&quot;high-degree-of-certainty&quot;&gt;High Degree of Certainty&lt;/h1&gt;

&lt;p&gt;I used that term very deliberately and I recognize that its a mealy mouthed way of saying “well I’m not entirely sure that source and target on the same” and that’s true.  Once you move to a certain scale, it is essentially impossible to know anything completely.  What you need to do is look at overall metrics and then random samples and figure out how many samples make you feel safe.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/mysql/2016/09/05/mysql-how-do-you-know-your-data-load-worked.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/mysql/2016/09/05/mysql-how-do-you-know-your-data-load-worked.html</guid>
        
        <category>mysql</category>
        
        
        <category>mysql</category>
        
      </item>
    
      <item>
        <title>The Anthony Bourdain of Finance - A Book Review of Straight to Hell</title>
        <description>&lt;p&gt;I remember reading &lt;a href=&quot;https://www.amazon.com/Kitchen-Confidential-Updated-Adventures-Underbelly/dp/0060899220/ref=sr_1_1?ie=UTF8&amp;amp;qid=1472978808&amp;amp;sr=8-1&amp;amp;keywords=kitchen+confidential&quot;&gt;Kitchen Confidential&lt;/a&gt; like a bolt of lightning had struck me.  I’m an avid &lt;a href=&quot;http://fuzzygroup.github.io/recipes/&quot;&gt;cook&lt;/a&gt; and whenever you really love something you have illusions that, someday, you might do it professionally.  Kitchen Confidential cured me of that in a hurry.  Reading about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just how hard you have to work in a professional kitchen&lt;/li&gt;
  &lt;li&gt;The amount of drugs and sex&lt;/li&gt;
  &lt;li&gt;The absolutely pitiful pay scales&lt;/li&gt;
  &lt;li&gt;The rampant sexism&lt;/li&gt;
  &lt;li&gt;The level of theft and illegality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well I no longer have the desire to work in a kitchen.  I’m plenty happy cooking for family and friends and I do far better financially than I would unless I had that lightning in a bottle moment where your new restaurant is temporarily the new hot thing.  And the odds there seem equivalent to that of your startup succeeding so …&lt;/p&gt;

&lt;p&gt;Reading &lt;a href=&quot;https://www.amazon.com/Straight-Hell-Deviance-Debauchery-Billion-Dollar/dp/0802123309/ref=sr_1_1?ie=UTF8&amp;amp;qid=1472978850&amp;amp;sr=8-1&amp;amp;keywords=Goldman+Sachs+Hell&quot;&gt;Straight to Hell: Tales of Deviance, Debauchery and Billion - Dollar Deals&lt;/a&gt; makes me want to term the author, John LeFevre, the Anthony Bourdain of finance. This book is based on the popular twitter feed &lt;a href=&quot;https://twitter.com/@GSElevator&quot;&gt;“Heard in the Goldman Sachs”&lt;/a&gt; elevator. If you scrub out “kitchen” and replace it with “trading floor” and change the location from Manhattan to Hong Kong, well, its pretty much the same book. In the book you read about how a young trader rises thru the ranks and with every success descends deeper and deeper into a morass of bad behavior.  Anything bad that you’ve ever thought about people in finance appears to be true.  I particularly liked the description of chatroom bingo where they assign points to people who say increasingly ridiculous things on investor conference calls.  Given how many times I’ve played buzzword bingo in long meetings myself, I certainly can’t fault him for this.&lt;/p&gt;

&lt;p&gt;Overall it is a very entertaining read.  There’s not a lot about finance specifically here – it is really about bad, frat boy like, behavior.&lt;/p&gt;

&lt;p&gt;As a parent, I will say that I don’t ever want any of my sons to enter the finance world after reading this.  Wow.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/book_review/2016/09/04/the-anthony-bourdain-of-finance.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/book_review/2016/09/04/the-anthony-bourdain-of-finance.html</guid>
        
        <category>book_review</category>
        
        <category>finance</category>
        
        
        <category>book_review</category>
        
      </item>
    
  </channel>
</rss>
