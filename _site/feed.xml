<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Jun 2017 09:59:42 -0400</pubDate>
    <lastBuildDate>Wed, 28 Jun 2017 09:59:42 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>RSpec and Shoulda When You Have Database Level Validations</title>
        <description>&lt;p&gt;1) TrialTimepoint validations should require case sensitive unique value for name scoped to trial_id, trial_arm_id, deleted_at
     Failure/Error: it { should validate_uniqueness_of(:name).scoped_to([:trial_id, :trial_arm_id, :deleted_at]).with_message(“already exists”) }&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ActiveRecord::StatementInvalid:
   Mysql2::Error: Field 'identifier' doesn't have a default value: INSERT INTO `trial_timepoints` (`name`, `created_at`, `updated_at`) VALUES ('a', '2017-06-27 19:25:49', '2017-06-27 19:25:49')
 # ./spec/models/trial_timepoint_spec.rb:47:in `block (3 levels) in &amp;lt;top (required)&amp;gt;'
 # ------------------
 # --- Caused by: ---
 # Mysql2::Error:
 #   Field 'identifier' doesn't have a default value
 #   ./spec/models/trial_timepoint_spec.rb:47:in `block (3 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finished in 0.05219 seconds (files took 10.82 seconds to load)
1 example, 1 failure&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# http://www.rubydoc.info/github/thoughtbot/shoulda-matchers/Shoulda%2FMatchers%2FActiveRecord%3Avalidate_uniqueness_of
describe &quot;should validate uniqueness of name scoped to trial_id, :trial_arm_id, :deleted_at&quot; do
  subject { build(:trial_timepoint, :active) }
  it { should validate_uniqueness_of(:name).scoped_to([:trial_id, :trial_arm_id, :deleted_at]).with_message(&quot;already exists&quot;) }      
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pass 2&lt;/p&gt;

&lt;p&gt;…..F&lt;/p&gt;

&lt;p&gt;Failures:&lt;/p&gt;

&lt;p&gt;1) ElementGroupItem validations validate_uniqueness_of element_id scoped to element_group_id should require case sensitive unique value for element_id scoped to element_group_id
     Failure/Error: it { should validate_uniqueness_of(:element_id).scoped_to(:element_group_id)}&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ActiveRecord::InvalidForeignKey:
   Mysql2::Error: Cannot add or update a child row: a foreign key constraint fails (`tap-test`.`element_group_items`, CONSTRAINT `fk_element_group_items_element_id` FOREIGN KEY (`element_id`) REFERENCES `elements` (`id`) ON DELETE CASCADE): INSERT INTO `element_group_items` (`position`, `element_group_id`, `element_id`, `created_at`, `updated_at`) VALUES (1, 79, 0, '2017-06-28 08:41:56', '2017-06-28 08:41:56')
 # ./spec/models/element_group_item_spec.rb:36:in `block (4 levels) in &amp;lt;top (required)&amp;gt;'
 # ------------------
 # --- Caused by: ---
 # Mysql2::Error:
 #   Cannot add or update a child row: a foreign key constraint fails (`tap-test`.`element_group_items`, CONSTRAINT `fk_element_group_items_element_id` FOREIGN KEY (`element_id`) REFERENCES `elements` (`id`) ON DELETE CASCADE)
 #   ./spec/models/element_group_item_spec.rb:36:in `block (4 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finished in 2.15 seconds (files took 13.41 seconds to load)
6 examples, 1 failure&lt;/p&gt;

&lt;p&gt;Failed examples:&lt;/p&gt;

&lt;p&gt;rspec ./spec/models/element_group_item_spec.rb:36 # ElementGroupItem validations validate_uniqueness_of element_id scoped to element_group_id should require case sensitive unique value for element_id scoped to element_group_id&lt;/p&gt;

&lt;p&gt;Coverage report generated for RSpec to /Users/sjohnson/mddx/tap/coverage. 1499 / 22804 LOC (6.57%) covered.
✘-1 ~/mddx/tap [t760-automated-testing ↓·4|✚ 18…8⚑ 1]
04:42 $ rspec spec/models/element_group_item_spec.rb
TAP Info: Loading spec_helper.rb
TAP Info: Loading rails_helper.rb
……&lt;/p&gt;

&lt;p&gt;Finished in 1.69 seconds (files took 11.02 seconds to load)
6 examples, 0 failures&lt;/p&gt;

&lt;p&gt;Coverage report generated for RSpec to /Users/sjohnson/mddx/tap/coverage. 1499 / 22804 LOC (6.57%) covered.
✔ ~/mddx/tap [t760-automated-testing ↓·4|✚ 18…8⚑ 1]
04:42 $&lt;/p&gt;

&lt;p&gt;Pass 3 - switch from build to create&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe &quot;validate_uniqueness_of element_id scoped to element_group_id&quot; do
  subject { create(:element_group_item) }
  it { should validate_uniqueness_of(:element_id).scoped_to(:element_group_id)}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 28 Jun 2017 04:44:16 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/28/rspec-and-shoulda-when-you-have-database-level-validations.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/28/rspec-and-shoulda-when-you-have-database-level-validations.html</guid>
        
        
      </item>
    
      <item>
        <title>RSpec, FactoryGirl and Associations versus After Builds</title>
        <description>&lt;p&gt;Understanding how the association statement in FactoryGirl factories works can be moderately obscure – until you look at the data that it generates and then it is crystal clear.  Let’s consider three associated models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;element&lt;/li&gt;
  &lt;li&gt;element_group&lt;/li&gt;
  &lt;li&gt;element_group_item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are a series of associations here that define the object relationships (these are inter object and for an associated concept called a trial):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**element**
belongs_to :trial
has_and_belongs_to_many :element_groups, join_table: :element_group_items

**element_group**
belongs_to :trial
has_and_belongs_to_many :elements, join_table: :element_group_items

**element_group_item**
belongs_to :element
belongs_to :element_group    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the factory for element_group_item:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FactoryGirl.define do

  factory :element_group_item do
    association :element, factory: :element
    association :element_group, factory: :element_group
    position { 1 }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The single easiest way to understand your factories is to run rails console but in test mode so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle exec rails c test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you are in test mode then you can use FactoryGirl interactively:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;egi = FactoryGirl.create(:element_group_item)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s the instance of our ElementGroupItem model:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#&amp;lt;ElementGroupItem:0x007fbddb9855d0&amp;gt; {
                  :id =&amp;gt; 2,
    :element_group_id =&amp;gt; 2,
          :element_id =&amp;gt; 6,
            :position =&amp;gt; 1,
          :created_at =&amp;gt; Wed, 28 Jun 2017 07:49:49 UTC +00:00,
          :updated_at =&amp;gt; Wed, 28 Jun 2017 07:49:49 UTC +00:00
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the associated ElementGroup model:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egi.element_group
#&amp;lt;ElementGroup:0x007fbdd6b28090&amp;gt; {
             :id =&amp;gt; 2,
       :trial_id =&amp;gt; 31,
           :name =&amp;gt; &quot;Miss Priscilla Cremin&quot;,
       :position =&amp;gt; 1,
    :cloned_from =&amp;gt; nil,
     :deleted_at =&amp;gt; nil,
     :created_by =&amp;gt; nil,
     :updated_by =&amp;gt; nil,
     :created_at =&amp;gt; Wed, 28 Jun 2017 07:49:49 UTC +00:00,
     :updated_at =&amp;gt; Wed, 28 Jun 2017 07:49:49 UTC +00:00
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, finally, here is our associated Element model:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egi.element
#&amp;lt;Element:0x007fbddb969830&amp;gt; {
                    :id =&amp;gt; 6,
              :trial_id =&amp;gt; 30,
                  :kind =&amp;gt; 1,
                  :name =&amp;gt; &quot;Art King&quot;,
         :value_options =&amp;gt; [
        [0] {}
    ],
    :conversion_options =&amp;gt; {},
               :default =&amp;gt; nil,
               :tooltip =&amp;gt; nil,
           :description =&amp;gt; nil,
                :slevel =&amp;gt; 0,
                :suffix =&amp;gt; nil,
               :encrypt =&amp;gt; false,
          :privacy_mask =&amp;gt; false,
            :input_mask =&amp;gt; false,
                :active =&amp;gt; false,
                 :flags =&amp;gt; nil,
           :cloned_from =&amp;gt; nil,
          :editor_types =&amp;gt; nil,
         :decimal_scale =&amp;gt; nil,
            :created_by =&amp;gt; nil,
            :updated_by =&amp;gt; nil,
             :locked_at =&amp;gt; nil,
            :deleted_at =&amp;gt; nil,
            :created_at =&amp;gt; Wed, 28 Jun 2017 07:49:48 UTC +00:00,
            :updated_at =&amp;gt; Wed, 28 Jun 2017 07:49:48 UTC +00:00
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue here is the trial_id attribute which is common to element and element_group – what you’ll see is that element and element_group now belong to two different trials.&lt;/p&gt;

&lt;p&gt;Now let’s rewrite our factory a bit:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FactoryGirl.define do

  factory :element_group_item do
    after(:build) do |element_group_item|
      element = create(:element, :text_integer)
      element_group = create(:element_group, :trial_id =&amp;gt; element.trial_id)
      element_group_item.element_group_id = element_group.id
      element_group_item.element_id = element.id
    end

    position { 1 }

  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is our instance of ElementGroupItem:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egi = FactoryGirl.create(:element_group_item)
#&amp;lt;ElementGroupItem:0x007f80cfd19ed8&amp;gt; {
                  :id =&amp;gt; 3,
    :element_group_id =&amp;gt; 7,
          :element_id =&amp;gt; 11,
            :position =&amp;gt; 1,
          :created_at =&amp;gt; Wed, 28 Jun 2017 08:12:06 UTC +00:00,
          :updated_at =&amp;gt; Wed, 28 Jun 2017 08:12:06 UTC +00:00
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is our instance of ElementGroup associated with our starting object:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egi.element_group
  ElementGroup Load (8.6ms)  SELECT  `element_groups`.* FROM `element_groups` WHERE `element_groups`.`deleted_at` IS NULL AND `element_groups`.`id` = 7 LIMIT 1
#&amp;lt;ElementGroup:0x007f80c91079e8&amp;gt; {
             :id =&amp;gt; 7,
       :trial_id =&amp;gt; 36,
           :name =&amp;gt; &quot;Devan Ullrich&quot;,
       :position =&amp;gt; 1,
    :cloned_from =&amp;gt; nil,
     :deleted_at =&amp;gt; nil,
     :created_by =&amp;gt; nil,
     :updated_by =&amp;gt; nil,
     :created_at =&amp;gt; Wed, 28 Jun 2017 08:12:06 UTC +00:00,
     :updated_at =&amp;gt; Wed, 28 Jun 2017 08:12:06 UTC +00:00
}    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, finally, here is our instance of Element:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egi.element
  Element Load (3.2ms)  SELECT  `elements`.* FROM `elements` WHERE `elements`.`deleted_at` IS NULL AND `elements`.`id` = 11 LIMIT 1
#&amp;lt;Element:0x007f80c8a38f18&amp;gt; {
                    :id =&amp;gt; 11,
              :trial_id =&amp;gt; 36,
                  :kind =&amp;gt; 5,
                  :name =&amp;gt; &quot;Estella Kuhic&quot;,
            :created_at =&amp;gt; Wed, 28 Jun 2017 08:12:06 UTC +00:00,
            :updated_at =&amp;gt; Wed, 28 Jun 2017 08:12:06 UTC +00:00
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see the difference between the association approach versus the after(:build) approach lies in the nature of the nested objects.  Here rather than two separate trials being created there instead is a trinity of objects shared across one trial.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jun 2017 04:25:12 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rspec/2017/06/28/rspec-factorygirl-and-associations-versus-after-builds.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rspec/2017/06/28/rspec-factorygirl-and-associations-versus-after-builds.html</guid>
        
        <category>rspec</category>
        
        <category>ruby</category>
        
        <category>factory_girl</category>
        
        <category>testing</category>
        
        
        <category>rspec</category>
        
      </item>
    
      <item>
        <title>Beware Docker Swarm</title>
        <description>&lt;p&gt;I have previously mentioned that I was using Docker Swarm and fairly happy with it.  I even went so far as to document the &lt;a href=&quot;_posts/2017-06-28-beware-docker-swarm.md.&quot;&gt;deploy process&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/docker/2017/06/28/beware-docker-swarm.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/docker/2017/06/28/beware-docker-swarm.html</guid>
        
        <category>docker</category>
        
        <category>swarm</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Zero to Full Tests - How to Add Tests to an Existing Code Base</title>
        <description>&lt;p&gt;Have to accept that this is an iterative, multi pass prcoess and you will have anomaloies  xits&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jun 2017 15:54:15 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/27/zero-to-full-tests-how-to-add-tests-to-an-existing-code-base.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/27/zero-to-full-tests-how-to-add-tests-to-an-existing-code-base.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 003 - Write It Down</title>
        <description>
</description>
        <pubDate>Tue, 27 Jun 2017 09:26:57 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/27/how-to-be-a-developer-003-write-it-down.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/27/how-to-be-a-developer-003-write-it-down.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 008 - Learn to Write Tests</title>
        <description>
</description>
        <pubDate>Tue, 27 Jun 2017 01:48:03 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/27/how-to-be-a-developer-008-learn-to-write-tests.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/27/how-to-be-a-developer-008-learn-to-write-tests.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 002 - Focus Don't Multitask</title>
        <description>
</description>
        <pubDate>Mon, 26 Jun 2017 13:43:48 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/26/how-to-be-a-developer-002-focus-don-t-multitask.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/26/how-to-be-a-developer-002-focus-don-t-multitask.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 015 - Write Tests</title>
        <description>
</description>
        <pubDate>Mon, 26 Jun 2017 08:02:36 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/26/how-to-be-a-developer-015-write-tests.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/26/how-to-be-a-developer-015-write-tests.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 006 - Solve It Completely</title>
        <description>
</description>
        <pubDate>Mon, 26 Jun 2017 08:02:20 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/26/how-to-be-a-developer-006-solve-it-completely.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/26/how-to-be-a-developer-006-solve-it-completely.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 010 - Developer Reward Thyself</title>
        <description>
</description>
        <pubDate>Sun, 25 Jun 2017 16:16:06 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/25/how-to-be-a-developer-010-developer-reward-thyself.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/25/how-to-be-a-developer-010-developer-reward-thyself.html</guid>
        
        
      </item>
    
  </channel>
</rss>
