<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 02 Sep 2016 08:07:57 -0400</pubDate>
    <lastBuildDate>Fri, 02 Sep 2016 08:07:57 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Software Engineering Learnings - What Wolfram Arnold Taught Me</title>
        <description>&lt;p&gt;The year was 2007 and the month was August.  I had just joined eduFire and we made the decision at a corporate level that despite my technical expertise being in anything but Rails, we were going to move all of our development efforts to Rails.  Thankfully I did have Ruby experience but Rails was new to me so we brought in a consultant, &lt;a href=&quot;https://twitter.com/wolframarnold&quot;&gt;Wolfram Arnold&lt;/a&gt;, to bring me up to speed.&lt;/p&gt;

&lt;p&gt;You can easily be familiar with something intellectually and still have it throw you.  Sure I knew what &lt;strong&gt;pair programming&lt;/strong&gt; was – I’d read the Ward Cunningham stuff but I’d never done it.  And I’d certainly never done it intensively as we proceeded to do for the next month.  I suspect to my dying day,  I will never forget my very first day with Wolf.  I’d been working on my own for a few weeks at this point and I’d cobbled together an authentication system for our educational application.  Within the first fifteen minutes he looked at it and then with, teutonic precision, he said to me “&lt;em&gt;And now we’ll throw all this away.&lt;/em&gt;”  I was absolutely flummoxed but when you hire a consultant, if you’re not going to trust them, then why did you hire them?  So over the next 30 days or so, Wolfram taught me rails, pairing and test driven development (tdd).  Oh and that code throw away thing?  He was right.  Damn it.  ;-)&lt;/p&gt;

&lt;p&gt;Tossing out your new boss’ work on your very first day, even if you are a consultant, that takes guts.  And it was the right call but it was still gutsy.&lt;/p&gt;

&lt;p&gt;So here’s what Wolfram Arnold taught me: &lt;strong&gt;Pair Programming Works&lt;/strong&gt; or what is also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Linus%27s_Law&quot;&gt;Linus’ Law&lt;/a&gt;: &lt;strong&gt;With enough eyes, all bugs are shallow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pair programming is one of those absolutely uncomfortable experiences that’s absolutely good for you.  I’ve now been pairing for years and years so I’m used to it but when you’re just starting out, you feel like an idiot having someone watch you stumble through things.  Pair programming, imho, remains the single best way to get a new hire up to speed on a code base.  And because the cost of fixing a bug is &lt;strong&gt;directly proportional&lt;/strong&gt; to amount of time that lapses from when a bug was created, I can make a pretty solid argument that two man teams are much more effective than solo developers. If a bug never gets into the code base in the first place then fixing it has effectively zero cost.  When we developed eduFire, we took the practices that Wolfram drilled into me and we ran development almost exclusively as a paired thing for the next two years.  I don’t think I’ve ever had such a well tested, stable code base. We used to average about 90% to 95% test coverage on any given day.&lt;/p&gt;

&lt;p&gt;Pairing wasn’t the only thing I learned from Wolfram, Rails itself was an eye opener and tdd changed everything for me.  I’ve always felt that tdd was what let me describe myself as “Software Engineer” instead of “Coder” but pair programming fundamentally changed my perspective on software engineering.&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software%20engineering/2016/09/02/what-wolfram-arnold-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software%20engineering/2016/09/02/what-wolfram-arnold-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        <category>feedster</category>
        
        <category>software engineering</category>
        
        
        <category>software engineering</category>
        
      </item>
    
      <item>
        <title>Startup Learnings - What Scott Rafer Taught Me</title>
        <description>&lt;p&gt;When I founded Feedster in 2003, I always knew that I wasn’t the CEO.  Sure – I could blog and communicate well – but I didn’t want to raise money and, in a startup, that’s the CEO’s job.  Also I was in Boston at the time, 2003, and in those days the funding climate was much better on the West Coast so Feedster was always going to be a West Coast company.  The only thing I didn’t know was the how.  That happened at the &lt;a href=&quot;https://www.supernovagroup.net&quot;&gt;1st SuperNova Conference&lt;/a&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Kevin_Werbach&quot;&gt;Kevin Werbach&lt;/a&gt;.  Since I was a poor, unfunded startup, ok technology experiment at that point, Kevin very graciously comped me a pass.&lt;/p&gt;

&lt;p&gt;At SuperNova, I met &lt;a href=&quot;http://rafer.net&quot;&gt;Scott Rafer&lt;/a&gt; and, as I wrote in my first blogging tool,  &lt;a href=&quot;http://radio-weblogs.com/0103807/2003/07/10.html#a1871&quot;&gt;radio.weblogs.com&lt;/a&gt;,we ended up sharing a ride to the airport.  Thanks to crappy weather, the airport was socked in and he and I hung out for about six hours.  Not too long after that Scott agreed to be an informal adviser to Feedster.  And not long after that I asked him to be the CEO and run the business side of things.&lt;/p&gt;

&lt;p&gt;So here’s what Scott Rafer taught me:  &lt;strong&gt;always be nice everyone but be particularly nice to the little guy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Scott was experienced, smart as a whip and had been around the high tech block more than a few times.  But despite that, he was unfailingly polite to anyone and everyone - waiters, taxi cab drivers, etc.  There wasn’t a hint of “silicon valley arrogance” in him and I made the decision to hire him, to a large extent, based on that.  I knew that he had the personal background and credentials that I wanted but, when you start a company, you need to expect that there will be bad times as well as good times.  Generally there are more bad times than good so character matters.  And I’ve never found &lt;strong&gt;good manners&lt;/strong&gt; without &lt;strong&gt;good character&lt;/strong&gt;.  Anyone can be polite to other people in a socially upward context but it takes both grace and humility to be nice to everyone.  Its easy to be nice to people when they can do something for you.  So this one thing told me a huge amount about Scott Rafer.&lt;/p&gt;

&lt;p&gt;Now to be honest this isn’t anything I didn’t already know.  My mom taught me this.  So did my father and my grandfather.  I had it drilled into me from a very early age, as you always do, when you grow up working retail.  But even when you already know something you can learn it again.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/02/what-scott-rafer-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/02/what-scott-rafer-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        <category>feedster</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Slides from Elixircon Days 0 and 1</title>
        <description>&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 10.38.28.jpg&quot; alt=&quot;2016-08-31 10.38.28.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 10.50.16.jpg&quot; alt=&quot;2016-08-31 10.50.16.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 10.50.56.jpg&quot; alt=&quot;2016-08-31 10.50.56.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 10.52.02.jpg&quot; alt=&quot;2016-08-31 10.52.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 14.33.05.jpg&quot; alt=&quot;2016-08-31 14.33.05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 20.52.38.jpg&quot; alt=&quot;2016-08-31 20.52.38.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-08-31 20.52.40.jpg&quot; alt=&quot;2016-08-31 20.52.40.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 09.55.01.jpg&quot; alt=&quot;2016-09-01 09.55.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 09.59.35.jpg&quot; alt=&quot;2016-09-01 09.59.35.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 10.01.58.jpg&quot; alt=&quot;2016-09-01 10.01.58.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 10.04.35.jpg&quot; alt=&quot;2016-09-01 10.04.35.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 10.07.06.jpg&quot; alt=&quot;2016-09-01 10.07.06.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.32.50.jpg&quot; alt=&quot;2016-09-01 13.32.50.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.36.43.jpg&quot; alt=&quot;2016-09-01 13.36.43.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.36.46.jpg&quot; alt=&quot;2016-09-01 13.36.46.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.37.15.jpg&quot; alt=&quot;2016-09-01 13.37.15.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.37.27.jpg&quot; alt=&quot;2016-09-01 13.37.27.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.38.26.jpg&quot; alt=&quot;2016-09-01 13.38.26.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.40.17.jpg&quot; alt=&quot;2016-09-01 13.40.17.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.40.22.jpg&quot; alt=&quot;2016-09-01 13.40.22.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.43.00.jpg&quot; alt=&quot;2016-09-01 13.43.00.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.43.07.jpg&quot; alt=&quot;2016-09-01 13.43.07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.43.12.jpg&quot; alt=&quot;2016-09-01 13.43.12.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.43.19.jpg&quot; alt=&quot;2016-09-01 13.43.19.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.45.25.jpg&quot; alt=&quot;2016-09-01 13.45.25.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.47.15.jpg&quot; alt=&quot;2016-09-01 13.47.15.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.53.59.jpg&quot; alt=&quot;2016-09-01 13.53.59.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.54.02.jpg&quot; alt=&quot;2016-09-01 13.54.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.54.08.jpg&quot; alt=&quot;2016-09-01 13.54.08.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.57.11.jpg&quot; alt=&quot;2016-09-01 13.57.11.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.57.58.jpg&quot; alt=&quot;2016-09-01 13.57.58.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.58.18.jpg&quot; alt=&quot;2016-09-01 13.58.18.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.58.38.jpg&quot; alt=&quot;2016-09-01 13.58.38.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 13.59.22.jpg&quot; alt=&quot;2016-09-01 13.59.22.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.00.07.jpg&quot; alt=&quot;2016-09-01 14.00.07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.00.39.jpg&quot; alt=&quot;2016-09-01 14.00.39.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.00.55.jpg&quot; alt=&quot;2016-09-01 14.00.55.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.01.16.jpg&quot; alt=&quot;2016-09-01 14.01.16.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.01.41.jpg&quot; alt=&quot;2016-09-01 14.01.41.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.02.08.jpg&quot; alt=&quot;2016-09-01 14.02.08.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/elixircon/2016-09-01 14.13.49.jpg&quot; alt=&quot;2016-09-01 14.13.49.jpg&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/09/02/slides-from-elixircon-days-0-and-1.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/09/02/slides-from-elixircon-days-0-and-1.html</guid>
        
        
      </item>
    
      <item>
        <title>Startup Learnings - What Matt Mullenweg Taught Me</title>
        <description>&lt;p&gt;WordPress, today, is an unquestioned king of the Internet.  I just checked the stats and WP 4.6 has been downloaded over &lt;a href=&quot;https://wordpress.org/download/counter/&quot;&gt;7 million times&lt;/a&gt; (and you can watch the number increase).  I remember, however, a time when its dominance wasn’t so clear – I remember being at the launch party for either &lt;a href=&quot;https://codex.wordpress.org/WordPress_Versions&quot;&gt;.72 or 1.0&lt;/a&gt; when things weren’t so clear.  But I suspect that I’m rambling now – long day.  Anyway, even when WP’s ascendancy wasn’t so clear, I always thought that &lt;a href=&quot;https://ma.tt/&quot;&gt;Matt Mullenweg&lt;/a&gt; himself was the real deal. He clearly knew what he was doing and &lt;a href=&quot;https://en.wikipedia.org/wiki/Matt_Mullenweg&quot;&gt;his history since 2004&lt;/a&gt; certainly bears that out.&lt;/p&gt;

&lt;p&gt;In the very early days of WordPress.com I remember talking to Matt about how they were handling the database implementation and he told me that WordPress.com was just architected just like WordPress itself – a single database per user.  I looked at that decision, to myself, a bit aghast.  After all, I was a &lt;em&gt;software developer&lt;/em&gt;, so I knew that you had only a single database per application.  Boy was I wrong.  At the time I had a traditional software guy’s perspective on the database – big, expensive, resource intensive – so you limited the database’s use.  However, I suspect, Matt looked at the database from the perspective of shared hosting.  Hosting companies routinely run thousands, if not tens of thousands of databases, on boxes to support customers on cheap hosting.  And, if they could do it, why couldn’t he?  And what a damn brilliant decision that was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By logically isolating each customer’s data from the other, he utterly avoided a whole class of scaling problem – data gets too big – move the whole account to a better server.&lt;/li&gt;
  &lt;li&gt;Ever notice that while there are security holes in WordPress itself, they never seem to be a big deal for WordPress.com?  Well this is why.  Breaches are contained.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d argue that this single design decision dramatically affected WordPress’s success.  People don’t often thing about software architecture decisions making the difference between commercial success and failure but I was there and I’m pretty damn certain of this.  Now Matt would have been fine no matter what but this one decision, I’ve always thought, helped ensure the success of the overall WordPress enterprise.&lt;/p&gt;

&lt;p&gt;Now Matt certainly isn’t the only one who has done this.  Down the road I’d see the same issue at &lt;a href=&quot;https://en.wikipedia.org/wiki/Brad_Fitzpatrick&quot;&gt;Brad Fitzpatrick’s&lt;/a&gt; LiveJournal.  And it wouldn’t surprise me if Brad actually did it first since Brad usually has done everything first.  I’d also consult on a similar architecture when I worked at StreamSend where I saw the harder side of managing such an architecture – rolling deploys and database migrations.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Please note that I have no idea if WordPress.com still uses this same structure today.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/09/01/what-matt-mullenweg-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>entrepreneurship</category>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Tools for Elixir Development</title>
        <description>&lt;p&gt;One of the first things you do as a developer when tackling a new platform is suss out tools.  Here’s what I’ve found so far for Elixir:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/autocomplete-elixir&quot;&gt;Autocomplete for Elixir&lt;/a&gt;  I’m still sticking to my beloved TextMate for Elixir development but this is tempting.  Better autocomplete may be the killer app for Elixir development.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash for Documentation&lt;/a&gt; (obligatory shout out to &lt;a href=&quot;https://github.com/scrogson/&quot;&gt;Sonny Scrogson&lt;/a&gt; for teaching a great course and showing me Dash)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.getpostman.com&quot;&gt;Postman&lt;/a&gt; (for testing JSON apis you build with Elixir)  Courtesy of &lt;a href=&quot;http://dasari.me&quot;&gt;Dv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.erlang-solutions.com/products/wombat-oam.html&quot;&gt;Wombat&lt;/a&gt; for Elixir / Erlang Monitoring&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.honeybadger.io/for/elixir/&quot;&gt;HoneyBadger&lt;/a&gt; for managing Elixir errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other great Elixir resources include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phoenixframework.org&quot;&gt;Phoenix Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/phoenix/programming-phoenix&quot;&gt;The Phoenix Book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/elixir13/programming-elixir-1-3&quot;&gt;The Elixir Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/01/tools-for-elixir-development.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/01/tools-for-elixir-development.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        <category>tools</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Random Thoughts on Elixir</title>
        <description>&lt;h1 id=&quot;things-overheard-in-conversations&quot;&gt;Things overheard in conversations:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;datetime support is still a mess; the erlang libs are just as bad; Just rely on a unix timestamp on the box and manipulate it yourself (Pete)&lt;/li&gt;
  &lt;li&gt;deal with deployment at the container level; don’t do native deployment (Ben)&lt;/li&gt;
  &lt;li&gt;whenever possible pick a stable Erlang library over an immature hex project (Ian)  &lt;a href=&quot;https://github.com/gamache?tab=repositories&quot;&gt;Pete’s libraries&lt;/a&gt; are an exception; he’s using them in production.&lt;/li&gt;
  &lt;li&gt;tests run so fast (and concurrently) that you’ve lost your “Go get a coffee” excuse while the test runs break.  Damn.  (Ian)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I misquoted anyone I apologize; errors are mine not theirs.&lt;/p&gt;

&lt;h1 id=&quot;official-things---phoenix-13-changes&quot;&gt;Official Things - Phoenix 1.3 Changes:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Directory structure changes:
    &lt;ul&gt;
      &lt;li&gt;/web&lt;/li&gt;
      &lt;li&gt;/model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;/lib/my_app/&lt;/li&gt;
  &lt;li&gt;MyApp.Web.PageController &amp;lt;== new web namespace&lt;/li&gt;
  &lt;li&gt;Generators are changing greatly  - creating a module and functions&lt;/li&gt;
  &lt;li&gt;Umbrella generator for microservices within a phoenix “umbrella”&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;things-i-came-up-with&quot;&gt;Things I came up with:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;One thing that concerns me is the ability to parachute into an Elixir project and work on it.  Say what you want about Rails but its standard nature has made it very easy for a consultant to drop in on a project and fix it.  I’m less sure about that with Elixir.&lt;/li&gt;
  &lt;li&gt;When you don’t fully understand the syntax yet (and you won’t if you’re like most of us) then you can ctrl+c ctrl+c in and out of console to test that your code is right (&lt;strong&gt;iex -S mix)&lt;/strong&gt;.  Since Elixir is compiled, just bringing up the repl means it works&lt;/li&gt;
  &lt;li&gt;Elixir is all over the place.  I’ve met more people from, well, &lt;strong&gt;insert generic middle of the country location&lt;/strong&gt; than I have from San Francisco.  That’s damn odd for a cutting edge technology.  I don’t know what it says about San Francisco.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because the elixir language is implemented as macros instead of as language constructs, there are some syntactical oddities that mess you up.  Here’s an example:&lt;/p&gt;

    &lt;p&gt;&amp;lt;%= if @current_user do %&amp;gt;
    # do something
  &amp;lt;% else %&amp;gt;
    # do something ese
  &amp;lt;% end %&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Coming from a rails perspective you’d expect that to be &amp;lt;% if %&amp;gt;    not &amp;lt;%= %&amp;gt;&lt;/li&gt;
  &lt;li&gt;Immutable, Immutable, Immutable (just to remind myself)&lt;/li&gt;
  &lt;li&gt;Pattern matching over conditionals.  Ok this one was from Sonny as part of the Phoenix class.  Yesterday in that class we build a login system with only 1 if / else block.  Astonishing.&lt;/li&gt;
  &lt;li&gt;The lack of a prebuilt login system is astonishing.  Yes we built one ourselves and did it pretty easily but that’s not the same as “we should have done it”.  There are so many edge cases in authentication that I tend to shy away from it.  Wolfram Arnold taught me this on my very first Rails gig and it remains as good advice now as it was then.&lt;/li&gt;
  &lt;li&gt;The generators in Phoenix are astonishingly good.  Wow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll update this as the conference runs.&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/01/random-thoughts-on-elixir.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/01/random-thoughts-on-elixir.html</guid>
        
        <category>elixir</category>
        
        <category>elixirconf</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>How to Turn Off Rails 5 Default Foreign Key Migrations</title>
        <description>&lt;p&gt;I could swear that I’ve written this down before but I can’t find it now and, as usual, I blog as much for myself as I do for anyone else.  When Rails 5 came out it made foreign key migrations standard and that, as any major change, bites lots of existing users.  It certainly has me.  Here’s how to turn it off:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Turn off your server.&lt;/li&gt;
  &lt;li&gt;Create an initializer in config/initializers named active_record_belongs_to_required_by_default.rb  You could also name it “you_suck_rails.rb” (yeah I’m at ElixirCon so hitting this, today, is beyond bitter).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add this content:&lt;/p&gt;

    &lt;p&gt;#Be sure to restart your server when you modify this file.&lt;/p&gt;

    &lt;p&gt;#Require &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt; associations by default. This is a new Rails 5.0&lt;/p&gt;

    &lt;p&gt;#default, so it is introduced as a configuration option to ensure that apps&lt;/p&gt;

    &lt;p&gt;#made on earlier versions of Rails are not affected when upgrading.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails.application.config.active_record.belongs_to_required_by_default = false
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/09/01/how-to-turn-off-rails-5-default-foreign-key-migrations.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/09/01/how-to-turn-off-rails-5-default-foreign-key-migrations.html</guid>
        
        <category>rails</category>
        
        <category>mysql</category>
        
        <category>migration</category>
        
        <category>foreign key</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>How to Be a Professional Freelancer</title>
        <description>&lt;p&gt;From the end of 2009 to 2015 I’ve supported myself and my family as a professional freelancer – I’ve been a work for hire software engineer.  And in that time I’ve never in my life made more money or done such varied and interesting work.  A friend asked me recently how I did it and while that’s a bit hard to answer, I was able to write down a bunch of rules that worked for me.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Insurance.&lt;/strong&gt;  Accept that health care is a disaster and you’re going to get hosed.  ‘Nuff said.  ObamaCare did not make this better.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Taxes.&lt;/strong&gt;  Put away 1/3 for taxes every month.  That money goes in a separate bank account and is never touched.  Or pay in advance every quarter which is what the IRS really wants.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Two Gigs.&lt;/strong&gt;  Always, always, always have 2 gigs at the same time.  I’ve always striven for a full time (40 hour) and a half time (20 hour).  That way when one goes south – and it will – you have a fall back.  Accept that you’re going to work at least 60 hours per week.  Sometimes the amount will be more and sometimes less but, at least for me, that was the average.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rates.&lt;/strong&gt;  Keep raising your hourly rate.  I’ve been guilty of not raising it often enough but if your skills keep increasing (and they will) then the marketplace needs to reflect that.  To some extent your rate, if its not unreasonable, is a reflection of your skills.  You want to be a mercedes not a yugo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Time Logging.&lt;/strong&gt;  Bill for everything.  If you call an attorney about an issue, well, the clock starts ticking right away.  If you’re doing hard core software development then I’d argue that you’re not different in skill levels.  Keep track of your time and understand your minimum billing increment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technical Excellence.&lt;/strong&gt;  As a freelancer all you are selling is yourself.  Mediocrity isn’t an option – that’s for people with comfortable jobs.  You need to be hungry.  Hell I even have a full time job now and I’m at ElixirCon on my &lt;strong&gt;own dime&lt;/strong&gt; because I’m committed to improving my skills.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Personal Integrity.&lt;/strong&gt;  Never be afraid to walk away from a gig if you find it unethical or it puts you in legal jeopardy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“How High?”&lt;/strong&gt;  If the client says jump then your only answer is “How High?”.  I remember once getting a skype message at 10:30 at night before I was about to leave for a conference and the request was “Can I get a report of xyz”.  And, you guessed it, 3 am rolled around and the report was written, run and checked into subversion.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Take Everything.&lt;/strong&gt;  I once took on some WordPress sysadmin work - 10 hours per month.  That directly led to over $500,000 plus of on going Ruby / Rails work that continues to this day.  Never, ever walk away from work.  If someone is will to pay then you do the work.  You say yes even if you don’t know how you’ll get it done – farm it out to another if you have to.  Hell call me if you have to. ;-)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Give Back.&lt;/strong&gt;  That WordPress work came out of a presentation I gave at ApacheCon in 2006.  That’s right I’m still making $$$ from a silly presentation that I gave once.  Now I’ll freely admit that I was lucky on this one.  That was (and is) an absolute goldmine.  Make presentations, write blog posts, tweet, write open source.  Giving back always pays back.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The biggest question everyone has is “how do you get gigs?”  This is the freelancer equivalent of asking a writer “where they get their story ideas”.  And the answer is pretty much the same.  Just as ideas are all around writers, gigs are all around you.  Technology is ubiquitous these days and that means that there is interesting technical work literally everywhere:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You know Sherwin Williams Paint?  They’re doing iPhone apps with computer vision to match paint samples.  That means iOS development, android development, backends, etc.&lt;/li&gt;
  &lt;li&gt;In Noblesville, Indiana there is an ecommerce company doing tens of millions of dollars of industrial sales.  You can’t move that many units of anything without technology.  How do I know?  I gave some money to a &lt;a href=&quot;http://www.outreachindiana.org&quot;&gt;fantastic charity&lt;/a&gt; and their founder introduced me to the president of that company and three weeks later I was helping writing code for them.  Gigs are literally everywhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s just 2 examples.  There are dozens of examples if not hundreds.  Finally you want to network &lt;strong&gt;fiercely&lt;/strong&gt;.  That doesn’t just mean LinkedIn and Twitter.  Go out and talk to people.  Do meetups if you have to but its always best to talk to non digital folk.  Just as an example, I recently found out that my next door neighbor is a Vice President at Sales Force.  I know it sounds a bit scummy but I have to think that knowing him, in addition to being a good neighbor, is worthwhile.  Heck my kids play with his kids; if I didn’t get to know him I’d be an ass.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;Gigs are all around you!&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/freelance/2016/09/01/how-to-be-a-professional-freelancer.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/freelance/2016/09/01/how-to-be-a-professional-freelancer.html</guid>
        
        <category>freelance</category>
        
        <category>business</category>
        
        
        <category>freelance</category>
        
      </item>
    
      <item>
        <title>Top 10 things Likely to be Overheard if a Klingon was Running Your Engineering Department</title>
        <description>&lt;p&gt;This humor is company specific - I wrote it when I was at an Internet startup ages and ages ago.  It used to be better when I had actual customer names here but you get the gist.  The people at that company can probably understand best.  Its not bad as a piece of internal satire if you add your customer names into it.&lt;/p&gt;

&lt;ol reversed=&quot;reversed&quot;&gt;
  &lt;li&gt;“&lt;em&gt;Insert Customer Name Here&lt;/em&gt; is a piece of crap! They have no honor!”&lt;/li&gt;
  &lt;li&gt;“Puny Terran, We will never fix that bug”&lt;/li&gt;
  &lt;li&gt;“By nagging me with the launch date, you have questioned my family honor.  Prepare to die!”&lt;/li&gt;
  &lt;li&gt;“You question the worthiness of my engineers.  Draw your batleft, I should kill you where you stand!”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;Insert Customer Name Here&lt;/em&gt; is without honor!”&lt;/li&gt;
  &lt;li&gt;“Answering your email is for the weak and timid!”&lt;/li&gt;
  &lt;li&gt;“Your &lt;em&gt;Insert Customer Name Here&lt;/em&gt; data is a piece of GAGH!”&lt;/li&gt;
  &lt;li&gt;“Perhaps it &lt;strong&gt;IS&lt;/strong&gt; a good day to Die!  I say we ship!”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;Insert Customer Name Here&lt;/em&gt; has just dumped Stova Core!”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;Insert Obnoxious, Over Promising Salesperson Name Here&lt;/em&gt; must die”&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/08/31/when-a-klingon-runs-your-engineering-department.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/08/31/when-a-klingon-runs-your-engineering-department.html</guid>
        
        
      </item>
    
      <item>
        <title>Startup Learnings - What Mark Fletcher Taught Me</title>
        <description>&lt;p&gt;When I started Feedster back in 2003, I ended up taking a very, very traditional startup route:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fschiettecatte.wordpress.com&quot;&gt;Found a technical co-founder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.venturevoice.com/2005/08/vv_show_11_scott_rafer_of_feed.html&quot;&gt;Found a CEO - Rafer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://redeye.firstround.com/2006/03/le_magic.html&quot;&gt;Raised Money&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along the way I also was lucky enough to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Meet Great People&lt;/li&gt;
  &lt;li&gt;Learn from those people&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t talked about Feedster and any of those learnings, well, ever.  They have been rattling around my brain over the past ten years while I focused on my technical skills but now some of them are starting to come out.&lt;/p&gt;

&lt;p&gt;Among those people were the circa 2003 to 2006 web 2.0 people like &lt;a href=&quot;http://www.scripting.com/&quot;&gt;Dave&lt;/a&gt;, Dave, &lt;a href=&quot;http://ma.tt&quot;&gt;Matt&lt;/a&gt;, Brad and others.  Today I want to talk about &lt;a href=&quot;http://www.wingedpig.com&quot;&gt;Mark Fletcher&lt;/a&gt;.  Mark was the founder of BlogLines and what he did was &lt;strong&gt;smart&lt;/strong&gt;.  He didn’t raise money at all.  He self funded and kept control.  That let him, when the time was right, take whatever acquisition deal was right for himself and see close to 100% of it accrue to his personal bottom line.  Me?  I was on a constant fund raising cycle.  And that &lt;strong&gt;sucked&lt;/strong&gt;.  Now Rafer took care of most of it but it was a constant distraction.&lt;/p&gt;

&lt;p&gt;I don’t care what anyone says, success in silicon valley is measured in financial terms.  And the bigger the deal, the greater your success is perceived.  Unfortunately that’s often an incorrect assumption.  With a co-founder, a hired CEO and after dilution from multiple fund raising rounds, unless you sell for an enormous amount of money, often even a “huge” deal can net the founders very, very little on a personal basis. &lt;a href=&quot;https://medium.com/@kareem.m/how-to-avoid-building-a-company-that-youll-hate-d1eb76eb9a9d#.90ggozsst&quot;&gt;Kareem Mayan&lt;/a&gt; talks about this better than I can with some eye opening examples of how big a deal can be and how little you can personally see as the entrepreneur.  Search for the Heidi Roizen quote.&lt;/p&gt;

&lt;p&gt;Me?  I ended up walking away from Feedster as the only person who actually made any money from it (to the best of my knowledge).  It wasn’t much but cash positive is always good.&lt;/p&gt;

&lt;p&gt;Mark?  He’s back at it again with the very, very cool email service &lt;a href=&quot;https://groups.io&quot;&gt;Groups.io&lt;/a&gt;.  He also has some wonderfully true observations about &lt;a href=&quot;https://wingedpig.com/2016/02/05/slack-is-wonderful-and-awesome-and-horrible-and-bad-a-rant/&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My take away from Mark: Fund it yourself; keep control.  There’s a balance here obviously.  Not everything can be self funded but given the changes in the industry -  &lt;a href=&quot;http://aws.amazon.com&quot;&gt;AWS&lt;/a&gt; - far more can be done by yourself than was even dreamt of 10 years ago.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/startup/2016/08/31/what-mark-fletcher-taught-me.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/startup/2016/08/31/what-mark-fletcher-taught-me.html</guid>
        
        <category>startup</category>
        
        <category>learnings</category>
        
        <category>feedster</category>
        
        
        <category>startup</category>
        
      </item>
    
  </channel>
</rss>
