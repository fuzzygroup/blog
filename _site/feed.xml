<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 30 Sep 2016 05:00:09 -0400</pubDate>
    <lastBuildDate>Fri, 30 Sep 2016 05:00:09 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Using Ansible to Drive Down Hosting Costs</title>
        <description>&lt;p&gt;Ever since the Fall of 2014 I have been trapped in an dysfunctional relationship that I have been unable to leave.  No I’m not talking about a spouse, a boyfriend or a girlfriend.  I’m talking about my hosting company where all my Rails applications live.  Now while I’m talking about Rails, it doesn’t have to be Rails.  It could be PHP, Python, Go, Elixir or anything.  Here is what I refer to the economic paradox of hosting:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the day you arrange to use hardware from a hosting company you should be paying the MOST ever for your hardware.&lt;/li&gt;
  &lt;li&gt;Your bills almost always go UP not DOWN.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The issue at hand here is that your hosting company knows that the longer you have a box with them, the more valuable that box becomes to you.  And the paradox is that the value of hardware falls over time.  That 24 gig of RAM box that you contracted for in 2014?  Well it should likely be a 36 gig of RAM box in 2015.  And it would be if you bought it again.  But you didn’t buy it again – you&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ansible/2016/09/30/using-ansible-to-drive-down-hosting-costs.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ansible/2016/09/30/using-ansible-to-drive-down-hosting-costs.html</guid>
        
        <category>ansible</category>
        
        <category>hosting</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>Ansible Tutorial 01 - Examples of Ansible Ad Hoc Commands</title>
        <description>&lt;p&gt;My writing progress has slowed as of late while I have gone 100% heads down on learning Ansible.  Ansible is a provisioning tool which lets you describe a machine or machines as well as how you want them configured.  Ansible also offers an ad hoc mode where you can operate on a group of machines and execute a command or commands.  These examples are based on an Ansible inventory file located in the directory inventories/ as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file: inventories/production_actual

[web]
# format - english machinename   ssh host   ssh private key
web1  ansible_ssh_host=ec2-52-41-237-52.us-west-2.compute.amazonaws.com  ansible_ssh_private_key_file=/Users/sjohnson/.ssh/fi_nav_sitecrawl.pe

[db]

[log]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note - in my actual inventory file there are machines in each group section.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;p&gt;Execute uptime against all machines in the inventories file with the user ubuntu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**ansible all -i inventories/production_actual -u ubuntu -a &quot;uptime&quot;**
ec2-52-39-100-178.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
 17:09:56 up 36 days,  4:05,  4 users,  load average: 0.99, 1.00, 0.97

ec2-52-89-105-4.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
 17:10:06 up 23 days,  4:17,  2 users,  load average: 0.69, 0.53, 0.54

ec2-54-68-16-169.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
 17:11:43 up 22 days,  9:11,  2 users,  load average: 0.93, 0.93, 0.89

ec2-52-42-166-105.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
 17:11:23 up 31 days,  7:26,  2 users,  load average: 0.00, 0.02, 0.05

52.40.224.171 | success | rc=0 &amp;gt;&amp;gt;
 17:10:54 up 20 days, 23:42,  1 user,  load average: 0.08, 0.04, 0.05
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Execute uptime against all machines in the db group in the inventories file with the user ubuntu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**ansible db -i inventories/production_actual -u ubuntu -a &quot;uptime&quot;**
ec2-52-39-100-178.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
 17:11:13 up 36 days,  4:06,  4 users,  load average: 0.90, 0.97, 0.96
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also use this to do things like check the amount of free disc space on every box.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**ansible all -i inventories/production_actual -u ubuntu -a &quot;df -h&quot;**
ec2-54-68-16-169.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev            7.5G   12K  7.5G   1% /dev
tmpfs           1.5G  376K  1.5G   1% /run
/dev/xvda1      7.8G  3.9G  3.5G  53% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            7.5G     0  7.5G   0% /run/shm
none            100M     0  100M   0% /run/user

ec2-52-42-166-105.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev            492M   12K  492M   1% /dev
tmpfs           100M  368K   99M   1% /run
/dev/xvda1      7.8G  3.7G  3.7G  51% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            497M     0  497M   0% /run/shm
none            100M     0  100M   0% /run/user

ec2-52-89-105-4.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev            7.5G   12K  7.5G   1% /dev
tmpfs           1.5G  376K  1.5G   1% /run
/dev/xvda1       16G  3.9G   11G  27% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            7.5G     0  7.5G   0% /run/shm
none            100M     0  100M   0% /run/user

ec2-52-39-100-178.us-west-2.compute.amazonaws.com | success | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev             32G   12K   32G   1% /dev
tmpfs           6.3G  400K  6.3G   1% /run
/dev/xvda1      2.0T  1.4T  557G  71% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none             32G     0   32G   0% /run/shm
none            100M     0  100M   0% /run/user

52.40.224.171 | success | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev            3.9G   12K  3.9G   1% /dev
tmpfs           799M  484K  798M   1% /run
/dev/xvda1      7.8G  5.6G  1.9G  76% /
none            4.0K     0  4.0K   0% /sys/fs/cgroup
none            5.0M     0  5.0M   0% /run/lock
none            3.9G     0  3.9G   0% /run/shm
none            100M     0  100M   0% /run/user
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ensure that a package is installed; don’t update it if it isn’t&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**ansible all -i inventories/production_actual -u ubuntu -m apt -a &quot;name=tree state=present&quot;**
ec2-52-39-100-178.us-west-2.compute.amazonaws.com | success &amp;gt;&amp;gt; {
    &quot;changed&quot;: false
}

ec2-52-89-105-4.us-west-2.compute.amazonaws.com | success &amp;gt;&amp;gt; {
    &quot;changed&quot;: false
}

ec2-54-68-16-169.us-west-2.compute.amazonaws.com | success &amp;gt;&amp;gt; {
    &quot;changed&quot;: false
}

ec2-52-42-166-105.us-west-2.compute.amazonaws.com | success &amp;gt;&amp;gt; {
    &quot;changed&quot;: false
}

52.40.224.171 | success &amp;gt;&amp;gt; {
    &quot;changed&quot;: false
}

**ansible all -i inventories/production_actual -u ubuntu --become -m apt -a &quot;name=htop state=present&quot;**
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://edunham.net/2015/06/08/playing_with_ansible.html&quot;&gt;http://edunham.net/2015/06/08/playing_with_ansible.html&lt;/a&gt;   This is a very good read.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/ansible/intro_adhoc.html&quot;&gt;http://docs.ansible.com/ansible/intro_adhoc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always thanks to &lt;a href=&quot;http://dasari.me&quot;&gt;Dv&lt;/a&gt; who pushed me off the proverbial Ansible cliff and has supported me all the way down the learning curve.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/ansible/2016/09/29/examples-of-ansible-ad-hoc-commands.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/ansible/2016/09/29/examples-of-ansible-ad-hoc-commands.html</guid>
        
        <category>ansible</category>
        
        <category>ad_hoc</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>Software Engineering - How Do You Fill The Time Between Times?</title>
        <description>&lt;p&gt;My wife and I refer to the time between sun set and true dark as the &lt;em&gt;time between times&lt;/em&gt;.  And in any software development project, you’ll always hit that point where either you’ve just wrapped a project or you are just plain churning your wheels on a task and you need something to do.  Happily, in any software development job, there are ALWAYS things to do.  Let’s say that you have finished all your tickets, all your code is committed and your boss just gave you a great review.  Its 1 in the afternoon on a monday and the product manager isn’t available.&lt;/p&gt;

&lt;p&gt;What are you supposed to do?  Well obviously there’s always reddit and hacker news but that’s not what you’re supposed to do – that’s how you fill in a quick break.  There’s still a full half day of work left so what do you do?  Well, you &lt;strong&gt;test&lt;/strong&gt;.  There’s no software on the planet that can’t benefit from test coverage.  Even if you’re using the infinitely appealing &lt;a href=&quot;https://en.wikipedia.org/wiki/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt;, there is still a role for well written test coverage.  So you find some corner of the software that isn’t well tested or that you don’t understand well and you poke it with a stick and write some tests.  And when they run, you write some more tests.&lt;/p&gt;

&lt;p&gt;Test coverage in 2016 is probably today’s equivalent of cleaning in the 1950s U.S. navy.  Just as &lt;strong&gt;nothing can ever be too clean&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;nothing can ever be too well tested&lt;/em&gt;&lt;/strong&gt;.  If you don’t know what to test then install RCov into your project and run a full rake spec.  This will show you what needs to be tested.&lt;/p&gt;

&lt;p&gt;Note: A quick shout out to &lt;a href=&quot;http://www.elixirfountain.com/&quot;&gt;Elixir Fountain&lt;/a&gt; and the &lt;a href=&quot;https://soundcloud.com/elixirfountain/elixir-fountain-john-hughes-2016-09-23&quot;&gt;absolutely excellent interview with John Hughes&lt;/a&gt; who invented QuickCheck.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/09/27/software-engineering-how-do-you-fill-the-time-between-times.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/09/27/software-engineering-how-do-you-fill-the-time-between-times.html</guid>
        
        <category>software_engineering</category>
        
        <category>ruby</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>How to Become a Better Cook</title>
        <description>&lt;p&gt;I’m going to step out of my normal nerd comfort zone and move onto something more decidedly analog than digital – cooking.  Over on my &lt;a href=&quot;https://fuzzygroup.github.io/recipes&quot;&gt;recipe blog&lt;/a&gt;, I write down the recipe for everything I’ve ever cooked.  I’m a few hundred behind but all the current stuff I cook every single week is there.  What isn’t there however is the meta layer like how to do X or in this case how to &lt;strong&gt;become a better cook&lt;/strong&gt;.  And while I think I’m an ok cook, I do get rave reviews from the people who matter most to me – my wife, kids and friends.  So here’s how I got there:&lt;/p&gt;

&lt;h1 id=&quot;you-must-cook&quot;&gt;You Must Cook&lt;/h1&gt;

&lt;p&gt;This one is adapted from Heinlein’s famous advice to writers: &lt;a href=&quot;http://www.sfwriter.com/ow05.htm&quot;&gt;You Must Write&lt;/a&gt;.  Cooking is one of those things which you must do to improve.  This means that you get better in proportion to how much you do it.  What to be a better cook?  Well then my comment to you is &lt;strong&gt;cook more&lt;/strong&gt;.  Don’t have people around to eat what you make?  Take it to a neighbor or a sick friend.  Make cookies for the office.  Whatever.  You must cook.  Its about that simple.  When my wife was diagnosed with celiac disease about 6 years ago we effectively lost the ability to eat out.  That pushed the volume of my cooking up.  You can always stop dining out if nothing else.&lt;/p&gt;

&lt;h1 id=&quot;read-voraciously&quot;&gt;Read Voraciously&lt;/h1&gt;

&lt;p&gt;As with everything else I do, I read voraciously.  And I highly recommend it as a learning tool to improve your cooking.  I have a simple rule for cookbooks and I call it the Rule of 1.  All a cookbook needs to be worthwhile for me is one good recipe.  And that’s my expectation.  Most cookbooks I find can supply one good recipe.  Sadly many can only only supply one.  And sadly sometimes what you get isn’t even a “recipe”.  I make a delicious asian rice bowl which I got from an author who just had a passing description of how rice is served on trains in china.  There weren’t ingredients, steps or anything other than three sentences but that justified that whole book.  Now you don’t have to read print – there’s an infinite supply of cooking information online.  There’s twitter, reddit, food network, etc.  If you do read print then I’d highly recommend you check out your local library.  Most libraries turn over inventory regularly and you can get cookbooks at the $1 to $2 per generally.  &lt;a href=&quot;https://www.indyplfoundation.org/book-sale&quot;&gt;Here are the details for mine&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;understand-the-cookbook-authors-you-read&quot;&gt;Understand the Cookbook Authors You Read&lt;/h1&gt;

&lt;p&gt;One of the things to understand is that cook book authors are people and they have limitations.  Some of the most lauded authors, people fantastic at explaining things, don’t actually produce great recipes so there are people you learn from and people you imitate.  For example I made a clam chowder the other day from someone who intellectually I respect at a deep level but, honestly, it was no better than the clam chowder I’ve made a dozen times from various and sundry google results.  Now, that said, this person’s technique was spot on and I did learn a valuable trick from him or her.  What I have found generally is the better the explainer the worse the recipe.  One happy exception to this is &lt;a href=&quot;https://www.amazon.com/Ratio-Simple-Behind-Everyday-Cooking/dp/1416571728/ref=sr_1_1?ie=UTF8&amp;amp;qid=1474883244&amp;amp;sr=8-1&amp;amp;keywords=ruhlman+ratio&quot;&gt;Ruhlman and his Ratio book&lt;/a&gt; is just outstanding.&lt;/p&gt;

&lt;h1 id=&quot;its-all-just-cooking&quot;&gt;Its All Just Cooking&lt;/h1&gt;

&lt;p&gt;I hear things from other people I speak with like “I can grill but I can’t bake” or “I can do vegetables but not meats”.  This is particularly common with restaurant cooks where people often specialize.  Honestly that’s just plain crap.  Its all just cooking and if you’re going to be any good then you need to cook across the spectrum whether its protein on a grill to cookies to pavlova to creme brûlée to eggs to salads to rolling your own sushi.  And, yes, I can say that with confidence because I can do all of that.  Yes we all have things we prefer to make and we can all have specialities but are you really going to tell your child you can’t make them cookies because you can’t bake?  Really?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There’s only one thing that I’ve never mastered and it is making my own cheese (largely a product of UHT milk can’t make cheese and that’s all they sell in Indiana)&lt;/p&gt;

&lt;h1 id=&quot;you-must-experiment&quot;&gt;You Must Experiment&lt;/h1&gt;

&lt;p&gt;One of the worst things you can do if you cook seriously is to get stale.  You have to experiment.  Getting bored with making dinner for the family?  And the easiest way to do this is to dive into other cultures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learn how to make &lt;a href=&quot;http://picapica.com/blog/2013/09/how-to-make-arepas-pica-pica-arepa-kitchen/&quot;&gt;Arepas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn how to make Sushi (too many results to pick one)&lt;/li&gt;
  &lt;li&gt;Learn how to make &lt;a href=&quot;http://www.food.com/recipe/norwegian-school-bread-428043&quot;&gt;Norwegian School Bread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn how to make &lt;a href=&quot;http://www.foodandwine.com/recipes/corn-tortillas&quot;&gt;Tortillas&lt;/a&gt; (They’re mostly right but add salt to the batter and use parchment paper not plastic between the tortilla press)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While cookbooks aren’t free, google is free and every culture in the world has recipes.  Interested in Peru?  Google “Peruvian Recipes” and you’ll end up perhaps &lt;a href=&quot;http://www.quericavida.com/recipes/collections/by-country/10-traditional-peruvian-recipes&quot;&gt;here&lt;/a&gt;.  Then make something, anything.&lt;/p&gt;

&lt;h1 id=&quot;learn-what-makes-a-recipe-good-for-you-and-your-context&quot;&gt;Learn What Makes a Recipe Good for You and Your Context&lt;/h1&gt;

&lt;p&gt;One of the most valuable skills I’ve picked up is the ability to read a recipe and, unerringly, know if its right for my context – generally me, my wife and my kids.  There are signs like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;effort; A &lt;a href=&quot;http://www.foodnetwork.com/recipes/croquembouche-recipe.html&quot;&gt;croquembouche&lt;/a&gt; almost never works when you have small children in the house because it takes too long&lt;/li&gt;
  &lt;li&gt;flavors; my wife has certain flavors that she just hates so anything with an organ meat for example is out before it starts&lt;/li&gt;
  &lt;li&gt;tools; if you don’t have the tools then, well, it may be irrelevant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learning to read a recipe and know whether or not its going to work for your context is a valuable skill and something to very much strive for.&lt;/p&gt;

&lt;h1 id=&quot;question-your-assumptions&quot;&gt;Question Your Assumptions&lt;/h1&gt;

&lt;p&gt;As cooks we all develop habits and assumptions.  One of mine was, until recently, “there shall be no other oils than corn, vegetable and olive.”  For years now I followed that with near religious devotion.  However I just discovered grapeseed oil and it was like a revelation – a light oil.  What??? How can this be?  And now I use it with abandon.  Keep in mind that questioning your assumptions is really, really important.&lt;/p&gt;

&lt;h1 id=&quot;salt-and-butter-amp-up-flavor&quot;&gt;Salt and Butter Amp Up Flavor&lt;/h1&gt;

&lt;p&gt;Yep.  Add salt to everything.  And butter.  We’ve all heard about the dangers of salt and butter for so many years that I suspect most of us are way too conservative on this one.  I know I am.  Adding more salt really does help food.  And you can always add some butter when you’re cooking  almost anything to improve the flavor.&lt;/p&gt;

&lt;h1 id=&quot;you-must-taste&quot;&gt;You Must Taste&lt;/h1&gt;

&lt;p&gt;If you’ve ever watched a professional chef, one thing you’ll notice is that they taste things constantly.  Some home cooks do this and some don’t but I’d argue that the ones that do will produce better food so you may want to do this more if you don’t.  I know that until recently I didn’t.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The one exception to this is gluten free baking.  Gluten free flours, until cooked, taste horrible so do not taste gluten free batters.&lt;/p&gt;

&lt;h1 id=&quot;you-must-cook-1&quot;&gt;You Must Cook&lt;/h1&gt;

&lt;p&gt;I’m going to close as I opened because its really the single most important things so I’m going to re-phrase it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You get better in proportion to how much you cook.&lt;/li&gt;
  &lt;li&gt;If you want to be a better cook then cook more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Really that’s the best thing here.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/cooking/2016/09/26/how-to-become-a-better-cook.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/cooking/2016/09/26/how-to-become-a-better-cook.html</guid>
        
        <category>cooking</category>
        
        
        <category>cooking</category>
        
      </item>
    
      <item>
        <title>Elixir Example Using Ecto for An Existing MySQL Database</title>
        <description>&lt;p&gt;My Elixir progress has slowed a bit as of late and the cause has mostly been Ecto.  I’ve been having a hard time wrapping my head around Ecto and I suspect the issue is over a decade of constant ActiveRecord usage.  So this morning I decided to read other blog posts and try and execute on them.  I settled on this one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://geoffreylessel.com/2016/using-ecto-with-an-existing-mysql-database/&quot;&gt;http://geoffreylessel.com/2016/using-ecto-with-an-existing-mysql-database/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;since it seemed to be exactly what I needed - wrap an Ecto interface around an existing database.  Unfortunately the author hadn’t published everything and some of the details he glossed over were exactly what tripped me up.  Happily he was very responsive to email and while you should absolutely read his piece, here are the bare minimum steps to build this.  This application uses a Formula 1 racing database as a source of data to query.&lt;/p&gt;

&lt;p&gt;Obviously adjust all the path statements and passwords and username to match your system.&lt;/p&gt;

&lt;h1 id=&quot;download-the-data&quot;&gt;Download the Data&lt;/h1&gt;

&lt;p&gt;The source data can be downloaded from &lt;a href=&quot;http://ergast.com/mrd/db/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;create-a-database&quot;&gt;Create a Database&lt;/h1&gt;

&lt;p&gt;Use this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -uroot -p -A
create database f1_history
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Load the data using:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql -uroot -p f1_history &amp;lt; ~/Downloads/f1db.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;build-the-app&quot;&gt;Build the App&lt;/h1&gt;

&lt;p&gt;You want to build a basic app with a supervisor tree as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix new f1_history --sup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;edit-mixexs&quot;&gt;Edit mix.exs&lt;/h1&gt;

&lt;p&gt;Here are the dependencies you need for deps.get:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defp deps do
  [
    {:ecto, &quot;~&amp;gt; 2.0&quot;},
    {:mariaex, &quot;~&amp;gt; 0.7&quot;}
  ]
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;edit-configexs&quot;&gt;Edit config.exs&lt;/h1&gt;

&lt;p&gt;The config.exs file defines how you connect to the repo and should look as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config :f1_history, F1History.Repo,
  adapter: Ecto.Adapters.MySQL,
  database: &quot;f1&quot;,
  username: &quot;root&quot;,
  password: &quot;&quot;,
  hostname: &quot;localhost&quot;
  
config :f1_history, ecto_repos: [F1History.Repo]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;edit-f1historyexs&quot;&gt;Edit f1_history.exs&lt;/h1&gt;

&lt;p&gt;Here is what f1_history.exs should look like.  This was the root of my issues:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule F1History do
  use Application
  
  def start(_type, _args) do
      import Supervisor.Spec, warn: false

      children = [
        supervisor(F1History.Repo, [])
      ]

      opts = [strategy: :one_for_one, name: F1History.Supervisor]
      Supervisor.start_link(children, opts)
  end
  
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that F1History.Repo needs to be one of the supervisor’s children. This is critically important.&lt;/p&gt;

&lt;h1 id=&quot;edit-raceex&quot;&gt;Edit race.ex&lt;/h1&gt;

&lt;p&gt;The file race.ex defines a race “object” that we will be querying. Here’s what that file looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule F1History.Race do
  use Ecto.Schema

  @primary_key {:raceId, :id, autogenerate: true}
  
  schema &quot;races&quot; do
    field :year, :integer
    field :round, :integer
    field :circuitId, :integer
    field :name, :string
    field :date, Ecto.Date
    field :time, Ecto.Time
    field :url, :string
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;edit-repoex&quot;&gt;Edit repo.ex&lt;/h1&gt;

&lt;p&gt;The file repo.ex needs to live in lib and looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule F1History.Repo do
  use Ecto.Repo,
  otp_app: :f1_history
end    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;ecto-actually-working&quot;&gt;Ecto Actually Working&lt;/h1&gt;

&lt;p&gt;Go into console with iex -S mix and enter a query like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex(1)&amp;gt; import Ecto.Query
Ecto.Query
iex(2)&amp;gt; F1History.Repo.one from race in F1History.Race, limit: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;12:53:09.469 [debug] QUERY OK source=&quot;races&quot; db=39.4ms decode=0.1ms queue=0.1ms
SELECT r0.`raceId`, r0.`year`, r0.`round`, r0.`circuitId`, r0.`name`, r0.`date`, r0.`time`, r0.`url` FROM `races` AS r0 LIMIT 1 []
%F1History.Race{__meta__: #Ecto.Schema.Metadata&amp;lt;:loaded, &quot;races&quot;&amp;gt;, circuitId: 1,
 date: #Ecto.Date&amp;lt;2009-03-29&amp;gt;, name: &quot;Australian Grand Prix&quot;, raceId: 1,
 round: 1, time: #Ecto.Time&amp;lt;06:00:00&amp;gt;,
 url: &quot;http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix&quot;, year: 2009}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;get-the-whole-thing&quot;&gt;Get The Whole Thing&lt;/h1&gt;

&lt;p&gt;A full git repo of everthing is &lt;a href=&quot;https://github.com/fuzzygroup/f1_history&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/26/elixir-example-using-ecto-for-an-existing-mysql-database.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/26/elixir-example-using-ecto-for-an-existing-mysql-database.html</guid>
        
        <category>elixir</category>
        
        <category>ecto</category>
        
        <category>mysql</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Why Old Engineers Are Cranky Engineers</title>
        <description>&lt;p&gt;I recently had an interaction with a younger software engineer and I’m pretty sure that his impression of me after that boiled down to &lt;em&gt;cranky old bastard&lt;/em&gt; and that would be the nice version.  The less nice version could easily have incorporated the words difficult, jerk and a few other bits of invective.&lt;/p&gt;

&lt;p&gt;The topic at hand was getting a commercial, for pay CI server up and running on a single Rails code base of moderate size (about 40 K lines; about 110 tables).  This is a well known, leading product and I was very, very difficult about my expectations:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I expected it to just plain work out of the box&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;He was stuck getting the configuration to work and I made it clear to him that I didn’t want him spending much more time on it.  He saw no problem with investing the time in it – and that was the conflict.  My logic goes as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We do not have a hard environment - Rails 4.2.x app, basic table structure&lt;/li&gt;
  &lt;li&gt;RSpec works pretty much right out of the box when I set up a new developer work station&lt;/li&gt;
  &lt;li&gt;They charge us money for this – doesn’t that mean that configuration is their damn job?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally I had to say to him something akin to this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You cost us roughly $3,000 per week so 1 day of your effort is $3,000 / 5&lt;/li&gt;
  &lt;li&gt;You have until the end of the day at that point we’re done with this vendor&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;crankiness-explained&quot;&gt;Crankiness Explained&lt;/h1&gt;

&lt;p&gt;The crankiness on my part comes from a combination of this particular vendor, partly from the unique snowflake attitude common to CI vendors, and partly from being older.  Here’s the details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;This Vendor&lt;/em&gt;. The last time this vendor decided to change its architecture, it did so at the expense of its customers. They moved from static instances where your CI server was always the same box so configuration could be done at the box level to dynamically creating instances forcing configuration into your config file.  They kept their pricing the same but this move effectively made them more profitable since their AWS costs would now go down.  At one of my consulting gigs, I saw one of our engineers blow 2 man days on getting this back to a working state.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Snowflake&lt;/em&gt;. For some reason CI software never seems to work out of the box.  I’ve seen this for years in the Rails world dating back to CI Joe.  All the vendors have this attitude that they are some unique snowflake and lots of setup work is needed.  That might have been true once upon a time when TDD was new but it is 2016 now and TDD is not new.  CI is not a new concept.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;I’m older&lt;/em&gt;.  One of the things that happens as you become an older engineer is you realize just how many things that you – and your staff – miss out on thru obsessive attention to technology issues.  It isn’t that I’m incapable of configuring this piece of crap but that if I’m doing that I’m not doing the 10 other things that absolutely, positively have to get done today.  Ultimate the CI software needs to support my job and I don’t need to support it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;happy-conclusion&quot;&gt;Happy Conclusion&lt;/h1&gt;

&lt;p&gt;My asshole style demand – get it done by the end of the day – actually worked.  I absolutely hate to manage that way but forced time bounding can be a great technique at times.  We now have a CI server that is setup and that is excellent.  He really did do a good job.  We’re not 100% there yet because it is only checking pull requests and not master but hopefully that is a matter of only minor additional configuration.&lt;/p&gt;

&lt;h1 id=&quot;recommendation-to-vendors-and-an-example-of-doing-it-right&quot;&gt;Recommendation to Vendors And an Example of Doing it Right&lt;/h1&gt;

&lt;p&gt;Rightly or wrongly I don’t think I’m all that different from what a lot of people when it comes to evaluating software.  Getting a great out of the box experience is essential if you want someone to pay you.  If this was an open source CI server that I had to run myself I’d expect configuration but RSpec and Rails 4.x is a known thing.  This should have just worked.&lt;/p&gt;

&lt;p&gt;As an example of getting setup right, I’d like to point people to &lt;a href=&quot;http://www.codetree.com/&quot;&gt;CodeTree&lt;/a&gt;.  You can point CodeTree at your git account and boom!  It makes github issues better.  Can you configure it?  I think so but the point is that I haven’t needed to.  &lt;em&gt;Recommended.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: CodeTree is run by a former boss of mine and I do view him as a friend.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/09/24/why-old-engineers-are-cranky-engineers.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/09/24/why-old-engineers-are-cranky-engineers.html</guid>
        
        <category>ci</category>
        
        <category>software_engineering</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 09 - Deploying Rails Apps With Capistrano Take 1</title>
        <description>&lt;p&gt;In this tutorial we’re going to use the latest version of Capistrano to deploy your Rails app onto one or more EC2 instances.  I’m dividing this tutorial into two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take 1 where a static set of boxes is encoded into your deploy/production.rb file&lt;/li&gt;
  &lt;li&gt;Take 2 where we call AWS apis to figure out what boxes to deploy to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason for separating them is that take 2 will bring us much deeper into AWS API programming and concepts like tagging / IAM roles I wanted that to be highly separate from the guts of Capistrano.&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;p&gt;In this tutorial I’m going to be specific to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Capistrano&lt;/li&gt;
  &lt;li&gt;Passenger&lt;/li&gt;
  &lt;li&gt;Bundler&lt;/li&gt;
  &lt;li&gt;RVM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s my standard Rails stack and while other configurations will work, NGINX is a favorite of people, that’s the only stack I personally understand end to end.&lt;/p&gt;

&lt;h1 id=&quot;getting-started---add-capistrano-to-your-gemfile&quot;&gt;Getting Started - Add Capistrano to Your Gemfile&lt;/h1&gt;

&lt;p&gt;You’re going to want to use Capistrano 3.6 or later.  Earlier versions of Capistrano should work but, in my experience, Capistrano 3.6 is a much better release - it took me away from Vlad finally and for that I was glad.&lt;/p&gt;

&lt;p&gt;If your Gemfile you want something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;group :development do
  # Use Capistrano for deployment
  gem 'capistrano', &quot;3.6.1&quot;
  gem 'capistrano3-puma'
  gem 'capistrano-rails', require: false
  gem 'capistrano-bundler', require: false
  gem 'capistrano-rvm'
  gem 'capistrano-passenger'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that you want to run bundle install:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As long as this runs correctly you should be fine to move onto the next step.&lt;/p&gt;

&lt;h1 id=&quot;run-the-cap-install-command&quot;&gt;Run the Cap install Command&lt;/h1&gt;

&lt;p&gt;Capistrano requires a one time setup step.  Do this now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cap install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This generates a file in the root of your Rails app called Capfile.  Open that file and uncomment these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'capistrano/rvm'
require 'capistrano/bundler'
require 'capistrano/rails/assets'    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;modify-configdeployrb&quot;&gt;Modify config/deploy.rb&lt;/h1&gt;

&lt;p&gt;The file config/deploy.rb covers the application level configuration for deployment. In this file you need to add lines like the ones below but specific to your code base / toolset:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set :application, 'banks'
set :repo_url, 'git@github.com:appdatallc/banks.git'

set :ssh_options, {
  forward_agent: true,
  auth_methods: [&quot;publickey&quot;],
  keys: [&quot;#{Dir.home}/.ssh/fi_nav_sitecrawl.pem&quot;]
}

set :deploy_to, '/var/www/apps/banks'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;modifying-configdeployproductionrb&quot;&gt;Modifying config/deploy/production.rb&lt;/h1&gt;

&lt;p&gt;The file config/deploy/production.rb covers the servers you are deploying to in the production environment. If you’re setting up a staging server then there is a similar file in config/deploy/staging.rb.&lt;/p&gt;

&lt;p&gt;Before you start does this section I strongly, strong, strongly advice you to read my &lt;a href=&quot;https://fuzzygroup.github.io/blog/aws/2016/09/20/aws-tutorial-08-using-ssh-s-config-file-with-your-aws-boxes.html&quot;&gt;AWS Tutorial on the SSH Config file&lt;/a&gt;.  You can use the approach in that file to identify your boxes.  If you do then this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server 'ec2-52-41-237-52.us-west-2.compute.amazonaws.com', user: 'ubuntu', roles: %w{web app}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;would be replaced by this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server 'ficrawler1', roles: %w{web app}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Not only is this simpler to understand but it centralizes all your EC2 machine addresses in one place.  That’s a huge win.&lt;/p&gt;

&lt;p&gt;Regardless of the approach you decide to take, you need one line in this file for each EC2 instance along with the roles the instance provides.&lt;/p&gt;

&lt;h1 id=&quot;doing-a-deploy&quot;&gt;Doing a Deploy&lt;/h1&gt;

&lt;p&gt;Once all of this configured then you should be able to do a:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cap production deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to get your current code base onto all your boxes.  Please keep in mind that Capistrano executes everything via SSH and it generates a long stream of commands.  If you see errors then there are two things to understand:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not every error may be significant and need to be addressed&lt;/li&gt;
  &lt;li&gt;If you are trying to track down an error then I would strongly recommend reducing the boxes you deploy to to just one and then redeploying.  This is much easier to troubleshoot exactly what is happening&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Here are some of the research sources I used in writing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/deploy-your-rails-app-to-aws/&quot;&gt;https://www.sitepoint.com/deploy-your-rails-app-to-aws/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-puma-and-nginx-on-ubuntu-14-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-puma-and-nginx-on-ubuntu-14-04&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/capistrano/bundler&quot;&gt;https://github.com/capistrano/bundler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/deploying-a-rails-app-on-ubuntu-14-04-with-capistrano-nginx-and-puma&quot;&gt;https://www.digitalocean.com/community/tutorials/deploying-a-rails-app-on-ubuntu-14-04-with-capistrano-nginx-and-puma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21259826/ruby-on-rails-capistrano-3-deployment-error&quot;&gt;http://stackoverflow.com/questions/21259826/ruby-on-rails-capistrano-3-deployment-error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jyaasa.com/blog/deploying-rails-web-application-using-capistrano-bundler-and-rvm&quot;&gt;http://jyaasa.com/blog/deploying-rails-web-application-using-capistrano-bundler-and-rvm&lt;/a&gt; &amp;lt;== This is the best source&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-an-ubuntu-14-04-server&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-an-ubuntu-14-04-server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://railsapps.github.io/installing-rails.html&quot;&gt;http://railsapps.github.io/installing-rails.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12967918/deploy-with-capistrano-using-a-pem-file&quot;&gt;http://stackoverflow.com/questions/12967918/deploy-with-capistrano-using-a-pem-file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9217868/deploying-ruby-on-rails-app-using-capistrano-cap-deploysetup-failing&quot;&gt;http://stackoverflow.com/questions/9217868/deploying-ruby-on-rails-app-using-capistrano-cap-deploysetup-failing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9277731/cap-generates-cannot-load-such-file-bundler-capistrano-loaderror&quot;&gt;http://stackoverflow.com/questions/9277731/cap-generates-cannot-load-such-file-bundler-capistrano-loaderror&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/15282532/capistrano-deploy-using-passenger-not-changing-release&quot;&gt;http://stackoverflow.com/questions/15282532/capistrano-deploy-using-passenger-not-changing-release&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/29241053/incomplete-response-received-from-application-from-nginx-passenger&quot;&gt;http://stackoverflow.com/questions/29241053/incomplete-response-received-from-application-from-nginx-passenger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://semaphoreci.com/community/tutorials/how-to-deploy-node-js-applications-with-capistrano&quot;&gt;https://semaphoreci.com/community/tutorials/how-to-deploy-node-js-applications-with-capistrano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/09/23/aws-tutorial-09-deploying-rails-apps-to-aws-with-capistrano-take-1.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/09/23/aws-tutorial-09-deploying-rails-apps-to-aws-with-capistrano-take-1.html</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>aws</category>
        
        <category>capistrano</category>
        
        <category>deploy</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Software Engineering - Training a New Engineer the Outside In Way</title>
        <description>&lt;p&gt;This post is about training a new hire to do things the way you want them done.  Your way may not be the right way or even the current way but it is your way and that’s ok.  You know your code base better than the new hire and you know your environment.  Now that’s not to say that you should ignore their inputs by any means – they’re coming in with fresh eyes and that’s incredibly valuable.  Every engineer generally:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;is conservative by nature&lt;/li&gt;
  &lt;li&gt;falls into technical ruts&lt;/li&gt;
  &lt;li&gt;the more senior you are then the older you are and the more likely you are to fall victim to 1 and 2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So please don’t dismiss what new hires bring to the table.&lt;/p&gt;

&lt;p&gt;Before we go further with how to train a new hire, we need to take a brief lesson in the economics of hiring a software engineer.  Let’s start with some assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;base salary: $100,000 U.S. per year&lt;/li&gt;
  &lt;li&gt;startup benefits: vacation, medical, etc.  For a startup this usually means 50% of the salary is spent additionally as benefits which means that this one engineer costs you 1.5 * 100,000 or $150,000 / year.&lt;/li&gt;
  &lt;li&gt;two weeks vacation per year; even if your policy is only 1 week when you factor in christmas, labor day, memorial day, etc, you’ll be lucky to get 50 weeks of “work” from them.&lt;/li&gt;
  &lt;li&gt;this new hire – who can’t do anything yet with your code base costs you – 150,000 / 50 or $3,000 per week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let me put this differently to you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every week this new hire isn’t productive, you just threw out &lt;em&gt;2.3&lt;/em&gt; brand new macbooks (at the time of this writing a Macbook is $1299)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don’t know an engineer in the world who would take 2.3 brand new laptops and throw them in the trash.  So then the question becomes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can you make a new hire productive from day 1?&lt;/strong&gt;
&lt;strong&gt;How can you waste as few macbooks as possible?&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-outside-in-way&quot;&gt;The Outside In Way&lt;/h1&gt;

&lt;p&gt;Years and years ago I watched the onboarding (this was before I think I had even heard the term onboarding) process for a new engineer, let’s call him Dan, since that was his name, at a Cambridge, MA software company.  We were building a large (3.5 million lines of C code was our core code base) Windows NT application.  Dan was hired at a salary considerably higher than $100 K per year and I remember watching the process of getting the code base to build which kind of looked like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get the code checked out&lt;/li&gt;
  &lt;li&gt;Something he needed to change was exclusively locked by a remote guy in a different time zone so wait until tomorrow; the only person would could break the lock was Ed and&lt;/li&gt;
  &lt;li&gt;Go find Ed; Ed’s in a meeting; wait some more&lt;/li&gt;
  &lt;li&gt;Make some incremental progress; now we need Brian and he’s in transit to the Cambridge office from Ohio; wait again&lt;/li&gt;
  &lt;li&gt;Infrastructure issues; now we need Boris&lt;/li&gt;
  &lt;li&gt;Stuff isn’t documented well; only Jim would know and Jim’s, well Jim – you get time with him when he’s ready&lt;/li&gt;
  &lt;li&gt;Lather; Rinse; Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If my memory is correct it took about 4 weeks before Dan could actually compile the code base.  And he did do a lot of learning in the process but there was a lot of crap in that time period – a lot of long lunches and beer o’clock arrived early for Dan more than a few days.&lt;/p&gt;

&lt;p&gt;This was when I started to figure out what I call “Outside In”.  The core idea behind outside in is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a new hire brings no knowledge on your code base&lt;/li&gt;
  &lt;li&gt;but they bring generally valuable industry level knowledge&lt;/li&gt;
  &lt;li&gt;apply their general knowledge to tasks related to your codebase but not IN your code base&lt;/li&gt;
  &lt;li&gt;ease them into the code base only after they’ve had some actual successes; I remember Dan, by the time he could finally build the code base, was just plain demoralized; you want to avoid that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its very hard to learn a new code base and the time to do so is highly individual.  Trying to get a new hire to successfully make changes to your code base is almost impossible to get a metric on.  And since you, as a manager, don’t know their skills yet if they take a week to do something, is that fast or slow?  I’d argue that it is very, very hard to know.  But if you give them a task that you need done which doesn’t require any specific codebase learnings then you have something that you can get a metric on.&lt;/p&gt;

&lt;p&gt;This is the way I’ve now been training new hires for years.  There is always some task that every project needs which does not require any knowledge of your code base.  They are the things that you back burner consistently because while they are important, they aren’t that important and you can make do.&lt;/p&gt;

&lt;h1 id=&quot;examples-of-outside-in&quot;&gt;Examples of Outside In&lt;/h1&gt;

&lt;p&gt;Here some some examples of outside in tasks that I used recently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get up an ec2 instance running graylog so we can have a shared log server – this teaches a new hire every box in your system and how logging works which is always useful&lt;/li&gt;
  &lt;li&gt;Make a rails based micro service which can accept an error call and send it onto honey badger- shows that a new hire can work independently enough to build something which stands on its own&lt;/li&gt;
  &lt;li&gt;Get &lt;a href=&quot;http://blog.krishnachaitanya.ch/2016/03/monitor-ec2-memory-usage-using-aws.html&quot;&gt;EC2 memory monitoring&lt;/a&gt; in place using the god awful perl code they supply&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes some of this might be called “devops” or sys admin but in today’s world the gap between a software developer and dev ops has shrunk so considerably that I don’t think it matters any more.&lt;/p&gt;

&lt;h1 id=&quot;getting-them-into-the-actual-code&quot;&gt;Getting them Into the Actual Code&lt;/h1&gt;

&lt;p&gt;I usually put new hires through one to two weeks of outside in style tasks before I have them touch the actual code base.  And when they first do touch the code base it is always, always, always the same – &lt;strong&gt;test coverage&lt;/strong&gt;.  I’m sorry.  I know its ugly, crufty work but it is essential so its either fix the current set of failures or make stuff better by writing new tests.  The time period at this stage ranges from 1 to 3 weeks depending on the current state of the test suite.  After that it is pair programming on maintenance issues and then it goes like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UI stuff (views)&lt;/li&gt;
  &lt;li&gt;Controllers&lt;/li&gt;
  &lt;li&gt;Models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason for that order is that it tackles things in complexity from least abstract to most abstract.  UI stuff has widgets on screen that you can see.  Controllers are such a well understood pattern that they aren’t that different.  And models, well, that’s generally harder.&lt;/p&gt;

&lt;p&gt;The whole point here comes right back to where we started – &lt;strong&gt;economics&lt;/strong&gt;.  Every single week that new hire isn’t productive you just wasted some fraction of 2.3 macbooks.  I’ve spent virtually my whole career in startups and always on the poorly funded side of startups so to me that’s a lot of money.  Using this approach to onboarding new engineers, I’ve rarely if ever wasted a macbook.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/09/22/software-engineering-training-a-new-engineer-the-outside-in-way.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/09/22/software-engineering-training-a-new-engineer-the-outside-in-way.html</guid>
        
        <category>software_engineering</category>
        
        <category>economics</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>Elixir Tutorial 04 Actually Writing Some Code For Our Page Fetcher</title>
        <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I’m very much figuring this out on the fly and you’re going to see stuff in here where you go “He’s wrong!  He’s flat out wrong!” and you might be right.  Heck you likely are right but keep reading because you’ll see corrections coming later in the piece.  I started to rewrite it but I thought that actually seeing the process might be useful since so many of us are at the “want to use elixir but don’t know how to get there” stage.&lt;/p&gt;

&lt;p&gt;So we’re now at the point of actually writing some crude, primitive code for our page fetcher.  Here’s what this needs to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;connect to redis&lt;/li&gt;
  &lt;li&gt;run in an infinite loop&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;pop entries off a redis queue - entries will be a&lt;/td&gt;
          &lt;td&gt;separated chunk of data consisting of an id, a type and url&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;fetch the data from the internet&lt;/li&gt;
  &lt;li&gt;write it to a table based on the type (possibly; still thinking this thru as I write this out)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;an-infinite-loop-construct-in-elixir&quot;&gt;An Infinite Loop Construct in Elixir&lt;/h1&gt;

&lt;p&gt;Connecting to redis should be pretty simple so this brings us to the next step - running in an infinite loop.  Classically I’d do that as a while(true) type control structure but this is Elixir and its functional.  A bit of digging brings me to this &lt;a href=&quot;http://stackoverflow.com/questions/35364511/proper-elixir-otp-way-to-structure-an-infinite-loop-task&quot;&gt;Stack Overflow post&lt;/a&gt; where it makes a pretty good argument for this type of thing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def fetch_pages() do
  # get redis 
  # pop off redis
  # tokenize the bits from redis into variables
  # fetch the page
  # save the page
  fetch_pages()
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that would work nicely.  Since we’re dealing with tail recursion we don’t have to worry about blowing up the stack.&lt;/p&gt;

&lt;p&gt;As I look at this again I see clearly that connecting to redis should be taking out of the loop and the redis connection passed in since otherwise we’re connecting repeatedly and that would be wasteful or just plain dumb.  But before we get there let’s start with a simple question – where does our code actually go?  Right now we have a very simple structure and we want to work within lib/page_fetcher.ex.&lt;/p&gt;

&lt;p&gt;If you open this file you’ll find a basic module structure and a def start.  Let’s add a def fetch_pages do / end block above the start routine and let’s just add this one line within it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IO.puts &quot;Calling fetch_pages&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s not really good enough since it would be good to know that something is changing so why don’t we display the current date and time?  Another quick trip out to the Internet gives us this &lt;a href=&quot;http://stackoverflow.com/questions/28594646/getting-the-current-date-and-or-time-in-elixir&quot;&gt;page&lt;/a&gt; and teaches us we can get the current date and time in Unix milliseconds with :os.system_time(:milli_seconds).  Now that’s an Erlang primitive but Elixir runs on top of Erlang so it can call any and all of it easily.  So our new routine becomes this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def fetch_pages() do
  IO.puts(&quot;The fetch_pages/0 routine has just been called at #{:os.system_time(:milli_seconds)}&quot;)
  fetch_pages()
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’ll notice that string interpolation is actually the same as Ruby - #{} within a string.  That should make adapting to Elixir a bit easier.&lt;/p&gt;

&lt;p&gt;Now we want to see this actually run and the next step for that is to load the console and run it interactively.  So do the normal dance:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PageFetcher.fetch_pages
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And you’ll see a swath of lines like these:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The fetch_pages/0 routine has just been called at 1474506164424
The fetch_pages/0 routine has just been called at 1474506164424
The fetch_pages/0 routine has just been called at 1474506164425
The fetch_pages/0 routine has just been called at 1474506164425
The fetch_pages/0 routine has just been called at 1474506164425
The fetch_pages/0 routine has just been called at 1474506164425
The fetch_pages/0 routine has just been called at 1474506164425
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;getting-our-redis-crap-together&quot;&gt;Getting Our Redis Crap Together&lt;/h1&gt;

&lt;p&gt;Now that I’m at this stage I realize that I’m so used to using Redis using the Ruby primitives I’ve relied on for years that I’m a bit at a loss.  And this means what it always does a trip to the &lt;a href=&quot;https://github.com/artemeff/exredis&quot;&gt;documentation&lt;/a&gt;!  Here’s our canonical test case for redis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;connect&lt;/li&gt;
  &lt;li&gt;push data in&lt;/li&gt;
  &lt;li&gt;fetch it back&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we can do that then its really all we need.  Here’s the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:ok,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Exredis.start_link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;push_result&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Exredis.Api.rpush(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queue&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1|table|http://&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;pop_result&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Exredis.Api.rpop(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;queue&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What we’re seeing here, to analogize it back to Ruby again, is that Exredis is the main “object” and then Api is a set of methods chained on top of it.  Yes I know that’s not what is going on under the hood but this was an analogy.&lt;/p&gt;

&lt;p&gt;Technically since we’re only popping from a queue we didn’t have to know how to push stuff in but its the best way to test a queue based system and it is what I’ve been doing since the days of memcached to test any type of queue / key value store.&lt;/p&gt;

&lt;p&gt;If we want to write a function to connect to Redis then this is going to bring up the issue of &lt;a href=&quot;http://stackoverflow.com/questions/37445838/returning-values-in-elixir&quot;&gt;returning something&lt;/a&gt;, our redis client, from a method.  Since there is no explicit return statement, we simply need the client to be the last thing in our method so this should do it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def redis() do
  {:ok, client} = Exredis.start_link
  client
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ideally there should be code to make sure we actually got back a valid client, failure handling, etc but we’re just not there yet.&lt;/p&gt;

&lt;h1 id=&quot;a-quick-foray-into-string-parsing&quot;&gt;A Quick Foray into String Parsing&lt;/h1&gt;

&lt;p&gt;We can finally get away from StackOverflow with a dive into the Elixir Lang docs to look up how to split out a string using &lt;a href=&quot;http://elixir-lang.org/docs/stable/elixir/String.html#split/3&quot;&gt;Split/3&lt;/a&gt;.  This gives us:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pop_result = client |&amp;gt; Exredis.Api.rpop(&quot;queue&quot;)
&quot;1|table|http://&quot;
iex(9)&amp;gt; parts = String.split(pop_result, &quot;|&quot;)
[&quot;1&quot;, &quot;table&quot;, &quot;http://&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;So we can just use a String.split call with a&lt;/td&gt;
      &lt;td&gt;as the delimiter and that gives us back the result.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This is the point where I need to get back to my day job but we’ve actually made some progress:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We know where to put our code&lt;/li&gt;
  &lt;li&gt;We know how to test our code in the console&lt;/li&gt;
  &lt;li&gt;We know how to talk to Redis&lt;/li&gt;
  &lt;li&gt;We know how to call Erlang functions from Elixir&lt;/li&gt;
  &lt;li&gt;We know how to parse our fetched chunk of data into a data structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next time we’ll try and put this all together and actually fetch the page&lt;/li&gt;
  &lt;li&gt;Next time + 1 we’ll try and store the page to the database; that’ll take us into Ecto&lt;/li&gt;
  &lt;li&gt;Next time + 2 we’ll try and get this running under OTP properly&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/22/elixir-tutorial-04-actually-writing-some-code.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/22/elixir-tutorial-04-actually-writing-some-code.html</guid>
        
        <category>elixir</category>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Notes from Elixir Remote Meetup</title>
        <description>&lt;p&gt;A few notes that came out of the Elixir Remote Meetup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome has audio issues; I was pointed to &lt;a href=&quot;https://vivaldi.com/?lang=en_US&quot;&gt;Vivaldi&lt;/a&gt; by a very helpful soul and that Chromium based browser fixed it.  Thanks!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://elixir-lang.slack.com/files/seancribbs/F2DTLM9PC/supervisors_links_monitors_-_sean_cribbs.pdf&quot;&gt;Great talk on Supervisors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/saaji/ex_par_execute&quot;&gt;Great talk on Parallel Execution&lt;/a&gt; &lt;a href=&quot;https://elixir-lang.slack.com/files/seancribbs/F2DTLM9PC/supervisors_links_monitors_-_sean_cribbs.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There’s a slack room on &lt;a href=&quot;http://elixir-lang.slack.com&quot;&gt;elixir-lang.slack.com&lt;/a&gt; if you want to join&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bigmarker.com/remote-meetup/Elixir-Remote-Meetup-3&quot;&gt;There’s a recording you can watch!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to Josh Adams of Elixir Sips and the Daily Drip for hosting this.&lt;/p&gt;

&lt;p&gt;Suggestion to Josh Adams - Get a tshirt with your branding on it.  Wear it every time (the hat clearly bothered you but branding needs to be consistent to be effective).&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/elixir/2016/09/21/notes-from-elixir-remote-meetup.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/elixir/2016/09/21/notes-from-elixir-remote-meetup.html</guid>
        
        <category>elixir</category>
        
        <category>meetup</category>
        
        <category>remote</category>
        
        <category>josh_adams</category>
        
        
        <category>elixir</category>
        
      </item>
    
  </channel>
</rss>
