<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff.  Ruby / Rails / Elixir.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 18 Oct 2016 19:22:24 -0400</pubDate>
    <lastBuildDate>Tue, 18 Oct 2016 19:22:24 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Gluten Free Cookies for a Wedding</title>
        <description>&lt;p&gt;After just finishing my post about &lt;a href=&quot;https://fuzzygroup.github.io/blog/cooking/2016/09/26/how-to-become-a-better-cook.html&quot;&gt;How to Improve Your Cooking&lt;/a&gt;, my wife asked me &lt;em&gt;Can we make cookies for X’s wedding?&lt;/em&gt;  Oy.  X is a close friend of ours and she’s &lt;strong&gt;gluten free&lt;/strong&gt;.  And not any of the bakeries in the St Louis bakery are able to produce Gluten Free cookies either in bulk or apparently at all.  This calls for my standard &lt;a href=&quot;https://fuzzygroup.github.io/recipes/cookie/2016/09/25/max-s-gluten-free-double-chocolate-cookies.html&quot;&gt;gluten free cookie recipe&lt;/a&gt; but the volume calls for a re-examination and planning.  And, in typical nerdy fashion, we must start with some math and a benchmark.  And, yes, this is actually how an engineer approaches cooking at least when it matters.&lt;/p&gt;

&lt;p&gt;Since my wife and son will be doing the actual baking, I’m documenting the full process since its an interesting application of math to domestic science.&lt;/p&gt;

&lt;h1 id=&quot;part-1-the-double-chocolate-cookies&quot;&gt;Part 1: The Double Chocolate Cookies&lt;/h1&gt;

&lt;h2 id=&quot;step-1-math&quot;&gt;Step 1: Math&lt;/h2&gt;

&lt;p&gt;Note: The addition of a second cookie type was a late change based on a successful cooking experiment with a new recipe.  Oy.  Let’s increase the complexity!&lt;/p&gt;

&lt;p&gt;My wife estimates we need to make 250 cookies, 125 double chocolate and 125 peanut butter.  This calls for a Google sheet to work up some numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/16IW5moFWTUneeNsLTIMt-c6uhXCAtQXOxy0p9yPSt0A/pubhtml&quot;&gt;https://docs.google.com/spreadsheets/d/16IW5moFWTUneeNsLTIMt-c6uhXCAtQXOxy0p9yPSt0A/pubhtml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tells us that we need to bake for 1.5 hours w/ one sheet per oven (we have 2 ovens).  A quick optimization is to bake two sheets per oven.  This will give a slight increase in batch time from 12 minutes to 15 minutes but dramatically increase our thru put.&lt;/p&gt;

&lt;h2 id=&quot;step-2-benchmark&quot;&gt;Step 2: Benchmark&lt;/h2&gt;

&lt;p&gt;A benchmark is the standard way we need to get our metrics.  And the metric we need here is “How many cookies does a batch of batter make?”  This is going to require a standard method of sizing each cookie which means we need a &lt;a href=&quot;https://www.amazon.com/OXO-Grips-Medium-Cookie-Scoop/dp/B0000CDVD2/ref=sr_1_3?s=kitchen&amp;amp;ie=UTF8&amp;amp;qid=1474891817&amp;amp;sr=1-3&amp;amp;keywords=cookie+scoop&quot;&gt;cookie scoop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we have a cookie scoop then the next step is to bake a batch of cookies and figure out how many cookies a single batch of batter makes.  From that we can then figure out how many batches of cookie batter are needed.&lt;/p&gt;

&lt;h2 id=&quot;step-3-rewrite-the-recipe-for-weight-not-volume&quot;&gt;Step 3: Rewrite the Recipe for Weight not Volume&lt;/h2&gt;

&lt;p&gt;Something most american cooks are not aware of is that measuring dry ingredients by volume instead of weight is an american thing and it dates back to the westward expansion.  What happened was an enterprising cook book author took the perspective that scales were heavy and fragile so why not rewrite all her recipes using just a volume measure.  And that one thing changed the face of american baking.  Now from a technical perspective the measure of dry ingredients can vary as much as 25% depending on how you fill the measuring up and that clearly can affect the result.  Here’s a rewrite of our cookie recipe into a weight based approach:&lt;/p&gt;

&lt;p&gt;Weight based recipes are generally easier to execute because you can sit a mixing bowl on a scale and then tare the scale back to zero after you add each ingredient.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3/4	cups gluten free flour, Bobs Red Mill ==&amp;gt; 4.25 oz&lt;/li&gt;
  &lt;li&gt;3/4 cups buck wheat flour ==&amp;gt; 4 oz&lt;/li&gt;
  &lt;li&gt;2/3 cups coca powder ==&amp;gt; 2.5 oz&lt;/li&gt;
  &lt;li&gt;1/2 tsp baking soda&lt;/li&gt;
  &lt;li&gt;1/2 tsp salt&lt;/li&gt;
  &lt;li&gt;1	cup butter flavored baking crisco (i.e. 1 stick); this is 2 sticks of actual butter&lt;/li&gt;
  &lt;li&gt;2/3	cups sugar ==&amp;gt; 5 oz&lt;/li&gt;
  &lt;li&gt;2/3	cups brown sugar ==&amp;gt; 5.75 oz&lt;/li&gt;
  &lt;li&gt;2	eggs&lt;/li&gt;
  &lt;li&gt;4	T rice milk or soy milk (dairy milk can be used) ==&amp;gt; 2 oz milk&lt;/li&gt;
  &lt;li&gt;1	T vanilla ==&amp;gt; 0.5 oz&lt;/li&gt;
  &lt;li&gt;1	bag semi sweet chocolate chips w/o milk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here’s the full rewrite:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Preheat both ovens to 350 and line four baking sheets with parchment paper.&lt;/li&gt;
  &lt;li&gt;In a mixing bowl combine:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;4.25 oz Bob’s red mill gluten free flour&lt;/li&gt;
  &lt;li&gt;4 oz buck wheat flour&lt;/li&gt;
  &lt;li&gt;2.5 oz cocoa powder&lt;/li&gt;
  &lt;li&gt;1/2 tsp salt&lt;/li&gt;
  &lt;li&gt;1/2 tsp baking soda&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;In the bowl for the standing mixer add the below ingredients and beat until fluffy:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;2 sticks butter&lt;/li&gt;
  &lt;li&gt;5 oz brown sugar&lt;/li&gt;
  &lt;li&gt;5.75 oz brown sugar&lt;/li&gt;
  &lt;li&gt;2 eggs&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Add the below ingredients and mix:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;2 oz milk&lt;/li&gt;
  &lt;li&gt;0.5 oz vanilla&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add 1 bag chips and beat until combined.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use cookie scoop to place on cookie sheet and bake for 14 to 15 minutes rotating the sheets once at the 7 minute mark.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-4-efficient-execution&quot;&gt;Step 4: Efficient Execution&lt;/h2&gt;

&lt;p&gt;Making 125 of anything means that you want to do it efficiently.  The real constraints here are the fixed machinery of a kitchen specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;KitchenAid Stand Mixer (we have 1)&lt;/li&gt;
  &lt;li&gt;Ovens (we have 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To optimize the overall process, we can get a second mixing bowl for the stand mixer allowing two batches of cookie dough to be prepared at the same time.  We can also add additional identical cookie sheets to make sure that the baking process is as uniform as possible.  The efficiency gains from a second mixing bowl and additional cookie sheets far out weigh their relatively minimal cost.&lt;/p&gt;

&lt;h1 id=&quot;part-2-the-peanut-butter-cookies&quot;&gt;Part 2: The Peanut Butter Cookies&lt;/h1&gt;

&lt;h2 id=&quot;steps-1-2-4&quot;&gt;Steps 1, 2, 4&lt;/h2&gt;

&lt;p&gt;Given the detailed write up above, we don’t need to do this again.  The only real difference here is adapting the cookie recipe from volume to weight.&lt;/p&gt;

&lt;h2 id=&quot;step-3-rewrite-the-recipe-for-weight-not-volume-1&quot;&gt;Step 3: Rewrite the Recipe for Weight not Volume&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1 cup smooth peanut butter =&amp;gt; 9 oz (thanks &lt;a href=&quot;https://www.google.com/search?q=weight+one+cup+peanut+butter&amp;amp;ie=utf-8&amp;amp;oe=utf-8&quot;&gt;Google&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;1/2 cup light brown sugar =&amp;gt; 3.5 oz&lt;/li&gt;
  &lt;li&gt;1/2 cup white sugar =&amp;gt; 3.5 oz&lt;/li&gt;
  &lt;li&gt;1 large egg&lt;/li&gt;
  &lt;li&gt;1 tsp baking soda&lt;/li&gt;
  &lt;li&gt;1 tsp vanilla&lt;/li&gt;
  &lt;li&gt;1/4 tsp kosher salt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a rewritten version give us:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Preheat both ovens to 350 and line four baking sheets with parchment paper.&lt;/li&gt;
  &lt;li&gt;In a mixing bowl combine:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;9 oz peanut butter&lt;/li&gt;
  &lt;li&gt;3.5 oz brown sugar&lt;/li&gt;
  &lt;li&gt;3.5 oz white sugar&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Add below and beat until combined&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;egg&lt;/li&gt;
  &lt;li&gt;baking soda&lt;/li&gt;
  &lt;li&gt;vanilla&lt;/li&gt;
  &lt;li&gt;salt&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Use cookie scoop to place on cookie sheet and flatten with tines of fork and bake for 10 minutes rotating the sheets once at the 5 minute mark.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 17:48:48 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/cooking/2016/10/18/gluten-free-cookies-for-a-wedding.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/cooking/2016/10/18/gluten-free-cookies-for-a-wedding.html</guid>
        
        <category>wedding</category>
        
        <category>cookies</category>
        
        <category>cooking</category>
        
        
        <category>cooking</category>
        
      </item>
    
      <item>
        <title>AWS Quickie - Making Your Boxes Pingable</title>
        <description>&lt;p&gt;http://stackoverflow.com/questions/21981796/cannot-ping-aws-ec2-instance&lt;/p&gt;

&lt;p&gt;You have to edit the Security Group to which your EC2 instance belongs and allow access (or alternatively create a new one and add the instance to it).&lt;/p&gt;

&lt;p&gt;By default everything is denied. The exception you need to add to the Security Group depends on the service you need to make available to the internet.&lt;/p&gt;

&lt;p&gt;If it is a webserver you will need to allow access to port 80 for 0.0.0.0/0 (which means every IP address).&lt;/p&gt;

&lt;p&gt;To allow pinging the instance you need to enable ICMP traffic.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 08:18:34 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/18/aws-quickie-making-your-boxes-pingable.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/18/aws-quickie-making-your-boxes-pingable.html</guid>
        
        
      </item>
    
      <item>
        <title>Add a gitignore to your Jekyll Installation</title>
        <description>
</description>
        <pubDate>Tue, 18 Oct 2016 08:16:14 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/18/add-a-gitignore-to-your-jekyll-installation.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/18/add-a-gitignore-to-your-jekyll-installation.html</guid>
        
        
      </item>
    
      <item>
        <title>Test</title>
        <description>
</description>
        <pubDate>Tue, 18 Oct 2016 08:09:11 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/18/test.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/18/test.html</guid>
        
        
      </item>
    
      <item>
        <title>Adapting your Rails Tmux Development Flow to a Docker Development Flow</title>
        <description>&lt;p&gt;I first experimented with Docker back in summer of 2014 when I was bringing up a new data center and experimenting with development tools.  My buddy &lt;a href=&quot;http://dasari.me&quot;&gt;Dv&lt;/a&gt; remembers this all too well. This was back in the days where compose was still called fig and nothing actually worked all that well.  And since it didn’t work all that well, I quickly noped away.  But, even then, Docker had the feel of something important, something seminal.  Fast forward two years and Docker is all the rage and a bright luminary in the tech world.&lt;/p&gt;

&lt;p&gt;As a long time engineer, and yes you can translate that to “old guy”, I’m naturally conservative.  And, as such, I haven’t moved to Docker as part of my primary development flow.  To this point I’ve been using Docker as a way to treat applications as APIs and I’ve had a lot of success with that.  However, after a recent &lt;a href=&quot;https://fuzzygroup.github.io/blog/ruby/2016/10/15/brew-xz-and-nokogiri-and-tmux-an-unmitigated-disaster.html&quot;&gt;unmitigated disaster&lt;/a&gt;, involving the wonderful but troubled Nokogiri, I’m far more willing to explore Docker.&lt;/p&gt;

&lt;p&gt;In this blog post I’m going to use my open source &lt;a href=&quot;https://github.com/fuzzygroup/aws_monitor&quot;&gt;AWS Monitor&lt;/a&gt; codebase as the example.  This is a Rails application that is basically a Rake task which monitors a series of Ansible hosts to make sure that you can ssh into them.  It was written as part of my &lt;a href=&quot;https://fuzzygroup.github.io/blog/tag.html#ssh&quot;&gt;AWS / SSH hell period&lt;/a&gt; where I had a large application on AWS where the SSH servers would stay alive no longer than about 30 minutes.&lt;/p&gt;

&lt;h1 id=&quot;my-personal-development-flow&quot;&gt;My Personal Development Flow&lt;/h1&gt;

&lt;p&gt;I have a personal development flow that could essentially be described as “Lots and lots of terminal windows”.  I use a terminal window to represent each of the “stages” of Rails development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;running server&lt;/li&gt;
  &lt;li&gt;generic command line&lt;/li&gt;
  &lt;li&gt;command line for deploy&lt;/li&gt;
  &lt;li&gt;rails console&lt;/li&gt;
  &lt;li&gt;test results&lt;/li&gt;
  &lt;li&gt;database sql window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used to manage all this with tabs in a terminal window but as I added more and more rails projects to my workflow that tended not to scale up.  Now my approach is to use the combination of &lt;a href=&quot;https://tmux.github.io&quot;&gt;Tmux&lt;/a&gt; and &lt;a href=&quot;https://github.com/tmuxinator/tmuxinator&quot;&gt;Tmuxinator&lt;/a&gt;, two open source projects.  Tmux acts as a virtual window manager allowing one terminal to front any number of character applications and Tmuxinator acts as an easy to use configuration manager for Tmux.  Here’s a picture of my typical approach to development:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/tmux_rails_dev_flow.png&quot; alt=&quot;tmux_rails_dev_flow.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can call this interface up with ` (my meta key) and then go up and down between the different virtual terminal windows.  If you’re really sophisticated with Tmux / Tmuxinator you can actually compose up a real IDE but that’s a level of terminal nerdery that I don’t go to (at least for now).&lt;/p&gt;

&lt;p&gt;Given that all Rails apps are essentially the same architecture, this approach serves me well – it makes all the resources I need for Rails development no more than a few arrow keys away.&lt;/p&gt;

&lt;h1 id=&quot;adapting-this-for-docker&quot;&gt;Adapting this for Docker&lt;/h1&gt;

&lt;p&gt;If you think about how Docker works then adapting this isn’t readily apparent.  And then you talk with a &lt;a href=&quot;http://www.nickjanetakis.com/&quot;&gt;Docker expert&lt;/a&gt; and he teaches you how to &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/attach/&quot;&gt;attach to a running container&lt;/a&gt; and you start to get a glimmer of how to do this.  But then, when you stop for lunch, it might all fly out of your head.  That’s ok – it happened to me – but then I woke out of a dead sleep at 2 am two nights ago with all of this crystal clear.  And that’s when I wrote most of this.&lt;/p&gt;

&lt;p&gt;The realization that I had at 2 am was as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use the Tmux window to run the docker-compose up –build&lt;/li&gt;
  &lt;li&gt;Use another Tmux window to attach to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;example-1-for-aws-monitor---my-local-awsmonitorlocalyml&quot;&gt;Example 1 for Aws Monitor - My Local aws_monitor_local.yml&lt;/h1&gt;

&lt;p&gt;My &lt;a href=&quot;https://github.com/fuzzygroup/aws_monitor&quot;&gt;AWS Monitor code base&lt;/a&gt; is the one I chose to adapt for this.  Here’s the local Tmuxinator file I use to run this (note since this is is such a minimal rails app, it only has two terminal windows):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# http://projectidealism.com/posts/2013/9/20/my-tmux-configuration-with-tmuxinator
# ~/.tmuxinator/tula.yml
# you can make as many tabs as you wish...

# NOTE -- this file belongs wherever tmuxinator looks for its configuration files

project_name: aws_monitor_local_aws
project_root: ~/Dropbox/fuzzygroup/rails/aws_monitor
socket_path: /tmp/tmux-aws-monitor
pre_tab: rvm use ruby-2.3.1@aws_monitor
windows:
  - cmdline:
  - console1: bundle exec rails c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;example-2-for-aws-monitor---my-local-awsmonitordockeryml&quot;&gt;Example 2 for Aws Monitor - My Local aws_monitor_docker.yml&lt;/h1&gt;

&lt;p&gt;Here’s the equivalent for Docker:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# http://projectidealism.com/posts/2013/9/20/my-tmux-configuration-with-tmuxinator
# ~/.tmuxinator/tula.yml
# you can make as many tabs as you wish...

# NOTE -- this file belongs wherever tmuxinator looks for its configuration files

project_name: aws_monitor_local_aws
project_root: ~/Dropbox/fuzzygroup/rails/aws_monitor
socket_path: /tmp/tmux-aws-monitor
#pre_tab: rvm use ruby-2.3.1@aws_monitor
windows:
  - run_docker: cd ~/Dropbox/fuzzygroup/rails/aws_monitor &amp;amp;&amp;amp; docker-compose up --build
  - attach1: docker exec -it -v /Users:/Users awsmonitor_website_1 bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h1&gt;

&lt;p&gt;My Dockerfile file for the aws_monitor app isn’t terribly interesting but it does have one interesting thing – it ends with a CMD statement which runs a rake task:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMD rake aws_monitor:ansible_hosts --trace 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since all we’re looking for aws_monitor to do is run continuously checking the ability to ssh into boxes, this is fine.&lt;/p&gt;

&lt;h1 id=&quot;docker-composeyml&quot;&gt;docker-compose.yml&lt;/h1&gt;

&lt;p&gt;Here’s the docker-compose.yml file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'

services:
  postgres:
    image: 'postgres:9.5'
    environment:
      POSTGRES_USER: 'orats_base'
      POSTGRES_PASSWORD: 'yourpassword'
    ports:
      - '5432:5432'
    volumes:
      - 'postgres:/var/lib/postgresql/data'

  redis:
    image: 'redis:3.2-alpine'
    command: redis-server --requirepass yourpassword
    ports:
      - '6379:6379'
    volumes:
      - 'redis:/var/lib/redis/data'

  website:
    depends_on:
      - 'postgres'
      - 'redis'
    build: .
    ports:
      - '3000:3000'
    volumes:
      - '/Users:/Users'
      - '.:/orats_base'
      #- '/Users/sjohnson/.ssh/:/ssh_stuff'
      #- '/Users/sjohnson/Dropbox/music_alerts/:/music_alerts'
    env_file:
      - '.env'

  sidekiq:
    depends_on:
      - 'postgres'
      - 'redis'
    build: .
    command: sidekiq -C config/sidekiq.yml.erb
    volumes:
      - '.:/orats_base'
    env_file:
      - '.env'

  cable:
    depends_on:
      - 'redis'
    build: .
    command: puma -p 28080 cable/config.ru
    ports:
      - '28080:28080'
    volumes:
      - '.:/orats_base'
    env_file:
      - '.env'

volumes:
  redis:
  postgres:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The one interesting thing here is this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;volumes:
  - '/Users:/Users'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What this does is map my mac’s host filesytem into the Docker filesystem.  The reason I’m doing this is that my aws_monitor code needs access to my PEM certificate for the SSH login (among other files).  By mapping this in as a logical volume I don’t have to have have my PEM file as a part of my git repo.  I also don’t have to worry about Figaro or another approach to environment configuration.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Docker is still new to me and I’m still fine tuning this but I do think it has real potential.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/docker/2016/10/18/adapting-your-rails-tmux-development-flow-to-a-docker-development-flow.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/docker/2016/10/18/adapting-your-rails-tmux-development-flow-to-a-docker-development-flow.html</guid>
        
        <category>rails</category>
        
        <category>docker</category>
        
        <category>tmux</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Life Beyond the Retina Display</title>
        <description>
</description>
        <pubDate>Mon, 17 Oct 2016 13:49:50 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/10/17/life-beyond-the-retina-display.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/10/17/life-beyond-the-retina-display.html</guid>
        
        
      </item>
    
      <item>
        <title>Thinking About a Ruby Driven AWS Lambda Approach Using Code that Writes Code</title>
        <description>&lt;p&gt;So I have a computing problem to solve where the amount of data to process vastly exceeds even my desire to spin up EC2 instances.  I really do actually enjoy &lt;a href=&quot;https://fuzzygroup.github.io/blog/tag.html#ansible&quot;&gt;Ansible&lt;/a&gt; but at some point you have to cry to the heavens and shout out “There must be a better way!”.  This is literally an “oh crap” moment when I realized exactly the scale of the problem.&lt;/p&gt;

&lt;p&gt;Note: I’m not at liberty here to give specifics so I’m talking in generalities quite a bit in this post.  Apologies.&lt;/p&gt;

&lt;p&gt;AWS has a lot of tools that can be applied to big data process but two come to mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/emr/&quot;&gt;Elastic Map Reduce&lt;/a&gt; or EMR&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;Lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EMR is older and harder to use so I’m going to avoid it for now in favor of the new hotness – &lt;strong&gt;Lambda&lt;/strong&gt;.  Here’s the brag statement about Lambda:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Run code without thinking about servers.
Pay for only the compute time you consume.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s a pretty compelling statement to make and it is actually close to a holy grail of distributed computing.&lt;br /&gt;
I have a big data problem that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Involves about 15,000 unique domains that need to be checked against an index of data&lt;/li&gt;
  &lt;li&gt;Where if the domain is a match a secondary request needs to be made and several data points extracted from an api&lt;/li&gt;
  &lt;li&gt;The results of #2 need to be posted to an API that we control&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For valid separation of concerns issues the data fed into 1 is separate from the code in 1 (its driven by a separate git repo).  And all of our code is in Ruby which is not a supported Lambda language.  This raises some actual issues in terms of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do we make this work&lt;/li&gt;
  &lt;li&gt;How do we get our existing ruby code to run in Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is an interesting approach to packaging up our existing ruby code using Traveling Ruby and then run that &lt;a href=&quot;https://www.krautcomputing.com/blog/2016/02/29/how-to-run-ruby-scripts-on-aws-lambda-using-ansible/&quot;&gt;package on Lambda&lt;/a&gt;.  But before we goto that level of effort perhaps we need to examine the metrics on the codebase in question:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake stats
+----------------------+--------+--------+---------+---------+-----+-------+
| Name                 |  Lines |    LOC | Classes | Methods | M/C | LOC/M |
+----------------------+--------+--------+---------+---------+-----+-------+
| Controllers          |      3 |      3 |       1 |       0 |   0 |     0 |
| Helpers              |      2 |      2 |       0 |       0 |   0 |     0 |
| Jobs                 |      2 |      2 |       1 |       0 |   0 |     0 |
| Models               |      3 |      3 |       1 |       0 |   0 |     0 |
| Mailers              |      4 |      4 |       1 |       0 |   0 |     0 |
| Channels             |      8 |      8 |       2 |       0 |   0 |     0 |
| Javascripts          |     29 |      4 |       0 |       1 |   0 |     2 |
| Libraries            |    480 |    366 |      12 |      38 |   3 |     7 |
| Tasks                |      7 |      6 |       0 |       0 |   0 |     0 |
| Controller tests     |      0 |      0 |       0 |       0 |   0 |     0 |
| Helper tests         |      0 |      0 |       0 |       0 |   0 |     0 |
| Model tests          |      0 |      0 |       0 |       0 |   0 |     0 |
| Mailer tests         |      0 |      0 |       0 |       0 |   0 |     0 |
| Integration tests    |      0 |      0 |       0 |       0 |   0 |     0 |
| Lib specs            |    270 |    231 |       0 |       1 |   0 |   229 |
+----------------------+--------+--------+---------+---------+-----+-------+
| Total                |    808 |    629 |      18 |      40 |   2 |    13 |
+----------------------+--------+--------+---------+---------+-----+-------+
  Code LOC: 398     Test LOC: 231     Code to Test Ratio: 1:0.6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we’re actually only talking about 12 classes, 38 methods and 366 LOC.  So this isn’t large at all.  We know that one approach to running this is running it as packaged ruby.  Another approach would be &lt;em&gt;code that writes code&lt;/em&gt; but before we talk about this, let’s talk about the execution context.&lt;/p&gt;

&lt;p&gt;This application needs to run every time period from 2013 to present.  And depending on the results from our initial prototype, that will be either monthly or quarterly.  So if this is quarterly we need to run it 12 times - (4 in 2013, 4 in 2015, 4 in 2016) and if its monthly then we need to run it 36 times.  And we’ll need to run it monthly going forward.  And, each time, the input data is different.&lt;/p&gt;

&lt;h1 id=&quot;code-that-writes-code&quot;&gt;Code that Writes Code&lt;/h1&gt;

&lt;p&gt;There are lots of different approaches to code that writes code – generators, real AI and template based approaches.  For this I would use a template based approach as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Port the Ruby code to JavaScript using a single file approach as much as possible.&lt;/li&gt;
  &lt;li&gt;Locate the input data we need to send to the initial api near the top as essentially a global array of values.  For test purposes you only need to use 1 or 2; only enough to prove the concept.&lt;/li&gt;
  &lt;li&gt;Convert the code in #2 to a template just as Rails uses, say, an ERB template (you can actually use ERB in other contexts than views).&lt;/li&gt;
  &lt;li&gt;Treat the underlying ruby code as a systems automation tool which:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;operates over an array of dates from the past to the present&lt;/li&gt;
  &lt;li&gt;keeps track of what has been submitted to AWS Lambda&lt;/li&gt;
  &lt;li&gt;Reads the template in #3 and fills in the data based on the internal api.&lt;/li&gt;
  &lt;li&gt;packages everything per the &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-create-deployment-pkg.html&quot;&gt;Lambda spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;uses the &lt;a href=&quot;http://docs.aws.amazon.com/sdkforruby/api/Aws/Lambda/Client.html&quot;&gt;AWS Lambda Ruby APIs&lt;/a&gt; to submit the job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this approach while we’re not using Lambda to actually execute our Ruby code, we’re getting the same result, using Lambda’s native JavaScript / node support but still using our overall Ruby framework to run everything and manage the process.  And this will have the advantage of generating an auditable code base that we can dig into if we find any problems.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 13:34:50 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/16/thinking-about-a-ruby-driven-aws-lambda-approach-for-big-data-computing.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/16/thinking-about-a-ruby-driven-aws-lambda-approach-for-big-data-computing.html</guid>
        
        <category>aws</category>
        
        <category>ruby</category>
        
        <category>lambda</category>
        
        <category>software_engineering</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Understanding Systems By Observation - Dropbox</title>
        <description>&lt;p&gt;One of the best bits of computer science I ever learned, I learned in 1989 from my first business partner, Brian Giedt.  We were at a Society for Technical Communications (stc) conference on Technical Documentation and my partner was trying to impress a pretty girl.  And I watch him look at an animation product and pretty much instantly &lt;strong&gt;grok&lt;/strong&gt; how it was doing the animation.  Where I saw a pretty flow of images, he looked at it and understood how the animation was being done.  That was the very first time I saw someone really understand something about the &lt;em&gt;internals&lt;/em&gt; from its &lt;em&gt;externals&lt;/em&gt;.  And once I knew it was possible – I’ve striven to do it as often as I can.  Very often, if you set up the right set of circumstances, you’ll realize exactly how something has to be implemented internally.&lt;/p&gt;

&lt;p&gt;Let’s use Dropbox as an example.  We all know that Dropbox transfers the content you put in it to all other machines you have hooked up to it.  And that’s a simple 1 to many transfer.  But how does Dropbox work when you already have content in it and you re-arrange it?  Does it resend everything or does it figure out what it has to do and send a command stream to do it instead?&lt;/p&gt;

&lt;p&gt;A few minutes ago I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;created a folder within a folder in Dropbox&lt;/li&gt;
  &lt;li&gt;moved about 15 gb of video files in initial folder to the new folder&lt;/li&gt;
  &lt;li&gt;checked on my iPad about a minute later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And all the files I moved were in the new folder already.  Here’s what this tells me&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s no way that Dropbox deleted and re-transmitted the files in that time; it is simply impossible&lt;/li&gt;
  &lt;li&gt;What Dropbox has to be doing is sending commands that amount to move THIS from HERE to THERE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best I’ve seen to do this is you set up conditions that you know can’t be argued with by physical constraints.  I knew that 15 gb of video data was a big arse chunk of data.  If I had used say a megabyte, well, I wouldn’t have really known if it was a full bandwidth re-arrange or a command stream.  By setting up such a large test, well, I knew something smarter had to be going on.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/software_engineering/2016/10/16/understanding-systems-by-observation-dropbox.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/software_engineering/2016/10/16/understanding-systems-by-observation-dropbox.html</guid>
        
        <category>software_engineering</category>
        
        
        <category>software_engineering</category>
        
      </item>
    
      <item>
        <title>Thinking About a Ruby Driven AWS Lambda Approach for Big Data Computing</title>
        <description>&lt;p&gt;So I have a computing problem to solve where the amount of data to process vastly exceeds even my desire to spin up EC2 instances.  I really do actually enjoy &lt;a href=&quot;https://fuzzygroup.github.io/blog/tag.html#ansible&quot;&gt;Ansible&lt;/a&gt; but at some point you have to cry to the heavens and shout out “There must be a better way!”.  This is literally an “oh crap” moment when I realized exactly the scale of the problem.&lt;/p&gt;

&lt;p&gt;Note: I’m not at liberty here to give specifics so I’m talking in generalities quite a bit in this post.  Apologies.&lt;/p&gt;

&lt;p&gt;AWS has a lot of tools that can be applied to big data process but two come to mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/emr/&quot;&gt;Elastic Map Reduce&lt;/a&gt; or EMR&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;Lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EMR is older and harder to use so I’m going to avoid it for now in favor of the new hotness – &lt;strong&gt;Lambda&lt;/strong&gt;.  Here’s the brag statement about Lambda:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Run code without thinking about servers.
Pay for only the compute time you consume.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s a pretty compelling statement to make and it is actually close to a holy grail of distributed computing.&lt;br /&gt;
I have a big data problem that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Involves about 15,000 unique domains that need to be checked against an index of data&lt;/li&gt;
  &lt;li&gt;Where if the domain is a match a secondary request needs to be made and several data points extracted from an api&lt;/li&gt;
  &lt;li&gt;The results of #2 need to be posted to an API that we control&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For valid separation of concerns issues the data fed into 1 is separate from the code in 1 (its driven by a separate git repo).  And all of our code is in Ruby which is not a supported Lambda language.  This raises some actual issues in terms of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do we make this work&lt;/li&gt;
  &lt;li&gt;How do we get our existing ruby code to run in Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is an interesting approach to packaging up our existing ruby code using Traveling Ruby and then run that &lt;a href=&quot;https://www.krautcomputing.com/blog/2016/02/29/how-to-run-ruby-scripts-on-aws-lambda-using-ansible/&quot;&gt;package on Lambda&lt;/a&gt;.  But before we goto that level of effort perhaps we need to examine the metrics on the codebase in question:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake stats
+----------------------+--------+--------+---------+---------+-----+-------+
| Name                 |  Lines |    LOC | Classes | Methods | M/C | LOC/M |
+----------------------+--------+--------+---------+---------+-----+-------+
| Controllers          |      3 |      3 |       1 |       0 |   0 |     0 |
| Helpers              |      2 |      2 |       0 |       0 |   0 |     0 |
| Jobs                 |      2 |      2 |       1 |       0 |   0 |     0 |
| Models               |      3 |      3 |       1 |       0 |   0 |     0 |
| Mailers              |      4 |      4 |       1 |       0 |   0 |     0 |
| Channels             |      8 |      8 |       2 |       0 |   0 |     0 |
| Javascripts          |     29 |      4 |       0 |       1 |   0 |     2 |
| Libraries            |    480 |    366 |      12 |      38 |   3 |     7 |
| Tasks                |      7 |      6 |       0 |       0 |   0 |     0 |
| Controller tests     |      0 |      0 |       0 |       0 |   0 |     0 |
| Helper tests         |      0 |      0 |       0 |       0 |   0 |     0 |
| Model tests          |      0 |      0 |       0 |       0 |   0 |     0 |
| Mailer tests         |      0 |      0 |       0 |       0 |   0 |     0 |
| Integration tests    |      0 |      0 |       0 |       0 |   0 |     0 |
| Lib specs            |    270 |    231 |       0 |       1 |   0 |   229 |
+----------------------+--------+--------+---------+---------+-----+-------+
| Total                |    808 |    629 |      18 |      40 |   2 |    13 |
+----------------------+--------+--------+---------+---------+-----+-------+
  Code LOC: 398     Test LOC: 231     Code to Test Ratio: 1:0.6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we’re actually only talking about 12 classes, 38 methods and 366 LOC.  So this isn’t large at all.  We know that one approach to running this is running it as packaged ruby.  Another approach would be &lt;em&gt;code that writes code&lt;/em&gt; but before we talk about this, let’s talk about the execution context.&lt;/p&gt;

&lt;p&gt;This application needs to run every time period from 2013 to present.  And depending on the results from our initial prototype, that will be either monthly or quarterly.  So if this is quarterly we need to run it 12 times - (4 in 2013, 4 in 2015, 4 in 2016) and if its monthly then we need to run it 36 times.  And we’ll need to run it monthly going forward.  And, each time, the input data is different.&lt;/p&gt;

&lt;h1 id=&quot;code-that-writes-code&quot;&gt;Code that Writes Code&lt;/h1&gt;

&lt;p&gt;There are lots of different approaches to code that writes code – generators, real AI and template based approaches.  For this I would use a template based approach as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Port the Ruby code to JavaScript using a single file approach as much as possible.&lt;/li&gt;
  &lt;li&gt;Locate the input data we need to send to the initial api near the top as essentially a global array of values.  For test purposes you only need to use 1 or 2; only enough to prove the concept.&lt;/li&gt;
  &lt;li&gt;Convert the code in #2 to a template just as Rails uses, say, an ERB template (you can actually use ERB in other contexts than views).&lt;/li&gt;
  &lt;li&gt;Treat the underlying ruby code as a systems automation tool which:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;operates over an array of dates from the past to the present&lt;/li&gt;
  &lt;li&gt;keeps track of what has been submitted to AWS Lambda&lt;/li&gt;
  &lt;li&gt;Reads the template in #3 and fills in the data based on the internal api.&lt;/li&gt;
  &lt;li&gt;packages everything per the &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-create-deployment-pkg.html&quot;&gt;Lambda spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;uses the &lt;a href=&quot;http://docs.aws.amazon.com/sdkforruby/api/Aws/Lambda/Client.html&quot;&gt;AWS Lambda Ruby APIs&lt;/a&gt; to submit the job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this approach while we’re not using Lambda to actually execute our Ruby code, we’re getting the same result, using Lambda’s native JavaScript / node support but still using our overall Ruby framework to run everything and manage the process.  And this will have the advantage of generating an auditable code base that we can dig into if we find any problems.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/16/thinking-about-a-ruby-driven-aws-lambda-approach-for-big-data-computing.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/16/thinking-about-a-ruby-driven-aws-lambda-approach-for-big-data-computing.html</guid>
        
        <category>aws</category>
        
        <category>ruby</category>
        
        <category>lambda</category>
        
        <category>software_engineering</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 19 - Back to the Basics, Let's Talk AMIs and EC2 basics</title>
        <description>&lt;p&gt;I just used Hyde to examine my blog and I realized that I have written almost 20,000 words on AWS since 8/23/16 (note some of that is still unfinished and in draft form).  Using my standard writer metric of 250 words per page, that’s 78 printed pages.  Wow.  And, alas, I realize that there are still things I haven’t written about.  And some of them are the sort of basic things that you either just ignore or that you accept by rote - “I know, we’ll use Ubuntu, we love Ubuntu!”.  And, yes, that would be me.  So let’s take a deeper dive here at some of the basic options when you build an EC2 instance.&lt;/p&gt;

&lt;h1 id=&quot;what-is-an-ec2-instance&quot;&gt;What is an EC2 Instance?&lt;/h1&gt;

&lt;p&gt;An EC2 instance is just a server in Amazon’s cloud.  And, from what I can tell, pretty much everything AWS offers comes down to a server somehow.  When you build an EC2 instance you have to base it on an operating system which is called an AMI and there are a bunch of options that define what AMI you want to pick:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quick Start - the most popular options&lt;/li&gt;
  &lt;li&gt;My AMIs - these are amis that you have saved from a machine you already built&lt;/li&gt;
  &lt;li&gt;AWS Marketplace - these are commercial offerings from vendors&lt;/li&gt;
  &lt;li&gt;Community AMIs - these are generally open source AMIs and the number is enormous – more than 50,000 when I checked&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a picture of the initial EC2 instance selection web page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/aws/aws_ami_ec2.png&quot; alt=&quot;aws_ami_ec2.png.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a few basic options that you really want to keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Linux Distro&lt;/strong&gt;.  This is important but can’t be written in a bullet point so it is discussed below.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;32 / 64 bit&lt;/strong&gt;.  There’s no real reason to not go 64 bit.  And if you have a reason then you should be writing this not reading it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Virtualization Type&lt;/strong&gt;.  This should always be HVM as PVM is being phased out.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Root Device Type&lt;/strong&gt;.  This should pretty much always be set to EBS.  EBS allows you to turn off the volume without losing the data on the instance and thus allows you to resize your instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-linux-distro-question&quot;&gt;The Linux Distro Question&lt;/h1&gt;

&lt;p&gt;Asking anyone in the Open Source world what is the best Linux flavor or “distro” (that’s short for distribution) is a bit like asking someone their favorite color – the answer is always different and always subjective.  And while there are differences, in the end, it is all Linux and if you can use one Linux then you can use a different Linux.  I know there are serious Linux folk that read this line and are gnashing their teeth and I apologize.&lt;/p&gt;

&lt;p&gt;Personally I’ve used at different times:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Red Hat&lt;/li&gt;
  &lt;li&gt;Gentoo (I even had a whole data center of more than 100 Gentoo boxes)&lt;/li&gt;
  &lt;li&gt;Ubuntu 12&lt;/li&gt;
  &lt;li&gt;Ubuntu 14&lt;/li&gt;
  &lt;li&gt;Mandriva&lt;/li&gt;
  &lt;li&gt;Suse&lt;/li&gt;
  &lt;li&gt;Debian&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I’m pretty sure there were some others; that’s just want I can remember using.  The short answer is you want to pick a Linux distribution that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;matches what you want to do&lt;/li&gt;
  &lt;li&gt;is well supported&lt;/li&gt;
  &lt;li&gt;is something you understand&lt;/li&gt;
  &lt;li&gt;has a package manager that you can deal with&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-amazon-linux-distribution&quot;&gt;The Amazon Linux Distribution&lt;/h1&gt;

&lt;p&gt;Interestingly Amazon has their own Linux distribution.  I don’t have a ton of experience with it yet but I’m keenly interested in it and I really like their focus on performance.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Good support for Docker&lt;/li&gt;
  &lt;li&gt;Good support for at least somewhat modern development tools; Ruby, PHP and Python all installed right from the start&lt;/li&gt;
  &lt;li&gt;Good package support for the basics - mysql, postgres, etc&lt;/li&gt;
  &lt;li&gt;AWS command line tools installed standard&lt;/li&gt;
  &lt;li&gt;Good support for the AWS ECS&lt;/li&gt;
  &lt;li&gt;Cool text mode EC2 login logo that makes me smile whenever I see it&lt;/li&gt;
  &lt;li&gt;They seem to really care about performance.  The 2016.09 release notes specifically call out the &lt;a href=&quot;https://aws.amazon.com/amazon-linux-ami/2016.09-release-notes/&quot;&gt;7 seconds of boot time&lt;/a&gt; that they cut out.  Sounds silly but its a big deal when you have a lot of machines.  And given that they write the billing rules, they could easily use that 7 seconds in their favor.  The fact that they don’t gives me an incredible amount of confidence in AWS’s billing practices.  Go AWS!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It can’t run anywhere but Amazon.&lt;/li&gt;
  &lt;li&gt;It can’t run on Vagrant for local development&lt;/li&gt;
  &lt;li&gt;Yum / RPM as package managers; this is a personal choice but I vastly prefer apt-get&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-important-is-this-with-automated-provisioning&quot;&gt;How Important Is this With Automated Provisioning?&lt;/h1&gt;

&lt;p&gt;In the days where you configured Linux manually, picking the right distribution was actually quite important.  Thanks to automated provisioning tools like Ansible, I’m not so sure now.  I’ve already used Ansible to move from one version of Linux to another and its just not that hard.  If you write your Ansible playbook properly and abstract things like the username into variables, you can modify it pretty easily to go between distros.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;In the end you likely want to pick:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A well supported Linux distro.  I’d recommend either Ubuntu, RedHat or the Amazon Linux AMI&lt;/li&gt;
  &lt;li&gt;64 Bit&lt;/li&gt;
  &lt;li&gt;HVM Virtualization&lt;/li&gt;
  &lt;li&gt;EBS Root Device&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/10/16/aws-tutorial-19-back-to-the-basics-let-s-talk-amis.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/10/16/aws-tutorial-19-back-to-the-basics-let-s-talk-amis.html</guid>
        
        <category>aws</category>
        
        <category>ami</category>
        
        <category>linux</category>
        
        <category>ec2</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
