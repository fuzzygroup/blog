<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc.
</description>
    <link>https://fuzzygroup.github.io/blog/</link>
    <atom:link href="https://fuzzygroup.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 08 Nov 2016 05:09:13 -0500</pubDate>
    <lastBuildDate>Tue, 08 Nov 2016 05:09:13 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title></title>
        <description>&lt;p&gt;Devise is now close to a standard in the Rails community.  And, despite some concerns that I generally have about it, Devise is a solid piece of software with much to recommend it.  My concerns are always around extending it and I thought that perhaps I should actually document how to extend Devise so I don’t have to rely on their &lt;a href=&quot;https://github.com/plataformatec/devise/wiki&quot;&gt;wiki&lt;/a&gt; (which is oddly incorrect in places) – expand it to all pages and look at the number of things all named&lt;/p&gt;

&lt;h1 id=&quot;branching-to-custom-urls-after-specific-actions&quot;&gt;Branching to Custom Urls After Specific Actions&lt;/h1&gt;

&lt;p&gt;The simple way for this is to define a custom action in ApplicationController.  Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def after_sign_in_path_for(resource) 
  return &quot;/users&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Theoretically any path should be able to be returned&lt;/p&gt;

&lt;h1 id=&quot;generating-your-own-controllers&quot;&gt;Generating Your Own Controllers&lt;/h1&gt;

&lt;p&gt;While the after_sign_in_path_for approach works the problem is that if you want to do something really custom then you need your own controller.  Let’s say you want to deeply hook into login and registration.  Then you need to generate new controllers as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails generate devise:controllers users
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will produce this output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Running via Spring preloader in process 59017
create  app/controllers/users/confirmations_controller.rb
create  app/controllers/users/passwords_controller.rb
create  app/controllers/users/registrations_controller.rb
create  app/controllers/users/sessions_controller.rb
create  app/controllers/users/unlocks_controller.rb
create  app/controllers/users/omniauth_callbacks_controller.rb    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s more than we actually want.  There are options that let you specify exactly which controller you want but I didn’t have a lot of luck making them work so I just deleted what I didn’t want.&lt;/p&gt;

&lt;p&gt;Usually you find out that you need this after you’ve already gotten Devise working and have a custom set of routes.  In my case I had this set of routes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devise_for :users, path: &quot;auth&quot;, path_names: {sign_in: 'login', 
                                              sign_out: 'logout',
                                              password: 'secret', 
                                              confirmation: 'verification', 
                                              unlock: 'unblock', 
                                              registration: 'register', 
                                              sign_up: 'cmon_let_me_in'}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After generating my controllers, here’s how I changed the routes above to integrate:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devise_for :users, path: &quot;auth&quot;, controllers: {
  sessions: 'users/sessions',
  registrations: 'users/registrations'
},
path_names:  {
  sign_in: 'login',
  sign_out: 'logout',
  password: 'secret',
  confirmation: 'verification',
  unlock: 'unblock',
  registration: 'register',
  sign_up: 'cmon_let_me_in'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now once you generate your controllers, Devise will give you a nice stub showing that you need to uncomment an action to revise it and super is there indicating that you can mostly just inherit the functionality you want.  You can then add your own code either before or after the super.  If you’re uncomfortable with super then you can always go and get the full devise controller code from Github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plataformatec/devise/blob/master/app/controllers/devise/registrations_controller.rb&quot;&gt;Registrations Controller&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/plataformatec/devise/blob/master/app/controllers/devise/sessions_controller.rb&quot;&gt;Sessions Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: In case it wasn’t obvious the registrations controller creates accounts and the sessions controller creates logins.  Both are restful so, for example, sessions#new is the login form and sessions#create is the actual login itself.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Nov 2016 05:09:13 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/08/2016-11-07-extending-devise.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/08/2016-11-07-extending-devise.html</guid>
        
        
      </item>
    
      <item>
        <title>Advice for Chris Kimball of Milk Street</title>
        <description>
</description>
        <pubDate>Sun, 06 Nov 2016 12:14:45 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/06/advice-for-chris-kimball-of-milk-street.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/06/advice-for-chris-kimball-of-milk-street.html</guid>
        
        
      </item>
    
      <item>
        <title>Going Deeper - Debugging Saml</title>
        <description>&lt;p&gt;This blog post expands on my current interest in &lt;a href=&quot;https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html&quot;&gt;SAML&lt;/a&gt; with a more detailed investigation of SAML, IdP versus SP initiation and how you actually debug it.  In the process of writing this, I reached out to two companies that support SAML in their products and I wanted to express a special thanks to Scott G at &lt;a href=&quot;http://www.mindtouch.com/&quot;&gt;MindTouch&lt;/a&gt; who did an absolutely fantastic job of answering questions – honestly the best technical support I’ve received in years.  Kudos and thank you!&lt;/p&gt;

&lt;h1 id=&quot;debugging-a-saml-transaction&quot;&gt;Debugging a SAML Transaction&lt;/h1&gt;

&lt;p&gt;The very first thing you want to do if you’re debugging saml stuff is use FireFox and get the &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjS3Lbu3pPQAhVL0oMKHTOtAwgQFggdMAA&amp;amp;url=https%3A%2F%2Faddons.mozilla.org%2Fen-US%2Ffirefox%2Faddon%2Fsaml-tracer%2F&amp;amp;usg=AFQjCNHN7JDX_TkQIZOiPV2tMSVDyfgwkA&quot;&gt;SAML tracer&lt;/a&gt; plugin.  This tool shows you the SAML back and forth flow and it is absolutely brilliant:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/saml_tracer.png&quot; alt=&quot;saml_tracer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When Scott G was helping me, his first suggestion was “Ok – go and get the FireFox SAML tracer” and with that we were off to the races.  Good tools always make things better and this was excellent.&lt;/p&gt;

&lt;p&gt;Note: There is also a &lt;a href=&quot;https://chrome.google.com/webstore/detail/saml-chrome-panel/paijfdbeoenhembfhkhllainmocckace?hl=en&quot;&gt;Chrome SAML tool&lt;/a&gt; which I haven’t tried yet.  It doesn’t appear to be as complete as SAML Tracer since it only supports post requests.&lt;/p&gt;

&lt;h1 id=&quot;idp-versus-sp-initiation&quot;&gt;IdP versus SP Initiation&lt;/h1&gt;

&lt;p&gt;When you first get involved with SAML one of the initial things you’ll be asked is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IdP init or SP Init?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you may remember from my &lt;a href=&quot;https://fuzzygroup.github.io/blog/saml/2016/10/28/understanding-saml-and-sso.html&quot;&gt;last post on SAML&lt;/a&gt;, IdP is the identity provider, the bit of software that owns the user information and SP is the service provider, the bit of software that us trying to use identity.&lt;/p&gt;

&lt;p&gt;This is a really, really big deal in the SAML community and what sounds like a network protocol question is actually a user flow question that centers on a chicken and egg issue of what happens first.  The &lt;a href=&quot;https://www.google.com/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=saml%20idp%20vs%20sp%20initiated&quot;&gt;almost 7,000 results&lt;/a&gt; in Google for this very simple thing indicates just how many people are confused about it.  As always Stack Overflow has a &lt;a href=&quot;http://stackoverflow.com/questions/12779532/differences-between-sp-initiated-sso-and-idp-initiated-sso&quot;&gt;great page on this topic&lt;/a&gt; but let me try and paraphrase:&lt;/p&gt;

&lt;p&gt;For IdP Init:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user starts at the IdP login page and then drills deeper into the resources granted by the service provider.&lt;/li&gt;
  &lt;li&gt;This is done with an HTTP post to an  end point on the service provider that contains two things:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;a SAML Assertion which says essentially “here is who I am”.&lt;/li&gt;
  &lt;li&gt;a destination parameter of what data they want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For SP init:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 03:57:39 -0500</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/06/going-deeper-debugging-saml.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/06/going-deeper-debugging-saml.html</guid>
        
        
      </item>
    
      <item>
        <title>When Bundler Insists On Putting Gems into vendor/cache</title>
        <description>&lt;p&gt;If you’ve ever find that Bundler insists on putting gems in vendor/cache and you can’t make it stop, check the .bundle/config file and you will find a directive that was written there as a result of a bundle install –path vendor/bundle command you did previously.  Once you execute this command, bundler will write gems to this directory forever more unless you delete the directive.  This can be maddening as .bundle/config isn’t a file that many of us look at.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bundler.io/v1.2/bundle_install.html&quot;&gt;Bundler Reference&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/rails/2016/11/06/when-bundler-insists-on-putting-gems-into-vendor-cache.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/rails/2016/11/06/when-bundler-insists-on-putting-gems-into-vendor-cache.html</guid>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        <category>bundler</category>
        
        <category>gem</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Git Tip - Resetting Master to A Previous Commit</title>
        <description>&lt;p&gt;I would argue that most of our git usage is pretty straight forward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git add&lt;/li&gt;
  &lt;li&gt;git commit&lt;/li&gt;
  &lt;li&gt;git push&lt;/li&gt;
  &lt;li&gt;git branch&lt;/li&gt;
  &lt;li&gt;git co&lt;/li&gt;
  &lt;li&gt;git merge&lt;/li&gt;
  &lt;li&gt;git log&lt;/li&gt;
  &lt;li&gt;git diff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That covers literally 99% of what I have to do with git on a daily basis.  So when you need to do something more complex it can be a bit disconcerting.  Today I had to revert to a previous git hash and make that commit, from 2 days ago, master.  Here’s the process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use github to find the commit you want to revert to.  This will be referred to as COMMIT_HASH&lt;/li&gt;
  &lt;li&gt;Commit everything currently in progress so you don’t get any error messages about it.  Or delete everything (I have a git trash alias which does checkout -f).&lt;/li&gt;
  &lt;li&gt;Use this command: &lt;strong&gt;git reset –hard COMMIT_HASH&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;This makes COMMIT_HASH your local master.  However you will NOT be able to push because you have “time traveled” to the past.  The secret here is to do a -f push so your changes are forced to the serve.  Use this command: &lt;strong&gt;git push -f origin master&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note 1: In this case I didn’t even try to preserve the changes made within that 2 day period.  That’s possible but definitely harder.&lt;/p&gt;

&lt;p&gt;Note 2: The -f overwrites what’s on the server since COMMIT_HASH so it will never be available.  &lt;strong&gt;Please understand this well before doing this.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Note 3: My pairing buddy, &lt;a href=&quot;http://www.dasari.me&quot;&gt;Dv&lt;/a&gt;, helped out with this.  Thanks man!&lt;/p&gt;

&lt;p&gt;Note 4: &lt;a href=&quot;http://stackoverflow.com/questions/10298291/cannot-push-to-github-keeps-saying-need-merge&quot;&gt;Stack Overflow on git push -f&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/git/2016/11/06/git-tip-resetting-master-to-a-previous-commit.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/git/2016/11/06/git-tip-resetting-master-to-a-previous-commit.html</guid>
        
        <category>git</category>
        
        <category>version_control</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>AWS Tutorial 22 - Making Your Boxes Pingable</title>
        <description>&lt;p&gt;The security default for AWS is brilliantly simple: &lt;strong&gt;Everything, absolutely everything, is locked down by default&lt;/strong&gt;.  Once you understand that then developing on the AWS platform becomes a lot simpler.  Let’s take, for example, a simple EC2 instance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create it and you would generally assume that a server is pingable.&lt;/li&gt;
  &lt;li&gt;So you try pinging the DNS name and it fails.  Hm…&lt;/li&gt;
  &lt;li&gt;So you try pinging the public IP and that fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The answer here is simple – everything is locked down by default.  Even something as innocuous as ping.  Every AWS box comes with what’s called a Security Group and Amazon describes this a &lt;em&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html&quot;&gt;virtual firewall that controls the traffic for one or more instances&lt;/a&gt;&lt;/em&gt;.  Every box you create on AWS will automatically get a Security Group, confusingly named, Launch Wizard N where N is just an incrementing integer.  And since most of us generally accept defaults, you may end up with security groups named:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Launch Wizard 1&lt;/li&gt;
  &lt;li&gt;Launch Wizard 2&lt;/li&gt;
  &lt;li&gt;Launch Wizard ..&lt;/li&gt;
  &lt;li&gt;Launch Wizard 11&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At least that’s what my many attempts at AWS experimentation have left me with.  I’d strongly suggest you name these well.  For the bulk of us, networking is confusing enough without cruft like “Launch Wizard N”.  Honestly!&lt;/p&gt;

&lt;p&gt;Stack Overflow, as always, has a useful &lt;a href=&quot;http://stackoverflow.com/questions/21981796/cannot-ping-aws-ec2-instance&quot;&gt;piece&lt;/a&gt; on this.  Here’s what to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You have to edit the Security Group to which your EC2 instance belongs.  If you don’t yet have a security group then add a new one.&lt;/li&gt;
  &lt;li&gt;Add a new rule and select the All ICMP option from the drop downs.&lt;/li&gt;
  &lt;li&gt;If you want to restrict people probing for your instance then lock it down to your own IP address but there are pros and cons.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; AWS strongly wants you to lock down all non http / https traffic to your own ip address and it will actually natter at you about this even for ping.  If you are using a remote monitoring service, however, like the absolutely wonderful &lt;a href=&quot;http://www.wormly.com&quot;&gt;wormly&lt;/a&gt;, then locking this down to your ip address will prevent that remote service from monitoring via ping.  Given that ping is far less overhead than http monitoring, you might want this so make a real decision here.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/aws/2016/11/06/aws-tutorial-22-making-your-boxes-pingable.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/aws/2016/11/06/aws-tutorial-22-making-your-boxes-pingable.html</guid>
        
        <category>aws</category>
        
        <category>security_group</category>
        
        <category>ping</category>
        
        <category>security</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Postmac 002 -- Evaluating Editors for Elementary OS - VS Code, Sublime Text, Atom</title>
        <description>
</description>
        <pubDate>Sat, 05 Nov 2016 15:52:57 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/05/postmac-002-evaluating-editors-for-elementary-os-vs-code-sublime-text-atom.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/05/postmac-002-evaluating-editors-for-elementary-os-vs-code-sublime-text-atom.html</guid>
        
        
      </item>
    
      <item>
        <title>Postmac 002 -- Adding a New SSH Key and Setting It For Github</title>
        <description>&lt;p&gt;https://confluence.atlassian.com/bitbucketserver/creating-ssh-keys-776639788.html&lt;/p&gt;

&lt;p&gt;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&lt;/p&gt;

</description>
        <pubDate>Sat, 05 Nov 2016 09:03:39 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/05/postmac-002-adding-a-new-ssh-key-and-setting-it-for-github.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/05/postmac-002-adding-a-new-ssh-key-and-setting-it-for-github.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Set a New URL in Chrome on New Tab</title>
        <description>&lt;p&gt;https://chrome.google.com/webstore/detail/new-tab-redirect/icpgjfneehieebagbmdbhnlpiopdcmna/related&lt;/p&gt;

&lt;p&gt;https://support.google.com/chrome/answer/95314?hl=en &amp;lt;== this crap is unacceptable.  grandfather’s porn&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 09:00:43 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/05/how-to-set-a-new-url-in-chrome-on-new-tab.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/05/how-to-set-a-new-url-in-chrome-on-new-tab.html</guid>
        
        
      </item>
    
      <item>
        <title>foo1</title>
        <description>
</description>
        <pubDate>Sat, 05 Nov 2016 08:40:48 -0400</pubDate>
        <link>https://fuzzygroup.github.io/blog/2016/11/05/foo1.html</link>
        <guid isPermaLink="true">https://fuzzygroup.github.io/blog/2016/11/05/foo1.html</guid>
        
        
      </item>
    
  </channel>
</rss>
