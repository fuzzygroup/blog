<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Jul 2017 17:14:06 -0400</pubDate>
    <lastBuildDate>Sun, 09 Jul 2017 17:14:06 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>JavaScript and CSS Magic for the Rails Front End Challenged</title>
        <description>&lt;p&gt;I am, as I have often written, front end challenged.  I grew up on the Internet writing HTML long before JavaScript and CSS and there’s that old aphorism about old dogs, new tricks… Happily, the people in my nerd life, offer to teach me a trick or two from time to time and, well, &lt;a href=&quot;https://www.nickjanetakis.com/blog/&quot;&gt;Nick&lt;/a&gt; came thru for me this morning so I thought I’d write it all down.&lt;/p&gt;

&lt;p&gt;The problem at hand was a landing page for a SAAS app with screenshots where it was hard to read the text in the screenshots (think a dense, information packed dashboard).  Nick said to me “those should be zoomable; just &lt;a href=&quot;http://github.com/fat/zoom.js&quot;&gt;zoom.js&lt;/a&gt;”.  I made my usual grumbles about being front end challenged but then realized that I was basically being a &lt;strong&gt;winer&lt;/strong&gt; – and I hate winers, so to work!&lt;/p&gt;

&lt;p&gt;Zoom.js is a combination of CSS and JavaScript that makes an image clickable as a zoomable overlay onto the current page.  It is basically the same as &lt;a href=&quot;https://medium.design/image-zoom-on-medium-24d146fc0c20&quot;&gt;Medium.com&lt;/a&gt;’s image zooming which is a brilliant implementation (thank you Brad Birdsall and the whole Medium team).  And thanks to Github user &lt;a href=&quot;http://www.github.com/fat/&quot;&gt;fat&lt;/a&gt; who actually did the hard work on this.&lt;/p&gt;

&lt;p&gt;It should be noted that Zoom.js is jQuery based which means that it won’t work off the bat in Rails 5.1 without the gem ‘jquery-rails’ line being present in Gemfile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I recognize that some of this isn’t perfect.  Specifically this library is clearly packaged to be installed by gulp in an automated fashion but I’ve never had a lot of luck with gulp hence the use below of wget / curl.&lt;/p&gt;

&lt;h1 id=&quot;how-to-add-zoomjs-to-a-rails-application&quot;&gt;How to Add zoom.js to a Rails Application&lt;/h1&gt;

&lt;p&gt;Please note that jQuery has been a core Rails dependency for years and years so steps 1 and 2 likely aren’t needed for you.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add jquery to your Rails app if it isn’t present.  Add jquery-rails to Gemfile:
&amp;gt; gem ‘jquery-rails’&lt;/li&gt;
  &lt;li&gt;Require jquery in your application.js:
&amp;gt; //= require juery&lt;/li&gt;
  &lt;li&gt;Add the data-action=&amp;gt;”zoom” to your image_tag calls for any images you want to be zoomable like this:
&amp;gt; &amp;lt;%=image_tag(“screenshot_dashboard.png”, :class =&amp;gt; “img-responsive”, :alt =&amp;gt; “a dashboard view”, “data-action” =&amp;gt; “zoom”)%&amp;gt;&lt;/li&gt;
  &lt;li&gt;In your terminal, change into the app/assets/stylesheets directory:
&amp;gt; cd app/assets/stylesheets&lt;/li&gt;
  &lt;li&gt;Do a wget or curl on the url for the css.  I got this url by navigating the source tree down to zoom.css and then viewing the file and clicking the raw view:
&amp;gt; wget https://raw.githubusercontent.com/fat/zoom.js/master/css/zoom.css&lt;/li&gt;
  &lt;li&gt;Do a wget or curl on the url for the js.  I got this url by navigating the source tree down to zoom.js and then viewing the file and clicking the raw view:
&amp;gt; https://raw.githubusercontent.com/fat/zoom.js/master/js/zoom.js&lt;/li&gt;
  &lt;li&gt;Add the css and js to your application layout, application.html.erb, with two lines like these (obviously you need to add angle braces around them; my blogging tool eats the text if I show them, alas):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;link href=&quot;assets/zoom.css&quot; rel=&quot;stylesheet&quot;&lt;/p&gt;

&lt;p&gt;script src=&quot;assets/zoom.js&quot;&lt;/p&gt;

</description>
        <pubDate>Sat, 08 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/07/08/javascript-and-css-magic-for-the-rails-front-end-challenged.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/07/08/javascript-and-css-magic-for-the-rails-front-end-challenged.html</guid>
        
        <category>rails</category>
        
        <category>javascript</category>
        
        <category>css</category>
        
        <category>images</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Why I Haven't Switched Away from OSX</title>
        <description>&lt;p&gt;It should be noted that these problems aren’t just at the operating system or GUI level.  Now I will admit that things tend to be worst at the , as an example, if I prematurely stop an RSpec test run then&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Jul 2017 10:54:56 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2017/07/07/why-i-haven-t-switched-away-from-osx.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2017/07/07/why-i-haven-t-switched-away-from-osx.html</guid>
        
        <category>osx</category>
        
        <category>linux</category>
        
        
        <category>OSX</category>
        
      </item>
    
      <item>
        <title>How To Be A Developer 011 - Bump Up Your Google Fu</title>
        <description>&lt;p&gt;site:&lt;/p&gt;

&lt;p&gt;quoted terms&lt;/p&gt;

&lt;p&gt;change time spec to last month or last year&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Jul 2017 07:27:45 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/07/04/how-to-be-a-developer-011-bump-up-your-google-fu.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/07/04/how-to-be-a-developer-011-bump-up-your-google-fu.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 012 - Vocabulary</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I’ve taken on a new project recently.  I’m helping teach some local (Indianapolis) homeless youth basic software engineering using the web developer curriculum from &lt;a href=&quot;http://www.freecodecamp.com&quot;&gt;Free Code Camp&lt;/a&gt;.  Initially I’m teaching two students and we’re working out of the &lt;a href=&quot;https://outreachindiana.org/&quot;&gt;Outreach Indiana&lt;/a&gt; facility in downtown Indianapolis.  Outreach Indiana is a fantastic charity that truly does good work.&lt;/p&gt;

&lt;p&gt;I thought I’d write a series of essays on How to Be a Developer that reflect some of the things I’ve learned over a career working in high tech.  While I am a fan of what Free Code Camp does, I thought some practical, hands on advice might add some value for my students.  I’ve structured these as a series of single topic narratives arranged numerically.&lt;/p&gt;

&lt;h1 id=&quot;lesson-012---vocabulary&quot;&gt;Lesson 012 - Vocabulary&lt;/h1&gt;

&lt;p&gt;One of the very best decisions I ever made took place in a Walden Books, an old fashioned bookstore, where I purchased an issue of Byte magazine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/byteapril82.jpg&quot; alt=&quot;byteapril82.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was 14 years old.&lt;/p&gt;

&lt;p&gt;That issue of Byte magazine was probably 450 pages or so in length and I understood maybe 1 word in 10, possibly as few as 1 word in 50 (I did pretty well with pronouns and articles).  When you’re 14 years old and you see articles like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An introduction to two common interfaces between computers and other devices&lt;/li&gt;
  &lt;li&gt;Designing the Star User Interface&lt;/li&gt;
  &lt;li&gt;A Disk Operating System for FORTH, An In-depth Look at How a DOS Operates&lt;/li&gt;
  &lt;li&gt;You can trim text size by 40 percent by encoding common character strings&lt;/li&gt;
  &lt;li&gt;Texas Instruments’ SN76832AN Infrared Remote-Control Receiver simplifies the tough job of receiving modulated infrared light.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; Thank you &lt;a href=&quot;https://archive.org/details/byte-magazine-1982-04&quot;&gt;Archive.org&lt;/a&gt; for putting my proto history online; Appreciated!&lt;/p&gt;

&lt;p&gt;well, there just isn’t a lot that you’re going to understand out of the gate but what Byte magazine did for me was give me a &lt;em&gt;vocabulary&lt;/em&gt;.  Just after reading thru that issue, I knew:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;that &lt;em&gt;Forth&lt;/em&gt; was a language where you made your own “words”&lt;/li&gt;
  &lt;li&gt;that &lt;em&gt;interfaces&lt;/em&gt; were important&lt;/li&gt;
  &lt;li&gt;that user interfaces could be &lt;em&gt;more than text menus&lt;/em&gt; (remember 1982 – pre Lisa, pre Macintosh)&lt;/li&gt;
  &lt;li&gt;that text could be compressed with &lt;em&gt;encoding&lt;/em&gt; (even if I didn’t understand all of it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a budding developer, one of the hardest things isn’t actually the coding, it is being just &lt;em&gt;aware of &lt;strong&gt;everything&lt;/strong&gt;&lt;/em&gt;.  Computing is a vast field with so much going on in it that you’ll generally find that you’re doing something that someone else has already solved.  But if you don’t even have vocabulary to know that something exists, how can you even Google for it?  In 1982 Byte magazine gave me that vocabulary, but, times change and there is no more Byte magazine so what is a new developer to do?&lt;/p&gt;

&lt;p&gt;My advice, to channel &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Graduate&quot;&gt;The Graduate&lt;/a&gt;, is one world: &lt;em&gt;Podcasts&lt;/em&gt; (apologies if you miss the reference - look for “plastic”).  Podcasts are (generally) free audio streams on the Internet that you can put on a mobile device or your desktop and listen to at your leisure.  There are a huge number of developer podcasts but the one I always recommend is &lt;a href=&quot;https://softwareengineeringdaily.com/&quot;&gt;Software Engineering Daily&lt;/a&gt;, also known as SE Daily, by Jeff Atwood.  In the same way that Byte magazine once exposed me to things I had no idea about, I find that today from SE Daily.  Here are some of the things that I learned about in the past month from SE Daily:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Assembly&lt;/li&gt;
  &lt;li&gt;IOT Edge&lt;/li&gt;
  &lt;li&gt;Setting Up Your Own ServerLess Cluster&lt;/li&gt;
  &lt;li&gt;Video Object Segmentation&lt;/li&gt;
  &lt;li&gt;Relay Modern&lt;/li&gt;
  &lt;li&gt;“Cloud Native”&lt;/li&gt;
  &lt;li&gt;Convolutional Neural Networks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these were terms that I had ever encountered (neural nets, yes, convolutional, no) and each of them, covered in about an hour, expanded my understanding.  Am I an expert?  Of course not but what I now have is the knowledge that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this thing exists&lt;/li&gt;
  &lt;li&gt;what type of problem it helps me solve&lt;/li&gt;
  &lt;li&gt;where I might learn more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re just starting out as a developer, I think there’s probably no better way to expand your vocabulary than a solid developer podcast like Software Engineering Daily.  Recommended.&lt;/p&gt;

</description>
        <pubDate>Mon, 03 Jul 2017 08:42:47 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/07/03/how-to-be-a-developer-012-vocabulary.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/07/03/how-to-be-a-developer-012-vocabulary.html</guid>
        
        
      </item>
    
      <item>
        <title>How To Be A Developer 001 - Commit</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I’ve taken on a new project recently.  I’m helping teach some local (Indianapolis) homeless youth basic software engineering using the web developer curriculum from &lt;a href=&quot;http://www.freecodecamp.com&quot;&gt;Free Code Camp&lt;/a&gt;.  Initially I’m teaching two students and we’re working out of the &lt;a href=&quot;https://outreachindiana.org/&quot;&gt;Outreach Indiana&lt;/a&gt; facility in downtown Indianapolis.  Outreach Indiana is a fantastic charity that truly does good work.&lt;/p&gt;

&lt;p&gt;I thought I’d write a series of essays on How to Be a Developer that reflect some of the things I’ve learned over a career working in high tech.  While I am a fan of what Free Code Camp does, I thought some practical, hands on advice might add some value for my students.  I’ve structured these as a series of single topic narratives arranged numerically.&lt;/p&gt;

&lt;h1 id=&quot;lesson-001---commit&quot;&gt;Lesson 001 - Commit&lt;/h1&gt;

&lt;p&gt;The topic for my first lesson is that to be a developer you need to &lt;strong&gt;commit&lt;/strong&gt;.  Now I don’t mean a &lt;em&gt;git commit&lt;/em&gt; (more on that in #19), what I mean is that the nature of being a developer is &lt;strong&gt;committing to solving problems&lt;/strong&gt;.  I’m going to give you an example of a problem I solved just three days ago:&lt;/p&gt;

&lt;p&gt;Broken:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker-compose -f docker-compose.production.yml exec web bundle exec rake db:migrate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Working:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker-compose -f docker-compose.production.yml exec -T web bundle exec rake db:migrate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What these commands do doesn’t really matter but the only difference between these two commands is a small &lt;strong&gt;-T&lt;/strong&gt; flag that only discovered after troubleshooting an obscure Ansible to Docker error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback (most recent call last):\n  File \&quot;/usr/bin/docker-compose\&quot;, line 9, in 
&amp;lt;module&amp;gt;\n    load_entry_point('docker-compose==1.8.0', 
'console_scripts', 'docker-compose')()
File \&quot;/usr/lib/python2.7/dist-packages/compose/cli/main.py\&quot;, 
line 61, in main
command()
File \&quot;/usr/lib/python2.7/dist-packages/compose/cli/main.py\&quot;, line 113, 
in perform_command handler(command, command_options)
File \&quot;/usr/lib/python2.7/dist-packages/compose/cli/main.py\&quot;, line 441, in exec_command
pty.start()
File \&quot;/usr/lib/python2.7/dist-packages/dockerpty/pty.py\&quot;, line 338, in start
io.set_blocking(pump, flag)
File \&quot;/usr/lib/python2.7/dist-packages/dockerpty/io.py\&quot;, line 32, 
in set_blocking
old_flag = fcntl.fcntl(fd, fcntl.F_GETFL)\nValueError: file descriptor cannot be a negative integer (-1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It took considerable sleuthing to figure this out and the error was identified in &lt;a href=&quot;https://github.com/docker/compose/issues/3352&quot;&gt;a single Github issue&lt;/a&gt; on the underlying Docker project.  And when I say that this problem was obscure, even Docker experts I know had no idea about the -T flag.  Here’s part of the problem description:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;So basically, you need -i for docker exec when you are piping in data to the command.

And you should not use -t for docker exec when you are piping data out from the command.

And docker-compose exec only have -T, which means neither -i or -t. But you cannot represent -i without -t in docker-compose.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s what I mean by obscure…  As a developer you run into this kind of stuff all the time – there’s a reason why when you start with Free Code Camp, it emphasizes using Google before you ever get into a programming language.  A huge part of being a developer is now your skill at using Google and that’s something that I’ll cover in #11.&lt;/p&gt;

&lt;p&gt;To me the very essence of being a developer is being willing to commit to &lt;strong&gt;problem solving&lt;/strong&gt; at this level.  It means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;accepting that you will continually be encountering new things that you don’t know in depth&lt;/li&gt;
  &lt;li&gt;trying hard to understand whatever the problem you encounter&lt;/li&gt;
  &lt;li&gt;researching things in depth, sometimes over and over as the problems shift&lt;/li&gt;
  &lt;li&gt;sometimes solving things by experimenting until you come up with a solution that works&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer, sometimes the problem you solve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is one of languages where you can’t figure out how to do something using your language of choice&lt;/li&gt;
  &lt;li&gt;is one of your tooling where the tool you’re using either doesn’t work or doesn’t work as expected&lt;/li&gt;
  &lt;li&gt;is one of an algorithm where the underlying approach to solving the problem is unclear&lt;/li&gt;
  &lt;li&gt;is an obscure bug which only happens from in certain circumstances; in this case you need to figure out what those circumstances are and how to repeat them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are perhaps an infinite number of variants on these but the underlying nature of being a developer is really problem solving and in order to do that a developer has to commit himself or herself fully.  I’m going to close this with a song lyric that really reminds me of being a developer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I get knocked down, but I get up again
You are never gonna keep me down
I get knocked down, but I get up again
You are never gonna keep me down
I get knocked down, but I get up again
You are never gonna keep me down
I get knocked down, but I get up again
You are never gonna keep me down

[TubThumping by Chumbawamba](https://www.google.com/search?q=i+get+knocked+down+lyrics&amp;amp;ie=utf-8&amp;amp;oe=utf-8) | [Youtube](https://www.youtube.com/watch?v=2H5uWRjFsGc)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problems you solve will continually knock you down and you &lt;strong&gt;have&lt;/strong&gt; to get back up again.  Some of the best developers I have ever worked with actually weren’t the smartest but they knew how to commit and how to just stick with problems like a terrier until it was solved.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/how_to_be_a_developer/2017/07/02/how-to-be-a-developer-001.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/how_to_be_a_developer/2017/07/02/how-to-be-a-developer-001.html</guid>
        
        <category>how_to_be_a_developer</category>
        
        
        <category>how_to_be_a_developer</category>
        
      </item>
    
      <item>
        <title>Adding Mosh Support to Your AWS Servers</title>
        <description>&lt;p&gt;Mosh is an open source project that I’ve been tracking for the past several years as an SSH replacement and it appears that it is finally at a point where it is ready for me to put it into production.  In this tutorial I document the process of installing Mosh client side and server side along with the necessary security group configuration.  In case you’re not aware of Mosh, &lt;a href=&quot;https://mosh.org/&quot;&gt;Mosh&lt;/a&gt; is a UDP based addition to SSH which improves the reliability of connecting to your servers, particularly on mobile.  One of the notable benefits of mosh over ssh is that mosh doesn’t fill up buffers so a CTRL+C key sequence actually stops things immediately.&lt;/p&gt;

&lt;h1 id=&quot;step-1-installing-the-mosh-client-software&quot;&gt;Step 1: Installing the Mosh Client Software&lt;/h1&gt;

&lt;p&gt;If you’re using OSX and HomeBrew then you can install the mosh client software with a simple:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;brew install mobile-shell&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use a different platform then you can find installation instructions &lt;a href=&quot;https://mosh.org/#getting&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-2-installing-the-mosh-server-software&quot;&gt;Step 2: Installing the Mosh Server Software&lt;/h1&gt;

&lt;p&gt;On an Ubuntu box, Mosh is now much easier to install since the package is covered in the standard repositories:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get install mosh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;step-3-opening-your-security-group&quot;&gt;Step 3: Opening Your Security Group&lt;/h1&gt;

&lt;p&gt;The hardest part of all this is actually opening a &lt;em&gt;hole&lt;/em&gt; in your AWS security group to allow the Mosh communications protocol to pass through.  Since ssh is an internet standard, a hole for ssh’s port 22 is always open on an AWS security group.  What you have to do for mosh is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open a UDP type&lt;/li&gt;
  &lt;li&gt;Port Range 60000 - 61000&lt;/li&gt;
  &lt;li&gt;Accessible to anywhere (or just your ip address; up to you)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what your security group settings should look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/mosh_security_group2.png&quot; alt=&quot;mosh_security_group.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s how to get to your AWS security group:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log into the AWS console.&lt;/li&gt;
  &lt;li&gt;Select EC2 instances.&lt;/li&gt;
  &lt;li&gt;Scroll down on the left hand sidebar until you see Security Groups.&lt;/li&gt;
  &lt;li&gt;Click the Security Group links and then select the group you want to modify from the list at the top.&lt;/li&gt;
  &lt;li&gt;Select the Inbound tab and then click the Edit button.&lt;/li&gt;
  &lt;li&gt;Scroll to the bottom and then click Add Rule and define the rule per the screenshot above.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-4-an-ansible-role-for-provisioning-your-server&quot;&gt;Step 4: An Ansible Role for Provisioning Your Server&lt;/h1&gt;

&lt;p&gt;Here is a simple ansible role for adding mosh support to your server using Ansible as provisioning tool:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: install mosh
  apt: pkg=mosh state=present
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By adding this role into whatever you use for a bootstrapping task, you can add mosh support to all your boxes with one command.  And, if you used a single security group for all your AWS instances, that may be the only thing to you need to make all boxes accessible by mosh instead of ssh.&lt;/p&gt;

&lt;h1 id=&quot;step-5-an-example-of-moshing-in-using-an-aws-pem-file&quot;&gt;Step 5: An Example of “moshing in” Using an AWS Pem File&lt;/h1&gt;

&lt;p&gt;I ssh in to my AWS boxes using a command like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ssh -i ~/.ssh/fuzzygroup2.pem ubuntu@xyz.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the Mosh equivalent:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mosh –ssh=”ssh -i ~/.ssh/fuzzygroup2.pem” ubuntu@xyz.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My thanks (and an upvote) to &lt;a href=&quot;https://serverfault.com/questions/825173&quot;&gt;Server Fault&lt;/a&gt; for answering this part of it.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/07/02/adding-mosh-support-to-your-aws-servers.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/07/02/adding-mosh-support-to-your-aws-servers.html</guid>
        
        <category>aws</category>
        
        <category>mosh</category>
        
        <category>devops</category>
        
        <category>osx</category>
        
        <category>ansible</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>How To Be A Developer 019 - Version Control</title>
        <description>
</description>
        <pubDate>Fri, 30 Jun 2017 21:28:37 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/30/how-to-be-a-developer-019-version-control.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/30/how-to-be-a-developer-019-version-control.html</guid>
        
        
      </item>
    
      <item>
        <title>Testing Includes in RSpec</title>
        <description>&lt;p&gt;When you do software testing with a tool like RSpec, TestUnit or MiniTest, the obvious thing to test is the code itself.  So you write a method and then you write the lines of test coverage that are needed.  It won’t work the first time so you iterate – again and again until it works and then the client says something like:&lt;/p&gt;

&lt;p&gt;“We want everything tested”&lt;/p&gt;

&lt;p&gt;And you start considering the meta structure of the class you’re working on and you realize that you need to test an &lt;em&gt;include directive&lt;/em&gt; like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;include DefaultThingInfo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that’s actually interesting – because there is &lt;strong&gt;no code&lt;/strong&gt; to test.  Now you could argue that an include is an inherent property of the class and since the inclusion itself happens at the Ruby level, you &lt;strong&gt;don’t need&lt;/strong&gt; to test it at all.  And I’ve worked with engineers in the past who were credible in making that argument but code bases are &lt;em&gt;living&lt;/em&gt;, &lt;em&gt;ever changing&lt;/em&gt; beasts.  And people do make mistakes – I’ve seen all kinds of times where an engineer fat fingers the keyboard, a line is accidentally deleted or commented out and when you have something as important as an include directive, well, all kinds of badness can happen.&lt;/p&gt;

&lt;p&gt;One approach to testing this would be to look at the underlying mechanics of DefaultThingInfo and see how it works and then test that – essentially testing its effects.  The problem here is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;those effects could change&lt;/li&gt;
  &lt;li&gt;something else in the system could interfere&lt;/li&gt;
  &lt;li&gt;we might not really understand those effects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we really want to do is test that this actually injecting the right stuff into the code and that’s going to require looking into the code’s meta stuff.  Let’s say that this class is named MyStuff.  We can go into Rails Console and look at its methods with:&lt;/p&gt;

&lt;p&gt;2.3.1 :002 &amp;gt; (MyStuff.methods - Object.methods).sort&lt;/p&gt;

&lt;p&gt;Now that’s going to return, for me, 503 methods and I really, really don’t want to read all of them so let’s chain in a .grep call&lt;/p&gt;

&lt;p&gt;2.3.1 :002 &amp;gt; (MyThing.methods - Object.methods).grep(/Thing/i)
[
    [0] thing_class() DefaultThingInfo
]&lt;/p&gt;

&lt;p&gt;We can then check the call method thing_class for its return value and use it in our test.  Let’s say that it returns “ThingInfo”.&lt;/p&gt;

&lt;p&gt;So now our RSpec test becomes something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it &quot;should include DefaultThingInfo&quot; do
  expect(MyClass.think_class).to eq &quot;ThingInfo&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The combination of Class.methods - Object.methods with a .grep call chained onto it is incredibly powerful.  Ever since I learned this, years ago, I’ve been far more likely to experiment in rails console than I am to look things up.&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Jun 2017 21:17:34 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rspec/2017/06/30/testing-includes-in-rspec.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rspec/2017/06/30/testing-includes-in-rspec.html</guid>
        
        <category>rails</category>
        
        <category>rspec</category>
        
        <category>testing</category>
        
        <category>ruby</category>
        
        
        <category>rspec</category>
        
      </item>
    
      <item>
        <title>Testing Callbacks in RSpec</title>
        <description>&lt;p&gt;Callbacks, methods that fire automatically in reaction to other events, can be incredibly powerful but seem to always introduce consequences that are often hard to understand.  The canonical example of this is an after_save callback which causes a change to the object in question which then causes another save and so on – ultimately leading to an infinite loop and a recursive failure.   One of the best ways to understand your callbacks is to write tests for them so you have an understanding of how they are called.&lt;/p&gt;

&lt;p&gt;Here is a simple example of how to test callbacks on a Ruby model:&lt;/p&gt;

&lt;p&gt;Model:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Post &amp;lt; ActiveRecord::Base

  def cannot_change_if_locked
    # some code would go here that checks if the object is locked and returns accordingly
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Test:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe &quot;callbacks&quot; do
  # implementation tested elsewhere; this just verifies that the callback is called
  describe &quot;before_destroy&quot; do
    it &quot;should receive cannot_change_if_locked on a destroy message&quot; do
      # create a post object with the locked trait
      post = FactoryGirl.create(:post, :locked)
      
      # or you could stub it in this way
      allow(post).to receive(:locked).and_return(true)
              
      post.should_receive(:cannot_change_if_locked)
      post.destroy        
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 30 Jun 2017 20:59:20 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rspec/2017/06/30/testing-callbacks-in-rspec.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rspec/2017/06/30/testing-callbacks-in-rspec.html</guid>
        
        <category>rspec</category>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
        <category>rspec</category>
        
      </item>
    
      <item>
        <title>Redis Quick Tip - Purge All Data and Save All Data</title>
        <description>&lt;p&gt;&lt;a href=&quot;redis-quick-tip-purge-all-data.md&quot;&gt;Redis&lt;/a&gt; is a memory backed, key value store, non-sql database / in memory data structure store that plays a crucial role in just about any Internet app.  Often you need to purge all the information in Redis.  Here’s an easy command line way to do this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;redis-cli flushall&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://stackoverflow.com/questions/6851909/how-do-i-delete-everything-in-redis&quot;&gt;Stack Overflow&lt;/a&gt; for providing the answer.&lt;/p&gt;

&lt;p&gt;Now the inverse of flush all is to force a save to disk and you do this with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;redis-cli save&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks to my friend &lt;a href=&quot;http://www.nickjanetakis.com/blog/&quot;&gt;Nick Janetakis&lt;/a&gt; for answering this for me via chat.&lt;/p&gt;

&lt;p&gt;Now if you were running a docker based system managed with Docker Compose and you wanted to wrap these in shell scripts you deploy with your system then you might have something like this (adjust for your own system):&lt;/p&gt;

&lt;p&gt;Save to dredisflush&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This will flush all redis data on this subsystem&quot;&lt;/span&gt; 

&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -p &lt;span class=&quot;s2&quot;&gt;&quot;Press enter to continue&quot;&lt;/span&gt;

docker-compose -f docker-compose.production.yml web &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -T redis-cli flushall
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Save to dredissave&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This will flush all redis data on this subsystem&quot;&lt;/span&gt; 

&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -p &lt;span class=&quot;s2&quot;&gt;&quot;Press enter to continue&quot;&lt;/span&gt;

docker-compose -f docker-compose.production.yml web &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -T redis-cli save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 30 Jun 2017 20:33:17 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/redis/2017/06/30/redis-quick-tip-purge-all-data.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/redis/2017/06/30/redis-quick-tip-purge-all-data.html</guid>
        
        <category>redis</category>
        
        <category>docker</category>
        
        
        <category>redis</category>
        
      </item>
    
  </channel>
</rss>
