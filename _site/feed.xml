<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 09 Aug 2017 11:10:34 -0400</pubDate>
    <lastBuildDate>Wed, 09 Aug 2017 11:10:34 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Referencing Images in Rails 5 CSS Stylesheets</title>
        <description>&lt;p&gt;I recently had the issue where I switched the images in my stylesheet from an absolute url on someone else’s domain to a relative path indicating a file in my /app/assets/images directory and that worked fine – until I deployed and then my image disappeared.  It took a few iterations to figure it out and here’s the trick:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you are using the sass-rails gem which provides the necessary helpers.&lt;/li&gt;
  &lt;li&gt;For an image located in /app/assets/images/intro-bg.jpg, assuming that it is a CSS background image, you want to reference it as background: url(asset_path(“intro-bg.jpg”)).&lt;/li&gt;
  &lt;li&gt;You need to rename your stylesheet with a .scss extension so it is fed through the preprocessor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;https://stackoverflow.com/questions/15257555/how-to-reference-images-in-css-within-rails-4&quot;&gt;Stack Overflow&lt;/a&gt; on this but please note that the highest answer was actually wrong (at least for me).&lt;/p&gt;

&lt;p&gt;You should also note that, in my opinion, the asset pipeline is tricky and I no longer trust anything in it until I’ve deployed to production and tested it myself.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/08/09/referencing-images-in-rails-5-stylesheets.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/08/09/referencing-images-in-rails-5-stylesheets.html</guid>
        
        <category>rails</category>
        
        <category>CSS</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Expanding an AWS Instance Volume</title>
        <description>&lt;p&gt;One of the true promises of cloud computing is freeing you from resource limits.  In an ideal world you’d be able to easily example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ram&lt;/li&gt;
  &lt;li&gt;storage&lt;/li&gt;
  &lt;li&gt;networking&lt;/li&gt;
  &lt;li&gt;cpu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And while this is somewhat true, the reality is always a bit trickier.  I’ve had a new project underway for a while and I’ve been plagued by constant disc space issues.  And while this is a multi container project, my core /var/lib/docker/containers directory is only 1.1 gigs according to a du -sh /var/lib/docker/containers and /var/lib/docker/volumes is only 288K but my /var/lib/docker/aufs directory is 14 + gigs.  Despite diving deeply into the &lt;a href=&quot;https://github.com/spotify/docker-gc&quot;&gt;spotify-gc project&lt;/a&gt; and the &lt;a href=&quot;https://github.com/moby/issues/22207&quot;&gt;open issue on Moby&lt;/a&gt;, none of these actually solved the issue.&lt;/p&gt;

&lt;p&gt;So it was time to just suck it up and add more disc space – even though I am an admitted cheap bastard and this bothers the hell out of me.  I’ve done this in the past and while it wasn’t &lt;a href=&quot;http://fuzzyblog.io/blog/aws/2016/11/26/fear-and-loathing-in-awsville-or-adventures-in-partition-resizing.html&quot;&gt;as bad as the last time&lt;/a&gt;, it still wasn’t obvious.&lt;/p&gt;

&lt;h1 id=&quot;how-to-expand-your-aws-volume-on-a-running-instance&quot;&gt;How to Expand Your AWS Volume on a Running Instance&lt;/h1&gt;

&lt;p&gt;I’ve broken this into two stages.  Here is stage 1 - using the web UI.  &lt;strong&gt;Keep in mind that you are going to need to do a reboot at the end and that means some level of downtime so plan this out accordingly.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start at your dashboard on &lt;a href=&quot;http://console.aws.amazon.com&quot;&gt;console.aws.amazon.com&lt;/a&gt; or however you log in and go into the EC2 section.&lt;/li&gt;
  &lt;li&gt;Select volumes on the left hand sidebar.&lt;/li&gt;
  &lt;li&gt;Select the instance.&lt;/li&gt;
  &lt;li&gt;From the actions drop down select Modify Volume.&lt;/li&gt;
  &lt;li&gt;Change the disc space to whatever you want and click ok.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This starts the process of AWS reallocating your disc.  If you’re on Linux you now need to proceed to stage two:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log into your box.&lt;/li&gt;
  &lt;li&gt;Run a df -h and see if the new space shows up.  It almost certainly won’t but you can always try.&lt;/li&gt;
  &lt;li&gt;Run a lsblk to list your blog devices and you need to note the one that your system is using.  The default is /dev/xvda1&lt;/li&gt;
  &lt;li&gt;Run a sudo resize2fs /dev/xvda1&lt;/li&gt;
  &lt;li&gt;Reboot the box with /sbin/reboot&lt;/li&gt;
  &lt;li&gt;Wait the appropriate amount of time and ssh in again.  Re-run df -h and you should see the new space.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;commentary&quot;&gt;Commentary&lt;/h1&gt;

&lt;p&gt;As a computer scientist I entirely understand why you have to reboot.  But as a consumer of cloud services it feels to me like we should be past this at this stage of the using cloud services.  All of my AWS experience is generally using Ubuntu and if Amazon was to tell me that this wasn’t necessary on the AWS Linux, well, that alone would be enough to make me switch distros.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;p&gt;Here are two useful links that dig into this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html?icmpid=docs_ec2_console&quot;&gt;EC2 Console Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux&quot;&gt;Linux Recognizing the Resized Space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/08/09/expanding-an-aws-instance-volume.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/08/09/expanding-an-aws-instance-volume.html</guid>
        
        <category>aws</category>
        
        <category>docker</category>
        
        <category>aufs</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Utter and Complete Heroku Fail</title>
        <description>&lt;p&gt;So this morning I wanted to get a self hosted version of the &lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;Errbit&lt;/a&gt; project running.  This is an equivalent to BugSnag, Airbrake, HoneyBadger – a tool for tracking errors in live apps.  The inspiration for this was &lt;a href=&quot;http://developeronfire.com/podcast/episode-258-jeff-atwood-sharing-the-house&quot;&gt;Jeff Atwood’s Developer on Fire interview&lt;/a&gt; where he advised three things:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Jeff's top 3 tips for delivering more value:

1. Measure performance all the time - Know how long every unit of work in your app is taking
2. Have user friendly error handling for both the end user and the developer built into your application
2. Have a place where people can go to discuss your software
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m close to releasing something and #2 has been on my list for sometime so I was pretty damn motivated to finally address this. And I’ve wanted to try Errbit for literally years and years so I turned to their &lt;a href=&quot;https://github.com/errbit/errbit/blob/master/docs/deployment/heroku.md&quot;&gt;deployment&lt;/a&gt; page where they, quote clearly, offered Heroku as an option and recommended it as the easiest way to start.  Awesome – right?  Unfortunately I found nothing but complete and total fail.  Here’s what happened:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I created an account.  This is normal and worked well.&lt;/li&gt;
  &lt;li&gt;I had to verify my password via email.  Again normal and worked well.&lt;/li&gt;
  &lt;li&gt;I returned to the &lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/errbit/errbit/tree/master&quot;&gt;automatic app creation&lt;/a&gt; where it now told me I had to enter a credit card.  I did.&lt;/li&gt;
  &lt;li&gt;Installation failed and wouldn’t tell me why “App creation failed.  Please ensure you have valid values in the above form field” – they were all there.&lt;/li&gt;
  &lt;li&gt;Installation failed and it told me to that I needed to enter a credit card – which I did.  But I can do that dance again.&lt;/li&gt;
  &lt;li&gt;I then get “the account foo@bar.com is not permitted to install the sendgrid add-on at this time.  If you believe this is an error please contact support and reference ID 56fda43c-8abb-4378-a320-079bec73f142” (note I did give heroku my correct email).&lt;/li&gt;
  &lt;li&gt;I attempted to put in my own SMTP server but I’m told the same thing about sendgrid even though I put in a &lt;a href=&quot;http://www.sparkpost.com&quot;&gt;sparkpost&lt;/a&gt; domain.&lt;/li&gt;
  &lt;li&gt;There is no link to support in this context.  Shouldn’t this have been automatically linked in place?&lt;/li&gt;
  &lt;li&gt;I find the support button at the bottom of the page (disclaimer - it wasn’t all that far away) which takes me to help.heroku.com.&lt;/li&gt;
  &lt;li&gt;On help.heroku.com I can find no way to actually create a ticket to enter the ID they gave me.  See Screenshot 1 below.&lt;/li&gt;
  &lt;li&gt;There is a &lt;a href=&quot;https://help.heroku.com/tickets&quot;&gt;Ticket history&lt;/a&gt; button which also doesn’t give me a way to create a ticket.  See Screenshot 2 below.&lt;/li&gt;
  &lt;li&gt;At this point I’ve given up in disgust and I’ll figure out how to do this on Docker and my own AWS instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This is a failure on so many damn levels that it is absurd:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Having to enter my credit card twice.&lt;/li&gt;
  &lt;li&gt;Not allowing an authenticated, validated, paying user to use a baseline feature.&lt;/li&gt;
  &lt;li&gt;Not allowing a way around the failure (use of another smtp resource).&lt;/li&gt;
  &lt;li&gt;Not making support easy.&lt;/li&gt;
  &lt;li&gt;Not even allowing me to create a ticket AS THEY TOLD ME TO.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The utter and complete pity of this is that Heroku allowing me to easily run a github repo would have been beautiful.  Here is the beautiful simplicity of the Errbit deploy to Heroku url:&lt;/p&gt;

&lt;p&gt;https://heroku.com/deploy?template=https://github.com/errbit/errbit/tree/master&lt;/p&gt;

&lt;p&gt;That is fantastic – I do not think it could be any simpler than that.  And, if it had worked, I can easily see myself doing this fairly often.  Now?  I suspect I’ll be deleting my Heroku account shortly and walking away forever.  And that’s a crying shame.&lt;/p&gt;

&lt;h1 id=&quot;screenshot-1&quot;&gt;Screenshot 1&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/herokufail1.png&quot; alt=&quot;herokufail1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where would I even create a ticket?&lt;/p&gt;

&lt;h1 id=&quot;screenshot-2&quot;&gt;Screenshot 2&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/herokufail2.png&quot; alt=&quot;herokufail2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So where would I even create a ticket?&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/fail/2017/08/08/utter-and-complete-heroku-fail.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/fail/2017/08/08/utter-and-complete-heroku-fail.html</guid>
        
        <category>heroku</category>
        
        <category>fail</category>
        
        <category>rails</category>
        
        
        <category>fail</category>
        
      </item>
    
      <item>
        <title>Adding AutoSave on Focus Lost to TextMate 2</title>
        <description>&lt;p&gt;I’ve looked this up and set this on every single mac I’ve used since I switched to &lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate 2&lt;/a&gt; so I guess it is time to finally write it down for myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a command prompt.&lt;/li&gt;
  &lt;li&gt;Edit the file ~/Library/Application Support/TextMate/Global.tmProperties&lt;/li&gt;
  &lt;li&gt;Add the line saveOnBlur = true in the top region before the square bracket sections.&lt;/li&gt;
  &lt;li&gt;Save and Exit&lt;/li&gt;
  &lt;li&gt;Relaunch and it should be there.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/textmate/2017/08/07/adding-autosave-on-focus-lost-to-textmate-2.html</guid>
        
        <category>textmate</category>
        
        
        <category>textmate</category>
        
      </item>
    
      <item>
        <title>A Bash Function for the 2 AM Blind Deploy</title>
        <description>&lt;p&gt;I’m doing a lot more bash scripting these days – ever since I opted to write my new deployer, dockerano, in Bash.  Tackling something significant in Bash has absolutely forced me, 20 years plus after I started using it, to finally start to understand it.  By no means do I feel that I have a good handle on Bash – I’m still heavily reliant on &lt;a href=&quot;http://fuzzyblog.io/blog/bash/2017/07/17/improving-your-bash-scripting-with-shellcheck.html&quot;&gt;ShellCheck&lt;/a&gt; but I can actually do things with Bash that I feel somewhat confident about.&lt;/p&gt;

&lt;p&gt;Here’s a bash function that I extended this morning to add OSX specific audio output after a deploy.  The problem at hand is what I call the “2 AM sleep blind deploy”.  We all know what this is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You get a downtime alert on a service&lt;/li&gt;
  &lt;li&gt;You blearily struggle out of bed at 2 am and fix the code&lt;/li&gt;
  &lt;li&gt;You deploy it and you want to get back to bed as soon as possible&lt;/li&gt;
  &lt;li&gt;Something goes wrong with the deploy and you get alerted again just &lt;strong&gt;after&lt;/strong&gt; you get back in bed&lt;/li&gt;
  &lt;li&gt;Lather, rinse, repeat until it is either fixed or morning comes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting close to release on my much obliquely referenced new product and so deploy issues are now first and foremost in my mind. My task for this morning was to add audio output to my deployer &lt;strong&gt;when&lt;/strong&gt; there is a failure.  Here’s what I did:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My first task was to recognize that this only ever had to run on OSX as I develop and deploy from OSX.&lt;/li&gt;
  &lt;li&gt;There were two options - afplay and say.  The &lt;strong&gt;afplay&lt;/strong&gt; utility plays any media file from the command line and that’s good but a loud noise alone won’t tell me &lt;em&gt;what&lt;/em&gt; is down just that &lt;em&gt;something&lt;/em&gt; is down.  And while this works well – once upon a time, I used to trigger Billy Idol’s White Wedding whenever something was down – this time I wanted something a bit more nuanced and information rich.  I could also use the osx command &lt;strong&gt;say&lt;/strong&gt; to speak anything including the url which is failing.  Here is a &lt;a href=&quot;https://superuser.com/questions/298201/how-can-i-play-a-sound-from-the-command-line-in-mac-os-x&quot;&gt;Stack Overflow&lt;/a&gt; on the options.&lt;/li&gt;
  &lt;li&gt;An sample of this is “say http://foo.com/ is down” which will be played thru the speaker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My new tech stack is 7 different services each of which provides a simple health check api but since the obviously differ for each service, I needed a way to store this on a per service basis which I opted to do with a .dockerano_post_deploy_check_urls file in the root directory of each project.  This file can store as many urls as are needed and it will be looped over by the bash script.  Given that most of the site needs to work in both http and https and with www and non www variants, I didn’t want a single check url.  If you allow for both https and http and non www and www variants, that amounts to 4 urls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://foo.com/health&lt;/li&gt;
  &lt;li&gt;http://www.foo.com/health&lt;/li&gt;
  &lt;li&gt;https://foo.com/health&lt;/li&gt;
  &lt;li&gt;https://www.foo.com/health&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, yes, this may be overkill but it is all too easy for almost anything to break so I would argue that the right thing to do is be aggressive in your testing.&lt;/p&gt;

&lt;p&gt;Here’s the bash function I wrote for this with the addition of say:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function verify_site_is_up_after_post_deploy() {
  sleep 5
  IFS=$'\n' read -d '' -r -a site_urls &amp;lt; .dockerano_post_deploy_check_urls  
  
  for site_url in &quot;${site_urls[@]}&quot;; do
    echo &quot;  Processing url: $site_url&quot;
    if curl --output /dev/null --silent --head --fail &quot;$site_url&quot;; then
      status_message_good &quot;$url exists; deploy worked&quot;
    else
      status_message_bad &quot;$url DOES NOT EXIST; DEPLOY FAILURE!!!!&quot;
      say &quot;$url is DOWN!&quot;
    fi

  done
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I adapted the code above based on this  &lt;a href=&quot;https://unix.stackexchange.com/questions/148985/how-to-get-a-response-from-any-url&quot;&gt;source&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/bash/2017/08/06/a-bash-function-for-the-2-am-blind-deploy.html</guid>
        
        <category>devops</category>
        
        <category>deploy</category>
        
        <category>bash</category>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Monitoring Free Disc Space On AWS Instances with Monit, Ansible and SparkPost</title>
        <description>&lt;p&gt;There are lots and lots of things that can go wrong with an AWS instance but I have always found that the single most common problem is nothing more than running out of disc space – log files fill up, too many things get deployed, etc.  And with low end AWS instances being only 8 gigs of free disc space, well, this is bound to happen.&lt;/p&gt;

&lt;p&gt;The expensive solution is simple – buy more disc space – but I’m &lt;strong&gt;cheap&lt;/strong&gt; and that means that the real solution is &lt;strong&gt;monitoring&lt;/strong&gt; and &lt;strong&gt;alerting&lt;/strong&gt;.  Here’s what this means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need a way to configure monitoring, &lt;strong&gt;automatically&lt;/strong&gt;, on &lt;strong&gt;not&lt;/strong&gt; just one server but &lt;strong&gt;all&lt;/strong&gt; servers you have.  We’ll use &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; for this.&lt;/li&gt;
  &lt;li&gt;You need a monitoring daemon, a piece of software which looks for error conditions and sends email when they occur.  We’ll use &lt;a href=&quot;https://github.com/arnaudsj/monit&quot;&gt;monit&lt;/a&gt; for this.&lt;/li&gt;
  &lt;li&gt;You need an email server to send the messages through.  We’ll use &lt;a href=&quot;http://www.sparkpost.com/&quot;&gt;SparkPost&lt;/a&gt; for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-1-installation-of-monit-with-ansible&quot;&gt;Step 1: Installation of Monit with Ansible&lt;/h1&gt;

&lt;p&gt;Ansible, which I’ve &lt;a href=&quot;http://fuzzyblog.io/blog/category.html#ansible&quot;&gt;written a lot about&lt;/a&gt;, is a configuration tool for servers, your laptop, etc – essentially any device that you want to configure can be managed by Ansible.&lt;/p&gt;

&lt;p&gt;Here is a basic Ansible role which installs monit along with a configuration file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- name: install monit
  apt: pkg=monit state=present
  
- name: copy config file
  template: src=roles/install_monit/files/monit.rc dest=/etc/monit/monitrc
  
- name: start monit
  service: name=monit state=started
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The lines above would go in a file roles/install_monit/tasks/main.yml.  You could then call that from a playbook with nothing more than:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: install_monit, tags: monit}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As long as all your AWS instances are listed in an inventory file then this will install monit on all boxes, copy up the configuration file and then restart the service.&lt;/p&gt;

&lt;h1 id=&quot;step-2-monit-configuration&quot;&gt;Step 2: Monit Configuration&lt;/h1&gt;

&lt;p&gt;We do need a simple Monit configuration file to tell it about our email server, credentials and the monitoring rules.  Monit is very powerful and can monitor for all kinds of issues but I’m only going to configure free disc space checking.  Where you see things in UPPERCASE then you need to configure them for your settings.&lt;/p&gt;

&lt;p&gt;This configuration file will be installed into /etc/monit/monitrc by your Ansible playbook.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set daemon 120 with start delay 60

  set mailserver smtp.sparkpostmail.com  port 587 username &quot;SMTP_Injection&quot; password &quot;PASSWORD&quot; using tlsv1 with timeout 30 seconds

  set alert YOURADDRESS@YOURSERVER.COM
  
mail-format {
    From: noreply@YOURSERVER.COM
    Subject: MONIT ERROR !!! [$HOST] $EVENT $SERVICE
    Message: $DESCRIPTION
             $DATE
}

check filesystem &quot;root&quot; with path /dev/xvda1
  if space usage &amp;gt; 90% for 8 cycles then alert
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s it.  Here is the english language explanation of the Monit configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set the daemon to monitor every 2 minutes (120 seconds) with a delay of 60 seconds for checking on startup&lt;/li&gt;
  &lt;li&gt;Set the mail server to be sparkpost on 587 with the SMTP_Injection username and a password&lt;/li&gt;
  &lt;li&gt;Set the alerting email address&lt;/li&gt;
  &lt;li&gt;Set the format for the alerting email including subject and description&lt;/li&gt;
  &lt;li&gt;check the filesystem device and then alert if the space usage is more than 90% for 8 cycles&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-3-email-configuration&quot;&gt;Step 3: Email Configuration&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sparkpost.com&quot;&gt;SparkPost&lt;/a&gt; is a provider of email sending services and they have an incredibly generous free plan with up to 10,000 emails per month for free.  And while I could have used SES or another email service, I’ve had wonderful success using SparkPost to power my Rails ActionMailer routines so I just reused the same email credentials for Monit and it worked like a charm.  Here’s what you need to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To get a SparkPost account, sign up &lt;a href=&quot;https://app.sparkpost.com/account/credentials&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Go to your &lt;a href=&quot;https://app.sparkpost.com/account/credentials&quot;&gt;dashboard&lt;/a&gt; to get an API key&lt;/li&gt;
  &lt;li&gt;You do need to goto &lt;a href=&quot;https://app.sparkpost.com/account/sending-domains&quot;&gt;Sending Domains&lt;/a&gt; and configure the domains that you are sending from and then you need to add the DKIM settings to your DNS provider to prove that you own the domain in question.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you put these three pieces together then you will have an Ansible playbook that you can deploy onto all your servers that monitors for free disc space and alerts you via email.  Down the road you could easily enhance the monit script with other things that need monitoring such as http services, CPU load and more.&lt;/p&gt;

&lt;h1 id=&quot;useful-references&quot;&gt;Useful References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/akabos/3897117&quot;&gt;Akabos Gist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.artchang.com/post/37424851210/monitor-memcached-with-monit-and-alert-with-g&quot;&gt;Art Chang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/arnaudsj/monit&quot;&gt;Monit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 02 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/08/02/monitoring-free-disc-space-on-aws-instances-with-monit-ansible-and-sparkpost.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/08/02/monitoring-free-disc-space-on-aws-instances-with-monit-ansible-and-sparkpost.html</guid>
        
        <category>aws</category>
        
        <category>ansible</category>
        
        <category>monit</category>
        
        <category>SparkPost</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Hacks for When Ansible Galaxy Isn't Working</title>
        <description>&lt;p&gt;As of late I have manually bootstrapped a handful of machines into production using a text file with some command lines.  Yes this is a crap ass way to do it but one of the key things, Docker, is a damn pain in the ass to install.  Here’s what I was using as the command lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
sudo apt-get update
sudo apt-get install docker-ce
sudo apt install docker-compose
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even for me that’s damn ugly – so it is clearly time for &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;.  Ansible is a machine provisioning tool that lets you reduce commands like the above to something short, sweet and idempotent.  For this particular thing I wanted to use &lt;a href=&quot;https://nickjanetakis.com/blog/automate-installing-docker-and-docker-compose-with-ansible&quot;&gt;Nick Janetakis’ Ansible Galaxy role&lt;/a&gt; to make installing this trivial.  Specifically I wanted what his blog post promises:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: nickjj.docker, tags docker}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is all you need to setup Docker.  And that’s actually what I got but I hit a few snags hence the workaround.&lt;/p&gt;

&lt;p&gt;The problem that I hit was that his ansible galaxy role has some kind of version control conflict so that the version that gets installed when you type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-galaxy install nickjj.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is actually the version from November 2016, not the current 17.xx version.  What I needed was the master version of the Github repo not the older tagged version.  A bit of googling and some interactions with Nick told me just clone it directly into my own project as a work around.  Here’s how I did that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change into the right directory
cd ~/me/fuzzygroup/hyde/seira_watch/ansible/roles

git clone git@github.com:nickjj/ansible-docker.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This created an ansible-docker folder in my roles directory and all that I needed to make it work was to change the nickjj.docker reference to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- { role: ansible-docker, tags docker}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nick also helpfully pointed out that I could have also cloned to tmp and then renamed to nickjj-docker before copying it over and that would have worked just fine tool.  Thanks Nick!&lt;/p&gt;

&lt;p&gt;Note 1: Another workaround supposedly would be to make a requirements.yml file and specify the branch there but I’m less certain on how to do that.&lt;/p&gt;

&lt;p&gt;Note 2: I talked about this same type of problem &lt;a href=&quot;http://fuzzyblog.io/blog/ansible/2016/10/09/ansible-quickie-fixing-a-poorly-designed-galaxy-role.html&quot;&gt;once before&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Aug 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/ansible/2017/08/01/hacks-for-when-ansible-galaxy-isn-t-working.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/ansible/2017/08/01/hacks-for-when-ansible-galaxy-isn-t-working.html</guid>
        
        <category>ansible</category>
        
        <category>ansible-galaxy</category>
        
        
        <category>ansible</category>
        
      </item>
    
      <item>
        <title>Configuring Your Mac with Ansible Take 2</title>
        <description>&lt;p&gt;The last new Mac I setup was back in &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2016/11/20/ansible-for-configuring-your-mac-so-much-better.html&quot;&gt;2016, November 20&lt;/a&gt; and to do that I used ansible which was a wonderful experience.  Rather than groveling for software to install, shell hacks, etc, my ansible routine handled all of those crappy tasks and it was brilliant.  I can’t claim any originality here – lots of people other than me have done this.  In specific I drew inspiration from &lt;a href=&quot;https://twitter.com/geerlingguy&quot;&gt;Jeff Geerling’s&lt;/a&gt; ansible Macbook Pro repository.  He and I did it differently (his ansible skills are better than mine) but the end result was much the same – a functional machine with minimal manual work.&lt;/p&gt;

&lt;p&gt;I recently wrote about &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html&quot;&gt;my lack of system stability&lt;/a&gt; and figured that it was time to address it.  My thesis for some time has been that most of my errors are somehow related to lack of RAM so moving to a bigger box made sense.  Over the weekend I converted my Linux Intel NUC over to an OSX Hackintosh and used an updated version of the same playbook to handle configuration.  This means that I’m now working on a 32 gigs of RAM development box.  It is unclear if this will work out long term or not but it is an interesting experiment.  Of course since its a Hackintosh there are certain bits of weirdness like the fact that audio doesn’t work at all at present.  Ah well…&lt;/p&gt;

&lt;h1 id=&quot;what-to-do-when-you-just-installed-osx&quot;&gt;What to Do When You Just Installed OSX&lt;/h1&gt;

&lt;p&gt;Here are the steps to follow for a brand new Mac when you don’t have any tooling installed yet:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install the command line tools: xcode-select –install&lt;/li&gt;
  &lt;li&gt;Install pip: easy_install –user pip&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get pip into the path with:&lt;/p&gt;

    &lt;p&gt;$ printf ‘if [ -f ~/.bashrc ]; then\n  source ~/.bashrc\nfi\n’ » $HOME/.profile
$ printf ‘export PATH=$PATH:$HOME/Library/Python/2.7/bin\n’ » $HOME/.bashrc
$ source $HOME/.profile&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Install ansible: pip install –user –upgrade ansible&lt;/li&gt;
  &lt;li&gt;Create the global dir: sudo mkdir /etc/ansible&lt;/li&gt;
  &lt;li&gt;Copy in a configuration file: sudo curl -L https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg -o /etc/ansible/ansible.cfg&lt;/li&gt;
  &lt;li&gt;Verify it works with: ansible localhost -m ping&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A good reference is the Binary Nature link below.&lt;/p&gt;

&lt;h1 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geerlingguy/mac-dev-playbook&quot;&gt;Jeff Geerling’s Github Mac Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[Vandenbrad.org on how to configure the OSX Dock]https://blog.vandenbrand.org/2016/01/04/how-to-automate-your-mac-os-x-setup-with-ansible/&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fuzzygroup/ansible-macbook-pro&quot;&gt;My Github Repo for Macbook Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tonymacx86.com/&quot;&gt;TonyMacx86&lt;/a&gt; - The definitive OSX Hackintosh Resource&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://binarynature.blogspot.com/2016/01/install-ansible-on-os-x-el-capitan_30.html&quot;&gt;Binary Nature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/mac/2017/07/31/configuring-your-mac-with-ansible-take-2.html</guid>
        
        <category>mac</category>
        
        <category>ansible</category>
        
        <category>hackintosh</category>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Rails and Address Already In Use - Bind Error</title>
        <description>&lt;p&gt;Lately I’ve seen this error come up quite a few times:&lt;/p&gt;

&lt;p&gt;/Users/sjohnson/.rvm/gems/ruby-2.3.1@seira_watch_web_app_api/gems/puma-3.9.1/lib/puma/binder.rb:269:in `initialize’: Address already in use - bind(2) for “::1” port 3220 (Errno::EADDRINUSE)&lt;/p&gt;

&lt;p&gt;I’m running a fairly complex stack that mirrors an 8 micro service application where things are expected to be on certain points in development so having port 3220 not working means that one of my APIs isn’t available – and that’s &lt;strong&gt;unacceptable&lt;/strong&gt;.  So I dug into it a bit and with the help of &lt;a href=&quot;https://stackoverflow.com/questions/10261477/tcpserver-error-address-already-in-use-bind2&quot;&gt;this StackOverflow&lt;/a&gt;, I found the answer was to locate the offending process and then kill it dead:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;lsof -wni tcp:3220&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That gives the process id or PID and then you can just kill it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kill -9 12345 (or whatever)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/07/29/rails-and-address-already-in-use-bind-error.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/07/29/rails-and-address-already-in-use-bind-error.html</guid>
        
        <category>rails</category>
        
        <category>sysadmin</category>
        
        <category>bind</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Why I Haven't Switched Away from OSX</title>
        <description>&lt;p&gt;I’m writing this at 4:12 am sitting next to a machine with 11:50 hours of uptime.  The machine I’m using is an old OSX Macbook Air running OSX El Capitan 10.11.6 and the machine with less than 12 hours of uptime is running Sierra 10.12.5 and is a new (6 months old) Macbook Pro 13, the last one of the old generation before Apple foolishly messed around with the keyboard travel and layout on the new generation.  Yesterday my wife was driving and I was in the car drafting blog entries for a new, very focused blog I want to launch.  We were on flat dead empty and she stopped at a gas station so I got out to pump the fuel.  I came back to that worst of all experiences – my laptop had rebooted spontaneously and was sitting at the login prompt.  &lt;em&gt;Groan&lt;/em&gt;.  Even worse there was no system report this time so I don’t even know what pathetic excuse for a piece of software screwed up (again).  So I’m just left wondering.  But since this happens so frequently, I found a &lt;a href=&quot;https://gist.github.com/fuzzygroup/a4589f50665fd62f9ded74d54cd77e74&quot;&gt;crash report from about a week ago&lt;/a&gt; when my box had an uptime of 94000 seconds (yes that’s just one day).&lt;/p&gt;

&lt;p&gt;My old friend &lt;a href=&quot;https://gene-callahan.blogspot.com/&quot;&gt;Gene Callahan&lt;/a&gt;, the man who two decades ago taught me Awk and pattern matching, skills that have subsequently defined much of my technical career, asked me recently why don’t I switch to something stable and answering that is a challenge but I think I’m finally ready to address that.  Here’s the tldr with a deep discussion on each below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of Faith in the Alternatives&lt;/li&gt;
  &lt;li&gt;Textmate, Textmate, Textmate&lt;/li&gt;
  &lt;li&gt;iTerm2&lt;/li&gt;
  &lt;li&gt;My Phone&lt;/li&gt;
  &lt;li&gt;My Pictures / My Data&lt;/li&gt;
  &lt;li&gt;Time Machine&lt;/li&gt;
  &lt;li&gt;Apple Hardware is Simply Beautiful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gene was asking me this, I suspect, because I wrote &lt;a href=&quot;http://fuzzyblog.io/blog/tag.html#postmac&quot;&gt;a series of Postmac&lt;/a&gt; blog posts at the end of 2016 into 2017 and then I simply stopped.  I was &lt;a href=&quot;http://fuzzyblog.io/blog/postmac/2016/11/05/life-in-a-postmac-world.html&quot;&gt;very serious&lt;/a&gt; about this initially and then I went dark on the topic and this digs into that.&lt;/p&gt;

&lt;h1 id=&quot;disclaimer-im-a-power-user&quot;&gt;Disclaimer: I’m a Power User&lt;/h1&gt;

&lt;p&gt;It should be noted that I’m a power user and a software developer.  I mostly use a terminal and an editor.  My recent list of “5 Apps I use Everyday” on &lt;a href=&quot;iTerm, TextMate, Enpass, Ruby, Git&quot;&gt;Hacker News&lt;/a&gt; was iTerm, TextMate, Enpass, Ruby, Git – just one of those was a GUI app (a password manager).  What I develop are mostly Rails apps with a smattering of straight ruby and, lately, some JavaScript / Node for a &lt;a href=&quot;http://fuzzyblog.io/blog/how_to_be_a_developer/2017/07/02/how-to-be-a-developer-001.html&quot;&gt;course I’m teaching / mentoring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now the way I develop Rails apps is optimized for developer productivity so I start every project by opening a succession of terminal windows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Server Tail&lt;/li&gt;
  &lt;li&gt;Database window&lt;/li&gt;
  &lt;li&gt;Rails Console&lt;/li&gt;
  &lt;li&gt;Command Line&lt;/li&gt;
  &lt;li&gt;Remote Command Line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By keeping all the resources for whatever I need to do always active, I minimize cognitive overhead due to switching time / “ok do I want to drop out of console to check the log file; is that worth it?”.&lt;/p&gt;

&lt;p&gt;I have the definition of these set in a &lt;a href=&quot;https://github.com/tmuxinator/tmuxinator&quot;&gt;Tmuxinator&lt;/a&gt; profile so when I want to work on project xyz, I just tell the command line “tmuxinator seira_watch_web_app” and all the terminals for that project spring into existence (and it is wonderful to not have to think about ‘ok what port do I need the web server on’).  Right now I have 97 profiles setup for Tmuxinator.&lt;/p&gt;

&lt;p&gt;You’re probably thinking well – 5 terminal windows, how is that a power user?  &lt;em&gt;Chuckle&lt;/em&gt;, you should know play the opening bars of &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=o1tj2zJ2Wvg&quot;&gt;welcome to the jungle&lt;/a&gt;&lt;/em&gt; in your head.  I’ve made the technical focus for 2017 learning how to do Rails development in a distributed, &lt;strong&gt;non monolithic&lt;/strong&gt; fashion so that means your traditional Rails monolith has now been decomposed into N separate Rails projects with formal APIs between them and that you generally need all parts live concurrently.  In my case that generally amounts to 8 separate projects, each with at least 5 terminal windows so my 5 terminal windows is now 5 * 8 or 40 plus terminal windows just to work on one side project – and that doesn’t include consulting work, side, side projects, etc.  Generally speaking I run about 100 to 200 separate bash sessions.  The reason why I know about things like &lt;a href=&quot;http://fuzzyblog.io/blog/unix/2016/11/23/pkill-rocks.html&quot;&gt;pkill&lt;/a&gt; is from trying to tease out just one terminal session from the sea of them that I normally am swamped by.&lt;/p&gt;

&lt;p&gt;Now I’m sure that 100 terminal sessions sounds like absolute madness but it actually isn’t all bad.  The terminal ITerm2 is actually pretty damn good and I manage it through a combination of tooling (&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;Tmux&lt;/a&gt; / Tmuxinator) and convention (terminal 2 is my core software development window; terminal 3 is blogging and so on).&lt;/p&gt;

&lt;p&gt;So if you add 100 plus terminal windows to a browser or three each running say 50 plus tabs, I have very, very serious memory needs.  Apple’s persistent inability / lack of desire to ship a laptop with more than 16 gigs of RAM is something I find absolutely maddening.&lt;/p&gt;

&lt;p&gt;But for all of my bitching about stability and investigating alternatives, 8 months since I first wrote about “postmac”, I’m still here using OSX every single day so what went wrong?&lt;/p&gt;

&lt;h1 id=&quot;lack-of-faith--everything-crashes&quot;&gt;Lack of Faith / Everything Crashes&lt;/h1&gt;

&lt;p&gt;I’m now 49 years old and I have an appalling lack of faith in software quality – or as I like to describe it “everything crashes”.  This past November I bought an Intel NUC for the purposes of just running Ubuntu and experimenting with desktop linux to see if it was an alternative.  I went with Ubuntu 16 and used Ubuntu Mate as the closest linux experience to OSX that I could find (and yes I flirted heavily with &lt;a href=&quot;http://www.hongkiat.com/blog/elementary-os-luna/&quot;&gt;Elementary&lt;/a&gt; but it wasn’t stable).  And you know what I found out, while Ubuntu didn’t crash as hard as OSX, I still lost the networking stack about every week.  And a machine without networking, well in 2016 / 2017, that’s not much of a computer.  And the only way I ever found to get this fixed was a full system restart.  Now I’m sure that if I had dug into it enough, I could have found a way to restart the network stack but I never found it.  Oh and this was an Intel NUC with twice the ram of my OSX that I was using under far less demanding circumstances.&lt;/p&gt;

&lt;p&gt;Honestly the experience of trying to switch off OSX onto Ubuntu and finding that Ubuntu wasn’t stable, at least when used in a GUI context, was absolutely disheartening, so much so that that box sites on my desk and every time my eye falls on it, I get more than a little sad.  I run ubuntu linux boxes 24x7x365 with well over a &lt;em&gt;full year&lt;/em&gt; of uptime so the network stack on my personal Ubuntu box failing after less than a week (and failing consistently) puzzles me.  My suspicion is that this somehow related to a full GUI running on top of Ubuntu itself.&lt;/p&gt;

&lt;p&gt;So, honestly, everything crashes and if you’re going to run a full computing stack, with a GUI, browser and everything else, I no longer think that there is such a thing as stability – at least not if you’re a power user like myself and really pushing the limits of the machine.  And yes that’s a crap ass attitude but it is what a lifetime of being a power user has reduced me to; sigh.&lt;/p&gt;

&lt;h1 id=&quot;if-everything-crashes-then-resume-quality-is-key&quot;&gt;If Everything Crashes then Resume Quality is Key&lt;/h1&gt;

&lt;p&gt;So if you assume that everything crashes then the quality of resume is key.  And this is something where I found a dramatic difference between Ubuntu and OSX.  Sure Ubuntu didn’t hard crash but if I have to restart the machine to get networking running again, well, it might as well have.  While I remain pissed that my machine crashes regularly (I’m averaging about once per week now), I will state that Apple / the application vendors have finally managed to make this suck less.  Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2 remembers every window and tab’s position so all I have to do is relaunch Tmuxinator with a profile; since tab names are persistent (I’m glaring at you Apple Terminal), the name tells me what profile to launch&lt;/li&gt;
  &lt;li&gt;My editor, covered next, restores bloody everything&lt;/li&gt;
  &lt;li&gt;Apple generally relaunches every application I had going&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So while its not perfect, resume quality is far, far better than I have ever had it before.  Even the core browsers I rely on, Chrome, Firefox and Safari actually get window / tab restoration mostly correct.&lt;/p&gt;

&lt;h1 id=&quot;textmate-textmate-textmate&quot;&gt;Textmate, Textmate, Textmate&lt;/h1&gt;

&lt;p&gt;The very first editor I used once I switched fulltime to OSX from Windows / Linux (both on ThinkPad hardware) back in 2006 was &lt;a href=&quot;https://macromates.com/&quot;&gt;TextMate&lt;/a&gt; and I’m still using it.  I’ve written hundreds of thousands of lines of code in it and while the world has mostly moved on, I still find it to be the single best editor I’ve ever used.  Sure its old and a wee bit clunky but it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Has restore implemented perfectly (even “unsaved” files are restored after a crash allowing you to treat it as a virtual scratch pad; once you drop things into a new window they never go away unless you choose kill them)&lt;/li&gt;
  &lt;li&gt;Has extensions specific to Ruby / Rails&lt;/li&gt;
  &lt;li&gt;Has extensions for almost anything&lt;/li&gt;
  &lt;li&gt;Fast enough&lt;/li&gt;
  &lt;li&gt;Great syntax highlighting&lt;/li&gt;
  &lt;li&gt;Macro facility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used to laugh at engineers who were so closely tied to a particular editor and think “I’ll never be that”; karma is a bitch. But, seriously, an editor is what I spend maybe 90% + of my time in so having one that I love really matters and that is actually a switching cost.&lt;/p&gt;

&lt;p&gt;When I attempted to using Ubuntu on the NUC, I used &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt;, &lt;a href=&quot;http://www.atom.io&quot;&gt;Atom&lt;/a&gt; and &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;.  Sublime never felt right and I just can’t get past the performance / memory bloat of anything written using Electron (as beautiful as VS Code is). I should note that Visual Studio Code is actually awesome and Microsoft has done amazing work on it.&lt;/p&gt;

&lt;p&gt;But I still love my TextMate.&lt;/p&gt;

&lt;h1 id=&quot;iterm2&quot;&gt;iTerm2&lt;/h1&gt;

&lt;p&gt;While iTerm2 takes some crap for not always fixing bugs, being sometimes &lt;a href=&quot;https://danluu.com/term-latency/&quot;&gt;slow&lt;/a&gt; and a few other failings, I personally find it awesome.  Once again the ability to resume after a crash looms large.  Oddly if I choose to install updates, it can’t resume anything so I rarely choose to update it.  Similarly its resumption doesn’t work if you exit so if I have to shut it down, well, I use Activity Monitor to kill it and then it brings back all my terminals perfectly.  I wish I could accept the updates but, honestly, decent resume is so wonderful that I can live without them.&lt;/p&gt;

&lt;p&gt;iTerm2 has Tmux integration and decent multi pane support that could theoretically save me from having to be so reliant on Tmuxinator but I’ve explored it being really happy with Tmux / Tmuxinator.&lt;/p&gt;

&lt;h1 id=&quot;my-iphone--phone-integration&quot;&gt;My iPhone / Phone Integration&lt;/h1&gt;

&lt;p&gt;This one is an absolute killer.  I’m an iPhone user and the integration that Apple has put together is fairly compelling.  Specifically if my wife or kids text me, I can just reply using my laptop and not have to struggle with my fat fingers on a small phone screen.  That one feature is huge for me and after WhatsApp has completely stopped working for me since early 2017, I’m back to using SMS for texting with my family so this is huge.  I used to get around this with a dedicated WhatsApp app on OSX (which I think exist on other platforms).  Given that mobile isn’t going to any less important, integration is key and I find it hard to believe that I could ever have a better experience with an iPhone on non Apple hardware.&lt;/p&gt;

&lt;h1 id=&quot;my-pictures--my-data&quot;&gt;My Pictures / My Data&lt;/h1&gt;

&lt;p&gt;Moving between systems is always a lossy operation – you’re going to lose something whether it is a much loved app or data that doesn’t convert correctly or something else.  Given that I have a decade plus worth of files on OSX, I’m going to lose stuff when I move and just the prospect of that is daunting.&lt;/p&gt;

&lt;h1 id=&quot;one-device&quot;&gt;One Device&lt;/h1&gt;

&lt;p&gt;I used to have a work laptop for coding and then a personal computer for “my data”.  Ever since I switched to OSX, I’ve had only one device to worry about and that’s pretty damn wonderful.  Given that I use an iPhone, if I was to switch away from OSX for my daily coding, I’m likely still going to have OSX in life and that ruins the one device strategy.&lt;/p&gt;

&lt;h1 id=&quot;time-machine&quot;&gt;Time Machine&lt;/h1&gt;

&lt;p&gt;If you weren’t a hardcore Mac person when Time Machine shipped you likely don’t remember how rarely, if ever, most of us backed up.  I keep one machine constantly backed up with Time Machine and I actually trust it.  I’ve had only one back up issue with Time Machine since I started using it and that includes reformatting a machine that had every family photo on it ever and Time Machine brought back every drop of data.  Sure there are other backup solutions on other platforms but I &lt;strong&gt;know&lt;/strong&gt; that Time Machine works and that level of trust is pretty important.&lt;/p&gt;

&lt;h1 id=&quot;apple-hardware-is-simply-beautiful-and-lasts&quot;&gt;Apple Hardware is Simply Beautiful and Lasts&lt;/h1&gt;

&lt;p&gt;If you’re a PC guy then you may not understand the hardware quality of an Apple box.  While I have lots and lots of issues with Apple at times, I have to admit that their hardware is simply &lt;strong&gt;beautiful&lt;/strong&gt; – and it &lt;strong&gt;lasts&lt;/strong&gt;.  My first 15” Macbook pro, that old 2010 model, it still runs daily as the family Plex server hooked up to like 9 gigs of storage and runs pretty much like a champ.  My 2012 Macbook Pro?  Its still around and working perfectly.  So while the software has issues, the physical hardware is beautiful and durable.  If you’re going to use something on a daily basis then it being beautiful isn’t a bad thing – I spent a lot of years using Dell and Toshiba hardware and the build quality just sucked.  I used to know that when I heard rattling in my Toshiba’s it meant that a screw had come out (again) and that the machine would die shortly thereafter.  Overall the hardware side of my Macs haven’t let me down.&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts-on-software-quality&quot;&gt;Closing Thoughts on Software Quality&lt;/h1&gt;

&lt;p&gt;I should note that software quality problems are rampant in the industry.  Just as an example, if I prematurely abort a test run on RSpec with ctrl+c, well, I lose the cursor in the terminal – and there is nothing I can do to get it back, not clear, not ctrl+k, etc.  I just have to shut down that terminal session.  So it isn’t just OSX or the GUI on Ubuntu, it is everywhere and it is a damn pity.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2017/07/19/why-i-haven-t-switched-away-from-osx.html</guid>
        
        <category>osx</category>
        
        <category>linux</category>
        
        
        <category>OSX</category>
        
      </item>
    
  </channel>
</rss>
