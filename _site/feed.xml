<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FuzzyBlog</title>
    <description>Scott Johnson writing about the usual array of nerd stuff: AWS / Ansible / Ruby / Rails / Elixir / Misc / Hyde.
</description>
    <link>http://fuzzyblog.io//blog/</link>
    <atom:link href="http://fuzzyblog.io//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 13 Jun 2017 15:42:37 -0400</pubDate>
    <lastBuildDate>Tue, 13 Jun 2017 15:42:37 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>The Tools I Use</title>
        <description>&lt;p&gt;My buddy &lt;a href=&quot;https://nickjanetakis.com/&quot;&gt;Nick Janetakis&lt;/a&gt;, a solid guy, Docker Captain and &lt;a href=&quot;https://www.udemy.com/user/nick-janetakis/&quot;&gt;Udemy course author&lt;/a&gt;, wrote an interesting thing on his blog: &lt;a href=&quot;https://nickjanetakis.com/blog/the-tools-i-use&quot;&gt;The Tools I Use&lt;/a&gt;.  So I thought I’d take a shot at authoring the same thing only from an OSX perspective.  I am going to shamelessly steal his organization and approach to this topic.&lt;/p&gt;

&lt;h1 id=&quot;os&quot;&gt;OS&lt;/h1&gt;

&lt;p&gt;Much to my regret my principal OS is Mac OSX Seira.  I’ve seen Apple’s OS stability go down release by release from Snow Leopard forward and I find Seira to be the absolute worst yet.  Yes I’m a developer and my usage of iTerm is intense but a Unix box (and that’s what all Mac’s actually are) having an update of less than 30 days is disturbing at best.  Right now I have an 11 day uptime but lately I’ve been averaging about 2 days before my 6 month old box forcibly restarts all on its own.  Stack traces available on request if you care.&lt;/p&gt;

&lt;h1 id=&quot;code-editor-and-terminal&quot;&gt;Code Editor and Terminal&lt;/h1&gt;

&lt;p&gt;I use TextMate 2, a damn near antiquated editor by today’s standards and I have a real love / hate relationship with it but I’ve written more code in than anything else except for VIM and it works fine for my needs.  A new editor would be wise but nothing feels as good as TextMate to me.&lt;/p&gt;

&lt;p&gt;I use iTerm as a terminal and I regularly run an absolutely disturbing about of terminal sessions managed by Tmux which remains a stellar bit of technology.  Kudos to &lt;a href=&quot;https://www.linkedin.com/in/dvsuresh/&quot;&gt;Dv&lt;/a&gt; for hooking me on Tmux back in 2015; it genuinely improved my life.&lt;/p&gt;

&lt;h1 id=&quot;notable-apps&quot;&gt;Notable Apps&lt;/h1&gt;

&lt;p&gt;Other than a text editor, terminal and Tmux, I use pretty little software but here goes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome or Firefox for a browser with Brave on the side&lt;/li&gt;
  &lt;li&gt;Activity Monitor at all times to shut down rogue Firefox sessions due to memory bloat&lt;/li&gt;
  &lt;li&gt;Pages and Numbers for classical productivity although I do less and less of that every year&lt;/li&gt;
  &lt;li&gt;Docker for containers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://panic.com/transmit/&quot;&gt;Transmit by Panic&lt;/a&gt; as an FTP / S3 client&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://flexibits.com/fantastical&quot;&gt;Fantastical 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt; for http connection sharing (if you’ve never used ngrok and you’re a developer, run, not walk and get it – it is that good)&lt;/li&gt;
  &lt;li&gt;Apple Mail for mail&lt;/li&gt;
  &lt;li&gt;Slack because, well, Slack&lt;/li&gt;
  &lt;li&gt;Skype (which gets worse and worse ever year it seems)&lt;/li&gt;
  &lt;li&gt;TweetBot&lt;/li&gt;
  &lt;li&gt;Wunderlist&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fuzzyblog.io/blog/software_worth_purchasing/2016/09/11/software-worth-purchasing-01-acorn.html&quot;&gt;Acorn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/janten/keypad-layout&quot;&gt;Keypad Layout 2&lt;/a&gt; for command key drive window resizing; yes I have the keyboard grid taped to my mac, it is that useful&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fuzzyblog.io/blog/software_worth_purchasing/2016/09/15/software-worth-purchasing-02-enpass.html&quot;&gt;Enpass&lt;/a&gt; as a digital wallet&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fuzzyblog.io/blog/dropbox/2017/03/13/dropbox-for-the-software-developer.html&quot;&gt;Dropbox&lt;/a&gt; without which I simply could not function&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.decksetapp.com/&quot;&gt;Deckset&lt;/a&gt; for converting Markdown files to simple presentations&lt;/li&gt;
  &lt;li&gt;Jekyll for blogging; so much of everything I do comes from Open Source but I wanted to call out Jekyll because, well, I’m using it right this second&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;computer-desk-and-phone&quot;&gt;Computer, Desk and Phone&lt;/h1&gt;

&lt;p&gt;Here are the physical things I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I run almost exclusively on a series of Mac laptops:
    &lt;ul&gt;
      &lt;li&gt;An old 15” Macbook Pro which runs the family media server&lt;/li&gt;
      &lt;li&gt;A Macbook Air which is my blogging / writing / backup dev box&lt;/li&gt;
      &lt;li&gt;A 15” Macbook Pro which is my secondary backup dev box but too slow for anything intensive&lt;/li&gt;
      &lt;li&gt;A 13” Macbook Pro, last generation, maxed out on ram and SSD to be as fast as possible (note to Apple - we need vastly more than 16 gigs)&lt;/li&gt;
      &lt;li&gt;I also have an Intel NUC as a Linux box but I don’t use it all that much&lt;/li&gt;
      &lt;li&gt;All my Macs are configured with &lt;a href=&quot;http://fuzzyblog.io/blog/osx/2016/11/20/ansible-for-configuring-your-mac-so-much-better.html&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Apple iPhone 6; I didn’t find the iPhone 7 improvements in the small form factor (non plus) to be enough to justify the upgrade and now I’m hoping it lasts thru the iPhone 8 launch&lt;/li&gt;
  &lt;li&gt;I built my own desk (&lt;a href=&quot;http://fuzzyblog.io/blog/assets/desk1.jpg&quot;&gt;pic 1&lt;/a&gt;, &lt;a href=&quot;http://fuzzyblog.io/blog/assets/desk2.jpg&quot;&gt;pic 2&lt;/a&gt;, &lt;a href=&quot;http://fuzzyblog.io/blog/assets/desk3.jpg&quot;&gt;pic 3&lt;/a&gt;) about 18 months ago and I love it.  I have an 8 foot long desk with plenty of space.&lt;/li&gt;
  &lt;li&gt;I use iPads to monitor long running jobs using Transmit’s late StatusBoard app.  Pity that went away.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;recording-and-music&quot;&gt;Recording and Music&lt;/h1&gt;

&lt;p&gt;I don’t do a lot of this but what I do use is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ScreenFlow for recording screencasts&lt;/li&gt;
  &lt;li&gt;iTunes for music&lt;/li&gt;
  &lt;li&gt;Audacity for audio editing on the rare occasion when I need that&lt;/li&gt;
  &lt;li&gt;Bose Quiet Comfort Headphones Wired for pair programming&lt;/li&gt;
  &lt;li&gt;Bost Quiet Comfort Headphones BlueTooth for listening to music and isolating out the world in coffee shops&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 13 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/osx/2017/06/13/the-tools-i-use.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/osx/2017/06/13/the-tools-i-use.html</guid>
        
        <category>osx</category>
        
        <category>tools</category>
        
        <category>development</category>
        
        
        <category>osx</category>
        
      </item>
    
      <item>
        <title>To Compress or Not to Compress - An S3 Question</title>
        <description>&lt;p&gt;I’m finally at what I refer to derisively as the “Turd Polishing” stage of a new SAAS application that I hope to roll out over the next month or so.  I’ve validated the:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the market&lt;/li&gt;
  &lt;li&gt;the concept&lt;/li&gt;
  &lt;li&gt;figured out how to get initial users over the OOBE (out of box experience)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and now I’m at the stage of looking at the underlying crawler / indexer and how it acquires data.  Up to this stage I’ve been archiving daily crawl data to a flat directory on my hard disc and when I realized that I had over a million html archive files in a single directory, well, oops.  So yesterday was devoted to moving them into date named directories like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;page_archives/2017-06-08&lt;/li&gt;
  &lt;li&gt;page_archives/2017-06-09&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on.  I’m currently archiving about 10 gigabytes per day spread across 200k to 240k individual files.  There is a backing database table that stores per object metadata so I can fetch back the information that I need.  My long term plan has always been to store this information in S3 and looking at the data last night I had the epiphany &lt;em&gt;I need to compress it&lt;/em&gt; – or do it?&lt;/p&gt;

&lt;p&gt;Here’s what I know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;200K files per day&lt;/li&gt;
  &lt;li&gt;10 gigs per day, every day so 300 gigs per month&lt;/li&gt;
  &lt;li&gt;6,000,000 put requests per month; dramatically lower read volume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data I’m archiving are simple html files and a quick test with gzip shows dramatic compression:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;206729 Jun  9 06:41 ad69734d630423333479b0a954ab52baf056c16d.html
24881 Jun  9 06:41 ad69734d630423333479b0a954ab52baf056c16d.html.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yep - that’s a 10x difference in size, 200K down to 24K.  Surely it must be worth it to compress, right?  Normally this is exactly where I’d be rolling up my sleeves and implementing but, happily something wasn’t sitting right with me so I turned to the much maligned AWS calculator.  I ran two calculations, each of which is screen shotted below:&lt;/p&gt;

&lt;h2 id=&quot;no-compression&quot;&gt;No Compression&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/assets/s3_no_compression.png&quot; alt=&quot;s3_no_compression.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;compression&quot;&gt;Compression&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/assets/s3_compression.png&quot; alt=&quot;s3_compression.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yep.  That’s right – the grand price difference of a 10 fold difference in size is all of $6 or 16.67%.  Now a 16 % cost savings shouldn’t be dismissed but at the current scale I’m running it, it is a rounding error and can be ignored.&lt;/p&gt;

&lt;h2 id=&quot;the-moral-of-the-story&quot;&gt;The Moral of the Story&lt;/h2&gt;

&lt;p&gt;Everyone always says that you can never understand your bottlenecks without benchmarking and that has always proven to be true for me.  I think guessing about cost structures in today’s cloud follows a similar rule – benchmark first and then implement, what you think may be pricey may actually not be.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/aws/2017/06/09/to-compress-or-not-to-compress-an-s3-question.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/aws/2017/06/09/to-compress-or-not-to-compress-an-s3-question.html</guid>
        
        <category>aws</category>
        
        <category>hosting</category>
        
        <category>s3</category>
        
        <category>pricing</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Nerd Coach</title>
        <description>&lt;p&gt;I’m not ashamed to admit that I’m a nerd.  I read.  I write code.  I work alone (in a basement).  I’m also a &lt;strong&gt;coach&lt;/strong&gt; – of youth sports – something I never expected.  And I thought writing up what this nerd learned about sports coaching might be useful&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;I’m a father of two sons I’ve now coached 4 seasons of sports all of which my sons were playing.  So, yes, I’m that kind of coach – I do it for my kids, not for the love of the game.  Still&lt;/p&gt;

&lt;h1 id=&quot;rule-1-write-it-down&quot;&gt;Rule 1: Write It Down&lt;/h1&gt;

&lt;h1 id=&quot;rule-2-its-like-benchmarking---until-you-run-the-numbers-you-dont-understanding-it&quot;&gt;Rule 2: Its Like Benchmarking - Until You Run the Numbers You Don’t Understanding it&lt;/h1&gt;

&lt;p&gt;I would never have guessed that Alyssa was our #1 player&lt;/p&gt;

&lt;h1 id=&quot;rule-3-be-the-voice-of-reason&quot;&gt;Rule 3: Be the Voice of Reason&lt;/h1&gt;

&lt;h1 id=&quot;rule-4-do-something-with-the-data&quot;&gt;Rule 4: Do Something with the Data&lt;/h1&gt;
</description>
        <pubDate>Sun, 04 Jun 2017 05:28:49 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/06/04/nerd-coach.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/06/04/nerd-coach.html</guid>
        
        
      </item>
    
      <item>
        <title>Protecting Your Kids Online with Disney Circle</title>
        <description>&lt;p&gt;I don’t care how permissive / how liberal a parent you are, I suspect that you would have problems with your relatively young kid (let’s say &lt;strong&gt;under&lt;/strong&gt; 18) going into a place like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/porn_shop.jpg&quot; alt=&quot;sex_shop_image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I look at putting the Internet into your home without some kind of Internet filtering as analogous to letting your kids walk into a place like this and not stopping them.  In the rest of this post I’ll talk about Internet filtering and the first ever product, Disney Circle, that I’ve found is worth using&lt;/p&gt;

&lt;h1 id=&quot;my-credentials-to-even-write-this&quot;&gt;My Credentials to Even Write This&lt;/h1&gt;

&lt;p&gt;On a personal level I am a husband and father (two sons, 16 and 10).  I’m also a software engineer who has been active on the Internet since the pre-web days and I’ve spent a large amount of my professional life dealing with spam and bad actors on the Internet.  Finally I’m a firm believer in free speech and as my wife might comment, I’m the furthest thing from a prude in any way, shape or form.  Those last two points, free speech and not being a prude make this a hard post for me to write as I am generally philosophically opposed to Internet filtering.  Now, that said, I would never let my kid walk into a place like that pictured above and I don’t think you should either – what happens there is an adult activity and there is a reason why its actually illegal to be in there if you’re under 18.&lt;/p&gt;

&lt;h1 id=&quot;internet-filtering-overview&quot;&gt;Internet Filtering Overview&lt;/h1&gt;

&lt;p&gt;Internet filtering is a hard technical problem.&lt;/p&gt;

&lt;h1 id=&quot;disney-circle&quot;&gt;Disney Circle&lt;/h1&gt;

&lt;h1 id=&quot;mobile-devices&quot;&gt;Mobile Devices&lt;/h1&gt;

&lt;h1 id=&quot;where-this-falls-down&quot;&gt;Where this Falls Down&lt;/h1&gt;

</description>
        <pubDate>Fri, 26 May 2017 05:11:03 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/parenting/2017/05/26/protecting-your-kids-online-with-disney-circle.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/parenting/2017/05/26/protecting-your-kids-online-with-disney-circle.html</guid>
        
        <category>parenting</category>
        
        <category>disney</category>
        
        <category>circle</category>
        
        
        <category>parenting</category>
        
      </item>
    
      <item>
        <title>Fixing Chart.js Sizing Issues with Rails Using chartjs-ror</title>
        <description>&lt;p&gt;I’ve spent the past few weeks struggling with a Chart.js graph sizing issue.  I’m not a real JavaScript guy so I’m using the Ruby gem &lt;a href=&quot;https://github.com/airblade/chartjs-ror&quot;&gt;chartjs-ror&lt;/a&gt; from AirBlade.  Out of all the charting gems I’ve looked at recently, Airblade’s has been the best (so thank you!).  The problem was that my graphs were appearing like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/chartjs_graph_size_bad.png&quot; alt=&quot;bad_graphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where what I was really looking for was this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/chartjs_graph_size_good.png&quot; alt=&quot;good_graphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the partial I’m using to render the graph:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%
times = []
metrics.each do |metric|
  times &amp;lt;&amp;lt; metric.created_at.in_time_zone(current_user.time_zone).to_s(:db)
end
data = {
  
  labels: times,
  datasets: [
    {
        label: label,
        background_color: &quot;rgba(220,220,220,0.2)&quot;,
        border_color: &quot;rgba(220,220,220,1)&quot;,
        data: metrics.map(&amp;amp;:amount)
    }

  ]
}
%&amp;gt;

&amp;lt;% options = { :height =&amp;gt; 100, 
               :responsive =&amp;gt; true, 
               maintainAspectRatio: true, # &amp;lt;== this option needs to be true not false
               :yAxes =&amp;gt; [:ticks =&amp;gt; {:beginAtZero =&amp;gt; false }] } %&amp;gt;
&amp;lt;%= line_chart data, options %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue was the &lt;strong&gt;maintainAspectRatio: true&lt;/strong&gt; setting.  Somehow it got mistakenly set to false and that completely changes the look and feel of the graph.  Bizarre but apparently true.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 May 2017 18:05:18 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/05/24/fixing-chart-js-sizing-issues-with-rails-using-chartjs-ror.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/05/24/fixing-chart-js-sizing-issues-with-rails-using-chartjs-ror.html</guid>
        
        <category>rails</category>
        
        <category>chartjs-ror</category>
        
        <category>chartjs</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Fixing Better Errors Performance Problems on Rails 5.1</title>
        <description>&lt;p&gt;https://github.com/charliesome/better_errors/issues/77&lt;/p&gt;

&lt;p&gt;https://github.com/charliesome/better_errors/issues/341&lt;/p&gt;

&lt;p&gt;Add to application controller:&lt;/p&gt;

&lt;p&gt;before_action :better_errors_hack, if: -&amp;gt; { Rails.env.development? }&lt;/p&gt;

&lt;p&gt;def better_errors_hack
  request.env[‘puma.config’].options.user_options.delete :app
end&lt;/p&gt;
</description>
        <pubDate>Tue, 23 May 2017 21:26:34 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/23/fixing-better-errors-performance-problems-on-rails-5-1.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/23/fixing-better-errors-performance-problems-on-rails-5-1.html</guid>
        
        
      </item>
    
      <item>
        <title>Why I Didn't Choose Codeship for CI / CD</title>
        <description>&lt;p&gt;Understood; just trying to wrap my head around it.
getting this live means deploys of: site, web app, page archiver, page_archive api and store front so I’m debating CI server of my own
that’s enough containers that I’m not sure I can justify paying for it since I’ll blow thru container build limits quickly over the course of a month with constant changes.
Nick Janetakis (nick.janetakis@gmail.com)
what happened to circleci or codeship?
I don’t think the billing model works.  The limits we saw weren’t practical over this many repos.  Not for greenfield dev.&lt;br /&gt;
The First Container Is Free + Each Additional Container Is $50/Month &amp;lt;== circle ci
CodeShip
You will always start with the free $0 plan which grants these resources
100 BUILDS/MONTH&lt;/p&gt;

&lt;p&gt;1 CONCURRENT BUILD&lt;/p&gt;

&lt;p&gt;1 PARALLEL TEST PIPELINE&lt;/p&gt;

&lt;p&gt;Nick Janetakis (nick.janetakis@gmail.com)
that is exactly what you want
you are not going to be building a bunch of things in parallel, or having 5 devs constantly pushing changes
would be really surprised if you hit 100 builds a month too, because you’re only going to be building those things once you have a fairly stable version (something you deem is production worthy)
Codeship is a confusing mess – its still tied to appdatallc and I can’t remove it.  They suggest my using an organization and let me create one but then I can’t do anything with it since organizations are a paid feature.
if i disconnect github and reconnect github then the old projects go away and then come right back.&lt;br /&gt;
Using the X on their UI doesn’t delete the project.  I don’t care if anyone / everyone can use this.  Its crap.
Nick Janetakis (nick.janetakis@gmail.com)
why not just sign in with an email not associated with app data?
i’ve tried that before.  Trying it again.
Nick Janetakis (nick.janetakis@gmail.com)
and github, i’m not sure. usually apps let you pick what account to link it with if there’s &amp;gt; 1
maybe you’re still logged into app data on github somewhere, and it’s picking that for whatever reason
its because you generally only have 1 github identity and it spans personal and professional.
Sigh.  They want you to duplicate your docker config just for them.  Sigh.
Nick Janetakis (nick.janetakis@gmail.com)
yeah, but most apps i use that integrate with github will let you pick the organization
Nick Janetakis (nick.janetakis@gmail.com)
Not dry at all.
Example they give: https://github.com/codeship/discourse-demo/blob/master/codeship-services.yml
Nope.  I’m out.&lt;/p&gt;

&lt;p&gt;https://github.com/codeship/discourse-demo/blob/master/codeship-steps.yml&lt;/p&gt;

&lt;p&gt;their docs say their format is compatible with docker-compose.yml
its not that – its the duplication
Nick Janetakis (nick.janetakis@gmail.com)
and if doesn’t find a codeship-services.yml file, it falls back to using docker-compose.yml
Well that’s fine.  But their shitty docs already convinced me to quit.
Now&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 09:33:10 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/22/why-i-didn-t-choose-codeship-for-ci-cd.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/22/why-i-didn-t-choose-codeship-for-ci-cd.html</guid>
        
        
      </item>
    
      <item>
        <title>Obscure Rails Error - Undefined Method Collation for nil:NilClass</title>
        <description>&lt;p&gt;undefined method `collation’ for nil:NilClass&lt;/p&gt;

&lt;p&gt;I added a validates_uniqueness_of :url&lt;/p&gt;

&lt;p&gt;NoMethodError - undefined method &lt;code class=&quot;highlighter-rouge&quot;&gt;collation' for nil:NilClass:
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract_mysql_adapter.rb:617:in &lt;/code&gt;case_sensitive_comparison’
  activerecord (5.0.2) lib/active_record/validations/uniqueness.rb:75:in &lt;code class=&quot;highlighter-rouge&quot;&gt;build_relation'
  activerecord (5.0.2) lib/active_record/validations/uniqueness.rb:18:in &lt;/code&gt;validate_each’
  activemodel (5.0.2) lib/active_model/validator.rb:151:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in validate'
  activemodel (5.0.2) lib/active_model/validator.rb:148:in &lt;/code&gt;validate’
  activesupport (5.0.2) lib/active_support/callbacks.rb:405:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in make_lambda'
  activesupport (5.0.2) lib/active_support/callbacks.rb:169:in &lt;/code&gt;block (2 levels) in halting’
  activesupport (5.0.2) lib/active_support/callbacks.rb:547:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block (2 levels) in default_terminator'
  activesupport (5.0.2) lib/active_support/callbacks.rb:546:in &lt;/code&gt;block in default_terminator’
  activesupport (5.0.2) lib/active_support/callbacks.rb:170:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in halting'
  activesupport (5.0.2) lib/active_support/callbacks.rb:454:in &lt;/code&gt;block in call’
  activesupport (5.0.2) lib/active_support/callbacks.rb:454:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  activesupport (5.0.2) lib/active_support/callbacks.rb:101:in &lt;/code&gt;&lt;strong&gt;run_callbacks&lt;/strong&gt;’
  activesupport (5.0.2) lib/active_support/callbacks.rb:750:in &lt;code class=&quot;highlighter-rouge&quot;&gt;_run_validate_callbacks'
  activemodel (5.0.2) lib/active_model/validations.rb:408:in &lt;/code&gt;run_validations!’
  activemodel (5.0.2) lib/active_model/validations/callbacks.rb:113:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in run_validations!'
  activesupport (5.0.2) lib/active_support/callbacks.rb:97:in &lt;/code&gt;&lt;strong&gt;run_callbacks&lt;/strong&gt;’
  activesupport (5.0.2) lib/active_support/callbacks.rb:750:in &lt;code class=&quot;highlighter-rouge&quot;&gt;_run_validation_callbacks'
  activemodel (5.0.2) lib/active_model/validations/callbacks.rb:113:in &lt;/code&gt;run_validations!’
  activemodel (5.0.2) lib/active_model/validations.rb:338:in &lt;code class=&quot;highlighter-rouge&quot;&gt;valid?'
  activerecord (5.0.2) lib/active_record/validations.rb:65:in &lt;/code&gt;valid?’
  activerecord (5.0.2) lib/active_record/validations.rb:82:in &lt;code class=&quot;highlighter-rouge&quot;&gt;perform_validations'
  activerecord (5.0.2) lib/active_record/validations.rb:44:in &lt;/code&gt;save’
  activerecord (5.0.2) lib/active_record/attribute_methods/dirty.rb:22:in &lt;code class=&quot;highlighter-rouge&quot;&gt;save'
  activerecord (5.0.2) lib/active_record/transactions.rb:319:in &lt;/code&gt;block (2 levels) in save’
  activerecord (5.0.2) lib/active_record/transactions.rb:395:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in with_transaction_returning_status'
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract/database_statements.rb:232:in &lt;/code&gt;block in transaction’
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract/transaction.rb:189:in &lt;code class=&quot;highlighter-rouge&quot;&gt;within_new_transaction'
  activerecord (5.0.2) lib/active_record/connection_adapters/abstract/database_statements.rb:232:in &lt;/code&gt;transaction’
  activerecord (5.0.2) lib/active_record/transactions.rb:211:in &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction'
  activerecord (5.0.2) lib/active_record/transactions.rb:392:in &lt;/code&gt;with_transaction_returning_status’
  activerecord (5.0.2) lib/active_record/transactions.rb:319:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in save'
  activerecord (5.0.2) lib/active_record/transactions.rb:334:in &lt;/code&gt;rollback_active_record_state!’
  activerecord (5.0.2) lib/active_record/transactions.rb:318:in &lt;code class=&quot;highlighter-rouge&quot;&gt;save'
  activerecord (5.0.2) lib/active_record/suppressor.rb:41:in &lt;/code&gt;save’
  app/models/course.rb:130:in &lt;code class=&quot;highlighter-rouge&quot;&gt;save_all_objects'
  app/controllers/courses_controller.rb:32:in &lt;/code&gt;create’
  actionpack (5.0.2) lib/action_controller/metal/basic_implicit_render.rb:4:in &lt;code class=&quot;highlighter-rouge&quot;&gt;send_action'
  actionpack (5.0.2) lib/abstract_controller/base.rb:188:in &lt;/code&gt;process_action’
  actionpack (5.0.2) lib/action_controller/metal/rendering.rb:30:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/abstract_controller/callbacks.rb:20:in &lt;/code&gt;block in process_action’
  activesupport (5.0.2) lib/active_support/callbacks.rb:126:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  activesupport (5.0.2) lib/active_support/callbacks.rb:506:in &lt;/code&gt;block (2 levels) in compile’
  activesupport (5.0.2) lib/active_support/callbacks.rb:455:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  activesupport (5.0.2) lib/active_support/callbacks.rb:101:in &lt;/code&gt;&lt;strong&gt;run_callbacks&lt;/strong&gt;’
  activesupport (5.0.2) lib/active_support/callbacks.rb:750:in &lt;code class=&quot;highlighter-rouge&quot;&gt;_run_process_action_callbacks'
  activesupport (5.0.2) lib/active_support/callbacks.rb:90:in &lt;/code&gt;run_callbacks’
  actionpack (5.0.2) lib/abstract_controller/callbacks.rb:19:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/action_controller/metal/rescue.rb:20:in &lt;/code&gt;process_action’
  actionpack (5.0.2) lib/action_controller/metal/instrumentation.rb:32:in &lt;code class=&quot;highlighter-rouge&quot;&gt;block in process_action'
  activesupport (5.0.2) lib/active_support/notifications.rb:164:in &lt;/code&gt;block in instrument’
  activesupport (5.0.2) lib/active_support/notifications/instrumenter.rb:21:in &lt;code class=&quot;highlighter-rouge&quot;&gt;instrument'
  activesupport (5.0.2) lib/active_support/notifications.rb:164:in &lt;/code&gt;instrument’
  actionpack (5.0.2) lib/action_controller/metal/instrumentation.rb:30:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/action_controller/metal/params_wrapper.rb:248:in &lt;/code&gt;process_action’
  activerecord (5.0.2) lib/active_record/railties/controller_runtime.rb:18:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process_action'
  actionpack (5.0.2) lib/abstract_controller/base.rb:126:in &lt;/code&gt;process’
  actionview (5.0.2) lib/action_view/rendering.rb:30:in &lt;code class=&quot;highlighter-rouge&quot;&gt;process'
  actionpack (5.0.2) lib/action_controller/metal.rb:190:in &lt;/code&gt;dispatch’
  actionpack (5.0.2) lib/action_controller/metal.rb:262:in &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch'
  actionpack (5.0.2) lib/action_dispatch/routing/route_set.rb:50:in &lt;/code&gt;dispatch’
  actionpack (5.0.2) lib/action_dispatch/routing/route_set.rb:32:in &lt;code class=&quot;highlighter-rouge&quot;&gt;serve'
  actionpack (5.0.2) lib/action_dispatch/journey/router.rb:39:in &lt;/code&gt;block in serve’
  actionpack (5.0.2) lib/action_dispatch/journey/router.rb:26:in &lt;code class=&quot;highlighter-rouge&quot;&gt;serve'
  actionpack (5.0.2) lib/action_dispatch/routing/route_set.rb:725:in &lt;/code&gt;call’
  apartment (1.2.0) lib/apartment/elevators/generic.rb:24:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  apartment (1.2.0) lib/apartment/reloader.rb:18:in &lt;/code&gt;call’
  meta_request (0.4.2) lib/meta_request/middlewares/app_request_handler.rb:13:in &lt;code class=&quot;highlighter-rouge&quot;&gt;call'
  meta_request (0.4.2) lib/meta_request/middlewares/meta_request_handler.rb:13:in &lt;/code&gt;call’&lt;/p&gt;
</description>
        <pubDate>Thu, 18 May 2017 11:17:59 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/18/obscure-rails-error-undefined-method-collation-for-nil-nilclass.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/18/obscure-rails-error-undefined-method-collation-for-nil-nilclass.html</guid>
        
        
      </item>
    
      <item>
        <title>10 Things Software Engineering Daily Taught Me</title>
        <description>&lt;p&gt;Software Engineering Daily is my absolute favorite podcast and it has replaced almost all my daily listens – no more Major Spoilers, very limited Geek History Lessons, etc.  And the main reason is 
## Homomorphic Encryption&lt;/p&gt;

&lt;h2 id=&quot;indie-hacking-exists&quot;&gt;Indie Hacking Exists!&lt;/h2&gt;

&lt;p&gt;That indie hacking is a thing&lt;/p&gt;

&lt;p&gt;SE Daily - Learned&lt;/p&gt;

&lt;p&gt;Software Psychology&lt;/p&gt;

&lt;p&gt;Subtle Engineering Complexitits - transition of&lt;/p&gt;

&lt;p&gt;a distributed system of services is much harder in its debugging characteristics than a monolith – its much harder to put in breakpoints&lt;/p&gt;

&lt;p&gt;17:03&lt;/p&gt;

</description>
        <pubDate>Tue, 16 May 2017 12:18:16 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/2017/05/16/10-things-software-engineering-daily-taught-me.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/2017/05/16/10-things-software-engineering-daily-taught-me.html</guid>
        
        
      </item>
    
      <item>
        <title>Adding Cron to a Dockerized Rails Application Using Clockwork</title>
        <description>&lt;p&gt;If you talk to any computer scientist they will easily tell you that 50 plus years into the computer age, scheduling is NOT a solved problem.  Even something as simple as cron which is decades old can still be challenging under different environments (example - cron and RVM is a bloody nightmare).  And then when you add containers into the mix, well …  In this blog post I outline how I’m handling a daily scheduled process using Docker and Clockwork (a cron like gem for Ruby).&lt;/p&gt;

&lt;h1 id=&quot;why-is-cron-and-docker-a-problem&quot;&gt;Why is Cron and Docker a Problem&lt;/h1&gt;

&lt;p&gt;Docker represents a simplified computing environment where you generally don’t have a full Linux stack – instead the model is generally a single root process.  Now there are people who challenge that approach, notably the good folks at Phusion, but this is generally regarded as a best practice.  So you’re not your own application stack and then cron as well.&lt;/p&gt;

&lt;h1 id=&quot;enter-clockwork&quot;&gt;Enter Clockwork&lt;/h1&gt;

&lt;p&gt;Clockwork is a long standing Ruby gem which acts as a persistent daemon with its own scheduler that executes a simple DSL allow your models to be easily executed.  Here’s an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;every(1.day, 'Midnight.job -- PageArchive.update_everything', :at =&amp;gt; '00:00') do |job|
  PageArchive.update_everything
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unlike traditional cron syntax, I’ve never found an issue with reading the Clockwork dsl, this says:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every day&lt;/li&gt;
  &lt;li&gt;execute at midnight&lt;/li&gt;
  &lt;li&gt;run PageArchive.update_everything&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;adding-clockwork-to-your-rails-application&quot;&gt;Adding Clockwork to your Rails Application&lt;/h1&gt;

&lt;p&gt;Here are the steps to add clockwork to your Rails application:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add the clockwork gem to your Gemfile:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;gem ‘clockwork’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Create a clock.rb file in lib:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;touch lib/clock.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write one or more clockwork expressions in clock.rb.  Here’s an example from my application:&lt;/p&gt;

    &lt;p&gt;require ‘clockwork’
include Clockwork&lt;/p&gt;

    &lt;p&gt;require File.expand_path(‘../../config/boot’, &lt;strong&gt;FILE&lt;/strong&gt;)&lt;/p&gt;

    &lt;p&gt;require File.expand_path(‘../../config/environment’, &lt;strong&gt;FILE&lt;/strong&gt;)&lt;/p&gt;

    &lt;p&gt;require ‘clockwork’&lt;/p&gt;

    &lt;p&gt;include Clockwork&lt;/p&gt;

    &lt;p&gt;module Clockwork&lt;/p&gt;

    &lt;p&gt;every(1.day, ‘Midnight.job – PageArchive.update_everything’, :at =&amp;gt; ‘03:58’) do |job|
    PageArchive.update_everything
  end&lt;/p&gt;

    &lt;p&gt;every(1.week, ‘Weekly Job – PageArchive.update_bing’, :at =&amp;gt; ‘00:00’) do |job|
    PageArchive.update_bing
  end&lt;/p&gt;

    &lt;p&gt;end&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To test this you can just use the command line:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;bundle exec clockwork lib/clock.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you set that running then you need to simply watch it to make sure that tasks execute.  Yes, provided that your syntax is correct, they certainly should but I’ve seen enough scheduled jobs fail over the years that I always feel better when I actually see them run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you were previously using a Rake task to run your daily jobs then you need to refactor that as something like a class method that can be called from the Rake task.  This allows you to continue using the Rake task but also make your code easily executable from Clockwork.&lt;/p&gt;

&lt;h1 id=&quot;the-dockerfile&quot;&gt;The Dockerfile&lt;/h1&gt;

&lt;p&gt;In this example I have a simple Rails app which exists to populate a page archive database consisting of data harvested daily from the Internet.  Here’s the Dockerfile:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ruby:2.3.1-alpine

RUN apk update &amp;amp;&amp;amp; apk add build-base nodejs mariadb-dev tzdata

RUN mkdir /app
WORKDIR /app

COPY Gemfile Gemfile.lock ./
RUN bundle install --binstubs

COPY . .

CMD bundle exec clockwork lib/clock.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The secret to making the scheduling work is to execute the clockwork executable as the root command in the container. This causes the Clockwork executable to be launched when the container initializes.  At that point Clockwork will run the command until it finishes and then remain running, waiting for its next invocation.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-and-issues&quot;&gt;Conclusion and Issues&lt;/h1&gt;

&lt;p&gt;As you can see, when you have a scheduling process as the root process in your container, it provides an easy way to handle your scheduled job needs and Clockwork really does make it easy.  Still this doesn’t mean that scheduling for your application is necessarily solved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What if your needs are large enough that you have to have multiple machines?&lt;/li&gt;
  &lt;li&gt;How do you log issues with the scheduled jobs?&lt;/li&gt;
  &lt;li&gt;What happens when a deploy occurs while your container is running a job?  How do you ensure that the day’s work actually got processed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiple-machines&quot;&gt;Multiple Machines&lt;/h2&gt;

&lt;p&gt;If I needed to have multiple machines involved, I would likely implement some kind of a work queue where they scheduler is solely responsible for setting up a queue of the work to be done and then containers on other machines are responsible for processing the data in the queue.  This approach is also useful for the deploy issue covered below.&lt;/p&gt;

&lt;h2 id=&quot;logging-issues-with-scheduled-jobs&quot;&gt;Logging Issues with Scheduled Jobs&lt;/h2&gt;

&lt;p&gt;There are enough issues with containers and logs that addressing it here is really out of the scope of this blog post.  I did want to point it out, however, as logging around scheduled jobs is usually necessary and needs to be thought through.&lt;/p&gt;

&lt;h2 id=&quot;deploy-conflicts&quot;&gt;Deploy Conflicts&lt;/h2&gt;

&lt;p&gt;There are at least three strategies that I’d use for handling deploy conflicts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start your jobs early and simply don’t deploy while they are running.  This is the least desirable strategy but it does actually work provided the execution time of the job is only a few hours (i.e. until when people need to deploy).  Obviously this works poorly with a globally distributed labor pool and a CI server that deploys code automatically.&lt;/li&gt;
  &lt;li&gt;Change the code so that jobs become idempotent i.e. the job knows that a particular data item can be processed, for example, only once per day and then allow the scheduled process to be run multiple times per day.  This decreases the chance of a deploy shutting things down fully for an entire day since statistically it becomes less likely that you’ll conflict with something every single time that it is running allowing at least one of the runs to complete.&lt;/li&gt;
  &lt;li&gt;Use the multiple machines strategy mentioned above so that you have a work queue and multiple asynchronous processing engines on the data.  As long as the queue is atomic in nature this avoids duplication issues and the additional parallelism that multiple containers bring should process the data more quickly thereby leading to fewer deploy conflicts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of each of these strategies, the third is likely the best but incurs the most application level changes.  Please keep in mind that you can iteratively evolve your application towards the right strategy for your needs.&lt;/p&gt;

</description>
        <pubDate>Thu, 11 May 2017 05:02:25 -0400</pubDate>
        <link>http://fuzzyblog.io//blog/rails/2017/05/11/adding-cron-to-a-dockerized-rails-application-using-clockwork.html</link>
        <guid isPermaLink="true">http://fuzzyblog.io//blog/rails/2017/05/11/adding-cron-to-a-dockerized-rails-application-using-clockwork.html</guid>
        
        <category>rails</category>
        
        <category>docker</category>
        
        <category>cron</category>
        
        <category>clockwork</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
